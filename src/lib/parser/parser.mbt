
pub suberror ParseError {
  UnexpectedToken(Token, (Unit, Unit), Array[TokenKind])
}

typealias Error as YYObj

priv suberror YYObj_Json Json

typealias (YYSymbol) -> YYDecision as YYState

typealias (Unit, ArrayView[(YYObj, Unit, Unit)]) -> YYObj as YYAction

priv enum YYDecision {
  Accept
  Shift(YYState)
  Reduce(Int, YYSymbol, YYAction)
  ReduceNoLookahead(Int, YYSymbol, YYAction)
  Error
}

priv enum YYSymbol {
  T_CHAR
  T_INT
  T_BYTE
  T_BYTES
  T_FLOAT
  T_DOUBLE
  T_STRING
  T_MULTILINE_STRING
  T_MULTILINE_INTERP
  T_INTERP
  T_ATTRIBUTE
  T_LIDENT
  T_UIDENT
  T_POST_LABEL
  T_COMMENT
  T_NEWLINE
  T_INFIX1
  T_INFIX2
  T_INFIX3
  T_INFIX4
  T_AUGMENTED_ASSIGNMENT
  T_EOF
  T_FALSE
  T_TRUE
  T_PUB
  T_PRIV
  T_READONLY
  T_IMPORT
  T_EXTERN
  T_BREAK
  T_CONTINUE
  T_STRUCT
  T_ENUM
  T_TRAIT
  T_DERIVE
  T_IMPL
  T_WITH
  T_RAISE
  T_THROW
  T_TRY
  T_CATCH
  T_ASYNC
  T_TYPEALIAS
  T_TRAITALIAS
  T_FNALIAS
  T_EQUAL
  T_LPAREN
  T_RPAREN
  T_COMMA
  T_MINUS
  T_QUESTION
  T_EXCLAMATION
  T_DOT_LIDENT
  T_DOT_UIDENT
  T_DOT_INT
  T_DOT_LPAREN
  T_COLONCOLON
  T_COLON
  T_SEMI
  T_LBRACKET
  T_PLUS
  T_RBRACKET
  T_UNDERSCORE
  T_BAR
  T_LBRACE
  T_RBRACE
  T_AMPERAMPER
  T_AMPER
  T_CARET
  T_BARBAR
  T_PACKAGE_NAME
  T_AS
  T_PIPE
  T_ELSE
  T_FN
  T_IF
  T_LET
  T_CONST
  T_MATCH
  T_MUTABLE
  T_TYPE
  T_FAT_ARROW
  T_THIN_ARROW
  T_WHILE
  T_RETURN
  T_DOTDOT
  T_RANGE_INCLUSIVE
  T_RANGE_EXCLUSIVE
  T_ELLIPSIS
  T_TEST
  T_LOOP
  T_GUARD
  T_FOR
  T_IN
  T_IS
  T_SUBERROR
  NT_parameter
  NT_parameters
  NT_type_parameters
  NT_optional_type_parameters
  NT_optional_type_parameters_no_constraints
  NT_optional_type_arguments
  NT_fun_binder
  NT_fun_header
  NT_local_type_decl
  NT_extern_fun_header
  NT_block_expr
  NT_local_types_and_stmts
  NT_block_expr_with_local_types
  NT_impl_body
  NT_expression
  NT_val_header
  NT_structure
  NT_structure_item
  NT_pub_attr
  NT_type_header
  NT_type_header_bang
  NT_type_alias_header
  NT_struct_header
  NT_enum_header
  NT_batch_type_alias_targets
  NT_batch_type_alias_target
  NT_batch_trait_alias_targets
  NT_batch_trait_alias_target
  NT_func_alias_targets
  NT_deriving_directive
  NT_deriving_directive_list
  NT_trait_method_decl
  NT_wildcard
  NT_trait_method_param
  NT_luident
  NT_qual_ident
  NT_qual_ident_simple_expr
  NT_qual_ident_ty
  NT_optional_bang
  NT_fn_header
  NT_fn_header_no_binder
  NT_statement
  NT_guard_statement
  NT_expr_statement
  NT_loop_label_colon
  NT_while_expr
  NT_single_pattern_case
  NT_single_pattern_cases
  NT_multi_pattern_case
  NT_catch_keyword
  NT_try_expr
  NT_if_expr
  NT_match_expr
  NT_loop_expr
  NT_for_binders
  NT_optional_else
  NT_for_expr
  NT_foreach_expr
  NT_foreach_binder
  NT_expr
  NT_pipe_expr
  NT_infix_expr
  NT_postfix_expr
  NT_range_expr
  NT_prefix_expr
  NT_left_value
  NT_constr
  NT_simple_expr
  NT_tvar_binder
  NT_type_decl_binder
  NT_tvar_constraint
  NT_type_name
  NT_multiline_string
  NT_atomic_expr
  NT_simple_constant
  NT_map_syntax_key
  NT_optional_question
  NT_argument
  NT_spreadable_elem
  NT_map_expr_elem
  NT_pattern
  NT_or_pattern
  NT_range_pattern
  NT_simple_pattern
  NT_array_sub_pattern
  NT_dotdot_binder
  NT_array_sub_patterns
  NT_return_type
  NT_error_type
  NT_type_
  NT_record_decl_field
  NT_constructor_param
  NT_enum_constructor
  NT_record_defn
  NT_record_defn_single
  NT_non_empty_fields_pat
  NT_fields_pat_single
  NT_non_empty_map_elems_pat
  NT_constr_pat_arguments
  NT_constr_pat_argument
  NT_list_commas_parameter_
  NT_non_empty_list_commas_id_tvar_binder__
  NT_option_type_parameters_
  NT_non_empty_list_commas_id_type_decl_binder__
  NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__
  NT_non_empty_list_commas_type__
  NT_option_delimited_LBRACKET_non_empty_list_commas_type___RBRACKET__
  NT_option_parameters_
  NT_option_preceded_THIN_ARROW_return_type__
  NT_list_semis_record_decl_field_
  NT_list_semis_enum_constructor_
  NT_list_semis_rev_statement_
  NT_list_semis_structure_item_
  NT_option_type__
  NT_non_empty_list_MULTILINE_STRING_
  NT_separated_nonempty_list_PLUS_tvar_constraint_
  NT_option_preceded_COLON_separated_nonempty_list_PLUS_tvar_constraint___
  NT_list_semis_trait_method_decl_
  NT_option_loced_string_
  NT_non_empty_list_attribute_
  NT_non_empty_list_commas_batch_type_alias_target_
  NT_non_empty_list_commas_batch_trait_alias_target_
  NT_func_alias_type_name_LIDENT_UIDENT_
  NT_func_alias_target_LIDENT_
  NT_func_alias_target_DOT_LIDENT_
  NT_func_alias_type_name_DOT_LIDENT_DOT_UIDENT_
  NT_option_func_alias_type_name_LIDENT_UIDENT__
  NT_non_empty_list_commas_func_alias_target_LIDENT__
  NT_list_commas_argument_
  NT_list_commas_deriving_directive_
  NT_list_commas_trait_method_param_
  NT_option_preceded_EQUAL_wildcard__
  NT_none_empty_list_semis_rev_with_trailing_info_statement_
  NT_list_semis_multi_pattern_case_
  NT_option_expr_
  NT_list_commas_no_trailing_expr_
  NT_option_preceded_IF_expr__
  NT_list_semis_single_pattern_case_
  NT_non_empty_list_commas_pattern_
  NT_non_empty_list_semis_single_pattern_case_
  NT_non_empty_list_commas_no_trailing_expr_
  NT_list_commas_no_trailing_separated_pair_binder_EQUAL_expr__
  NT_option_infix_expr_
  NT_non_empty_list_commas_foreach_binder_
  NT_list_commas_with_trailing_info_record_defn_single_
  NT_list_commas_record_defn_single_
  NT_list_commas_map_expr_elem_
  NT_list_commas_expr_
  NT_list_commas_spreadable_elem_
  NT_non_empty_list_multiline_string_
  NT_option_delimited_LPAREN_constr_pat_arguments_RPAREN__
  NT_option_COMMA_
  NT_non_empty_list_commas_array_sub_pattern_
  NT_separated_nonempty_list_PLUS_error_type_
  NT_option_MUTABLE_
  NT_non_empty_list_commas_constructor_param_
  NT_option_delimited_LPAREN_non_empty_list_commas_constructor_param__RPAREN__
  NT_option_eq_int_tag_
  NT_non_empty_list_commas_with_trailing_info_record_defn_single_
  NT_non_empty_list_commas_fields_pat_single_
  NT_non_empty_list_commas_with_tail_fields_pat_single_
  NT_non_empty_list_commas_map_elem_pat_
  NT_non_empty_list_commas_with_tail_map_elem_pat_
  NT_option_QUESTION_
  NT_non_empty_list_commas_parameter_
  NT_non_empty_list_commas_rev_id_tvar_binder__
  NT_non_empty_list_commas_rev_id_type_decl_binder__
  NT_non_empty_list_commas_rev_type__
  NT_non_empty_list_semis_record_decl_field_
  NT_non_empty_list_semis_enum_constructor_
  NT_non_empty_list_semis_rev_statement_
  NT_non_empty_list_semis_structure_item_
  NT_non_empty_list_rev_MULTILINE_STRING_
  NT_non_empty_list_semis_trait_method_decl_
  NT_non_empty_list_rev_attribute_
  NT_non_empty_list_commas_rev_batch_type_alias_target_
  NT_non_empty_list_commas_rev_batch_trait_alias_target_
  NT_option_preceded_AS_binder__
  NT_non_empty_list_commas_rev_func_alias_target_LIDENT__
  NT_non_empty_list_commas_argument_
  NT_non_empty_list_commas_deriving_directive_
  NT_non_empty_list_commas_trait_method_param_
  NT_non_empty_list_semi_rev_aux_statement_
  NT_option_SEMI_
  NT_non_empty_list_semis_multi_pattern_case_
  NT_non_empty_list_commas_rev_pattern_
  NT_non_empty_list_semis_rev_single_pattern_case_
  NT_non_empty_list_commas_rev_expr_
  NT_non_empty_list_commas_no_trailing_separated_pair_binder_EQUAL_expr__
  NT_non_empty_list_commas_rev_foreach_binder_
  NT_non_empty_list_commas_record_defn_single_
  NT_non_empty_list_commas_map_expr_elem_
  NT_non_empty_list_commas_expr_
  NT_non_empty_list_commas_spreadable_elem_
  NT_non_empty_list_rev_multiline_string_
  NT_non_empty_list_commas_rev_array_sub_pattern_
  NT_non_empty_list_commas_rev_constructor_param_
  NT_non_empty_list_commas_rev_record_defn_single_
  NT_non_empty_list_commas_rev_fields_pat_single_
  NT_non_empty_list_commas_rev_map_elem_pat_
  NT_non_empty_list_commas_rev_parameter_
  NT_non_empty_list_semis_rev_record_decl_field_
  NT_non_empty_list_semis_rev_enum_constructor_
  NT_non_empty_list_semis_rev_structure_item_
  NT_non_empty_list_semis_rev_trait_method_decl_
  NT_non_empty_list_commas_rev_argument_
  NT_non_empty_list_commas_rev_deriving_directive_
  NT_non_empty_list_commas_rev_trait_method_param_
  NT_non_empty_list_semis_rev_multi_pattern_case_
  NT_non_empty_list_semi_rev_aux_single_pattern_case_
  NT_non_empty_list_commas_rev_separated_pair_binder_EQUAL_expr__
  NT_non_empty_list_commas_rev_map_expr_elem_
  NT_non_empty_list_commas_rev_spreadable_elem_
  NT_non_empty_list_semi_rev_aux_record_decl_field_
  NT_non_empty_list_semi_rev_aux_enum_constructor_
  NT_non_empty_list_semi_rev_aux_structure_item_
  NT_non_empty_list_semi_rev_aux_trait_method_decl_
  NT_non_empty_list_semi_rev_aux_multi_pattern_case_
  EOI
}

// Workaround for EOI unused warning
fn init {
  match (EOI : YYSymbol) {
    EOI => ()
    _ => ()
  }
}

// file:///./parser.mbty
// 731|    simple_constant {}
fn yy_action_0(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "map_syntax_key",
  "rule_index": 113,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 361|    DOT_LIDENT optional_type_parameters_no_constraints {}
fn yy_action_1(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "batch_type_alias_targets",
  "rule_index": 47,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 405|    "derive" "(" list_commas(deriving_directive) ")" {}
fn yy_action_2(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "deriving_directive_list",
  "rule_index": 55,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 587|   pipe_expr {}
fn yy_action_3(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "expr",
  "rule_index": 90,
  "clause_index": 7,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 193|     {}
fn yy_action_4(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "list_semis",
  "rule_index": 15,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 409|    binder optional_bang optional_type_parameters "(" list_commas(trait_method_param) ")" option(preceded("->", return_type)) option(preceded("=", wildcard)) {}
fn yy_action_5(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_6(_last_pos, _args[0:1])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "trait_method_decl",
  "rule_index": 56,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 581|   for_expr {}
fn yy_action_7(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "expr",
  "rule_index": 90,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 472|    "guard" "let" pattern "=" infix_expr {}
fn yy_action_8(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "guard_statement",
  "rule_index": 68,
  "clause_index": 2,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 856|    is_async "(" type_ "," ioption(non_empty_list_commas(type_)) ")" "->" return_type {}
fn yy_action_9(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_10(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_11(_args[2].2, _args[3:4])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "type_",
  "rule_index": 130,
  "clause_index": 2,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 218|    delimited("(", list_commas(parameter), ")") {}
fn yy_action_12(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_13(_last_pos, _args[0:3])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "parameters",
  "rule_index": 20,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 745|    INFIX4 {}
fn yy_action_14(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "infixop",
  "rule_index": 116,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 136|    non_empty_list_commas_rev(X) "," X {}
fn yy_action_15(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_commas_rev",
  "rule_index": 2,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 395|    LIDENT_MAYBE_DOT option(preceded("as", binder)) {}
fn yy_action_16(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "func_alias_target",
  "rule_index": 53,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 235|    option(delimited("[", non_empty_list_commas(id(type_decl_binder)), "]")) {}
fn yy_action_17(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "optional_type_parameters_no_constraints",
  "rule_index": 24,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 381|    ioption(func_alias_type_name(LIDENT, UIDENT)) func_alias_target(LIDENT) {}
fn yy_action_18(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_19(_last_pos, _args[0:0])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "func_alias_targets",
  "rule_index": 51,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 854|    type_ "?" {}
fn yy_action_20(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "type_",
  "rule_index": 130,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 286|    attributes visibility "const" UIDENT opt_annot {}
fn yy_action_21(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_22(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_23(_last_pos, _args[0:2])
  let _sub_action_2_result = yy_action_24(_args[3].2, _args[4:6])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "val_header",
  "rule_index": 35,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 561|    "else" block_expr {}
fn yy_action_25(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "optional_else",
  "rule_index": 86,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 286|    attributes visibility "const" UIDENT opt_annot {}
fn yy_action_26(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_27(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_23(_args[0].2, _args[1:3])
  let _sub_action_2_result = yy_action_28(_args[4].2, _args[5:5])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "val_header",
  "rule_index": 35,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 136|    non_empty_list_commas_rev(X) "," X {}
fn yy_action_29(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_commas_rev",
  "rule_index": 2,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 799|    INT {}
fn yy_action_30(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "simple_pattern",
  "rule_index": 124,
  "clause_index": 3,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 316|    attributes visibility "impl" optional_type_parameters type_name "with" binder optional_bang parameters option(preceded("->", return_type)) impl_body {}
fn yy_action_31(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_22(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_32(_last_pos, _args[0:0])
  let _sub_action_2_result = yy_action_6(_args[3].2, _args[4:5])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "structure_item",
  "rule_index": 37,
  "clause_index": 22,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 295|    attributes visibility "extern" "type" luident optional_type_parameters_no_constraints deriving_directive_list {}
fn yy_action_33(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_27(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_23(_args[0].2, _args[1:3])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "structure_item",
  "rule_index": 37,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 258|    attributes visibility "extern" STRING "fn" fun_binder optional_bang optional_type_parameters option(parameters) option(preceded("->", return_type)) {}
fn yy_action_34(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_27(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_23(_args[0].2, _args[1:3])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "extern_fun_header",
  "rule_index": 29,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 9|    { None }
fn yy_action_19(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "ioption",
  "rule_index": 1,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 127|    non_empty_list_rev(X) X {}
fn yy_action_35(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_rev",
  "rule_index": 0,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 722|    BYTE {}
fn yy_action_36(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "simple_constant",
  "rule_index": 112,
  "clause_index": 2,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 248|    attributes visibility is_async "fn" fun_binder optional_bang optional_type_parameters option(parameters) option(preceded("->", return_type)) {}
fn yy_action_37(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_27(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_32(_args[0].2, _args[1:1])
  let _sub_action_2_result = yy_action_38(_args[0].2, _args[1:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "fun_header",
  "rule_index": 27,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 700|    qual_ident {}
fn yy_action_39(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "var",
  "rule_index": 108,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 135|    X {}
fn yy_action_40(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_commas_rev",
  "rule_index": 2,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 461|    "let" pattern opt_annot "=" expr {}
fn yy_action_41(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_24(_args[1].2, _args[2:4])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "statement",
  "rule_index": 67,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 651|    "{" list_commas(map_expr_elem) "}" {}
fn yy_action_42(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "simple_expr",
  "rule_index": 101,
  "clause_index": 5,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 345|    attributes visibility "type" "!" luident {}
fn yy_action_43(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_27(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_32(_args[0].2, _args[1:1])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "type_header_bang",
  "rule_index": 43,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 815|    "{" non_empty_fields_pat "}" {}
fn yy_action_44(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "simple_pattern",
  "rule_index": 124,
  "clause_index": 19,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 748|   INFIX1 {}
fn yy_action_45(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "infixop",
  "rule_index": 116,
  "clause_index": 3,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 341|    attributes visibility "type" luident optional_type_parameters_no_constraints {}
fn yy_action_46(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_27(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_47(_args[0].2, _args[1:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "type_header",
  "rule_index": 42,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 649|    ioption(terminated(type_name, COLONCOLON)) "{" ".." expr "," list_commas(record_defn_single) "}" {}
fn yy_action_48(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_49(_last_pos, _args[0:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "simple_expr",
  "rule_index": 101,
  "clause_index": 3,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 399|    type_name {}
fn yy_action_50(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "deriving_directive",
  "rule_index": 54,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 316|    attributes visibility "impl" optional_type_parameters type_name "with" binder optional_bang parameters option(preceded("->", return_type)) impl_body {}
fn yy_action_51(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_27(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_23(_args[0].2, _args[1:3])
  let _sub_action_2_result = yy_action_6(_args[6].2, _args[7:8])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "structure_item",
  "rule_index": 37,
  "clause_index": 22,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 798|    CHAR {}
fn yy_action_52(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "simple_pattern",
  "rule_index": 124,
  "clause_index": 2,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 464|    is_async fn_header list_semis(multi_pattern_case) "}" {}
fn yy_action_53(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_38(_last_pos, _args[0:1])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "statement",
  "rule_index": 67,
  "clause_index": 3,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 127|    non_empty_list_rev(X) X {}
fn yy_action_54(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_55(_args[0].2, _args[1:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_rev",
  "rule_index": 0,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 5|    X { Some($1) }
fn yy_action_56(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "option",
  "rule_index": 0,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 4|    { None }
fn yy_action_57(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "option",
  "rule_index": 0,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 596|    infix_expr infixop infix_expr {}
fn yy_action_58(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_59(_args[0].2, _args[1:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "infix_expr",
  "rule_index": 92,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 135|    X {}
fn yy_action_60(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_commas_rev",
  "rule_index": 2,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 5|    X { Some($1) }
fn yy_action_61(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "option",
  "rule_index": 0,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 153|    non_empty_list_commas(X) {}
fn yy_action_62(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "list_commas",
  "rule_index": 6,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 857|    is_async "(" ")" "->" return_type {}
fn yy_action_63(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_38(_last_pos, _args[0:1])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "type_",
  "rule_index": 130,
  "clause_index": 3,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 583|   while_expr {}
fn yy_action_64(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "expr",
  "rule_index": 90,
  "clause_index": 3,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 821|    ".." STRING {}
fn yy_action_65(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "array_sub_pattern",
  "rule_index": 125,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 663|    simple_expr ".." LIDENT apply_attr "(" list_commas(argument) ")" {}
fn yy_action_66(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_67(_args[2].2, _args[3:4])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "simple_expr",
  "rule_index": 101,
  "clause_index": 17,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 336|    "(" "readonly" ")" {}
fn yy_action_68(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "pub_attr",
  "rule_index": 41,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 384|    option(func_alias_type_name(LIDENT, UIDENT)) "(" non_empty_list_commas(func_alias_target(LIDENT)) ")" {}
fn yy_action_69(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "func_alias_targets",
  "rule_index": 51,
  "clause_index": 3,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 310|    attributes visibility "trait" luident option(preceded(COLON, separated_nonempty_list(PLUS, tvar_constraint))) "{" list_semis(trait_method_decl) "}" {}
fn yy_action_70(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_22(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_32(_last_pos, _args[0:0])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "structure_item",
  "rule_index": 37,
  "clause_index": 16,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 285|    attributes visibility "let" binder opt_annot {}
fn yy_action_71(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_27(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_47(_args[0].2, _args[1:2])
  let _sub_action_2_result = yy_action_6(_args[2].2, _args[3:4])
  let _sub_action_3_result = yy_action_24(_args[3].2, _args[4:6])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "val_header",
  "rule_index": 35,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 157|     {}
fn yy_action_72(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "list_commas_no_trailing",
  "rule_index": 7,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 488|    "continue" list_commas_no_trailing(expr) {}
fn yy_action_73(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "expr_statement",
  "rule_index": 71,
  "clause_index": 3,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 608|    prefix_expr "..=" prefix_expr {}
fn yy_action_74(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "range_expr",
  "rule_index": 94,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 820|    pattern {}
fn yy_action_75(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "array_sub_pattern",
  "rule_index": 125,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 311|    attributes visibility "traitalias" luident "=" type_name {}
fn yy_action_76(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_27(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_23(_args[0].2, _args[1:3])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "structure_item",
  "rule_index": 37,
  "clause_index": 17,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 493|   assignment_expr {}
fn yy_action_77(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_78(_last_pos, _args[0:3])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "expr_statement",
  "rule_index": 71,
  "clause_index": 8,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 286|    attributes visibility "const" UIDENT opt_annot {}
fn yy_action_79(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_22(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_32(_last_pos, _args[0:0])
  let _sub_action_2_result = yy_action_24(_args[1].2, _args[2:4])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "val_header",
  "rule_index": 35,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 357|    attributes visibility "enum" luident optional_type_parameters_no_constraints {}
fn yy_action_80(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_27(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_23(_args[0].2, _args[1:3])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "enum_header",
  "rule_index": 46,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 341|    attributes visibility "type" luident optional_type_parameters_no_constraints {}
fn yy_action_81(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_22(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_23(_last_pos, _args[0:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "type_header",
  "rule_index": 42,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 839|    dotdot_binder ioption(",") {}
fn yy_action_82(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_83(_args[0].2, _args[1:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "array_sub_patterns",
  "rule_index": 127,
  "clause_index": 4,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 315|    attributes visibility "impl" optional_type_parameters type_name "for" type_ "with" binder optional_bang parameters option(preceded("->", return_type)) impl_body {}
fn yy_action_84(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_22(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_47(_last_pos, _args[0:1])
  let _sub_action_2_result = yy_action_6(_args[6].2, _args[7:8])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "structure_item",
  "rule_index": 37,
  "clause_index": 21,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 59|    X { Cons($1, Nil) }
fn yy_action_85(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "separated_nonempty_list",
  "rule_index": 12,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 650|    "{" semi_expr_semi_opt "}" {}
fn yy_action_86(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_87(_args[0].2, _args[1:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "simple_expr",
  "rule_index": 101,
  "clause_index": 4,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 277|    "=" STRING {}
fn yy_action_88(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "impl_body",
  "rule_index": 33,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 5|    X { Some($1) }
fn yy_action_89(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "option",
  "rule_index": 0,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 553|    loop_label_colon loop_header list_semis(multi_pattern_case) "}" {}
fn yy_action_90(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_91(_args[0].2, _args[1:4])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "loop_expr",
  "rule_index": 84,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 492|    augmented_assignment_expr {}
fn yy_action_92(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_93(_last_pos, _args[0:3])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "expr_statement",
  "rule_index": 71,
  "clause_index": 7,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 648|    ioption(terminated(type_name, COLONCOLON)) "{" ".." expr "}" {}
fn yy_action_94(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_49(_last_pos, _args[0:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "simple_expr",
  "rule_index": 101,
  "clause_index": 2,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 285|    attributes visibility "let" binder opt_annot {}
fn yy_action_95(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_22(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_47(_last_pos, _args[0:1])
  let _sub_action_2_result = yy_action_6(_args[1].2, _args[2:3])
  let _sub_action_3_result = yy_action_28(_args[2].2, _args[3:3])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "val_header",
  "rule_index": 35,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 4|    { None }
fn yy_action_96(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "option",
  "rule_index": 0,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 136|    non_empty_list_commas_rev(X) "," X {}
fn yy_action_97(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_commas_rev",
  "rule_index": 2,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 193|     {}
fn yy_action_98(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "list_semis",
  "rule_index": 15,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 664|    simple_expr accessor %prec prec_field {}
fn yy_action_99(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_100(_args[0].2, _args[1:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "simple_expr",
  "rule_index": 101,
  "clause_index": 18,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 520|   "{" {}
fn yy_action_101(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "catch_keyword",
  "rule_index": 77,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 657|    constr {}
fn yy_action_102(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "simple_expr",
  "rule_index": 101,
  "clause_index": 11,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 153|    non_empty_list_commas(X) {}
fn yy_action_103(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "list_commas",
  "rule_index": 6,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 144|    non_empty_list_commas_rev(X) option(",") {}
fn yy_action_104(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_commas",
  "rule_index": 4,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 596|    infix_expr infixop infix_expr {}
fn yy_action_105(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_106(_args[0].2, _args[1:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "infix_expr",
  "rule_index": 92,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 152|     {}
fn yy_action_107(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "list_commas",
  "rule_index": 6,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 248|    attributes visibility is_async "fn" fun_binder optional_bang optional_type_parameters option(parameters) option(preceded("->", return_type)) {}
fn yy_action_108(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_22(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_23(_last_pos, _args[0:2])
  let _sub_action_2_result = yy_action_38(_args[1].2, _args[2:3])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "fun_header",
  "rule_index": 27,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 32|    L X { $2 }
fn yy_action_109(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "preceded",
  "rule_index": 6,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 920|    non_empty_list_commas(map_elem_pat) {}
fn yy_action_110(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_map_elems_pat",
  "rule_index": 143,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 126|    X {}
fn yy_action_111(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_55(_last_pos, _args[0:1])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_rev",
  "rule_index": 0,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 642|    "?" {}
fn yy_action_67(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "apply_attr",
  "rule_index": 100,
  "clause_index": 3,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 754|    AMPERAMPER {}
fn yy_action_59(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "infixop",
  "rule_index": 116,
  "clause_index": 9,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 791|    simple_pattern "..=" simple_pattern {}
fn yy_action_112(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "range_pattern",
  "rule_index": 123,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 307|    extern_fun_header "=" non_empty_list(MULTILINE_STRING) {}
fn yy_action_113(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "structure_item",
  "rule_index": 37,
  "clause_index": 13,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 4|    { None }
fn yy_action_114(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "option",
  "rule_index": 0,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 40|    L X R { $2 }
fn yy_action_115(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "delimited",
  "rule_index": 8,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 807|    binder {}
fn yy_action_116(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_6(_last_pos, _args[0:1])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "simple_pattern",
  "rule_index": 124,
  "clause_index": 11,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 660|    simple_expr "[" expr "]" {}
fn yy_action_117(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "simple_expr",
  "rule_index": 101,
  "clause_index": 14,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 162|    non_empty_list_commas_rev(X) option(",") {}
fn yy_action_118(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_commas_with_trailing_info",
  "rule_index": 8,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 646|    "{" record_defn "}" {}
fn yy_action_119(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "simple_expr",
  "rule_index": 101,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 60|    X SEP separated_nonempty_list(SEP, X) { Cons($1, $3) }
fn yy_action_120(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "separated_nonempty_list",
  "rule_index": 12,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 136|    non_empty_list_commas_rev(X) "," X {}
fn yy_action_121(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_commas_rev",
  "rule_index": 2,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 733|    MINUS FLOAT {}
fn yy_action_122(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "map_syntax_key",
  "rule_index": 113,
  "clause_index": 2,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 609|    prefix_expr {}
fn yy_action_123(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "range_expr",
  "rule_index": 94,
  "clause_index": 2,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 40|    L X R { $2 }
fn yy_action_124(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "delimited",
  "rule_index": 8,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 663|    simple_expr ".." LIDENT apply_attr "(" list_commas(argument) ")" {}
fn yy_action_125(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_126(_args[2].2, _args[3:5])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "simple_expr",
  "rule_index": 101,
  "clause_index": 17,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 294|    type_header deriving_directive_list {}
fn yy_action_127(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "structure_item",
  "rule_index": 37,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 803|    "-" FLOAT {}
fn yy_action_128(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "simple_pattern",
  "rule_index": 124,
  "clause_index": 7,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 845|    type_ "!" separated_nonempty_list("+", error_type) {}
fn yy_action_129(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "return_type",
  "rule_index": 128,
  "clause_index": 2,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 309|    attributes visibility "fnalias" func_alias_targets {}
fn yy_action_130(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_22(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_32(_last_pos, _args[0:0])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "structure_item",
  "rule_index": 37,
  "clause_index": 15,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 4|    { None }
fn yy_action_131(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "option",
  "rule_index": 0,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 860|    qual_ident_ty optional_type_arguments {}
fn yy_action_132(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "type_",
  "rule_index": 130,
  "clause_index": 6,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 471|    "guard" infix_expr "else" block_expr {}
fn yy_action_133(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "guard_statement",
  "rule_index": 68,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 152|     {}
fn yy_action_134(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "list_commas",
  "rule_index": 6,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 135|    X {}
fn yy_action_135(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_136(_last_pos, _args[0:3])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_commas_rev",
  "rule_index": 2,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 10|    X { Some($1) }
fn yy_action_49(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_137(_last_pos, _args[0:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "ioption",
  "rule_index": 1,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 507|    pattern option(preceded("if", expr)) "=>" expr_statement {}
fn yy_action_138(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "single_pattern_case",
  "rule_index": 74,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 5|    X { Some($1) }
fn yy_action_139(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_140(_last_pos, _args[0:3])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "option",
  "rule_index": 0,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 567|    loop_label_colon "for" for_binders block_expr optional_else {}
fn yy_action_141(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "for_expr",
  "rule_index": 87,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 158|    non_empty_list_commas_no_trailing(X) {}
fn yy_action_142(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "list_commas_no_trailing",
  "rule_index": 7,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 629|    simple_expr "[" expr "]" {}
fn yy_action_143(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "left_value",
  "rule_index": 98,
  "clause_index": 2,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 281|    expr EOF {}
fn yy_action_144(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "expression",
  "rule_index": 34,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 136|    non_empty_list_commas_rev(X) "," X {}
fn yy_action_145(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_commas_rev",
  "rule_index": 2,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 487|    "continue" POST_LABEL list_commas_no_trailing(expr) {}
fn yy_action_146(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "expr_statement",
  "rule_index": 71,
  "clause_index": 2,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 404|     {}
fn yy_action_147(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "deriving_directive_list",
  "rule_index": 55,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 32|    L X { $2 }
fn yy_action_148(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "preceded",
  "rule_index": 6,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 627|    var {}
fn yy_action_149(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_39(_last_pos, _args[0:1])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "left_value",
  "rule_index": 98,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 462|    "let" "mut" binder opt_annot "=" expr {}
fn yy_action_150(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_6(_args[1].2, _args[2:3])
  let _sub_action_1_result = yy_action_24(_args[2].2, _args[3:5])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "statement",
  "rule_index": 67,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 194|    non_empty_list_semis(X) {}
fn yy_action_151(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "list_semis",
  "rule_index": 15,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 267|    list_semis_rev(statement) {}
fn yy_action_152(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "local_types_and_stmts",
  "rule_index": 31,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 808|    constr option(delimited("(", constr_pat_arguments, ")")) {}
fn yy_action_153(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "simple_pattern",
  "rule_index": 124,
  "clause_index": 12,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 732|    MINUS INT {}
fn yy_action_154(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "map_syntax_key",
  "rule_index": 113,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 423|    LIDENT {}
fn yy_action_155(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "luident",
  "rule_index": 59,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 28|    X SEP Y { ($1, $3) }
fn yy_action_136(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_6(_last_pos, _args[0:1])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "separated_pair",
  "rule_index": 5,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 907|    fpat_labeled_pattern {}
fn yy_action_156(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_157(_last_pos, _args[0:3])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "fields_pat_single",
  "rule_index": 140,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 184|    non_empty_list_semis_rev(X) {}
fn yy_action_158(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_semis",
  "rule_index": 13,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 659|    simple_expr apply_attr "(" list_commas(argument) ")" {}
fn yy_action_159(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_160(_args[0].2, _args[1:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "simple_expr",
  "rule_index": 101,
  "clause_index": 13,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 4|    { None }
fn yy_action_161(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "option",
  "rule_index": 0,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 206|    ioption(annot) {}
fn yy_action_24(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_162(_last_pos, _args[0:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "opt_annot",
  "rule_index": 18,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 5|    X { Some($1) }
fn yy_action_163(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "option",
  "rule_index": 0,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 144|    non_empty_list_commas_rev(X) option(",") {}
fn yy_action_164(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_commas",
  "rule_index": 4,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 136|    non_empty_list_commas_rev(X) "," X {}
fn yy_action_165(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_commas_rev",
  "rule_index": 2,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 198|    x {}
fn yy_action_166(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_167(_last_pos, _args[0:1])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "id",
  "rule_index": 16,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 855|    "(" type_ "," non_empty_list_commas(type_) ")" {}
fn yy_action_168(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "type_",
  "rule_index": 130,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 883|    label_pun "," list_commas_with_trailing_info(record_defn_single) {}
fn yy_action_169(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_170(_last_pos, _args[0:1])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "record_defn",
  "rule_index": 135,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 144|    non_empty_list_commas_rev(X) option(",") {}
fn yy_action_171(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_commas",
  "rule_index": 4,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 737|    STRING {}
fn yy_action_172(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "loced_string",
  "rule_index": 114,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 767|    LIDENT "?" {}
fn yy_action_173(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "argument",
  "rule_index": 118,
  "clause_index": 3,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 290|    list_semis(structure_item) EOF {}
fn yy_action_174(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "structure",
  "rule_index": 36,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 349|    attributes visibility "typealias" luident optional_type_parameters_no_constraints {}
fn yy_action_175(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_27(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_32(_args[0].2, _args[1:1])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "type_alias_header",
  "rule_index": 44,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 153|    non_empty_list_commas(X) {}
fn yy_action_176(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "list_commas",
  "rule_index": 6,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 211|    binder opt_annot {}
fn yy_action_177(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_6(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_24(_args[0].2, _args[1:3])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "parameter",
  "rule_index": 19,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 341|    attributes visibility "type" luident optional_type_parameters_no_constraints {}
fn yy_action_178(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_27(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_23(_args[0].2, _args[1:3])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "type_header",
  "rule_index": 42,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 603|    range_expr {}
fn yy_action_179(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "postfix_expr",
  "rule_index": 93,
  "clause_index": 2,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 315|    attributes visibility "impl" optional_type_parameters type_name "for" type_ "with" binder optional_bang parameters option(preceded("->", return_type)) impl_body {}
fn yy_action_180(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_27(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_23(_args[0].2, _args[1:3])
  let _sub_action_2_result = yy_action_6(_args[8].2, _args[9:10])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "structure_item",
  "rule_index": 37,
  "clause_index": 21,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 4|    { None }
fn yy_action_181(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "option",
  "rule_index": 0,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 871|    option("mut") POST_LABEL ":" type_ {}
fn yy_action_182(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "constructor_param",
  "rule_index": 132,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 172|    non_empty_list_semi_rev_aux(X) SEMI X {}
fn yy_action_183(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_semi_rev_aux",
  "rule_index": 10,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 439|    PACKAGE_NAME DOT_LIDENT {}
fn yy_action_184(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "qual_ident_ty",
  "rule_index": 62,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 309|    attributes visibility "fnalias" func_alias_targets {}
fn yy_action_185(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_27(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_47(_args[0].2, _args[1:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "structure_item",
  "rule_index": 37,
  "clause_index": 15,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 464|    is_async fn_header list_semis(multi_pattern_case) "}" {}
fn yy_action_186(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_10(_last_pos, _args[0:0])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "statement",
  "rule_index": 67,
  "clause_index": 3,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 930|    ".." option(",") {}
fn yy_action_187(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "constr_pat_arguments",
  "rule_index": 145,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 9|    { None }
fn yy_action_188(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "ioption",
  "rule_index": 1,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 486|    "break" option(expr) {}
fn yy_action_189(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "expr_statement",
  "rule_index": 71,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 521|    "catch" "!" "{" {}
fn yy_action_190(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "catch_keyword",
  "rule_index": 77,
  "clause_index": 2,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 776|    map_syntax_key ":" expr {}
fn yy_action_191(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "map_expr_elem",
  "rule_index": 120,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 534|    "if" infix_expr block_expr "else" block_expr {}
fn yy_action_192(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "if_expr",
  "rule_index": 80,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 213|    POST_LABEL opt_annot "=" expr {}
fn yy_action_193(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_24(_args[0].2, _args[1:3])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "parameter",
  "rule_index": 19,
  "clause_index": 3,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 5|    X { Some($1) }
fn yy_action_194(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_109(_last_pos, _args[0:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "option",
  "rule_index": 0,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 248|    attributes visibility is_async "fn" fun_binder optional_bang optional_type_parameters option(parameters) option(preceded("->", return_type)) {}
fn yy_action_195(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_27(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_47(_args[0].2, _args[1:2])
  let _sub_action_2_result = yy_action_10(_args[1].2, _args[2:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "fun_header",
  "rule_index": 27,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 634|    PACKAGE_NAME DOT_UIDENT {}
fn yy_action_196(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "constr",
  "rule_index": 99,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 635|    type_name "::" UIDENT {}
fn yy_action_197(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "constr",
  "rule_index": 99,
  "clause_index": 2,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 4|    { None }
fn yy_action_198(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "option",
  "rule_index": 0,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 866|    visibility option("mut") LIDENT ":" type_ {}
fn yy_action_199(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_23(_last_pos, _args[0:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "record_decl_field",
  "rule_index": 131,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 184|    non_empty_list_semis_rev(X) {}
fn yy_action_200(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_semis",
  "rule_index": 13,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 363|    ".(" non_empty_list_commas(batch_type_alias_target) ")" {}
fn yy_action_201(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "batch_type_alias_targets",
  "rule_index": 47,
  "clause_index": 2,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 725|    INT {}
fn yy_action_202(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "simple_constant",
  "rule_index": 112,
  "clause_index": 5,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 667|    "(" expr annot ")" {}
fn yy_action_203(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_204(_args[1].2, _args[2:4])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "simple_expr",
  "rule_index": 101,
  "clause_index": 21,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 557|    list_commas_no_trailing(separated_pair(binder, "=", expr)) {}
fn yy_action_205(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "for_binders",
  "rule_index": 85,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 32|    L X { $2 }
fn yy_action_206(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "preceded",
  "rule_index": 6,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 856|    is_async "(" type_ "," ioption(non_empty_list_commas(type_)) ")" "->" return_type {}
fn yy_action_207(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_38(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_208(_args[3].2, _args[4:4])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "type_",
  "rule_index": 130,
  "clause_index": 2,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 135|    X {}
fn yy_action_209(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_commas_rev",
  "rule_index": 2,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 724|    CHAR {}
fn yy_action_210(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "simple_constant",
  "rule_index": 112,
  "clause_index": 4,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 766|    POST_LABEL {}
fn yy_action_211(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "argument",
  "rule_index": 118,
  "clause_index": 2,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 157|     {}
fn yy_action_212(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "list_commas_no_trailing",
  "rule_index": 7,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 144|    non_empty_list_commas_rev(X) option(",") {}
fn yy_action_213(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_commas",
  "rule_index": 4,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 5|    X { Some($1) }
fn yy_action_214(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_115(_last_pos, _args[0:3])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "option",
  "rule_index": 0,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 580|    loop_expr {}
fn yy_action_215(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "expr",
  "rule_index": 90,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 189|    non_empty_list_semis_rev(X) {}
fn yy_action_216(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "list_semis_rev",
  "rule_index": 14,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 353|    attributes visibility "struct" luident optional_type_parameters_no_constraints {}
fn yy_action_217(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_27(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_47(_args[0].2, _args[1:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "struct_header",
  "rule_index": 45,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 311|    attributes visibility "traitalias" luident "=" type_name {}
fn yy_action_218(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_27(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_47(_args[0].2, _args[1:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "structure_item",
  "rule_index": 37,
  "clause_index": 17,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 153|    non_empty_list_commas(X) {}
fn yy_action_219(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "list_commas",
  "rule_index": 6,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 473|    "guard" "let" pattern "=" infix_expr "else" "{" single_pattern_cases "}" {}
fn yy_action_220(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "guard_statement",
  "rule_index": 68,
  "clause_index": 3,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 285|    attributes visibility "let" binder opt_annot {}
fn yy_action_221(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_22(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_23(_last_pos, _args[0:2])
  let _sub_action_2_result = yy_action_6(_args[2].2, _args[3:4])
  let _sub_action_3_result = yy_action_24(_args[3].2, _args[4:6])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "val_header",
  "rule_index": 35,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 4|    { None }
fn yy_action_222(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "option",
  "rule_index": 0,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 126|    X {}
fn yy_action_223(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_rev",
  "rule_index": 0,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 4|    { None }
fn yy_action_224(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "option",
  "rule_index": 0,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 772|    ".." expr {}
fn yy_action_225(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "spreadable_elem",
  "rule_index": 119,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 331|    "pub" pub_attr {}
fn yy_action_23(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "visibility",
  "rule_index": 40,
  "clause_index": 2,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 32|    L X { $2 }
fn yy_action_226(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "preceded",
  "rule_index": 6,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 602|    range_expr "is" range_pattern {}
fn yy_action_227(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "postfix_expr",
  "rule_index": 93,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 755|    BARBAR {}
fn yy_action_228(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "infixop",
  "rule_index": 116,
  "clause_index": 10,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 144|    non_empty_list_commas_rev(X) option(",") {}
fn yy_action_229(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_commas",
  "rule_index": 4,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 723|    BYTES {}
fn yy_action_230(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "simple_constant",
  "rule_index": 112,
  "clause_index": 3,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 801|    FLOAT {}
fn yy_action_231(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "simple_pattern",
  "rule_index": 124,
  "clause_index": 5,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 5|    X { Some($1) }
fn yy_action_232(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "option",
  "rule_index": 0,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 222|    delimited("[", non_empty_list_commas(id(tvar_binder)), "]") {}
fn yy_action_233(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_234(_last_pos, _args[0:3])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "type_parameters",
  "rule_index": 21,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 353|    attributes visibility "struct" luident optional_type_parameters_no_constraints {}
fn yy_action_235(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_27(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_23(_args[0].2, _args[1:3])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "struct_header",
  "rule_index": 45,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 243|    type_name "::" LIDENT {}
fn yy_action_236(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "fun_binder",
  "rule_index": 26,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 5|    X { Some($1) }
fn yy_action_237(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "option",
  "rule_index": 0,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 214|    LIDENT "?" opt_annot {}
fn yy_action_238(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_24(_args[1].2, _args[2:4])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "parameter",
  "rule_index": 19,
  "clause_index": 4,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 305|    fun_header "=" non_empty_list(MULTILINE_STRING) {}
fn yy_action_239(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "structure_item",
  "rule_index": 37,
  "clause_index": 11,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 248|    attributes visibility is_async "fn" fun_binder optional_bang optional_type_parameters option(parameters) option(preceded("->", return_type)) {}
fn yy_action_240(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_27(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_47(_args[0].2, _args[1:2])
  let _sub_action_2_result = yy_action_38(_args[1].2, _args[2:3])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "fun_header",
  "rule_index": 27,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 144|    non_empty_list_commas_rev(X) option(",") {}
fn yy_action_241(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_commas",
  "rule_index": 4,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 311|    attributes visibility "traitalias" luident "=" type_name {}
fn yy_action_242(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_22(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_32(_last_pos, _args[0:0])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "structure_item",
  "rule_index": 37,
  "clause_index": 17,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 418|    binder ":" type_ {}
fn yy_action_243(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_6(_last_pos, _args[0:1])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "trait_method_param",
  "rule_index": 58,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 136|    non_empty_list_commas_rev(X) "," X {}
fn yy_action_244(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_commas_rev",
  "rule_index": 2,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 210|    "_" opt_annot {}
fn yy_action_245(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_28(_args[0].2, _args[1:1])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "parameter",
  "rule_index": 19,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 353|    attributes visibility "struct" luident optional_type_parameters_no_constraints {}
fn yy_action_246(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_22(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_23(_last_pos, _args[0:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "struct_header",
  "rule_index": 45,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 912|    label ":" pattern {}
fn yy_action_157(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_247(_last_pos, _args[0:1])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "fpat_labeled_pattern",
  "rule_index": 141,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 383|    PACKAGE_NAME func_alias_type_name(DOT_LIDENT, DOT_UIDENT) func_alias_target(LIDENT) {}
fn yy_action_248(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "func_alias_targets",
  "rule_index": 51,
  "clause_index": 2,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 152|     {}
fn yy_action_249(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "list_commas",
  "rule_index": 6,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 335|     {}
fn yy_action_250(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "pub_attr",
  "rule_index": 41,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 295|    attributes visibility "extern" "type" luident optional_type_parameters_no_constraints deriving_directive_list {}
fn yy_action_251(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_27(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_32(_args[0].2, _args[1:1])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "structure_item",
  "rule_index": 37,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 438|    luident {}
fn yy_action_252(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "qual_ident_ty",
  "rule_index": 62,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 790|    simple_pattern "..<" simple_pattern {}
fn yy_action_253(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "range_pattern",
  "rule_index": 123,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 285|    attributes visibility "let" binder opt_annot {}
fn yy_action_254(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_22(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_47(_last_pos, _args[0:1])
  let _sub_action_2_result = yy_action_6(_args[1].2, _args[2:3])
  let _sub_action_3_result = yy_action_24(_args[2].2, _args[3:5])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "val_header",
  "rule_index": 35,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 135|    X {}
fn yy_action_255(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_256(_last_pos, _args[0:1])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_commas_rev",
  "rule_index": 2,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 153|    non_empty_list_commas(X) {}
fn yy_action_257(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "list_commas",
  "rule_index": 6,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 525|    "else" "{" {}
fn yy_action_258(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "else_keyword",
  "rule_index": 78,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 136|    non_empty_list_commas_rev(X) "," X {}
fn yy_action_259(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_commas_rev",
  "rule_index": 2,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 760|     {}
fn yy_action_260(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "optional_question",
  "rule_index": 117,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 935|    label "=" pattern {}
fn yy_action_261(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_247(_last_pos, _args[0:1])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "constr_pat_argument",
  "rule_index": 146,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 193|     {}
fn yy_action_262(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "list_semis",
  "rule_index": 15,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 9|    { None }
fn yy_action_263(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "ioption",
  "rule_index": 1,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 136|    non_empty_list_commas_rev(X) "," X {}
fn yy_action_264(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_commas_rev",
  "rule_index": 2,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 349|    attributes visibility "typealias" luident optional_type_parameters_no_constraints {}
fn yy_action_265(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_22(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_47(_last_pos, _args[0:1])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "type_alias_header",
  "rule_index": 44,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 285|    attributes visibility "let" binder opt_annot {}
fn yy_action_266(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_22(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_32(_last_pos, _args[0:0])
  let _sub_action_2_result = yy_action_6(_args[0].2, _args[1:2])
  let _sub_action_3_result = yy_action_28(_args[1].2, _args[2:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "val_header",
  "rule_index": 35,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 313|    attributes visibility "traitalias" PACKAGE_NAME batch_trait_alias_targets {}
fn yy_action_267(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_22(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_47(_last_pos, _args[0:1])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "structure_item",
  "rule_index": 37,
  "clause_index": 19,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 780|    pattern "as" binder {}
fn yy_action_268(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_6(_args[1].2, _args[2:3])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "pattern",
  "rule_index": 121,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 345|    attributes visibility "type" "!" luident {}
fn yy_action_269(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_22(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_47(_last_pos, _args[0:1])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "type_header_bang",
  "rule_index": 43,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 658|    LIDENT "?" "(" list_commas(argument) ")" {}
fn yy_action_270(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "simple_expr",
  "rule_index": 101,
  "clause_index": 12,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 313|    attributes visibility "traitalias" PACKAGE_NAME batch_trait_alias_targets {}
fn yy_action_271(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_27(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_32(_args[0].2, _args[1:1])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "structure_item",
  "rule_index": 37,
  "clause_index": 19,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 806|    UNDERSCORE {}
fn yy_action_272(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "simple_pattern",
  "rule_index": 124,
  "clause_index": 10,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 171|    X {}
fn yy_action_273(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_semi_rev_aux",
  "rule_index": 10,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 313|    attributes visibility "traitalias" PACKAGE_NAME batch_trait_alias_targets {}
fn yy_action_274(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_27(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_23(_args[0].2, _args[1:3])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "structure_item",
  "rule_index": 37,
  "clause_index": 19,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 704|    qual_ident_ty {}
fn yy_action_275(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "type_name",
  "rule_index": 109,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 131|    non_empty_list_rev(X) {}
fn yy_action_276(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list",
  "rule_index": 1,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 286|    attributes visibility "const" UIDENT opt_annot {}
fn yy_action_277(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_22(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_23(_last_pos, _args[0:2])
  let _sub_action_2_result = yy_action_28(_args[3].2, _args[4:4])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "val_header",
  "rule_index": 35,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 166|     {}
fn yy_action_278(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "list_commas_with_trailing_info",
  "rule_index": 9,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 285|    attributes visibility "let" binder opt_annot {}
fn yy_action_279(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_22(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_32(_last_pos, _args[0:0])
  let _sub_action_2_result = yy_action_6(_args[0].2, _args[1:2])
  let _sub_action_3_result = yy_action_24(_args[1].2, _args[2:4])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "val_header",
  "rule_index": 35,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 286|    attributes visibility "const" UIDENT opt_annot {}
fn yy_action_280(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_27(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_47(_args[0].2, _args[1:2])
  let _sub_action_2_result = yy_action_28(_args[3].2, _args[4:4])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "val_header",
  "rule_index": 35,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 312|    attributes visibility "typealias" PACKAGE_NAME batch_type_alias_targets {}
fn yy_action_281(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_22(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_32(_last_pos, _args[0:0])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "structure_item",
  "rule_index": 37,
  "clause_index": 18,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 299|    type_alias_header "=" type_ deriving_directive_list {}
fn yy_action_282(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "structure_item",
  "rule_index": 37,
  "clause_index": 5,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 286|    attributes visibility "const" UIDENT opt_annot {}
fn yy_action_283(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_22(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_47(_last_pos, _args[0:1])
  let _sub_action_2_result = yy_action_24(_args[2].2, _args[3:5])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "val_header",
  "rule_index": 35,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 490|    "raise" expr {}
fn yy_action_284(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "expr_statement",
  "rule_index": 71,
  "clause_index": 5,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 371|    DOT_LIDENT {}
fn yy_action_285(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "batch_trait_alias_targets",
  "rule_index": 49,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 176|    non_empty_list_semi_rev_aux(X) option(SEMI) {}
fn yy_action_286(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_semis_rev",
  "rule_index": 11,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 4|    { None }
fn yy_action_287(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "option",
  "rule_index": 0,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 879|    "=" INT {}
fn yy_action_288(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "eq_int_tag",
  "rule_index": 134,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 858|    "(" type_ ")" {}
fn yy_action_289(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "type_",
  "rule_index": 130,
  "clause_index": 4,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 596|    infix_expr infixop infix_expr {}
fn yy_action_290(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_291(_args[0].2, _args[1:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "infix_expr",
  "rule_index": 92,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 440|   PACKAGE_NAME DOT_UIDENT {}
fn yy_action_292(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "qual_ident_ty",
  "rule_index": 62,
  "clause_index": 2,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 144|    non_empty_list_commas_rev(X) option(",") {}
fn yy_action_293(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_commas",
  "rule_index": 4,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 764|    label optional_question "=" expr {}
fn yy_action_294(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_247(_last_pos, _args[0:1])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "argument",
  "rule_index": 118,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 843|    type_ %prec prec_type {}
fn yy_action_295(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "return_type",
  "rule_index": 128,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 184|    non_empty_list_semis_rev(X) {}
fn yy_action_296(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_semis",
  "rule_index": 13,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 894|    label ":" expr {}
fn yy_action_297(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_247(_last_pos, _args[0:1])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "labeled_expr",
  "rule_index": 137,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 4|    { None }
fn yy_action_298(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "option",
  "rule_index": 0,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 135|    X {}
fn yy_action_299(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_300(_last_pos, _args[0:1])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_commas_rev",
  "rule_index": 2,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 870|    option("mut") type_ {}
fn yy_action_301(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "constructor_param",
  "rule_index": 132,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 286|    attributes visibility "const" UIDENT opt_annot {}
fn yy_action_302(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_27(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_32(_args[0].2, _args[1:1])
  let _sub_action_2_result = yy_action_28(_args[2].2, _args[3:3])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "val_header",
  "rule_index": 35,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 5|    X { Some($1) }
fn yy_action_303(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_172(_last_pos, _args[0:1])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "option",
  "rule_index": 0,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 198|    x {}
fn yy_action_304(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_305(_last_pos, _args[0:1])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "id",
  "rule_index": 16,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 153|    non_empty_list_commas(X) {}
fn yy_action_306(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "list_commas",
  "rule_index": 6,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 5|    X { Some($1) }
fn yy_action_307(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "option",
  "rule_index": 0,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 652|    is_async "fn" optional_bang parameters option(preceded("->", return_type)) block_expr {}
fn yy_action_308(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_10(_last_pos, _args[0:0])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "simple_expr",
  "rule_index": 101,
  "clause_index": 6,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 811|    "(" pattern annot ")" {}
fn yy_action_309(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_204(_args[1].2, _args[2:4])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "simple_pattern",
  "rule_index": 124,
  "clause_index": 15,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 135|    X {}
fn yy_action_310(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_commas_rev",
  "rule_index": 2,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 301|    enum_header "{" list_semis(enum_constructor) "}" deriving_directive_list {}
fn yy_action_311(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "structure_item",
  "rule_index": 37,
  "clause_index": 7,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 749|    PLUS {}
fn yy_action_312(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "infixop",
  "rule_index": 116,
  "clause_index": 4,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 285|    attributes visibility "let" binder opt_annot {}
fn yy_action_313(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_22(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_23(_last_pos, _args[0:2])
  let _sub_action_2_result = yy_action_6(_args[2].2, _args[3:4])
  let _sub_action_3_result = yy_action_28(_args[3].2, _args[4:4])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "val_header",
  "rule_index": 35,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 656|    qual_ident_simple_expr {}
fn yy_action_314(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "simple_expr",
  "rule_index": 101,
  "clause_index": 10,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 40|    L X R { $2 }
fn yy_action_140(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "delimited",
  "rule_index": 8,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 167|    non_empty_list_commas_with_trailing_info(X) {}
fn yy_action_315(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "list_commas_with_trailing_info",
  "rule_index": 9,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 295|    attributes visibility "extern" "type" luident optional_type_parameters_no_constraints deriving_directive_list {}
fn yy_action_316(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_22(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_47(_last_pos, _args[0:1])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "structure_item",
  "rule_index": 37,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 575|    binder {}
fn yy_action_317(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_6(_last_pos, _args[0:1])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "foreach_binder",
  "rule_index": 89,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 861|    "&" qual_ident_ty {}
fn yy_action_318(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "type_",
  "rule_index": 130,
  "clause_index": 7,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 695|    qual_ident_ty {}
fn yy_action_319(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "tvar_constraint",
  "rule_index": 107,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 176|    non_empty_list_semi_rev_aux(X) option(SEMI) {}
fn yy_action_320(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_semis_rev",
  "rule_index": 11,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 465|    guard_statement {}
fn yy_action_321(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "statement",
  "rule_index": 67,
  "clause_index": 4,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 741|    AUGMENTED_ASSIGNMENT {}
fn yy_action_322(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "assignop",
  "rule_index": 115,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 10|    X { Some($1) }
fn yy_action_11(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "ioption",
  "rule_index": 1,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 453|    "fn" binder optional_bang "{" {}
fn yy_action_323(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_6(_args[0].2, _args[1:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "fn_header",
  "rule_index": 65,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 417|    type_ {}
fn yy_action_324(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "trait_method_param",
  "rule_index": 58,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 176|    non_empty_list_semi_rev_aux(X) option(SEMI) {}
fn yy_action_325(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_semis_rev",
  "rule_index": 11,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 936|    POST_LABEL {}
fn yy_action_326(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "constr_pat_argument",
  "rule_index": 146,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 797|    FALSE {}
fn yy_action_327(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "simple_pattern",
  "rule_index": 124,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 172|    non_empty_list_semi_rev_aux(X) SEMI X {}
fn yy_action_328(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_semi_rev_aux",
  "rule_index": 10,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 353|    attributes visibility "struct" luident optional_type_parameters_no_constraints {}
fn yy_action_329(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_22(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_32(_last_pos, _args[0:0])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "struct_header",
  "rule_index": 45,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 381|    ioption(func_alias_type_name(LIDENT, UIDENT)) func_alias_target(LIDENT) {}
fn yy_action_330(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_331(_last_pos, _args[0:1])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "func_alias_targets",
  "rule_index": 51,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 5|    X { Some($1) }
fn yy_action_332(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_206(_last_pos, _args[0:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "option",
  "rule_index": 0,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 136|    non_empty_list_commas_rev(X) "," X {}
fn yy_action_333(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_136(_args[1].2, _args[2:5])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_commas_rev",
  "rule_index": 2,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 127|    non_empty_list_rev(X) X {}
fn yy_action_334(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_rev",
  "rule_index": 0,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 571|    loop_label_colon "for" non_empty_list_commas(foreach_binder) "in" expr block_expr optional_else {}
fn yy_action_335(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "foreach_expr",
  "rule_index": 88,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 591|    pipe_expr "|>" infix_expr {}
fn yy_action_336(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "pipe_expr",
  "rule_index": 91,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 172|    non_empty_list_semi_rev_aux(X) SEMI X {}
fn yy_action_337(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_semi_rev_aux",
  "rule_index": 10,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 296|    type_header type_ deriving_directive_list {}
fn yy_action_338(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "structure_item",
  "rule_index": 37,
  "clause_index": 2,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 131|    non_empty_list_rev(X) {}
fn yy_action_339(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list",
  "rule_index": 1,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 800|    BYTE {}
fn yy_action_340(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "simple_pattern",
  "rule_index": 124,
  "clause_index": 4,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 193|     {}
fn yy_action_341(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "list_semis",
  "rule_index": 15,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 710|    MULTILINE_INTERP {}
fn yy_action_342(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "multiline_string",
  "rule_index": 110,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 136|    non_empty_list_commas_rev(X) "," X {}
fn yy_action_343(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_commas_rev",
  "rule_index": 2,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 135|    X {}
fn yy_action_344(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_commas_rev",
  "rule_index": 2,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 662|    simple_expr DOT_LIDENT apply_attr "(" list_commas(argument) ")" {}
fn yy_action_345(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_126(_args[1].2, _args[2:4])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "simple_expr",
  "rule_index": 101,
  "clause_index": 16,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 5|    X { Some($1) }
fn yy_action_346(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "option",
  "rule_index": 0,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 428|    LIDENT {}
fn yy_action_347(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "qual_ident",
  "rule_index": 60,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 686|    luident COLON separated_nonempty_list(PLUS, tvar_constraint) {}
fn yy_action_348(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "tvar_binder",
  "rule_index": 105,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 752|    CARET {}
fn yy_action_349(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "infixop",
  "rule_index": 116,
  "clause_index": 7,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 304|    fun_header "=" STRING {}
fn yy_action_350(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "structure_item",
  "rule_index": 37,
  "clause_index": 10,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 313|    attributes visibility "traitalias" PACKAGE_NAME batch_trait_alias_targets {}
fn yy_action_351(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_22(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_23(_last_pos, _args[0:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "structure_item",
  "rule_index": 37,
  "clause_index": 19,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 312|    attributes visibility "typealias" PACKAGE_NAME batch_type_alias_targets {}
fn yy_action_352(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_27(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_47(_args[0].2, _args[1:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "structure_item",
  "rule_index": 37,
  "clause_index": 18,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 662|    simple_expr DOT_LIDENT apply_attr "(" list_commas(argument) ")" {}
fn yy_action_353(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_160(_args[1].2, _args[2:3])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "simple_expr",
  "rule_index": 101,
  "clause_index": 16,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 866|    visibility option("mut") LIDENT ":" type_ {}
fn yy_action_354(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_47(_last_pos, _args[0:1])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "record_decl_field",
  "rule_index": 131,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 648|    ioption(terminated(type_name, COLONCOLON)) "{" ".." expr "}" {}
fn yy_action_355(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_356(_last_pos, _args[0:0])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "simple_expr",
  "rule_index": 101,
  "clause_index": 2,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 666|    "(" list_commas(expr) ")" {}
fn yy_action_357(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "simple_expr",
  "rule_index": 101,
  "clause_index": 20,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 601|    range_expr "as" type_name {}
fn yy_action_358(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "postfix_expr",
  "rule_index": 93,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 248|    attributes visibility is_async "fn" fun_binder optional_bang optional_type_parameters option(parameters) option(preceded("->", return_type)) {}
fn yy_action_359(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_27(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_32(_args[0].2, _args[1:1])
  let _sub_action_2_result = yy_action_10(_args[0].2, _args[1:1])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "fun_header",
  "rule_index": 27,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 258|    attributes visibility "extern" STRING "fn" fun_binder optional_bang optional_type_parameters option(parameters) option(preceded("->", return_type)) {}
fn yy_action_360(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_22(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_32(_last_pos, _args[0:0])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "extern_fun_header",
  "rule_index": 29,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 311|    attributes visibility "traitalias" luident "=" type_name {}
fn yy_action_361(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_22(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_23(_last_pos, _args[0:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "structure_item",
  "rule_index": 37,
  "clause_index": 17,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 135|    X {}
fn yy_action_362(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_commas_rev",
  "rule_index": 2,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 136|    non_empty_list_commas_rev(X) "," X {}
fn yy_action_363(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_commas_rev",
  "rule_index": 2,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 310|    attributes visibility "trait" luident option(preceded(COLON, separated_nonempty_list(PLUS, tvar_constraint))) "{" list_semis(trait_method_decl) "}" {}
fn yy_action_364(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_27(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_32(_args[0].2, _args[1:1])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "structure_item",
  "rule_index": 37,
  "clause_index": 16,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 831|    ".." {}
fn yy_action_365(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "dotdot_binder",
  "rule_index": 126,
  "clause_index": 3,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 937|    pattern {}
fn yy_action_366(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "constr_pat_argument",
  "rule_index": 146,
  "clause_index": 2,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 463|    is_async "fn" binder optional_bang parameters option(preceded("->", return_type)) block_expr {}
fn yy_action_367(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_10(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_6(_args[0].2, _args[1:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "statement",
  "rule_index": 67,
  "clause_index": 2,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 330|    "priv" {}
fn yy_action_47(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "visibility",
  "rule_index": 40,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 194|    non_empty_list_semis(X) {}
fn yy_action_368(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "list_semis",
  "rule_index": 15,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 357|    attributes visibility "enum" luident optional_type_parameters_no_constraints {}
fn yy_action_369(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_22(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_23(_last_pos, _args[0:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "enum_header",
  "rule_index": 46,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 5|    X { Some($1) }
fn yy_action_370(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_148(_last_pos, _args[0:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "option",
  "rule_index": 0,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 248|    attributes visibility is_async "fn" fun_binder optional_bang optional_type_parameters option(parameters) option(preceded("->", return_type)) {}
fn yy_action_371(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_27(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_23(_args[0].2, _args[1:3])
  let _sub_action_2_result = yy_action_10(_args[2].2, _args[3:3])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "fun_header",
  "rule_index": 27,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 136|    non_empty_list_commas_rev(X) "," X {}
fn yy_action_372(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_commas_rev",
  "rule_index": 2,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 444|    none_empty_list_semis_rev_with_trailing_info(statement) {}
fn yy_action_87(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "semi_expr_semi_opt",
  "rule_index": 63,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 750|    MINUS {}
fn yy_action_373(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "infixop",
  "rule_index": 116,
  "clause_index": 5,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 690|    luident {}
fn yy_action_374(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "type_decl_binder",
  "rule_index": 106,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 144|    non_empty_list_commas_rev(X) option(",") {}
fn yy_action_375(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_commas",
  "rule_index": 4,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 193|     {}
fn yy_action_376(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "list_semis",
  "rule_index": 15,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 248|    attributes visibility is_async "fn" fun_binder optional_bang optional_type_parameters option(parameters) option(preceded("->", return_type)) {}
fn yy_action_377(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_22(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_47(_last_pos, _args[0:1])
  let _sub_action_2_result = yy_action_10(_args[0].2, _args[1:1])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "fun_header",
  "rule_index": 27,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 5|    X { Some($1) }
fn yy_action_378(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_379(_last_pos, _args[0:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "option",
  "rule_index": 0,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 349|    attributes visibility "typealias" luident optional_type_parameters_no_constraints {}
fn yy_action_380(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_22(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_23(_last_pos, _args[0:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "type_alias_header",
  "rule_index": 44,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 805|    BYTES {}
fn yy_action_381(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "simple_pattern",
  "rule_index": 124,
  "clause_index": 9,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 903|    non_empty_list_commas_with_tail(fields_pat_single) ".." option(",") {}
fn yy_action_382(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_fields_pat",
  "rule_index": 139,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 302|    val_header "=" expr {}
fn yy_action_383(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "structure_item",
  "rule_index": 37,
  "clause_index": 8,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 210|    "_" opt_annot {}
fn yy_action_384(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_24(_args[0].2, _args[1:3])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "parameter",
  "rule_index": 19,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 140|    non_empty_list_commas_rev(X) {}
fn yy_action_385(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_commas_no_trailing",
  "rule_index": 3,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 654|    atomic_expr {}
fn yy_action_386(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "simple_expr",
  "rule_index": 101,
  "clause_index": 8,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 9|    { None }
fn yy_action_208(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "ioption",
  "rule_index": 1,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 720|    TRUE {}
fn yy_action_387(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "simple_constant",
  "rule_index": 112,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 705|    "&" qual_ident_ty {}
fn yy_action_388(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "type_name",
  "rule_index": 109,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 536|    "if" infix_expr block_expr {}
fn yy_action_389(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "if_expr",
  "rule_index": 80,
  "clause_index": 2,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 136|    non_empty_list_commas_rev(X) "," X {}
fn yy_action_390(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_commas_rev",
  "rule_index": 2,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 544|    match_header non_empty_list_semis(single_pattern_case) "}" {}
fn yy_action_391(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_392(_last_pos, _args[0:3])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "match_expr",
  "rule_index": 82,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 824|    ".." PACKAGE_NAME DOT_UIDENT {}
fn yy_action_393(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "array_sub_pattern",
  "rule_index": 125,
  "clause_index": 4,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 152|     {}
fn yy_action_394(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "list_commas",
  "rule_index": 6,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 313|    attributes visibility "traitalias" PACKAGE_NAME batch_trait_alias_targets {}
fn yy_action_395(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_27(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_47(_args[0].2, _args[1:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "structure_item",
  "rule_index": 37,
  "clause_index": 19,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 822|    ".." BYTES {}
fn yy_action_396(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "array_sub_pattern",
  "rule_index": 125,
  "clause_index": 2,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 4|    { None }
fn yy_action_397(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "option",
  "rule_index": 0,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 714|    simple_constant {}
fn yy_action_398(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "atomic_expr",
  "rule_index": 111,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 126|    X {}
fn yy_action_399(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_rev",
  "rule_index": 0,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 655|    "_" {}
fn yy_action_400(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "simple_expr",
  "rule_index": 101,
  "clause_index": 9,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 659|    simple_expr apply_attr "(" list_commas(argument) ")" {}
fn yy_action_401(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_67(_args[0].2, _args[1:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "simple_expr",
  "rule_index": 101,
  "clause_index": 13,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 315|    attributes visibility "impl" optional_type_parameters type_name "for" type_ "with" binder optional_bang parameters option(preceded("->", return_type)) impl_body {}
fn yy_action_402(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_22(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_32(_last_pos, _args[0:0])
  let _sub_action_2_result = yy_action_6(_args[5].2, _args[6:7])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "structure_item",
  "rule_index": 37,
  "clause_index": 21,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 4|    { None }
fn yy_action_403(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "option",
  "rule_index": 0,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 286|    attributes visibility "const" UIDENT opt_annot {}
fn yy_action_404(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_27(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_32(_args[0].2, _args[1:1])
  let _sub_action_2_result = yy_action_24(_args[2].2, _args[3:5])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "val_header",
  "rule_index": 35,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 385|    PACKAGE_NAME ".(" non_empty_list_commas(func_alias_target(LIDENT)) ")" {}
fn yy_action_405(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "func_alias_targets",
  "rule_index": 51,
  "clause_index": 4,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 40|    L X R { $2 }
fn yy_action_13(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "delimited",
  "rule_index": 8,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 586|   match_expr {}
fn yy_action_406(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "expr",
  "rule_index": 90,
  "clause_index": 6,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 40|    L X R { $2 }
fn yy_action_407(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "delimited",
  "rule_index": 8,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 357|    attributes visibility "enum" luident optional_type_parameters_no_constraints {}
fn yy_action_408(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_27(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_32(_args[0].2, _args[1:1])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "enum_header",
  "rule_index": 46,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 345|    attributes visibility "type" "!" luident {}
fn yy_action_409(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_27(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_47(_args[0].2, _args[1:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "type_header_bang",
  "rule_index": 43,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 144|    non_empty_list_commas_rev(X) option(",") {}
fn yy_action_410(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_commas",
  "rule_index": 4,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 463|    is_async "fn" binder optional_bang parameters option(preceded("->", return_type)) block_expr {}
fn yy_action_411(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_38(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_6(_args[1].2, _args[2:3])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "statement",
  "rule_index": 67,
  "clause_index": 2,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 193|     {}
fn yy_action_412(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "list_semis",
  "rule_index": 15,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 144|    non_empty_list_commas_rev(X) option(",") {}
fn yy_action_413(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_commas",
  "rule_index": 4,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 144|    non_empty_list_commas_rev(X) option(",") {}
fn yy_action_414(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_commas",
  "rule_index": 4,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 759|    "?" {}
fn yy_action_415(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "optional_question",
  "rule_index": 117,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 641|    "!" "!" {}
fn yy_action_126(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "apply_attr",
  "rule_index": 100,
  "clause_index": 2,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 135|    X {}
fn yy_action_416(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_commas_rev",
  "rule_index": 2,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 315|    attributes visibility "impl" optional_type_parameters type_name "for" type_ "with" binder optional_bang parameters option(preceded("->", return_type)) impl_body {}
fn yy_action_417(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_22(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_23(_last_pos, _args[0:2])
  let _sub_action_2_result = yy_action_6(_args[7].2, _args[8:9])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "structure_item",
  "rule_index": 37,
  "clause_index": 21,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 640|    "!" {}
fn yy_action_160(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "apply_attr",
  "rule_index": 100,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 144|    non_empty_list_commas_rev(X) option(",") {}
fn yy_action_418(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_commas",
  "rule_index": 4,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 341|    attributes visibility "type" luident optional_type_parameters_no_constraints {}
fn yy_action_419(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_22(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_47(_last_pos, _args[0:1])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "type_header",
  "rule_index": 42,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 309|    attributes visibility "fnalias" func_alias_targets {}
fn yy_action_420(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_27(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_32(_args[0].2, _args[1:1])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "structure_item",
  "rule_index": 37,
  "clause_index": 15,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 136|    non_empty_list_commas_rev(X) "," X {}
fn yy_action_421(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_commas_rev",
  "rule_index": 2,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 866|    visibility option("mut") LIDENT ":" type_ {}
fn yy_action_422(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_32(_last_pos, _args[0:0])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "record_decl_field",
  "rule_index": 131,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 816|    "{" non_empty_map_elems_pat "}" {}
fn yy_action_423(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "simple_pattern",
  "rule_index": 124,
  "clause_index": 20,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 481|    left_value assignop expr {}
fn yy_action_93(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_322(_args[0].2, _args[1:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "augmented_assignment_expr",
  "rule_index": 70,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 10|    X { Some($1) }
fn yy_action_162(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_204(_last_pos, _args[0:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "ioption",
  "rule_index": 1,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 619|    PLUS {}
fn yy_action_305(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "plus",
  "rule_index": 96,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 5|    X { Some($1) }
fn yy_action_424(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "option",
  "rule_index": 0,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 5|    X { Some($1) }
fn yy_action_425(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "option",
  "rule_index": 0,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 153|    non_empty_list_commas(X) {}
fn yy_action_426(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "list_commas",
  "rule_index": 6,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 696|    UIDENT "?" {}
fn yy_action_427(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "tvar_constraint",
  "rule_index": 107,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 4|    { None }
fn yy_action_428(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "option",
  "rule_index": 0,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 659|    simple_expr apply_attr "(" list_commas(argument) ")" {}
fn yy_action_429(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_126(_args[0].2, _args[1:3])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "simple_expr",
  "rule_index": 101,
  "clause_index": 13,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 753|    BAR {}
fn yy_action_430(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "infixop",
  "rule_index": 116,
  "clause_index": 8,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 349|    attributes visibility "typealias" luident optional_type_parameters_no_constraints {}
fn yy_action_431(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_27(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_47(_args[0].2, _args[1:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "type_alias_header",
  "rule_index": 44,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 248|    attributes visibility is_async "fn" fun_binder optional_bang optional_type_parameters option(parameters) option(preceded("->", return_type)) {}
fn yy_action_432(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_22(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_32(_last_pos, _args[0:0])
  let _sub_action_2_result = yy_action_38(_last_pos, _args[0:1])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "fun_header",
  "rule_index": 27,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 596|    infix_expr infixop infix_expr {}
fn yy_action_433(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_373(_args[0].2, _args[1:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "infix_expr",
  "rule_index": 92,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 585|   if_expr {}
fn yy_action_434(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "expr",
  "rule_index": 90,
  "clause_index": 5,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 297|    type_header_bang option(type_) deriving_directive_list {}
fn yy_action_435(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "structure_item",
  "rule_index": 37,
  "clause_index": 3,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 856|    is_async "(" type_ "," ioption(non_empty_list_commas(type_)) ")" "->" return_type {}
fn yy_action_436(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_10(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_208(_args[2].2, _args[3:3])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "type_",
  "rule_index": 130,
  "clause_index": 2,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 153|    non_empty_list_commas(X) {}
fn yy_action_437(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "list_commas",
  "rule_index": 6,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 176|    non_empty_list_semi_rev_aux(X) option(SEMI) {}
fn yy_action_438(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_semis_rev",
  "rule_index": 11,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 653|    is_async fn_header_no_binder list_semis(multi_pattern_case) "}" {}
fn yy_action_439(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_10(_last_pos, _args[0:0])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "simple_expr",
  "rule_index": 101,
  "clause_index": 7,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 194|    non_empty_list_semis(X) {}
fn yy_action_440(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "list_semis",
  "rule_index": 15,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 596|    infix_expr infixop infix_expr {}
fn yy_action_441(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_228(_args[0].2, _args[1:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "infix_expr",
  "rule_index": 92,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 921|    non_empty_list_commas_with_tail(map_elem_pat) ".." option(",") {}
fn yy_action_442(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_map_elems_pat",
  "rule_index": 143,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 596|    infix_expr infixop infix_expr {}
fn yy_action_443(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_349(_args[0].2, _args[1:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "infix_expr",
  "rule_index": 92,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 258|    attributes visibility "extern" STRING "fn" fun_binder optional_bang optional_type_parameters option(parameters) option(preceded("->", return_type)) {}
fn yy_action_444(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_22(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_23(_last_pos, _args[0:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "extern_fun_header",
  "rule_index": 29,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 172|    non_empty_list_semi_rev_aux(X) SEMI X {}
fn yy_action_445(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_semi_rev_aux",
  "rule_index": 10,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 830|    ".." "as" binder {}
fn yy_action_446(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_6(_args[1].2, _args[2:3])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "dotdot_binder",
  "rule_index": 126,
  "clause_index": 2,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 628|    simple_expr accessor {}
fn yy_action_447(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_100(_args[0].2, _args[1:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "left_value",
  "rule_index": 98,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 206|    ioption(annot) {}
fn yy_action_28(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_188(_last_pos, _args[0:0])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "opt_annot",
  "rule_index": 18,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 908|   fpat_label_pun {}
fn yy_action_448(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_449(_last_pos, _args[0:1])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "fields_pat_single",
  "rule_index": 140,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 837|    array_sub_pattern "," array_sub_patterns {}
fn yy_action_450(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "array_sub_patterns",
  "rule_index": 127,
  "clause_index": 2,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 709|    MULTILINE_STRING {}
fn yy_action_451(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "multiline_string",
  "rule_index": 110,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 300|    struct_header "{" list_semis(record_decl_field) "}" deriving_directive_list {}
fn yy_action_452(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "structure_item",
  "rule_index": 37,
  "clause_index": 6,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 357|    attributes visibility "enum" luident optional_type_parameters_no_constraints {}
fn yy_action_453(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_22(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_47(_last_pos, _args[0:1])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "enum_header",
  "rule_index": 46,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 4|    { None }
fn yy_action_454(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "option",
  "rule_index": 0,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 5|    X { Some($1) }
fn yy_action_455(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_226(_last_pos, _args[0:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "option",
  "rule_index": 0,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 268|    local_type_decl SEMI local_types_and_stmts {}
fn yy_action_456(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "local_types_and_stmts",
  "rule_index": 31,
  "clause_index": 2,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 353|    attributes visibility "struct" luident optional_type_parameters_no_constraints {}
fn yy_action_457(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_27(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_32(_args[0].2, _args[1:1])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "struct_header",
  "rule_index": 45,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 312|    attributes visibility "typealias" PACKAGE_NAME batch_type_alias_targets {}
fn yy_action_458(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_22(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_23(_last_pos, _args[0:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "structure_item",
  "rule_index": 37,
  "clause_index": 18,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 59|    X { Cons($1, Nil) }
fn yy_action_459(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "separated_nonempty_list",
  "rule_index": 12,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 835|     {}
fn yy_action_460(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "array_sub_patterns",
  "rule_index": 127,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 258|    attributes visibility "extern" STRING "fn" fun_binder optional_bang optional_type_parameters option(parameters) option(preceded("->", return_type)) {}
fn yy_action_461(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_22(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_47(_last_pos, _args[0:1])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "extern_fun_header",
  "rule_index": 29,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 253|    "enum" luident "{" list_semis(enum_constructor) "}" deriving_directive_list {}
fn yy_action_462(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "local_type_decl",
  "rule_index": 28,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 461|    "let" pattern opt_annot "=" expr {}
fn yy_action_463(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_28(_args[1].2, _args[2:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "statement",
  "rule_index": 67,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 668|    "[" list_commas(spreadable_elem) "]" {}
fn yy_action_464(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "simple_expr",
  "rule_index": 101,
  "clause_index": 22,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 140|    non_empty_list_commas_rev(X) {}
fn yy_action_465(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_commas_no_trailing",
  "rule_index": 3,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 311|    attributes visibility "traitalias" luident "=" type_name {}
fn yy_action_466(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_22(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_47(_last_pos, _args[0:1])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "structure_item",
  "rule_index": 37,
  "clause_index": 17,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 349|    attributes visibility "typealias" luident optional_type_parameters_no_constraints {}
fn yy_action_467(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_27(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_23(_args[0].2, _args[1:3])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "type_alias_header",
  "rule_index": 44,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 812|    "[" array_sub_patterns "]" {}
fn yy_action_468(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "simple_pattern",
  "rule_index": 124,
  "clause_index": 16,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 489|    "return" option(expr) {}
fn yy_action_469(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "expr_statement",
  "rule_index": 71,
  "clause_index": 4,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 316|    attributes visibility "impl" optional_type_parameters type_name "with" binder optional_bang parameters option(preceded("->", return_type)) impl_body {}
fn yy_action_470(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_27(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_32(_args[0].2, _args[1:1])
  let _sub_action_2_result = yy_action_6(_args[4].2, _args[5:6])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "structure_item",
  "rule_index": 37,
  "clause_index": 22,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 212|    POST_LABEL opt_annot {}
fn yy_action_471(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_28(_args[0].2, _args[1:1])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "parameter",
  "rule_index": 19,
  "clause_index": 2,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 10|    X { Some($1) }
fn yy_action_331(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "ioption",
  "rule_index": 1,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 345|    attributes visibility "type" "!" luident {}
fn yy_action_472(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_27(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_23(_args[0].2, _args[1:3])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "type_header_bang",
  "rule_index": 43,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 929|    constr_pat_argument option(",") {}
fn yy_action_473(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "constr_pat_arguments",
  "rule_index": 145,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 596|    infix_expr infixop infix_expr {}
fn yy_action_474(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_475(_args[0].2, _args[1:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "infix_expr",
  "rule_index": 92,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 662|    simple_expr DOT_LIDENT apply_attr "(" list_commas(argument) ")" {}
fn yy_action_476(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_67(_args[1].2, _args[2:3])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "simple_expr",
  "rule_index": 101,
  "clause_index": 16,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 828|    ".." binder {}
fn yy_action_477(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_6(_args[0].2, _args[1:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "dotdot_binder",
  "rule_index": 126,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 727|    STRING {}
fn yy_action_478(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "simple_constant",
  "rule_index": 112,
  "clause_index": 7,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 212|    POST_LABEL opt_annot {}
fn yy_action_479(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_24(_args[0].2, _args[1:3])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "parameter",
  "rule_index": 19,
  "clause_index": 2,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 809|    "(" pattern ")" {}
fn yy_action_480(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "simple_pattern",
  "rule_index": 124,
  "clause_index": 13,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 499|     {}
fn yy_action_481(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "loop_label_colon",
  "rule_index": 72,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 367|    luident optional_type_parameters_no_constraints {}
fn yy_action_482(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "batch_type_alias_target",
  "rule_index": 48,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 676|    DOT_LIDENT {}
fn yy_action_483(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "accessor",
  "rule_index": 103,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 652|    is_async "fn" optional_bang parameters option(preceded("->", return_type)) block_expr {}
fn yy_action_484(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_38(_last_pos, _args[0:1])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "simple_expr",
  "rule_index": 101,
  "clause_index": 6,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 647|    type_name COLONCOLON "{" list_commas_with_trailing_info(record_defn_single) "}" {}
fn yy_action_485(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "simple_expr",
  "rule_index": 101,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 615|    simple_expr {}
fn yy_action_486(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "prefix_expr",
  "rule_index": 95,
  "clause_index": 2,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 285|    attributes visibility "let" binder opt_annot {}
fn yy_action_487(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_27(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_32(_args[0].2, _args[1:1])
  let _sub_action_2_result = yy_action_6(_args[1].2, _args[2:3])
  let _sub_action_3_result = yy_action_28(_args[2].2, _args[3:3])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "val_header",
  "rule_index": 35,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 144|    non_empty_list_commas_rev(X) option(",") {}
fn yy_action_488(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_commas",
  "rule_index": 4,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 613|    id(plus) prefix_expr {}
fn yy_action_489(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_304(_last_pos, _args[0:1])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "prefix_expr",
  "rule_index": 95,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 136|    non_empty_list_commas_rev(X) "," X {}
fn yy_action_490(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_commas_rev",
  "rule_index": 2,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 144|    non_empty_list_commas_rev(X) option(",") {}
fn yy_action_491(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_commas",
  "rule_index": 4,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 158|    non_empty_list_commas_no_trailing(X) {}
fn yy_action_492(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "list_commas_no_trailing",
  "rule_index": 7,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 320|     {}
fn yy_action_22(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "attributes",
  "rule_index": 38,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 213|    POST_LABEL opt_annot "=" expr {}
fn yy_action_493(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_28(_args[0].2, _args[1:1])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "parameter",
  "rule_index": 19,
  "clause_index": 3,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 244|    binder {}
fn yy_action_494(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_6(_last_pos, _args[0:1])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "fun_binder",
  "rule_index": 26,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 309|    attributes visibility "fnalias" func_alias_targets {}
fn yy_action_495(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_22(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_23(_last_pos, _args[0:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "structure_item",
  "rule_index": 37,
  "clause_index": 15,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 135|    X {}
fn yy_action_496(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_commas_rev",
  "rule_index": 2,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 135|    X {}
fn yy_action_497(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_commas_rev",
  "rule_index": 2,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 677|    DOT_INT {}
fn yy_action_100(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "accessor",
  "rule_index": 103,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 262|    "{" list_semis_rev(statement) "}" {}
fn yy_action_498(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "block_expr",
  "rule_index": 30,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 792|    simple_pattern {}
fn yy_action_499(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "range_pattern",
  "rule_index": 123,
  "clause_index": 2,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 596|    infix_expr infixop infix_expr {}
fn yy_action_500(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_14(_args[0].2, _args[1:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "infix_expr",
  "rule_index": 92,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 662|    simple_expr DOT_LIDENT apply_attr "(" list_commas(argument) ")" {}
fn yy_action_501(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_502(_args[1].2, _args[2:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "simple_expr",
  "rule_index": 101,
  "clause_index": 16,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 60|    X SEP separated_nonempty_list(SEP, X) { Cons($1, $3) }
fn yy_action_503(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "separated_nonempty_list",
  "rule_index": 12,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 345|    attributes visibility "type" "!" luident {}
fn yy_action_504(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_22(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_23(_last_pos, _args[0:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "type_header_bang",
  "rule_index": 43,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 144|    non_empty_list_commas_rev(X) option(",") {}
fn yy_action_505(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_commas",
  "rule_index": 4,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 916|    label {}
fn yy_action_449(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_247(_last_pos, _args[0:1])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "fpat_label_pun",
  "rule_index": 142,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 535|   "if" infix_expr block_expr "else" if_expr {}
fn yy_action_506(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "if_expr",
  "rule_index": 80,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 144|    non_empty_list_commas_rev(X) option(",") {}
fn yy_action_507(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_commas",
  "rule_index": 4,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 321|    non_empty_list(attribute) {}
fn yy_action_27(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "attributes",
  "rule_index": 38,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 176|    non_empty_list_semi_rev_aux(X) option(SEMI) {}
fn yy_action_508(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_semis_rev",
  "rule_index": 11,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 266|    local_type_decl {}
fn yy_action_509(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "local_types_and_stmts",
  "rule_index": 31,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 315|    attributes visibility "impl" optional_type_parameters type_name "for" type_ "with" binder optional_bang parameters option(preceded("->", return_type)) impl_body {}
fn yy_action_510(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_27(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_47(_args[0].2, _args[1:2])
  let _sub_action_2_result = yy_action_6(_args[7].2, _args[8:9])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "structure_item",
  "rule_index": 37,
  "clause_index": 21,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 135|    X {}
fn yy_action_511(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_commas_rev",
  "rule_index": 2,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 716|    INTERP {}
fn yy_action_512(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "atomic_expr",
  "rule_index": 111,
  "clause_index": 2,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 419|    POST_LABEL ":" type_ {}
fn yy_action_513(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "trait_method_param",
  "rule_index": 58,
  "clause_index": 2,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 172|    non_empty_list_semi_rev_aux(X) SEMI X {}
fn yy_action_514(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_semi_rev_aux",
  "rule_index": 10,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 4|    { None }
fn yy_action_515(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "option",
  "rule_index": 0,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 875|    UIDENT option(delimited("(", non_empty_list_commas(constructor_param), ")")) option(eq_int_tag) {}
fn yy_action_516(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "enum_constructor",
  "rule_index": 133,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 211|    binder opt_annot {}
fn yy_action_517(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_6(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_28(_args[0].2, _args[1:1])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "parameter",
  "rule_index": 19,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 315|    attributes visibility "impl" optional_type_parameters type_name "for" type_ "with" binder optional_bang parameters option(preceded("->", return_type)) impl_body {}
fn yy_action_518(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_27(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_32(_args[0].2, _args[1:1])
  let _sub_action_2_result = yy_action_6(_args[6].2, _args[7:8])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "structure_item",
  "rule_index": 37,
  "clause_index": 21,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 313|    attributes visibility "traitalias" PACKAGE_NAME batch_trait_alias_targets {}
fn yy_action_519(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_22(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_32(_last_pos, _args[0:0])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "structure_item",
  "rule_index": 37,
  "clause_index": 19,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 258|    attributes visibility "extern" STRING "fn" fun_binder optional_bang optional_type_parameters option(parameters) option(preceded("->", return_type)) {}
fn yy_action_520(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_27(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_32(_args[0].2, _args[1:1])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "extern_fun_header",
  "rule_index": 29,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 131|    non_empty_list_rev(X) {}
fn yy_action_521(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list",
  "rule_index": 1,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 362|    DOT_UIDENT optional_type_parameters_no_constraints {}
fn yy_action_522(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "batch_type_alias_targets",
  "rule_index": 47,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 325|    ATTRIBUTE {}
fn yy_action_55(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "attribute",
  "rule_index": 39,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 519|    "catch" "{" {}
fn yy_action_523(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "catch_keyword",
  "rule_index": 77,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 285|    attributes visibility "let" binder opt_annot {}
fn yy_action_524(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_27(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_32(_args[0].2, _args[1:1])
  let _sub_action_2_result = yy_action_6(_args[1].2, _args[2:3])
  let _sub_action_3_result = yy_action_24(_args[2].2, _args[3:5])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "val_header",
  "rule_index": 35,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 614|    id(minus) prefix_expr {}
fn yy_action_525(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_166(_last_pos, _args[0:1])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "prefix_expr",
  "rule_index": 95,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 152|     {}
fn yy_action_526(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "list_commas",
  "rule_index": 6,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 390|    LIDENT_MAYBE_DOT "::" {}
fn yy_action_527(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "func_alias_type_name",
  "rule_index": 52,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 664|    simple_expr accessor %prec prec_field {}
fn yy_action_528(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_483(_args[0].2, _args[1:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "simple_expr",
  "rule_index": 101,
  "clause_index": 18,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 576|    "_" {}
fn yy_action_529(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "foreach_binder",
  "rule_index": 89,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 470|    "guard" infix_expr {}
fn yy_action_530(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "guard_statement",
  "rule_index": 68,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 889|    labeled_expr {}
fn yy_action_531(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_297(_last_pos, _args[0:3])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "record_defn_single",
  "rule_index": 136,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 649|    ioption(terminated(type_name, COLONCOLON)) "{" ".." expr "," list_commas(record_defn_single) "}" {}
fn yy_action_532(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_356(_last_pos, _args[0:0])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "simple_expr",
  "rule_index": 101,
  "clause_index": 3,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 135|    X {}
fn yy_action_533(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_commas_rev",
  "rule_index": 2,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 184|    non_empty_list_semis_rev(X) {}
fn yy_action_534(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_semis",
  "rule_index": 13,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 198|    x {}
fn yy_action_300(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "id",
  "rule_index": 16,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 306|    extern_fun_header "=" STRING {}
fn yy_action_535(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "structure_item",
  "rule_index": 37,
  "clause_index": 12,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 515|    non_empty_list_commas(pattern) option(preceded("if", expr)) "=>" expr_statement {}
fn yy_action_536(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "multi_pattern_case",
  "rule_index": 76,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 373|    ".(" non_empty_list_commas(batch_trait_alias_target) ")" {}
fn yy_action_537(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "batch_trait_alias_targets",
  "rule_index": 49,
  "clause_index": 2,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 184|    non_empty_list_semis_rev(X) {}
fn yy_action_538(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_semis",
  "rule_index": 13,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 4|    { None }
fn yy_action_539(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "option",
  "rule_index": 0,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 386|    PACKAGE_NAME func_alias_type_name(DOT_LIDENT, DOT_UIDENT) "(" non_empty_list_commas(func_alias_target(LIDENT)) ")" {}
fn yy_action_540(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "func_alias_targets",
  "rule_index": 51,
  "clause_index": 5,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 413|    "_" {}
fn yy_action_541(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "wildcard",
  "rule_index": 57,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 285|    attributes visibility "let" binder opt_annot {}
fn yy_action_542(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_27(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_47(_args[0].2, _args[1:2])
  let _sub_action_2_result = yy_action_6(_args[2].2, _args[3:4])
  let _sub_action_3_result = yy_action_28(_args[3].2, _args[4:4])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "val_header",
  "rule_index": 35,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 633|    UIDENT {}
fn yy_action_543(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "constr",
  "rule_index": 99,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 316|    attributes visibility "impl" optional_type_parameters type_name "with" binder optional_bang parameters option(preceded("->", return_type)) impl_body {}
fn yy_action_544(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_27(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_47(_args[0].2, _args[1:2])
  let _sub_action_2_result = yy_action_6(_args[5].2, _args[6:7])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "structure_item",
  "rule_index": 37,
  "clause_index": 22,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 829|    ".." "_" {}
fn yy_action_545(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "dotdot_binder",
  "rule_index": 126,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 857|    is_async "(" ")" "->" return_type {}
fn yy_action_546(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_10(_last_pos, _args[0:0])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "type_",
  "rule_index": 130,
  "clause_index": 3,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 148|    non_empty_list_commas_rev(X) "," {}
fn yy_action_547(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_commas_with_tail",
  "rule_index": 5,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 135|    X {}
fn yy_action_548(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_commas_rev",
  "rule_index": 2,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 623|    MINUS {}
fn yy_action_167(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "minus",
  "rule_index": 97,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 9|    { None }
fn yy_action_356(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "ioption",
  "rule_index": 1,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 836|    array_sub_pattern {}
fn yy_action_549(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "array_sub_patterns",
  "rule_index": 127,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 176|    non_empty_list_semi_rev_aux(X) option(SEMI) {}
fn yy_action_550(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_semis_rev",
  "rule_index": 11,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 838|    dotdot_binder "," non_empty_list_commas(array_sub_pattern) {}
fn yy_action_551(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "array_sub_patterns",
  "rule_index": 127,
  "clause_index": 3,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 485|    "break" POST_LABEL option(expr) {}
fn yy_action_552(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "expr_statement",
  "rule_index": 71,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 530|    "try" expr catch_keyword single_pattern_cases "}" else_keyword single_pattern_cases "}" {}
fn yy_action_553(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_258(_args[4].2, _args[5:7])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "try_expr",
  "rule_index": 79,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 5|    X { Some($1) }
fn yy_action_554(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_288(_last_pos, _args[0:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "option",
  "rule_index": 0,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 4|    { None }
fn yy_action_555(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "option",
  "rule_index": 0,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 314|    attributes "test" option(loced_string) option(parameters) block_expr_with_local_types {}
fn yy_action_556(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_22(_last_pos, _args[0:0])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "structure_item",
  "rule_index": 37,
  "clause_index": 20,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 136|    non_empty_list_commas_rev(X) "," X {}
fn yy_action_557(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_300(_args[1].2, _args[2:3])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_commas_rev",
  "rule_index": 2,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 4|    { None }
fn yy_action_558(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "option",
  "rule_index": 0,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 308|    fun_header block_expr_with_local_types {}
fn yy_action_559(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "structure_item",
  "rule_index": 37,
  "clause_index": 14,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 653|    is_async fn_header_no_binder list_semis(multi_pattern_case) "}" {}
fn yy_action_560(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_38(_last_pos, _args[0:1])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "simple_expr",
  "rule_index": 101,
  "clause_index": 7,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 765|    expr {}
fn yy_action_561(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "argument",
  "rule_index": 118,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 429|    PACKAGE_NAME DOT_LIDENT {}
fn yy_action_562(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "qual_ident",
  "rule_index": 60,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 309|    attributes visibility "fnalias" func_alias_targets {}
fn yy_action_563(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_22(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_47(_last_pos, _args[0:1])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "structure_item",
  "rule_index": 37,
  "clause_index": 15,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 135|    X {}
fn yy_action_564(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_commas_rev",
  "rule_index": 2,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 596|    infix_expr infixop infix_expr {}
fn yy_action_565(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_45(_args[0].2, _args[1:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "infix_expr",
  "rule_index": 92,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 726|    FLOAT {}
fn yy_action_566(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "simple_constant",
  "rule_index": 112,
  "clause_index": 6,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 771|    expr {}
fn yy_action_567(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "spreadable_elem",
  "rule_index": 119,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 549|    "loop" non_empty_list_commas_no_trailing(expr) "{" {}
fn yy_action_91(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "loop_header",
  "rule_index": 83,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 172|    non_empty_list_semi_rev_aux(X) SEMI X {}
fn yy_action_568(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_semi_rev_aux",
  "rule_index": 10,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 434|    PACKAGE_NAME DOT_LIDENT {}
fn yy_action_569(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "qual_ident_simple_expr",
  "rule_index": 61,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 341|    attributes visibility "type" luident optional_type_parameters_no_constraints {}
fn yy_action_570(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_22(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_32(_last_pos, _args[0:0])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "type_header",
  "rule_index": 42,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 254|    "type" luident type_ deriving_directive_list {}
fn yy_action_571(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "local_type_decl",
  "rule_index": 28,
  "clause_index": 2,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 231|    option(type_parameters) {}
fn yy_action_572(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "optional_type_parameters",
  "rule_index": 23,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 136|    non_empty_list_commas_rev(X) "," X {}
fn yy_action_573(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_commas_rev",
  "rule_index": 2,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 148|    non_empty_list_commas_rev(X) "," {}
fn yy_action_574(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_commas_with_tail",
  "rule_index": 5,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 171|    X {}
fn yy_action_575(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_semi_rev_aux",
  "rule_index": 10,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 276|    block_expr_with_local_types {}
fn yy_action_576(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "impl_body",
  "rule_index": 33,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 248|    attributes visibility is_async "fn" fun_binder optional_bang optional_type_parameters option(parameters) option(preceded("->", return_type)) {}
fn yy_action_577(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_22(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_23(_last_pos, _args[0:2])
  let _sub_action_2_result = yy_action_10(_args[1].2, _args[2:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "fun_header",
  "rule_index": 27,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 628|    simple_expr accessor {}
fn yy_action_578(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_483(_args[0].2, _args[1:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "left_value",
  "rule_index": 98,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 353|    attributes visibility "struct" luident optional_type_parameters_no_constraints {}
fn yy_action_579(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_22(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_47(_last_pos, _args[0:1])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "struct_header",
  "rule_index": 45,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 382|    PACKAGE_NAME func_alias_target(DOT_LIDENT) {}
fn yy_action_580(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "func_alias_targets",
  "rule_index": 51,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 859|    is_async "(" type_ ")" "->" return_type {}
fn yy_action_581(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_10(_last_pos, _args[0:0])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "type_",
  "rule_index": 130,
  "clause_index": 5,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 663|    simple_expr ".." LIDENT apply_attr "(" list_commas(argument) ")" {}
fn yy_action_582(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_502(_args[2].2, _args[3:3])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "simple_expr",
  "rule_index": 101,
  "clause_index": 17,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 884|    labeled_expr option(",") {}
fn yy_action_583(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_297(_last_pos, _args[0:3])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "record_defn",
  "rule_index": 135,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 341|    attributes visibility "type" luident optional_type_parameters_no_constraints {}
fn yy_action_584(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_27(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_32(_args[0].2, _args[1:1])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "type_header",
  "rule_index": 42,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 5|    X { Some($1) }
fn yy_action_585(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_124(_last_pos, _args[0:3])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "option",
  "rule_index": 0,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 814|    "{" ".." option(",") "}" {}
fn yy_action_586(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "simple_pattern",
  "rule_index": 124,
  "clause_index": 18,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 136|    non_empty_list_commas_rev(X) "," X {}
fn yy_action_587(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_256(_args[1].2, _args[2:3])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_commas_rev",
  "rule_index": 2,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 10|    X { Some($1) }
fn yy_action_83(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "ioption",
  "rule_index": 1,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 721|    FALSE {}
fn yy_action_588(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "simple_constant",
  "rule_index": 112,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 357|    attributes visibility "enum" luident optional_type_parameters_no_constraints {}
fn yy_action_589(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_27(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_47(_args[0].2, _args[1:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "enum_header",
  "rule_index": 46,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 329|     {}
fn yy_action_32(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "visibility",
  "rule_index": 40,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 295|    attributes visibility "extern" "type" luident optional_type_parameters_no_constraints deriving_directive_list {}
fn yy_action_590(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_27(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_47(_args[0].2, _args[1:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "structure_item",
  "rule_index": 37,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 285|    attributes visibility "let" binder opt_annot {}
fn yy_action_591(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_27(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_23(_args[0].2, _args[1:3])
  let _sub_action_2_result = yy_action_6(_args[3].2, _args[4:5])
  let _sub_action_3_result = yy_action_24(_args[4].2, _args[5:7])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "val_header",
  "rule_index": 35,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 286|    attributes visibility "const" UIDENT opt_annot {}
fn yy_action_592(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_22(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_32(_last_pos, _args[0:0])
  let _sub_action_2_result = yy_action_28(_args[1].2, _args[2:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "val_header",
  "rule_index": 35,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 785|    range_pattern "|" or_pattern {}
fn yy_action_593(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "or_pattern",
  "rule_index": 122,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 135|    X {}
fn yy_action_594(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_commas_rev",
  "rule_index": 2,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 477|    left_value "=" expr {}
fn yy_action_78(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "assignment_expr",
  "rule_index": 69,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 400|    type_name "(" list_commas(argument) ")" {}
fn yy_action_595(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "deriving_directive",
  "rule_index": 54,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 194|    non_empty_list_semis(X) {}
fn yy_action_596(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "list_semis",
  "rule_index": 15,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 248|    attributes visibility is_async "fn" fun_binder optional_bang optional_type_parameters option(parameters) option(preceded("->", return_type)) {}
fn yy_action_597(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_27(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_23(_args[0].2, _args[1:3])
  let _sub_action_2_result = yy_action_38(_args[2].2, _args[3:4])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "fun_header",
  "rule_index": 27,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 672|    LIDENT {}
fn yy_action_247(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "label",
  "rule_index": 102,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 214|    LIDENT "?" opt_annot {}
fn yy_action_598(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_28(_args[1].2, _args[2:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "parameter",
  "rule_index": 19,
  "clause_index": 4,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 337|    "(" LIDENT ")" {}
fn yy_action_599(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "pub_attr",
  "rule_index": 41,
  "clause_index": 2,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 248|    attributes visibility is_async "fn" fun_binder optional_bang optional_type_parameters option(parameters) option(preceded("->", return_type)) {}
fn yy_action_600(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_22(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_32(_last_pos, _args[0:0])
  let _sub_action_2_result = yy_action_10(_last_pos, _args[0:0])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "fun_header",
  "rule_index": 27,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 171|    X {}
fn yy_action_601(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_semi_rev_aux",
  "rule_index": 10,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 227|     {}
fn yy_action_10(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "is_async",
  "rule_index": 22,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 391|   UIDENT_MAYBE_DOT "::" {}
fn yy_action_602(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "func_alias_type_name",
  "rule_index": 52,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 357|    attributes visibility "enum" luident optional_type_parameters_no_constraints {}
fn yy_action_603(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_22(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_32(_last_pos, _args[0:0])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "enum_header",
  "rule_index": 46,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 685|    luident {}
fn yy_action_604(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "tvar_binder",
  "rule_index": 105,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 136|    non_empty_list_commas_rev(X) "," X {}
fn yy_action_605(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_606(_args[1].2, _args[2:6])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_commas_rev",
  "rule_index": 2,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 316|    attributes visibility "impl" optional_type_parameters type_name "with" binder optional_bang parameters option(preceded("->", return_type)) impl_body {}
fn yy_action_607(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_22(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_47(_last_pos, _args[0:1])
  let _sub_action_2_result = yy_action_6(_args[4].2, _args[5:6])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "structure_item",
  "rule_index": 37,
  "clause_index": 22,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 310|    attributes visibility "trait" luident option(preceded(COLON, separated_nonempty_list(PLUS, tvar_constraint))) "{" list_semis(trait_method_decl) "}" {}
fn yy_action_608(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_27(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_47(_args[0].2, _args[1:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "structure_item",
  "rule_index": 37,
  "clause_index": 16,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 4|    { None }
fn yy_action_609(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "option",
  "rule_index": 0,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 198|    x {}
fn yy_action_256(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "id",
  "rule_index": 16,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 194|    non_empty_list_semis(X) {}
fn yy_action_610(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "list_semis",
  "rule_index": 15,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 295|    attributes visibility "extern" "type" luident optional_type_parameters_no_constraints deriving_directive_list {}
fn yy_action_611(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_22(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_32(_last_pos, _args[0:0])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "structure_item",
  "rule_index": 37,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 252|    "struct" luident "{" list_semis(record_decl_field) "}" deriving_directive_list {}
fn yy_action_612(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "local_type_decl",
  "rule_index": 28,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 681|    LIDENT {}
fn yy_action_6(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "binder",
  "rule_index": 104,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 540|    "match" infix_expr "{" {}
fn yy_action_392(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "match_header",
  "rule_index": 81,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 36|    X R { $1 }
fn yy_action_137(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "terminated",
  "rule_index": 7,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 4|    { None }
fn yy_action_613(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "option",
  "rule_index": 0,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 136|    non_empty_list_commas_rev(X) "," X {}
fn yy_action_614(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_commas_rev",
  "rule_index": 2,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 135|    X {}
fn yy_action_615(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_commas_rev",
  "rule_index": 2,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 144|    non_empty_list_commas_rev(X) option(",") {}
fn yy_action_616(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_commas",
  "rule_index": 4,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 503|    loop_label_colon "while" infix_expr block_expr optional_else {}
fn yy_action_617(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "while_expr",
  "rule_index": 73,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 32|    L X { $2 }
fn yy_action_379(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_6(_args[0].2, _args[1:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "preceded",
  "rule_index": 6,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 310|    attributes visibility "trait" luident option(preceded(COLON, separated_nonempty_list(PLUS, tvar_constraint))) "{" list_semis(trait_method_decl) "}" {}
fn yy_action_618(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_22(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_47(_last_pos, _args[0:1])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "structure_item",
  "rule_index": 37,
  "clause_index": 16,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 607|    prefix_expr "..<" prefix_expr {}
fn yy_action_619(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "range_expr",
  "rule_index": 94,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 226|    "async" {}
fn yy_action_38(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "is_async",
  "rule_index": 22,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 184|    non_empty_list_semis_rev(X) {}
fn yy_action_620(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_semis",
  "rule_index": 13,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 180|    non_empty_list_semi_rev_aux(X) option(SEMI) {}
fn yy_action_621(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "none_empty_list_semis_rev_with_trailing_info",
  "rule_index": 12,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 597|    postfix_expr {}
fn yy_action_622(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "infix_expr",
  "rule_index": 92,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 171|    X {}
fn yy_action_623(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_semi_rev_aux",
  "rule_index": 10,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 5|    X { Some($1) }
fn yy_action_624(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_407(_last_pos, _args[0:3])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "option",
  "rule_index": 0,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 885|    labeled_expr "," non_empty_list_commas_with_trailing_info(record_defn_single) {}
fn yy_action_625(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_297(_last_pos, _args[0:3])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "record_defn",
  "rule_index": 135,
  "clause_index": 2,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 584|   try_expr {}
fn yy_action_626(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "expr",
  "rule_index": 90,
  "clause_index": 4,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 659|    simple_expr apply_attr "(" list_commas(argument) ")" {}
fn yy_action_627(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_502(_args[0].2, _args[1:1])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "simple_expr",
  "rule_index": 101,
  "clause_index": 13,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 839|    dotdot_binder ioption(",") {}
fn yy_action_628(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_263(_args[0].2, _args[1:1])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "array_sub_patterns",
  "rule_index": 127,
  "clause_index": 4,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 804|    STRING {}
fn yy_action_629(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "simple_pattern",
  "rule_index": 124,
  "clause_index": 8,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 272|    "{" local_types_and_stmts "}" {}
fn yy_action_630(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "block_expr_with_local_types",
  "rule_index": 32,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 171|    X {}
fn yy_action_631(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_semi_rev_aux",
  "rule_index": 10,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 144|    non_empty_list_commas_rev(X) option(",") {}
fn yy_action_632(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_commas",
  "rule_index": 4,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./stdlib.mbty
// 40|    L X R { $2 }
fn yy_action_234(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "delimited",
  "rule_index": 8,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 286|    attributes visibility "const" UIDENT opt_annot {}
fn yy_action_633(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_27(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_23(_args[0].2, _args[1:3])
  let _sub_action_2_result = yy_action_24(_args[4].2, _args[5:7])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "val_header",
  "rule_index": 35,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 303|    fun_header "=" STRING STRING {}
fn yy_action_634(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "structure_item",
  "rule_index": 37,
  "clause_index": 9,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 258|    attributes visibility "extern" STRING "fn" fun_binder optional_bang optional_type_parameters option(parameters) option(preceded("->", return_type)) {}
fn yy_action_635(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_27(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_47(_args[0].2, _args[1:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "extern_fun_header",
  "rule_index": 29,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 135|    X {}
fn yy_action_636(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_commas_rev",
  "rule_index": 2,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 890|   label_pun {}
fn yy_action_637(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_170(_last_pos, _args[0:1])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "record_defn_single",
  "rule_index": 136,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 176|    non_empty_list_semi_rev_aux(X) option(SEMI) {}
fn yy_action_638(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_semis_rev",
  "rule_index": 11,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 295|    attributes visibility "extern" "type" luident optional_type_parameters_no_constraints deriving_directive_list {}
fn yy_action_639(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_22(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_23(_last_pos, _args[0:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "structure_item",
  "rule_index": 37,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 491|    "..." {}
fn yy_action_640(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "expr_statement",
  "rule_index": 71,
  "clause_index": 6,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 314|    attributes "test" option(loced_string) option(parameters) block_expr_with_local_types {}
fn yy_action_641(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_27(_last_pos, _args[0:1])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "structure_item",
  "rule_index": 37,
  "clause_index": 20,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 390|    LIDENT_MAYBE_DOT "::" {}
fn yy_action_642(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "func_alias_type_name",
  "rule_index": 52,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 285|    attributes visibility "let" binder opt_annot {}
fn yy_action_643(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_27(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_23(_args[0].2, _args[1:3])
  let _sub_action_2_result = yy_action_6(_args[3].2, _args[4:5])
  let _sub_action_3_result = yy_action_28(_args[4].2, _args[5:5])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "val_header",
  "rule_index": 35,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 188|     {}
fn yy_action_644(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "list_semis_rev",
  "rule_index": 14,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 545|    match_header "}" {}
fn yy_action_645(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_392(_last_pos, _args[0:3])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "match_expr",
  "rule_index": 82,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 286|    attributes visibility "const" UIDENT opt_annot {}
fn yy_action_646(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_27(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_47(_args[0].2, _args[1:2])
  let _sub_action_2_result = yy_action_24(_args[3].2, _args[4:6])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "val_header",
  "rule_index": 35,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 466|    expr_statement {}
fn yy_action_647(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "statement",
  "rule_index": 67,
  "clause_index": 5,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 862|    "_" {}
fn yy_action_648(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "type_",
  "rule_index": 130,
  "clause_index": 8,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 592|    infix_expr {}
fn yy_action_649(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "pipe_expr",
  "rule_index": 91,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 925|    map_syntax_key option("?") ":" pattern {}
fn yy_action_606(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "map_elem_pat",
  "rule_index": 144,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 494|   expr {}
fn yy_action_650(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "expr_statement",
  "rule_index": 71,
  "clause_index": 9,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 316|    attributes visibility "impl" optional_type_parameters type_name "with" binder optional_bang parameters option(preceded("->", return_type)) impl_body {}
fn yy_action_651(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_22(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_23(_last_pos, _args[0:2])
  let _sub_action_2_result = yy_action_6(_args[5].2, _args[6:7])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "structure_item",
  "rule_index": 37,
  "clause_index": 22,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 746|   INFIX3 {}
fn yy_action_291(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "infixop",
  "rule_index": 116,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 172|    non_empty_list_semi_rev_aux(X) SEMI X {}
fn yy_action_652(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_semi_rev_aux",
  "rule_index": 10,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 433|    LIDENT %prec prec_apply_non_ident_fn {}
fn yy_action_653(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "qual_ident_simple_expr",
  "rule_index": 61,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 566|    loop_label_colon "for" for_binders SEMI option(infix_expr) SEMI list_commas_no_trailing(separated_pair(binder, "=", expr)) block_expr optional_else {}
fn yy_action_654(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "for_expr",
  "rule_index": 87,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 639|     {}
fn yy_action_502(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "apply_attr",
  "rule_index": 100,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 248|    attributes visibility is_async "fn" fun_binder optional_bang optional_type_parameters option(parameters) option(preceded("->", return_type)) {}
fn yy_action_655(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_22(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_47(_last_pos, _args[0:1])
  let _sub_action_2_result = yy_action_38(_args[0].2, _args[1:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "fun_header",
  "rule_index": 27,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 781|    or_pattern {}
fn yy_action_656(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "pattern",
  "rule_index": 121,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 345|    attributes visibility "type" "!" luident {}
fn yy_action_657(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_22(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_32(_last_pos, _args[0:0])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "type_header_bang",
  "rule_index": 43,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 152|     {}
fn yy_action_658(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "list_commas",
  "rule_index": 6,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 498|    POST_LABEL ":" {}
fn yy_action_659(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "loop_label_colon",
  "rule_index": 72,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 802|    "-" INT {}
fn yy_action_660(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "simple_pattern",
  "rule_index": 124,
  "clause_index": 6,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 239|    option(delimited("[", non_empty_list_commas(type_), "]")) {}
fn yy_action_661(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "optional_type_arguments",
  "rule_index": 25,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 449|     {}
fn yy_action_662(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "optional_bang",
  "rule_index": 64,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 931|    constr_pat_argument "," constr_pat_arguments {}
fn yy_action_663(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "constr_pat_arguments",
  "rule_index": 145,
  "clause_index": 2,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 596|    infix_expr infixop infix_expr {}
fn yy_action_664(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_430(_args[0].2, _args[1:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "infix_expr",
  "rule_index": 92,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 810|    "(" pattern "," non_empty_list_commas(pattern) ")" {}
fn yy_action_665(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "simple_pattern",
  "rule_index": 124,
  "clause_index": 14,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 859|    is_async "(" type_ ")" "->" return_type {}
fn yy_action_666(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_38(_last_pos, _args[0:1])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "type_",
  "rule_index": 130,
  "clause_index": 5,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 298|    type_header_bang "{" list_semis(enum_constructor) "}" deriving_directive_list {}
fn yy_action_667(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "structure_item",
  "rule_index": 37,
  "clause_index": 4,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 844|    type_ "!" {}
fn yy_action_668(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "return_type",
  "rule_index": 128,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 377|    luident {}
fn yy_action_669(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "batch_trait_alias_target",
  "rule_index": 50,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 311|    attributes visibility "traitalias" luident "=" type_name {}
fn yy_action_670(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_27(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_32(_args[0].2, _args[1:1])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "structure_item",
  "rule_index": 37,
  "clause_index": 17,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 582|   foreach_expr {}
fn yy_action_671(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "expr",
  "rule_index": 90,
  "clause_index": 2,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 849|    qual_ident_ty {}
fn yy_action_672(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "error_type",
  "rule_index": 129,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 310|    attributes visibility "trait" luident option(preceded(COLON, separated_nonempty_list(PLUS, tvar_constraint))) "{" list_semis(trait_method_decl) "}" {}
fn yy_action_673(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_22(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_23(_last_pos, _args[0:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "structure_item",
  "rule_index": 37,
  "clause_index": 16,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 395|    LIDENT_MAYBE_DOT option(preceded("as", binder)) {}
fn yy_action_674(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "func_alias_target",
  "rule_index": 53,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 663|    simple_expr ".." LIDENT apply_attr "(" list_commas(argument) ")" {}
fn yy_action_675(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_160(_args[2].2, _args[3:4])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "simple_expr",
  "rule_index": 101,
  "clause_index": 17,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 424|   UIDENT {}
fn yy_action_676(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "luident",
  "rule_index": 59,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 665|    type_name "::" LIDENT {}
fn yy_action_677(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "simple_expr",
  "rule_index": 101,
  "clause_index": 19,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 135|    X {}
fn yy_action_678(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_606(_last_pos, _args[0:4])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_commas_rev",
  "rule_index": 2,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 856|    is_async "(" type_ "," ioption(non_empty_list_commas(type_)) ")" "->" return_type {}
fn yy_action_679(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_38(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_11(_args[3].2, _args[4:5])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "type_",
  "rule_index": 130,
  "clause_index": 2,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 823|    ".." UIDENT {}
fn yy_action_680(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "array_sub_pattern",
  "rule_index": 125,
  "clause_index": 3,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 562|     {}
fn yy_action_681(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "optional_else",
  "rule_index": 86,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 372|    DOT_UIDENT {}
fn yy_action_682(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "batch_trait_alias_targets",
  "rule_index": 49,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 152|     {}
fn yy_action_683(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "list_commas",
  "rule_index": 6,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 462|    "let" "mut" binder opt_annot "=" expr {}
fn yy_action_684(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_6(_args[1].2, _args[2:3])
  let _sub_action_1_result = yy_action_28(_args[2].2, _args[3:3])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "statement",
  "rule_index": 67,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 194|    non_empty_list_semis(X) {}
fn yy_action_685(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "list_semis",
  "rule_index": 15,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 596|    infix_expr infixop infix_expr {}
fn yy_action_686(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_312(_args[0].2, _args[1:2])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "infix_expr",
  "rule_index": 92,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 312|    attributes visibility "typealias" PACKAGE_NAME batch_type_alias_targets {}
fn yy_action_687(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_27(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_32(_args[0].2, _args[1:1])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "structure_item",
  "rule_index": 37,
  "clause_index": 18,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 286|    attributes visibility "const" UIDENT opt_annot {}
fn yy_action_688(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_22(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_47(_last_pos, _args[0:1])
  let _sub_action_2_result = yy_action_28(_args[2].2, _args[3:3])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "val_header",
  "rule_index": 35,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 796|    TRUE {}
fn yy_action_689(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "simple_pattern",
  "rule_index": 124,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 312|    attributes visibility "typealias" PACKAGE_NAME batch_type_alias_targets {}
fn yy_action_690(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_22(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_47(_last_pos, _args[0:1])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "structure_item",
  "rule_index": 37,
  "clause_index": 18,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 691|    "_" {}
fn yy_action_691(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "type_decl_binder",
  "rule_index": 106,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 391|   UIDENT_MAYBE_DOT "::" {}
fn yy_action_692(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "func_alias_type_name",
  "rule_index": 52,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 152|     {}
fn yy_action_693(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "list_commas",
  "rule_index": 6,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 902|    non_empty_list_commas(fields_pat_single) {}
fn yy_action_694(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_fields_pat",
  "rule_index": 139,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 448|    "!" {}
fn yy_action_695(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "optional_bang",
  "rule_index": 64,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 171|    X {}
fn yy_action_696(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_semi_rev_aux",
  "rule_index": 10,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 312|    attributes visibility "typealias" PACKAGE_NAME batch_type_alias_targets {}
fn yy_action_697(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_27(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_23(_args[0].2, _args[1:3])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "structure_item",
  "rule_index": 37,
  "clause_index": 18,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 202|    ":" type_ {}
fn yy_action_204(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "annot",
  "rule_index": 17,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 715|    non_empty_list(multiline_string) {}
fn yy_action_698(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "atomic_expr",
  "rule_index": 111,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 144|    non_empty_list_commas_rev(X) option(",") {}
fn yy_action_699(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_commas",
  "rule_index": 4,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 529|    "try" expr catch_keyword single_pattern_cases "}" {}
fn yy_action_700(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "try_expr",
  "rule_index": 79,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 349|    attributes visibility "typealias" luident optional_type_parameters_no_constraints {}
fn yy_action_701(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_22(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_32(_last_pos, _args[0:0])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "type_alias_header",
  "rule_index": 44,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 747|   INFIX2 {}
fn yy_action_106(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "infixop",
  "rule_index": 116,
  "clause_index": 2,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 457|    "fn" optional_bang "{" {}
fn yy_action_702(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "fn_header_no_binder",
  "rule_index": 66,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 309|    attributes visibility "fnalias" func_alias_targets {}
fn yy_action_703(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_27(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_23(_args[0].2, _args[1:3])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "structure_item",
  "rule_index": 37,
  "clause_index": 15,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 511|    list_semis(single_pattern_case) {}
fn yy_action_704(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "single_pattern_cases",
  "rule_index": 75,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 171|    X {}
fn yy_action_705(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_semi_rev_aux",
  "rule_index": 10,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 850|    "_" {}
fn yy_action_706(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "error_type",
  "rule_index": 129,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 751|    AMPER {}
fn yy_action_475(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "infixop",
  "rule_index": 116,
  "clause_index": 6,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 661|    simple_expr "[" option(expr) ":" option(expr) "]" {}
fn yy_action_707(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "simple_expr",
  "rule_index": 101,
  "clause_index": 15,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 135|    X {}
fn yy_action_708(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_commas_rev",
  "rule_index": 2,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 786|    range_pattern {}
fn yy_action_709(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "or_pattern",
  "rule_index": 122,
  "clause_index": 1,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 310|    attributes visibility "trait" luident option(preceded(COLON, separated_nonempty_list(PLUS, tvar_constraint))) "{" list_semis(trait_method_decl) "}" {}
fn yy_action_710(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_27(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_23(_args[0].2, _args[1:3])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "structure_item",
  "rule_index": 37,
  "clause_index": 16,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 898|    label {}
fn yy_action_170(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _sub_action_0_result = yy_action_247(_last_pos, _args[0:1])
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "label_pun",
  "rule_index": 138,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 813|    "{" "}" {}
fn yy_action_711(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "simple_pattern",
  "rule_index": 124,
  "clause_index": 17,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

// file:///./parser.mbty
// 144|    non_empty_list_commas_rev(X) option(",") {}
fn yy_action_712(_last_pos : Unit, _args : ArrayView[(YYObj, Unit, Unit)]) -> YYObj {
  let _start_pos = if _args.length() == 0 { _last_pos } else { _args[0].1 }
  let _end_pos = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }
  YYObj_Json({(); {
  "type": "NONTERMINAL",
  "name": "non_empty_list_commas",
  "rule_index": 4,
  "clause_index": 0,
  "children": args_to_json(_args),
  "start": _start_pos.to_json(),
  "end": _end_pos.to_json(),
}
})
}

fn yy_input(token : Token, _start_pos : Unit, _end_pos : Unit) -> (YYSymbol, YYObj) {
  match token {
    CHAR(data) => (T_CHAR, YYObj_Json({
      "type": "TERMINAL",
      "name": "CHAR",
      "data": data.to_json(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    INT(data) => (T_INT, YYObj_Json({
      "type": "TERMINAL",
      "name": "INT",
      "data": data.to_json(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    BYTE(data) => (T_BYTE, YYObj_Json({
      "type": "TERMINAL",
      "name": "BYTE",
      "data": data.to_json(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    BYTES(data) => (T_BYTES, YYObj_Json({
      "type": "TERMINAL",
      "name": "BYTES",
      "data": data.to_json(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    FLOAT(data) => (T_FLOAT, YYObj_Json({
      "type": "TERMINAL",
      "name": "FLOAT",
      "data": data.to_json(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    DOUBLE(data) => (T_DOUBLE, YYObj_Json({
      "type": "TERMINAL",
      "name": "DOUBLE",
      "data": data.to_json(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    STRING(data) => (T_STRING, YYObj_Json({
      "type": "TERMINAL",
      "name": "STRING",
      "data": data.to_json(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    MULTILINE_STRING(data) => (T_MULTILINE_STRING, YYObj_Json({
      "type": "TERMINAL",
      "name": "MULTILINE_STRING",
      "data": data.to_json(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    MULTILINE_INTERP(data) => (T_MULTILINE_INTERP, YYObj_Json({
      "type": "TERMINAL",
      "name": "MULTILINE_INTERP",
      "data": data.to_json(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    INTERP(data) => (T_INTERP, YYObj_Json({
      "type": "TERMINAL",
      "name": "INTERP",
      "data": data.to_json(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    ATTRIBUTE(data) => (T_ATTRIBUTE, YYObj_Json({
      "type": "TERMINAL",
      "name": "ATTRIBUTE",
      "data": data.to_json(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    LIDENT(data) => (T_LIDENT, YYObj_Json({
      "type": "TERMINAL",
      "name": "LIDENT",
      "data": data.to_json(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    UIDENT(data) => (T_UIDENT, YYObj_Json({
      "type": "TERMINAL",
      "name": "UIDENT",
      "data": data.to_json(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    POST_LABEL(data) => (T_POST_LABEL, YYObj_Json({
      "type": "TERMINAL",
      "name": "POST_LABEL",
      "data": data.to_json(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    COMMENT(data) => (T_COMMENT, YYObj_Json({
      "type": "TERMINAL",
      "name": "COMMENT",
      "data": data.to_json(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    NEWLINE => (T_NEWLINE, YYObj_Json({
      "type": "TERMINAL",
      "name": "NEWLINE",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    INFIX1(data) => (T_INFIX1, YYObj_Json({
      "type": "TERMINAL",
      "name": "INFIX1",
      "data": data.to_json(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    INFIX2(data) => (T_INFIX2, YYObj_Json({
      "type": "TERMINAL",
      "name": "INFIX2",
      "data": data.to_json(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    INFIX3(data) => (T_INFIX3, YYObj_Json({
      "type": "TERMINAL",
      "name": "INFIX3",
      "data": data.to_json(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    INFIX4(data) => (T_INFIX4, YYObj_Json({
      "type": "TERMINAL",
      "name": "INFIX4",
      "data": data.to_json(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    AUGMENTED_ASSIGNMENT(data) => (T_AUGMENTED_ASSIGNMENT, YYObj_Json({
      "type": "TERMINAL",
      "name": "AUGMENTED_ASSIGNMENT",
      "data": data.to_json(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    EOF => (T_EOF, YYObj_Json({
      "type": "TERMINAL",
      "name": "EOF",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    FALSE => (T_FALSE, YYObj_Json({
      "type": "TERMINAL",
      "name": "FALSE",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    TRUE => (T_TRUE, YYObj_Json({
      "type": "TERMINAL",
      "name": "TRUE",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    PUB => (T_PUB, YYObj_Json({
      "type": "TERMINAL",
      "name": "PUB",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    PRIV => (T_PRIV, YYObj_Json({
      "type": "TERMINAL",
      "name": "PRIV",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    READONLY => (T_READONLY, YYObj_Json({
      "type": "TERMINAL",
      "name": "READONLY",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    IMPORT => (T_IMPORT, YYObj_Json({
      "type": "TERMINAL",
      "name": "IMPORT",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    EXTERN => (T_EXTERN, YYObj_Json({
      "type": "TERMINAL",
      "name": "EXTERN",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    BREAK => (T_BREAK, YYObj_Json({
      "type": "TERMINAL",
      "name": "BREAK",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    CONTINUE => (T_CONTINUE, YYObj_Json({
      "type": "TERMINAL",
      "name": "CONTINUE",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    STRUCT => (T_STRUCT, YYObj_Json({
      "type": "TERMINAL",
      "name": "STRUCT",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    ENUM => (T_ENUM, YYObj_Json({
      "type": "TERMINAL",
      "name": "ENUM",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    TRAIT => (T_TRAIT, YYObj_Json({
      "type": "TERMINAL",
      "name": "TRAIT",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    DERIVE => (T_DERIVE, YYObj_Json({
      "type": "TERMINAL",
      "name": "DERIVE",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    IMPL => (T_IMPL, YYObj_Json({
      "type": "TERMINAL",
      "name": "IMPL",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    WITH => (T_WITH, YYObj_Json({
      "type": "TERMINAL",
      "name": "WITH",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    RAISE => (T_RAISE, YYObj_Json({
      "type": "TERMINAL",
      "name": "RAISE",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    THROW => (T_THROW, YYObj_Json({
      "type": "TERMINAL",
      "name": "THROW",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    TRY => (T_TRY, YYObj_Json({
      "type": "TERMINAL",
      "name": "TRY",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    CATCH => (T_CATCH, YYObj_Json({
      "type": "TERMINAL",
      "name": "CATCH",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    ASYNC => (T_ASYNC, YYObj_Json({
      "type": "TERMINAL",
      "name": "ASYNC",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    TYPEALIAS => (T_TYPEALIAS, YYObj_Json({
      "type": "TERMINAL",
      "name": "TYPEALIAS",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    TRAITALIAS => (T_TRAITALIAS, YYObj_Json({
      "type": "TERMINAL",
      "name": "TRAITALIAS",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    FNALIAS => (T_FNALIAS, YYObj_Json({
      "type": "TERMINAL",
      "name": "FNALIAS",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    EQUAL => (T_EQUAL, YYObj_Json({
      "type": "TERMINAL",
      "name": "EQUAL",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    LPAREN => (T_LPAREN, YYObj_Json({
      "type": "TERMINAL",
      "name": "LPAREN",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    RPAREN => (T_RPAREN, YYObj_Json({
      "type": "TERMINAL",
      "name": "RPAREN",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    COMMA => (T_COMMA, YYObj_Json({
      "type": "TERMINAL",
      "name": "COMMA",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    MINUS => (T_MINUS, YYObj_Json({
      "type": "TERMINAL",
      "name": "MINUS",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    QUESTION => (T_QUESTION, YYObj_Json({
      "type": "TERMINAL",
      "name": "QUESTION",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    EXCLAMATION => (T_EXCLAMATION, YYObj_Json({
      "type": "TERMINAL",
      "name": "EXCLAMATION",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    DOT_LIDENT(data) => (T_DOT_LIDENT, YYObj_Json({
      "type": "TERMINAL",
      "name": "DOT_LIDENT",
      "data": data.to_json(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    DOT_UIDENT(data) => (T_DOT_UIDENT, YYObj_Json({
      "type": "TERMINAL",
      "name": "DOT_UIDENT",
      "data": data.to_json(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    DOT_INT(data) => (T_DOT_INT, YYObj_Json({
      "type": "TERMINAL",
      "name": "DOT_INT",
      "data": data.to_json(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    DOT_LPAREN => (T_DOT_LPAREN, YYObj_Json({
      "type": "TERMINAL",
      "name": "DOT_LPAREN",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    COLONCOLON => (T_COLONCOLON, YYObj_Json({
      "type": "TERMINAL",
      "name": "COLONCOLON",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    COLON => (T_COLON, YYObj_Json({
      "type": "TERMINAL",
      "name": "COLON",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    SEMI(data) => (T_SEMI, YYObj_Json({
      "type": "TERMINAL",
      "name": "SEMI",
      "data": data.to_json(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    LBRACKET => (T_LBRACKET, YYObj_Json({
      "type": "TERMINAL",
      "name": "LBRACKET",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    PLUS => (T_PLUS, YYObj_Json({
      "type": "TERMINAL",
      "name": "PLUS",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    RBRACKET => (T_RBRACKET, YYObj_Json({
      "type": "TERMINAL",
      "name": "RBRACKET",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    UNDERSCORE => (T_UNDERSCORE, YYObj_Json({
      "type": "TERMINAL",
      "name": "UNDERSCORE",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    BAR => (T_BAR, YYObj_Json({
      "type": "TERMINAL",
      "name": "BAR",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    LBRACE => (T_LBRACE, YYObj_Json({
      "type": "TERMINAL",
      "name": "LBRACE",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    RBRACE => (T_RBRACE, YYObj_Json({
      "type": "TERMINAL",
      "name": "RBRACE",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    AMPERAMPER => (T_AMPERAMPER, YYObj_Json({
      "type": "TERMINAL",
      "name": "AMPERAMPER",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    AMPER => (T_AMPER, YYObj_Json({
      "type": "TERMINAL",
      "name": "AMPER",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    CARET => (T_CARET, YYObj_Json({
      "type": "TERMINAL",
      "name": "CARET",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    BARBAR => (T_BARBAR, YYObj_Json({
      "type": "TERMINAL",
      "name": "BARBAR",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    PACKAGE_NAME(data) => (T_PACKAGE_NAME, YYObj_Json({
      "type": "TERMINAL",
      "name": "PACKAGE_NAME",
      "data": data.to_json(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    AS => (T_AS, YYObj_Json({
      "type": "TERMINAL",
      "name": "AS",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    PIPE => (T_PIPE, YYObj_Json({
      "type": "TERMINAL",
      "name": "PIPE",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    ELSE => (T_ELSE, YYObj_Json({
      "type": "TERMINAL",
      "name": "ELSE",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    FN => (T_FN, YYObj_Json({
      "type": "TERMINAL",
      "name": "FN",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    IF => (T_IF, YYObj_Json({
      "type": "TERMINAL",
      "name": "IF",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    LET => (T_LET, YYObj_Json({
      "type": "TERMINAL",
      "name": "LET",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    CONST => (T_CONST, YYObj_Json({
      "type": "TERMINAL",
      "name": "CONST",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    MATCH => (T_MATCH, YYObj_Json({
      "type": "TERMINAL",
      "name": "MATCH",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    MUTABLE => (T_MUTABLE, YYObj_Json({
      "type": "TERMINAL",
      "name": "MUTABLE",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    TYPE => (T_TYPE, YYObj_Json({
      "type": "TERMINAL",
      "name": "TYPE",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    FAT_ARROW => (T_FAT_ARROW, YYObj_Json({
      "type": "TERMINAL",
      "name": "FAT_ARROW",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    THIN_ARROW => (T_THIN_ARROW, YYObj_Json({
      "type": "TERMINAL",
      "name": "THIN_ARROW",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    WHILE => (T_WHILE, YYObj_Json({
      "type": "TERMINAL",
      "name": "WHILE",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    RETURN => (T_RETURN, YYObj_Json({
      "type": "TERMINAL",
      "name": "RETURN",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    DOTDOT => (T_DOTDOT, YYObj_Json({
      "type": "TERMINAL",
      "name": "DOTDOT",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    RANGE_INCLUSIVE => (T_RANGE_INCLUSIVE, YYObj_Json({
      "type": "TERMINAL",
      "name": "RANGE_INCLUSIVE",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    RANGE_EXCLUSIVE => (T_RANGE_EXCLUSIVE, YYObj_Json({
      "type": "TERMINAL",
      "name": "RANGE_EXCLUSIVE",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    ELLIPSIS => (T_ELLIPSIS, YYObj_Json({
      "type": "TERMINAL",
      "name": "ELLIPSIS",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    TEST => (T_TEST, YYObj_Json({
      "type": "TERMINAL",
      "name": "TEST",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    LOOP => (T_LOOP, YYObj_Json({
      "type": "TERMINAL",
      "name": "LOOP",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    GUARD => (T_GUARD, YYObj_Json({
      "type": "TERMINAL",
      "name": "GUARD",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    FOR => (T_FOR, YYObj_Json({
      "type": "TERMINAL",
      "name": "FOR",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    IN => (T_IN, YYObj_Json({
      "type": "TERMINAL",
      "name": "IN",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    IS => (T_IS, YYObj_Json({
      "type": "TERMINAL",
      "name": "IS",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
    SUBERROR => (T_SUBERROR, YYObj_Json({
      "type": "TERMINAL",
      "name": "SUBERROR",
      "data": Json::null(),
      "start": _start_pos.to_json(),
      "end": _end_pos.to_json()
    }))
  }
}

// [45, expression → • expr EOF, $]
// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [229, loop_label_colon → • POST_LABEL COLON, WHILE / LOOP / FOR]
// [230, loop_label_colon → •, WHILE / LOOP / FOR]
// [231, while_expr → • loop_label_colon WHILE infix_expr block_expr optional_else, EOF]
// [238, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE, EOF]
// [239, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE ELSE LBRACE single_pattern_cases RBRACE, EOF]
// [240, if_expr → • IF infix_expr block_expr ELSE block_expr, EOF]
// [241, if_expr → • IF infix_expr block_expr ELSE if_expr, EOF]
// [242, if_expr → • IF infix_expr block_expr, EOF]
// [243, match_expr → • MATCH infix_expr LBRACE non_empty_list_semis(single_pattern_case) RBRACE, EOF]
// [244, match_expr → • MATCH infix_expr LBRACE RBRACE, EOF]
// [245, loop_expr → • loop_label_colon LOOP non_empty_list_commas_no_trailing(expr) LBRACE list_semis(multi_pattern_case) RBRACE, EOF]
// [249, for_expr → • loop_label_colon FOR for_binders SEMI option(infix_expr) SEMI list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) block_expr optional_else, EOF]
// [250, for_expr → • loop_label_colon FOR for_binders block_expr optional_else, EOF]
// [251, foreach_expr → • loop_label_colon FOR non_empty_list_commas(foreach_binder) IN expr block_expr optional_else, EOF]
// [254, expr → • loop_expr, EOF]
// [255, expr → • for_expr, EOF]
// [256, expr → • foreach_expr, EOF]
// [257, expr → • while_expr, EOF]
// [258, expr → • try_expr, EOF]
// [259, expr → • if_expr, EOF]
// [260, expr → • match_expr, EOF]
// [261, expr → • pipe_expr, EOF]
// [262, pipe_expr → • pipe_expr PIPE infix_expr, EOF / PIPE]
// [263, pipe_expr → • infix_expr, EOF / PIPE]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [640, expression_prime → • expression, $]
fn yy_state_0(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_expression => Shift(yy_state_1)
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    T_LIDENT => Shift(yy_state_311)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_323)
    NT_pipe_expr => Shift(yy_state_346)
    NT_match_expr => Shift(yy_state_349)
    NT_if_expr => Shift(yy_state_350)
    NT_try_expr => Shift(yy_state_351)
    NT_while_expr => Shift(yy_state_352)
    NT_foreach_expr => Shift(yy_state_353)
    NT_for_expr => Shift(yy_state_354)
    NT_loop_expr => Shift(yy_state_355)
    T_MATCH => Shift(yy_state_356)
    T_IF => Shift(yy_state_373)
    T_TRY => Shift(yy_state_379)
    NT_loop_label_colon => Shift(yy_state_396)
    T_POST_LABEL => Shift(yy_state_404)
    NT_expr => Shift(yy_state_662)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_481)
    _ => Error
  }
}

// [640, expression_prime → expression •, $]
fn yy_state_1(_lookahead : YYSymbol) -> YYDecision {
  Accept
}

// [596, non_empty_list_rev(multiline_string) → multiline_string •, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_2(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_non_empty_list_rev_multiline_string_, yy_action_399)
}

// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [530, non_empty_list(multiline_string) → non_empty_list_rev(multiline_string) •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → non_empty_list_rev(multiline_string) • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_3(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_4)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_INFIX1 | T_INFIX2 | T_INFIX3 | T_INFIX4 | T_EOF | T_CATCH | T_LPAREN | T_RPAREN | T_COMMA | T_MINUS | T_QUESTION | T_EXCLAMATION | T_DOT_LIDENT | T_DOT_INT | T_COLON | T_SEMI | T_LBRACKET | T_PLUS | T_RBRACKET | T_BAR | T_LBRACE | T_RBRACE | T_AMPERAMPER | T_AMPER | T_CARET | T_BARBAR | T_AS | T_PIPE | T_ELSE | T_FAT_ARROW | T_DOTDOT | T_RANGE_INCLUSIVE | T_RANGE_EXCLUSIVE | T_IS => Reduce(1, NT_non_empty_list_multiline_string_, yy_action_521)
    _ => Error
  }
}

// [597, non_empty_list_rev(multiline_string) → non_empty_list_rev(multiline_string) multiline_string •, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_4(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_non_empty_list_rev_multiline_string_, yy_action_35)
}

// [338, multiline_string → MULTILINE_INTERP •, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_5(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_multiline_string, yy_action_342)
}

// [337, multiline_string → MULTILINE_STRING •, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_6(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_multiline_string, yy_action_451)
}

// [349, simple_constant → STRING •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_7(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_simple_constant, yy_action_478)
}

// [348, simple_constant → FLOAT •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_8(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_simple_constant, yy_action_566)
}

// [347, simple_constant → INT •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_9(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_simple_constant, yy_action_202)
}

// [346, simple_constant → CHAR •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_10(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_simple_constant, yy_action_210)
}

// [345, simple_constant → BYTES •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_11(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_simple_constant, yy_action_230)
}

// [344, simple_constant → BYTE •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_12(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_simple_constant, yy_action_36)
}

// [343, simple_constant → FALSE •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_13(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_simple_constant, yy_action_588)
}

// [342, simple_constant → TRUE •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_14(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_simple_constant, yy_action_387)
}

// [341, atomic_expr → INTERP •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_15(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_atomic_expr, yy_action_512)
}

// [340, atomic_expr → non_empty_list(multiline_string) •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_16(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_atomic_expr, yy_action_698)
}

// [339, atomic_expr → simple_constant •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_17(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_atomic_expr, yy_action_398)
}

// [192, luident → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / WITH / CATCH / LPAREN / RPAREN / COMMA / MINUS / COLONCOLON / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW / FOR]
// [193, luident → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / WITH / CATCH / LPAREN / RPAREN / COMMA / MINUS / COLONCOLON / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW / FOR]
// [198, qual_ident_ty → • luident, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / WITH / CATCH / LPAREN / RPAREN / COMMA / MINUS / COLONCOLON / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW / FOR]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / WITH / CATCH / LPAREN / RPAREN / COMMA / MINUS / COLONCOLON / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW / FOR]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / WITH / CATCH / LPAREN / RPAREN / COMMA / MINUS / COLONCOLON / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW / FOR]
// [336, type_name → AMPER • qual_ident_ty, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / WITH / CATCH / LPAREN / RPAREN / COMMA / MINUS / COLONCOLON / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW / FOR]
fn yy_state_18(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_qual_ident_ty => Shift(yy_state_19)
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    _ => Error
  }
}

// [336, type_name → AMPER qual_ident_ty •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / WITH / CATCH / LPAREN / RPAREN / COMMA / MINUS / COLONCOLON / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW / FOR]
fn yy_state_19(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_type_name, yy_action_388)
}

// [199, qual_ident_ty → PACKAGE_NAME • DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / DERIVE / WITH / CATCH / EQUAL / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / COLONCOLON / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW / FOR]
// [200, qual_ident_ty → PACKAGE_NAME • DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / DERIVE / WITH / CATCH / EQUAL / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / COLONCOLON / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW / FOR]
fn yy_state_20(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_DOT_UIDENT => Shift(yy_state_21)
    T_DOT_LIDENT => Shift(yy_state_22)
    _ => Error
  }
}

// [200, qual_ident_ty → PACKAGE_NAME DOT_UIDENT •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / DERIVE / WITH / CATCH / EQUAL / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / COLONCOLON / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW / FOR]
fn yy_state_21(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_qual_ident_ty, yy_action_292)
}

// [199, qual_ident_ty → PACKAGE_NAME DOT_LIDENT •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / DERIVE / WITH / CATCH / EQUAL / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / COLONCOLON / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW / FOR]
fn yy_state_22(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_qual_ident_ty, yy_action_184)
}

// [198, qual_ident_ty → luident •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / DERIVE / WITH / CATCH / EQUAL / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / COLONCOLON / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW / FOR]
fn yy_state_23(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_qual_ident_ty, yy_action_252)
}

// [193, luident → UIDENT •, LIDENT / UIDENT / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / DERIVE / WITH / CATCH / ASYNC / EQUAL / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / COLONCOLON / COLON / SEMI / LBRACKET / PLUS / RBRACKET / UNDERSCORE / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PACKAGE_NAME / PIPE / ELSE / FAT_ARROW / FOR]
fn yy_state_24(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_luident, yy_action_676)
}

// [192, luident → LIDENT •, LIDENT / UIDENT / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / DERIVE / WITH / CATCH / ASYNC / EQUAL / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / COLONCOLON / COLON / SEMI / LBRACKET / PLUS / RBRACKET / UNDERSCORE / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PACKAGE_NAME / PIPE / ELSE / FAT_ARROW / FOR]
fn yy_state_25(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_luident, yy_action_155)
}

// [335, type_name → qual_ident_ty •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / WITH / CATCH / LPAREN / RPAREN / COMMA / MINUS / COLONCOLON / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW / FOR]
fn yy_state_26(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_type_name, yy_action_275)
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [229, loop_label_colon → • POST_LABEL COLON, WHILE / LOOP / FOR]
// [230, loop_label_colon → •, WHILE / LOOP / FOR]
// [231, while_expr → • loop_label_colon WHILE infix_expr block_expr optional_else, COMMA / RBRACKET]
// [238, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE, COMMA / RBRACKET]
// [239, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE ELSE LBRACE single_pattern_cases RBRACE, COMMA / RBRACKET]
// [240, if_expr → • IF infix_expr block_expr ELSE block_expr, COMMA / RBRACKET]
// [241, if_expr → • IF infix_expr block_expr ELSE if_expr, COMMA / RBRACKET]
// [242, if_expr → • IF infix_expr block_expr, COMMA / RBRACKET]
// [243, match_expr → • MATCH infix_expr LBRACE non_empty_list_semis(single_pattern_case) RBRACE, COMMA / RBRACKET]
// [244, match_expr → • MATCH infix_expr LBRACE RBRACE, COMMA / RBRACKET]
// [245, loop_expr → • loop_label_colon LOOP non_empty_list_commas_no_trailing(expr) LBRACE list_semis(multi_pattern_case) RBRACE, COMMA / RBRACKET]
// [249, for_expr → • loop_label_colon FOR for_binders SEMI option(infix_expr) SEMI list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) block_expr optional_else, COMMA / RBRACKET]
// [250, for_expr → • loop_label_colon FOR for_binders block_expr optional_else, COMMA / RBRACKET]
// [251, foreach_expr → • loop_label_colon FOR non_empty_list_commas(foreach_binder) IN expr block_expr optional_else, COMMA / RBRACKET]
// [254, expr → • loop_expr, COMMA / RBRACKET]
// [255, expr → • for_expr, COMMA / RBRACKET]
// [256, expr → • foreach_expr, COMMA / RBRACKET]
// [257, expr → • while_expr, COMMA / RBRACKET]
// [258, expr → • try_expr, COMMA / RBRACKET]
// [259, expr → • if_expr, COMMA / RBRACKET]
// [260, expr → • match_expr, COMMA / RBRACKET]
// [261, expr → • pipe_expr, COMMA / RBRACKET]
// [262, pipe_expr → • pipe_expr PIPE infix_expr, COMMA / RBRACKET / PIPE]
// [263, pipe_expr → • infix_expr, COMMA / RBRACKET / PIPE]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → LBRACKET • list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [359, spreadable_elem → • expr, COMMA / RBRACKET]
// [360, spreadable_elem → • DOTDOT expr, COMMA / RBRACKET]
// [528, list_commas(spreadable_elem) → •, RBRACKET]
// [529, list_commas(spreadable_elem) → • non_empty_list_commas(spreadable_elem), RBRACKET]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [595, non_empty_list_commas(spreadable_elem) → • non_empty_list_commas_rev(spreadable_elem) option(COMMA), RBRACKET]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [627, non_empty_list_commas_rev(spreadable_elem) → • spreadable_elem, COMMA / RBRACKET]
// [628, non_empty_list_commas_rev(spreadable_elem) → • non_empty_list_commas_rev(spreadable_elem) COMMA spreadable_elem, COMMA / RBRACKET]
fn yy_state_27(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    NT_spreadable_elem => Shift(yy_state_28)
    NT_non_empty_list_commas_rev_spreadable_elem_ => Shift(yy_state_29)
    T_DOTDOT => Shift(yy_state_33)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    T_LIDENT => Shift(yy_state_311)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_323)
    NT_pipe_expr => Shift(yy_state_346)
    NT_match_expr => Shift(yy_state_349)
    NT_if_expr => Shift(yy_state_350)
    NT_try_expr => Shift(yy_state_351)
    NT_while_expr => Shift(yy_state_352)
    NT_foreach_expr => Shift(yy_state_353)
    NT_for_expr => Shift(yy_state_354)
    NT_loop_expr => Shift(yy_state_355)
    T_MATCH => Shift(yy_state_356)
    T_IF => Shift(yy_state_373)
    T_TRY => Shift(yy_state_379)
    NT_loop_label_colon => Shift(yy_state_396)
    T_POST_LABEL => Shift(yy_state_404)
    NT_expr => Shift(yy_state_658)
    NT_non_empty_list_commas_spreadable_elem_ => Shift(yy_state_659)
    NT_list_commas_spreadable_elem_ => Shift(yy_state_660)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_481)
    T_RBRACKET => Reduce(0, NT_list_commas_spreadable_elem_, yy_action_107)
    _ => Error
  }
}

// [627, non_empty_list_commas_rev(spreadable_elem) → spreadable_elem •, COMMA / RBRACKET]
fn yy_state_28(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_non_empty_list_commas_rev_spreadable_elem_, yy_action_310)
}

// [533, option(COMMA) → •, RBRACKET]
// [534, option(COMMA) → • COMMA, RBRACKET]
// [595, non_empty_list_commas(spreadable_elem) → non_empty_list_commas_rev(spreadable_elem) • option(COMMA), RBRACKET]
// [628, non_empty_list_commas_rev(spreadable_elem) → non_empty_list_commas_rev(spreadable_elem) • COMMA spreadable_elem, COMMA / RBRACKET]
fn yy_state_29(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_option_COMMA_ => Shift(yy_state_30)
    T_COMMA => Shift(yy_state_31)
    T_RBRACKET => Reduce(0, NT_option_COMMA_, yy_action_181)
    _ => Error
  }
}

// [595, non_empty_list_commas(spreadable_elem) → non_empty_list_commas_rev(spreadable_elem) option(COMMA) •, RBRACKET]
fn yy_state_30(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_non_empty_list_commas_spreadable_elem_, yy_action_414)
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [229, loop_label_colon → • POST_LABEL COLON, WHILE / LOOP / FOR]
// [230, loop_label_colon → •, WHILE / LOOP / FOR]
// [231, while_expr → • loop_label_colon WHILE infix_expr block_expr optional_else, COMMA / RBRACKET]
// [238, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE, COMMA / RBRACKET]
// [239, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE ELSE LBRACE single_pattern_cases RBRACE, COMMA / RBRACKET]
// [240, if_expr → • IF infix_expr block_expr ELSE block_expr, COMMA / RBRACKET]
// [241, if_expr → • IF infix_expr block_expr ELSE if_expr, COMMA / RBRACKET]
// [242, if_expr → • IF infix_expr block_expr, COMMA / RBRACKET]
// [243, match_expr → • MATCH infix_expr LBRACE non_empty_list_semis(single_pattern_case) RBRACE, COMMA / RBRACKET]
// [244, match_expr → • MATCH infix_expr LBRACE RBRACE, COMMA / RBRACKET]
// [245, loop_expr → • loop_label_colon LOOP non_empty_list_commas_no_trailing(expr) LBRACE list_semis(multi_pattern_case) RBRACE, COMMA / RBRACKET]
// [249, for_expr → • loop_label_colon FOR for_binders SEMI option(infix_expr) SEMI list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) block_expr optional_else, COMMA / RBRACKET]
// [250, for_expr → • loop_label_colon FOR for_binders block_expr optional_else, COMMA / RBRACKET]
// [251, foreach_expr → • loop_label_colon FOR non_empty_list_commas(foreach_binder) IN expr block_expr optional_else, COMMA / RBRACKET]
// [254, expr → • loop_expr, COMMA / RBRACKET]
// [255, expr → • for_expr, COMMA / RBRACKET]
// [256, expr → • foreach_expr, COMMA / RBRACKET]
// [257, expr → • while_expr, COMMA / RBRACKET]
// [258, expr → • try_expr, COMMA / RBRACKET]
// [259, expr → • if_expr, COMMA / RBRACKET]
// [260, expr → • match_expr, COMMA / RBRACKET]
// [261, expr → • pipe_expr, COMMA / RBRACKET]
// [262, pipe_expr → • pipe_expr PIPE infix_expr, COMMA / RBRACKET / PIPE]
// [263, pipe_expr → • infix_expr, COMMA / RBRACKET / PIPE]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [359, spreadable_elem → • expr, COMMA / RBRACKET]
// [360, spreadable_elem → • DOTDOT expr, COMMA / RBRACKET]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [534, option(COMMA) → COMMA •, RBRACKET]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [628, non_empty_list_commas_rev(spreadable_elem) → non_empty_list_commas_rev(spreadable_elem) COMMA • spreadable_elem, COMMA / RBRACKET]
fn yy_state_31(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    NT_spreadable_elem => Shift(yy_state_32)
    T_DOTDOT => Shift(yy_state_33)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    T_LIDENT => Shift(yy_state_311)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_323)
    NT_pipe_expr => Shift(yy_state_346)
    NT_match_expr => Shift(yy_state_349)
    NT_if_expr => Shift(yy_state_350)
    NT_try_expr => Shift(yy_state_351)
    NT_while_expr => Shift(yy_state_352)
    NT_foreach_expr => Shift(yy_state_353)
    NT_for_expr => Shift(yy_state_354)
    NT_loop_expr => Shift(yy_state_355)
    T_MATCH => Shift(yy_state_356)
    T_IF => Shift(yy_state_373)
    T_TRY => Shift(yy_state_379)
    NT_loop_label_colon => Shift(yy_state_396)
    T_POST_LABEL => Shift(yy_state_404)
    NT_expr => Shift(yy_state_658)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_481)
    T_RBRACKET => Reduce(1, NT_option_COMMA_, yy_action_56)
    _ => Error
  }
}

// [628, non_empty_list_commas_rev(spreadable_elem) → non_empty_list_commas_rev(spreadable_elem) COMMA spreadable_elem •, COMMA / RBRACKET]
fn yy_state_32(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_non_empty_list_commas_rev_spreadable_elem_, yy_action_29)
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [229, loop_label_colon → • POST_LABEL COLON, WHILE / LOOP / FOR]
// [230, loop_label_colon → •, WHILE / LOOP / FOR]
// [231, while_expr → • loop_label_colon WHILE infix_expr block_expr optional_else, COMMA / RBRACKET]
// [238, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE, COMMA / RBRACKET]
// [239, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE ELSE LBRACE single_pattern_cases RBRACE, COMMA / RBRACKET]
// [240, if_expr → • IF infix_expr block_expr ELSE block_expr, COMMA / RBRACKET]
// [241, if_expr → • IF infix_expr block_expr ELSE if_expr, COMMA / RBRACKET]
// [242, if_expr → • IF infix_expr block_expr, COMMA / RBRACKET]
// [243, match_expr → • MATCH infix_expr LBRACE non_empty_list_semis(single_pattern_case) RBRACE, COMMA / RBRACKET]
// [244, match_expr → • MATCH infix_expr LBRACE RBRACE, COMMA / RBRACKET]
// [245, loop_expr → • loop_label_colon LOOP non_empty_list_commas_no_trailing(expr) LBRACE list_semis(multi_pattern_case) RBRACE, COMMA / RBRACKET]
// [249, for_expr → • loop_label_colon FOR for_binders SEMI option(infix_expr) SEMI list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) block_expr optional_else, COMMA / RBRACKET]
// [250, for_expr → • loop_label_colon FOR for_binders block_expr optional_else, COMMA / RBRACKET]
// [251, foreach_expr → • loop_label_colon FOR non_empty_list_commas(foreach_binder) IN expr block_expr optional_else, COMMA / RBRACKET]
// [254, expr → • loop_expr, COMMA / RBRACKET]
// [255, expr → • for_expr, COMMA / RBRACKET]
// [256, expr → • foreach_expr, COMMA / RBRACKET]
// [257, expr → • while_expr, COMMA / RBRACKET]
// [258, expr → • try_expr, COMMA / RBRACKET]
// [259, expr → • if_expr, COMMA / RBRACKET]
// [260, expr → • match_expr, COMMA / RBRACKET]
// [261, expr → • pipe_expr, COMMA / RBRACKET]
// [262, pipe_expr → • pipe_expr PIPE infix_expr, COMMA / RBRACKET / PIPE]
// [263, pipe_expr → • infix_expr, COMMA / RBRACKET / PIPE]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [360, spreadable_elem → DOTDOT • expr, COMMA / RBRACKET]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_33(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    NT_expr => Shift(yy_state_34)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    T_LIDENT => Shift(yy_state_311)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_323)
    NT_pipe_expr => Shift(yy_state_346)
    NT_match_expr => Shift(yy_state_349)
    NT_if_expr => Shift(yy_state_350)
    NT_try_expr => Shift(yy_state_351)
    NT_while_expr => Shift(yy_state_352)
    NT_foreach_expr => Shift(yy_state_353)
    NT_for_expr => Shift(yy_state_354)
    NT_loop_expr => Shift(yy_state_355)
    T_MATCH => Shift(yy_state_356)
    T_IF => Shift(yy_state_373)
    T_TRY => Shift(yy_state_379)
    NT_loop_label_colon => Shift(yy_state_396)
    T_POST_LABEL => Shift(yy_state_404)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_481)
    _ => Error
  }
}

// [360, spreadable_elem → DOTDOT expr •, COMMA / RBRACKET]
fn yy_state_34(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_spreadable_elem, yy_action_225)
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [229, loop_label_colon → • POST_LABEL COLON, WHILE / LOOP / FOR]
// [230, loop_label_colon → •, WHILE / LOOP / FOR]
// [231, while_expr → • loop_label_colon WHILE infix_expr block_expr optional_else, RPAREN / COMMA / COLON]
// [238, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE, RPAREN / COMMA / COLON]
// [239, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE ELSE LBRACE single_pattern_cases RBRACE, RPAREN / COMMA / COLON]
// [240, if_expr → • IF infix_expr block_expr ELSE block_expr, RPAREN / COMMA / COLON]
// [241, if_expr → • IF infix_expr block_expr ELSE if_expr, RPAREN / COMMA / COLON]
// [242, if_expr → • IF infix_expr block_expr, RPAREN / COMMA / COLON]
// [243, match_expr → • MATCH infix_expr LBRACE non_empty_list_semis(single_pattern_case) RBRACE, RPAREN / COMMA / COLON]
// [244, match_expr → • MATCH infix_expr LBRACE RBRACE, RPAREN / COMMA / COLON]
// [245, loop_expr → • loop_label_colon LOOP non_empty_list_commas_no_trailing(expr) LBRACE list_semis(multi_pattern_case) RBRACE, RPAREN / COMMA / COLON]
// [249, for_expr → • loop_label_colon FOR for_binders SEMI option(infix_expr) SEMI list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) block_expr optional_else, RPAREN / COMMA / COLON]
// [250, for_expr → • loop_label_colon FOR for_binders block_expr optional_else, RPAREN / COMMA / COLON]
// [251, foreach_expr → • loop_label_colon FOR non_empty_list_commas(foreach_binder) IN expr block_expr optional_else, RPAREN / COMMA / COLON]
// [254, expr → • loop_expr, RPAREN / COMMA / COLON]
// [255, expr → • for_expr, RPAREN / COMMA / COLON]
// [256, expr → • foreach_expr, RPAREN / COMMA / COLON]
// [257, expr → • while_expr, RPAREN / COMMA / COLON]
// [258, expr → • try_expr, RPAREN / COMMA / COLON]
// [259, expr → • if_expr, RPAREN / COMMA / COLON]
// [260, expr → • match_expr, RPAREN / COMMA / COLON]
// [261, expr → • pipe_expr, RPAREN / COMMA / COLON]
// [262, pipe_expr → • pipe_expr PIPE infix_expr, RPAREN / COMMA / COLON / PIPE]
// [263, pipe_expr → • infix_expr, RPAREN / COMMA / COLON / PIPE]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / COLON / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / COLON / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / COLON / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / COLON / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / COLON / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / COLON / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / COLON / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / COLON / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / COLON / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / COLON / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / COLON / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / COLON / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / COLON / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / COLON / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / COLON / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / COLON / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / COLON / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / COLON / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / COLON / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / COLON / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / COLON / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → LPAREN • list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → LPAREN • expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [526, list_commas(expr) → •, RPAREN]
// [527, list_commas(expr) → • non_empty_list_commas(expr), RPAREN]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [587, non_empty_list_commas_rev(expr) → • expr, RPAREN / COMMA]
// [588, non_empty_list_commas_rev(expr) → • non_empty_list_commas_rev(expr) COMMA expr, RPAREN / COMMA]
// [594, non_empty_list_commas(expr) → • non_empty_list_commas_rev(expr) option(COMMA), RPAREN]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_35(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_non_empty_list_commas_rev_expr_ => Shift(yy_state_36)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    T_LIDENT => Shift(yy_state_311)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_323)
    NT_pipe_expr => Shift(yy_state_346)
    NT_match_expr => Shift(yy_state_349)
    NT_if_expr => Shift(yy_state_350)
    NT_try_expr => Shift(yy_state_351)
    NT_while_expr => Shift(yy_state_352)
    NT_foreach_expr => Shift(yy_state_353)
    NT_for_expr => Shift(yy_state_354)
    NT_loop_expr => Shift(yy_state_355)
    T_MATCH => Shift(yy_state_356)
    T_IF => Shift(yy_state_373)
    T_TRY => Shift(yy_state_379)
    NT_loop_label_colon => Shift(yy_state_396)
    T_POST_LABEL => Shift(yy_state_404)
    NT_non_empty_list_commas_expr_ => Shift(yy_state_651)
    NT_expr => Shift(yy_state_652)
    NT_list_commas_expr_ => Shift(yy_state_656)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_481)
    T_RPAREN => Reduce(0, NT_list_commas_expr_, yy_action_526)
    _ => Error
  }
}

// [533, option(COMMA) → •, RPAREN]
// [534, option(COMMA) → • COMMA, RPAREN]
// [588, non_empty_list_commas_rev(expr) → non_empty_list_commas_rev(expr) • COMMA expr, RPAREN / COMMA]
// [594, non_empty_list_commas(expr) → non_empty_list_commas_rev(expr) • option(COMMA), RPAREN]
fn yy_state_36(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_option_COMMA_ => Shift(yy_state_37)
    T_COMMA => Shift(yy_state_38)
    T_RPAREN => Reduce(0, NT_option_COMMA_, yy_action_181)
    _ => Error
  }
}

// [594, non_empty_list_commas(expr) → non_empty_list_commas_rev(expr) option(COMMA) •, RPAREN]
fn yy_state_37(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_non_empty_list_commas_expr_, yy_action_241)
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [229, loop_label_colon → • POST_LABEL COLON, WHILE / LOOP / FOR]
// [230, loop_label_colon → •, WHILE / LOOP / FOR]
// [231, while_expr → • loop_label_colon WHILE infix_expr block_expr optional_else, RPAREN / COMMA]
// [238, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE, RPAREN / COMMA]
// [239, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE ELSE LBRACE single_pattern_cases RBRACE, RPAREN / COMMA]
// [240, if_expr → • IF infix_expr block_expr ELSE block_expr, RPAREN / COMMA]
// [241, if_expr → • IF infix_expr block_expr ELSE if_expr, RPAREN / COMMA]
// [242, if_expr → • IF infix_expr block_expr, RPAREN / COMMA]
// [243, match_expr → • MATCH infix_expr LBRACE non_empty_list_semis(single_pattern_case) RBRACE, RPAREN / COMMA]
// [244, match_expr → • MATCH infix_expr LBRACE RBRACE, RPAREN / COMMA]
// [245, loop_expr → • loop_label_colon LOOP non_empty_list_commas_no_trailing(expr) LBRACE list_semis(multi_pattern_case) RBRACE, RPAREN / COMMA]
// [249, for_expr → • loop_label_colon FOR for_binders SEMI option(infix_expr) SEMI list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) block_expr optional_else, RPAREN / COMMA]
// [250, for_expr → • loop_label_colon FOR for_binders block_expr optional_else, RPAREN / COMMA]
// [251, foreach_expr → • loop_label_colon FOR non_empty_list_commas(foreach_binder) IN expr block_expr optional_else, RPAREN / COMMA]
// [254, expr → • loop_expr, RPAREN / COMMA]
// [255, expr → • for_expr, RPAREN / COMMA]
// [256, expr → • foreach_expr, RPAREN / COMMA]
// [257, expr → • while_expr, RPAREN / COMMA]
// [258, expr → • try_expr, RPAREN / COMMA]
// [259, expr → • if_expr, RPAREN / COMMA]
// [260, expr → • match_expr, RPAREN / COMMA]
// [261, expr → • pipe_expr, RPAREN / COMMA]
// [262, pipe_expr → • pipe_expr PIPE infix_expr, RPAREN / COMMA / PIPE]
// [263, pipe_expr → • infix_expr, RPAREN / COMMA / PIPE]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [534, option(COMMA) → COMMA •, RPAREN]
// [588, non_empty_list_commas_rev(expr) → non_empty_list_commas_rev(expr) COMMA • expr, RPAREN / COMMA]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_38(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_expr => Shift(yy_state_39)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    T_LIDENT => Shift(yy_state_311)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_323)
    NT_pipe_expr => Shift(yy_state_346)
    NT_match_expr => Shift(yy_state_349)
    NT_if_expr => Shift(yy_state_350)
    NT_try_expr => Shift(yy_state_351)
    NT_while_expr => Shift(yy_state_352)
    NT_foreach_expr => Shift(yy_state_353)
    NT_for_expr => Shift(yy_state_354)
    NT_loop_expr => Shift(yy_state_355)
    T_MATCH => Shift(yy_state_356)
    T_IF => Shift(yy_state_373)
    T_TRY => Shift(yy_state_379)
    NT_loop_label_colon => Shift(yy_state_396)
    T_POST_LABEL => Shift(yy_state_404)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_481)
    T_RPAREN => Reduce(1, NT_option_COMMA_, yy_action_56)
    _ => Error
  }
}

// [588, non_empty_list_commas_rev(expr) → non_empty_list_commas_rev(expr) COMMA expr •, RPAREN / COMMA / SEMI / LBRACE / RBRACE]
fn yy_state_39(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_non_empty_list_commas_rev_expr_, yy_action_573)
}

// [307, simple_expr → constr •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_40(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_simple_expr, yy_action_102)
}

// [306, simple_expr → qual_ident_simple_expr •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_41(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_simple_expr, yy_action_314)
}

// [305, simple_expr → UNDERSCORE •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_42(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_simple_expr, yy_action_400)
}

// [304, simple_expr → atomic_expr •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_43(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_simple_expr, yy_action_386)
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [234, multi_pattern_case → • non_empty_list_commas(pattern) option(preceded(IF,expr)) FAT_ARROW expr_statement, SEMI / RBRACE]
// [289, constr → • UIDENT, LPAREN / COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, LPAREN / COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [291, constr → • type_name COLONCOLON UIDENT, LPAREN / COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [303, simple_expr → fn_header_no_binder • list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [362, pattern → • pattern AS LIDENT, COMMA / AS / IF / FAT_ARROW]
// [363, pattern → • or_pattern, COMMA / AS / IF / FAT_ARROW]
// [364, or_pattern → • range_pattern BAR or_pattern, COMMA / AS / IF / FAT_ARROW]
// [365, or_pattern → • range_pattern, COMMA / AS / IF / FAT_ARROW]
// [366, range_pattern → • simple_pattern RANGE_EXCLUSIVE simple_pattern, COMMA / BAR / AS / IF / FAT_ARROW]
// [367, range_pattern → • simple_pattern RANGE_INCLUSIVE simple_pattern, COMMA / BAR / AS / IF / FAT_ARROW]
// [368, range_pattern → • simple_pattern, COMMA / BAR / AS / IF / FAT_ARROW]
// [369, simple_pattern → • TRUE, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [370, simple_pattern → • FALSE, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [371, simple_pattern → • CHAR, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [372, simple_pattern → • INT, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [373, simple_pattern → • BYTE, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [374, simple_pattern → • FLOAT, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [375, simple_pattern → • MINUS INT, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [376, simple_pattern → • MINUS FLOAT, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [377, simple_pattern → • STRING, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [378, simple_pattern → • BYTES, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [379, simple_pattern → • UNDERSCORE, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [380, simple_pattern → • LIDENT, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [381, simple_pattern → • constr option(delimited(LPAREN,constr_pat_arguments,RPAREN)), COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [382, simple_pattern → • LPAREN pattern RPAREN, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [383, simple_pattern → • LPAREN pattern COMMA non_empty_list_commas(pattern) RPAREN, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [384, simple_pattern → • LPAREN pattern COLON type_ RPAREN, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [385, simple_pattern → • LBRACKET array_sub_patterns RBRACKET, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [386, simple_pattern → • LBRACE RBRACE, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [387, simple_pattern → • LBRACE DOTDOT option(COMMA) RBRACE, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [388, simple_pattern → • LBRACE non_empty_fields_pat RBRACE, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [389, simple_pattern → • LBRACE non_empty_map_elems_pat RBRACE, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [502, list_semis(multi_pattern_case) → •, RBRACE]
// [503, list_semis(multi_pattern_case) → • non_empty_list_semis(multi_pattern_case), RBRACE]
// [512, non_empty_list_commas(pattern) → • non_empty_list_commas_rev(pattern) option(COMMA), IF / FAT_ARROW]
// [583, non_empty_list_semis(multi_pattern_case) → • non_empty_list_semis_rev(multi_pattern_case), RBRACE]
// [584, non_empty_list_commas_rev(pattern) → • pattern, COMMA / IF / FAT_ARROW]
// [585, non_empty_list_commas_rev(pattern) → • non_empty_list_commas_rev(pattern) COMMA pattern, COMMA / IF / FAT_ARROW]
// [620, non_empty_list_semis_rev(multi_pattern_case) → • non_empty_list_semi_rev_aux(multi_pattern_case) option(SEMI), RBRACE]
// [637, non_empty_list_semi_rev_aux(multi_pattern_case) → • multi_pattern_case, SEMI / RBRACE]
// [638, non_empty_list_semi_rev_aux(multi_pattern_case) → • non_empty_list_semi_rev_aux(multi_pattern_case) SEMI multi_pattern_case, SEMI / RBRACE]
fn yy_state_44(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    NT_multi_pattern_case => Shift(yy_state_45)
    NT_non_empty_list_semi_rev_aux_multi_pattern_case_ => Shift(yy_state_46)
    NT_non_empty_list_commas_rev_pattern_ => Shift(yy_state_50)
    T_LBRACE => Shift(yy_state_52)
    T_LBRACKET => Shift(yy_state_56)
    T_LPAREN => Shift(yy_state_70)
    NT_constr => Shift(yy_state_71)
    T_UNDERSCORE => Shift(yy_state_82)
    T_BYTES => Shift(yy_state_83)
    T_STRING => Shift(yy_state_84)
    T_MINUS => Shift(yy_state_85)
    T_FLOAT => Shift(yy_state_88)
    T_BYTE => Shift(yy_state_89)
    T_INT => Shift(yy_state_90)
    T_CHAR => Shift(yy_state_91)
    T_FALSE => Shift(yy_state_92)
    T_TRUE => Shift(yy_state_93)
    NT_simple_pattern => Shift(yy_state_94)
    NT_type_name => Shift(yy_state_97)
    T_PACKAGE_NAME => Shift(yy_state_100)
    T_UIDENT => Shift(yy_state_102)
    T_LIDENT => Shift(yy_state_103)
    NT_range_pattern => Shift(yy_state_106)
    NT_or_pattern => Shift(yy_state_109)
    NT_pattern => Shift(yy_state_181)
    NT_non_empty_list_commas_pattern_ => Shift(yy_state_234)
    NT_non_empty_list_semis_rev_multi_pattern_case_ => Shift(yy_state_239)
    NT_non_empty_list_semis_multi_pattern_case_ => Shift(yy_state_240)
    NT_list_semis_multi_pattern_case_ => Shift(yy_state_649)
    T_RBRACE => Reduce(0, NT_list_semis_multi_pattern_case_, yy_action_98)
    _ => Error
  }
}

// [637, non_empty_list_semi_rev_aux(multi_pattern_case) → multi_pattern_case •, SEMI / RBRACE]
fn yy_state_45(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_non_empty_list_semi_rev_aux_multi_pattern_case_, yy_action_696)
}

// [581, option(SEMI) → •, RBRACE]
// [582, option(SEMI) → • SEMI, RBRACE]
// [620, non_empty_list_semis_rev(multi_pattern_case) → non_empty_list_semi_rev_aux(multi_pattern_case) • option(SEMI), RBRACE]
// [638, non_empty_list_semi_rev_aux(multi_pattern_case) → non_empty_list_semi_rev_aux(multi_pattern_case) • SEMI multi_pattern_case, SEMI / RBRACE]
fn yy_state_46(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_option_SEMI_ => Shift(yy_state_47)
    T_SEMI => Shift(yy_state_48)
    T_RBRACE => Reduce(0, NT_option_SEMI_, yy_action_539)
    _ => Error
  }
}

// [620, non_empty_list_semis_rev(multi_pattern_case) → non_empty_list_semi_rev_aux(multi_pattern_case) option(SEMI) •, RBRACE]
fn yy_state_47(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_non_empty_list_semis_rev_multi_pattern_case_, yy_action_286)
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [234, multi_pattern_case → • non_empty_list_commas(pattern) option(preceded(IF,expr)) FAT_ARROW expr_statement, SEMI / RBRACE]
// [289, constr → • UIDENT, LPAREN / COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, LPAREN / COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [291, constr → • type_name COLONCOLON UIDENT, LPAREN / COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [362, pattern → • pattern AS LIDENT, COMMA / AS / IF / FAT_ARROW]
// [363, pattern → • or_pattern, COMMA / AS / IF / FAT_ARROW]
// [364, or_pattern → • range_pattern BAR or_pattern, COMMA / AS / IF / FAT_ARROW]
// [365, or_pattern → • range_pattern, COMMA / AS / IF / FAT_ARROW]
// [366, range_pattern → • simple_pattern RANGE_EXCLUSIVE simple_pattern, COMMA / BAR / AS / IF / FAT_ARROW]
// [367, range_pattern → • simple_pattern RANGE_INCLUSIVE simple_pattern, COMMA / BAR / AS / IF / FAT_ARROW]
// [368, range_pattern → • simple_pattern, COMMA / BAR / AS / IF / FAT_ARROW]
// [369, simple_pattern → • TRUE, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [370, simple_pattern → • FALSE, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [371, simple_pattern → • CHAR, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [372, simple_pattern → • INT, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [373, simple_pattern → • BYTE, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [374, simple_pattern → • FLOAT, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [375, simple_pattern → • MINUS INT, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [376, simple_pattern → • MINUS FLOAT, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [377, simple_pattern → • STRING, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [378, simple_pattern → • BYTES, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [379, simple_pattern → • UNDERSCORE, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [380, simple_pattern → • LIDENT, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [381, simple_pattern → • constr option(delimited(LPAREN,constr_pat_arguments,RPAREN)), COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [382, simple_pattern → • LPAREN pattern RPAREN, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [383, simple_pattern → • LPAREN pattern COMMA non_empty_list_commas(pattern) RPAREN, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [384, simple_pattern → • LPAREN pattern COLON type_ RPAREN, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [385, simple_pattern → • LBRACKET array_sub_patterns RBRACKET, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [386, simple_pattern → • LBRACE RBRACE, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [387, simple_pattern → • LBRACE DOTDOT option(COMMA) RBRACE, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [388, simple_pattern → • LBRACE non_empty_fields_pat RBRACE, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [389, simple_pattern → • LBRACE non_empty_map_elems_pat RBRACE, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [512, non_empty_list_commas(pattern) → • non_empty_list_commas_rev(pattern) option(COMMA), IF / FAT_ARROW]
// [582, option(SEMI) → SEMI •, RBRACE]
// [584, non_empty_list_commas_rev(pattern) → • pattern, COMMA / IF / FAT_ARROW]
// [585, non_empty_list_commas_rev(pattern) → • non_empty_list_commas_rev(pattern) COMMA pattern, COMMA / IF / FAT_ARROW]
// [638, non_empty_list_semi_rev_aux(multi_pattern_case) → non_empty_list_semi_rev_aux(multi_pattern_case) SEMI • multi_pattern_case, SEMI / RBRACE]
fn yy_state_48(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    NT_multi_pattern_case => Shift(yy_state_49)
    NT_non_empty_list_commas_rev_pattern_ => Shift(yy_state_50)
    T_LBRACE => Shift(yy_state_52)
    T_LBRACKET => Shift(yy_state_56)
    T_LPAREN => Shift(yy_state_70)
    NT_constr => Shift(yy_state_71)
    T_UNDERSCORE => Shift(yy_state_82)
    T_BYTES => Shift(yy_state_83)
    T_STRING => Shift(yy_state_84)
    T_MINUS => Shift(yy_state_85)
    T_FLOAT => Shift(yy_state_88)
    T_BYTE => Shift(yy_state_89)
    T_INT => Shift(yy_state_90)
    T_CHAR => Shift(yy_state_91)
    T_FALSE => Shift(yy_state_92)
    T_TRUE => Shift(yy_state_93)
    NT_simple_pattern => Shift(yy_state_94)
    NT_type_name => Shift(yy_state_97)
    T_PACKAGE_NAME => Shift(yy_state_100)
    T_UIDENT => Shift(yy_state_102)
    T_LIDENT => Shift(yy_state_103)
    NT_range_pattern => Shift(yy_state_106)
    NT_or_pattern => Shift(yy_state_109)
    NT_pattern => Shift(yy_state_181)
    NT_non_empty_list_commas_pattern_ => Shift(yy_state_234)
    T_RBRACE => Reduce(1, NT_option_SEMI_, yy_action_425)
    _ => Error
  }
}

// [638, non_empty_list_semi_rev_aux(multi_pattern_case) → non_empty_list_semi_rev_aux(multi_pattern_case) SEMI multi_pattern_case •, SEMI / RBRACE]
fn yy_state_49(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_non_empty_list_semi_rev_aux_multi_pattern_case_, yy_action_652)
}

// [512, non_empty_list_commas(pattern) → non_empty_list_commas_rev(pattern) • option(COMMA), RPAREN / IF / FAT_ARROW]
// [533, option(COMMA) → •, RPAREN / IF / FAT_ARROW]
// [534, option(COMMA) → • COMMA, RPAREN / IF / FAT_ARROW]
// [585, non_empty_list_commas_rev(pattern) → non_empty_list_commas_rev(pattern) • COMMA pattern, RPAREN / COMMA / IF / FAT_ARROW]
fn yy_state_50(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COMMA => Shift(yy_state_51)
    NT_option_COMMA_ => Shift(yy_state_233)
    T_RPAREN | T_IF | T_FAT_ARROW => Reduce(0, NT_option_COMMA_, yy_action_181)
    _ => Error
  }
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [289, constr → • UIDENT, LPAREN / RPAREN / COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, LPAREN / RPAREN / COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [291, constr → • type_name COLONCOLON UIDENT, LPAREN / RPAREN / COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [362, pattern → • pattern AS LIDENT, RPAREN / COMMA / AS / IF / FAT_ARROW]
// [363, pattern → • or_pattern, RPAREN / COMMA / AS / IF / FAT_ARROW]
// [364, or_pattern → • range_pattern BAR or_pattern, RPAREN / COMMA / AS / IF / FAT_ARROW]
// [365, or_pattern → • range_pattern, RPAREN / COMMA / AS / IF / FAT_ARROW]
// [366, range_pattern → • simple_pattern RANGE_EXCLUSIVE simple_pattern, RPAREN / COMMA / BAR / AS / IF / FAT_ARROW]
// [367, range_pattern → • simple_pattern RANGE_INCLUSIVE simple_pattern, RPAREN / COMMA / BAR / AS / IF / FAT_ARROW]
// [368, range_pattern → • simple_pattern, RPAREN / COMMA / BAR / AS / IF / FAT_ARROW]
// [369, simple_pattern → • TRUE, RPAREN / COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [370, simple_pattern → • FALSE, RPAREN / COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [371, simple_pattern → • CHAR, RPAREN / COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [372, simple_pattern → • INT, RPAREN / COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [373, simple_pattern → • BYTE, RPAREN / COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [374, simple_pattern → • FLOAT, RPAREN / COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [375, simple_pattern → • MINUS INT, RPAREN / COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [376, simple_pattern → • MINUS FLOAT, RPAREN / COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [377, simple_pattern → • STRING, RPAREN / COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [378, simple_pattern → • BYTES, RPAREN / COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [379, simple_pattern → • UNDERSCORE, RPAREN / COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [380, simple_pattern → • LIDENT, RPAREN / COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [381, simple_pattern → • constr option(delimited(LPAREN,constr_pat_arguments,RPAREN)), RPAREN / COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [382, simple_pattern → • LPAREN pattern RPAREN, RPAREN / COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [383, simple_pattern → • LPAREN pattern COMMA non_empty_list_commas(pattern) RPAREN, RPAREN / COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [384, simple_pattern → • LPAREN pattern COLON type_ RPAREN, RPAREN / COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [385, simple_pattern → • LBRACKET array_sub_patterns RBRACKET, RPAREN / COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [386, simple_pattern → • LBRACE RBRACE, RPAREN / COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [387, simple_pattern → • LBRACE DOTDOT option(COMMA) RBRACE, RPAREN / COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [388, simple_pattern → • LBRACE non_empty_fields_pat RBRACE, RPAREN / COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [389, simple_pattern → • LBRACE non_empty_map_elems_pat RBRACE, RPAREN / COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [534, option(COMMA) → COMMA •, RPAREN / IF / FAT_ARROW]
// [585, non_empty_list_commas_rev(pattern) → non_empty_list_commas_rev(pattern) COMMA • pattern, RPAREN / COMMA / IF / FAT_ARROW]
fn yy_state_51(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACE => Shift(yy_state_52)
    T_LBRACKET => Shift(yy_state_56)
    T_LPAREN => Shift(yy_state_70)
    NT_constr => Shift(yy_state_71)
    T_UNDERSCORE => Shift(yy_state_82)
    T_BYTES => Shift(yy_state_83)
    T_STRING => Shift(yy_state_84)
    T_MINUS => Shift(yy_state_85)
    T_FLOAT => Shift(yy_state_88)
    T_BYTE => Shift(yy_state_89)
    T_INT => Shift(yy_state_90)
    T_CHAR => Shift(yy_state_91)
    T_FALSE => Shift(yy_state_92)
    T_TRUE => Shift(yy_state_93)
    NT_simple_pattern => Shift(yy_state_94)
    NT_type_name => Shift(yy_state_97)
    T_PACKAGE_NAME => Shift(yy_state_100)
    T_UIDENT => Shift(yy_state_102)
    T_LIDENT => Shift(yy_state_103)
    NT_range_pattern => Shift(yy_state_106)
    NT_or_pattern => Shift(yy_state_109)
    NT_pattern => Shift(yy_state_232)
    T_RPAREN | T_IF | T_FAT_ARROW => Reduce(1, NT_option_COMMA_, yy_action_56)
    _ => Error
  }
}

// [342, simple_constant → • TRUE, QUESTION / COLON]
// [343, simple_constant → • FALSE, QUESTION / COLON]
// [344, simple_constant → • BYTE, QUESTION / COLON]
// [345, simple_constant → • BYTES, QUESTION / COLON]
// [346, simple_constant → • CHAR, QUESTION / COLON]
// [347, simple_constant → • INT, QUESTION / COLON]
// [348, simple_constant → • FLOAT, QUESTION / COLON]
// [349, simple_constant → • STRING, QUESTION / COLON]
// [350, map_syntax_key → • simple_constant, QUESTION / COLON]
// [351, map_syntax_key → • MINUS INT, QUESTION / COLON]
// [352, map_syntax_key → • MINUS FLOAT, QUESTION / COLON]
// [386, simple_pattern → LBRACE • RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [387, simple_pattern → LBRACE • DOTDOT option(COMMA) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [388, simple_pattern → LBRACE • non_empty_fields_pat RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [389, simple_pattern → LBRACE • non_empty_map_elems_pat RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [435, non_empty_fields_pat → • non_empty_list_commas(fields_pat_single), RBRACE]
// [436, non_empty_fields_pat → • non_empty_list_commas_with_tail(fields_pat_single) DOTDOT option(COMMA), RBRACE]
// [437, fields_pat_single → • LIDENT COLON pattern, COMMA / RBRACE]
// [438, fields_pat_single → • LIDENT, COMMA / RBRACE]
// [439, non_empty_map_elems_pat → • non_empty_list_commas(map_elem_pat), RBRACE]
// [440, non_empty_map_elems_pat → • non_empty_list_commas_with_tail(map_elem_pat) DOTDOT option(COMMA), RBRACE]
// [546, non_empty_list_commas(fields_pat_single) → • non_empty_list_commas_rev(fields_pat_single) option(COMMA), RBRACE]
// [547, non_empty_list_commas_with_tail(fields_pat_single) → • non_empty_list_commas_rev(fields_pat_single) COMMA, DOTDOT]
// [548, non_empty_list_commas(map_elem_pat) → • non_empty_list_commas_rev(map_elem_pat) option(COMMA), RBRACE]
// [549, non_empty_list_commas_with_tail(map_elem_pat) → • non_empty_list_commas_rev(map_elem_pat) COMMA, DOTDOT]
// [604, non_empty_list_commas_rev(fields_pat_single) → • fields_pat_single, COMMA / RBRACE]
// [605, non_empty_list_commas_rev(fields_pat_single) → • non_empty_list_commas_rev(fields_pat_single) COMMA fields_pat_single, COMMA / RBRACE]
// [606, non_empty_list_commas_rev(map_elem_pat) → • map_syntax_key option(QUESTION) COLON pattern, COMMA / RBRACE]
// [607, non_empty_list_commas_rev(map_elem_pat) → • non_empty_list_commas_rev(map_elem_pat) COMMA map_syntax_key option(QUESTION) COLON pattern, COMMA / RBRACE]
fn yy_state_52(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    NT_map_syntax_key => Shift(yy_state_53)
    NT_fields_pat_single => Shift(yy_state_197)
    NT_non_empty_list_commas_rev_map_elem_pat_ => Shift(yy_state_198)
    T_MINUS => Shift(yy_state_205)
    NT_simple_constant => Shift(yy_state_208)
    NT_non_empty_list_commas_rev_fields_pat_single_ => Shift(yy_state_209)
    T_LIDENT => Shift(yy_state_213)
    NT_non_empty_list_commas_with_tail_map_elem_pat_ => Shift(yy_state_216)
    NT_non_empty_list_commas_map_elem_pat_ => Shift(yy_state_219)
    NT_non_empty_list_commas_with_tail_fields_pat_single_ => Shift(yy_state_220)
    NT_non_empty_list_commas_fields_pat_single_ => Shift(yy_state_223)
    NT_non_empty_map_elems_pat => Shift(yy_state_224)
    NT_non_empty_fields_pat => Shift(yy_state_226)
    T_DOTDOT => Shift(yy_state_228)
    T_RBRACE => Shift(yy_state_231)
    _ => Error
  }
}

// [550, option(QUESTION) → •, COLON]
// [551, option(QUESTION) → • QUESTION, COLON]
// [606, non_empty_list_commas_rev(map_elem_pat) → map_syntax_key • option(QUESTION) COLON pattern, COMMA / RBRACE]
fn yy_state_53(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_option_QUESTION_ => Shift(yy_state_54)
    T_QUESTION => Shift(yy_state_196)
    T_COLON => Reduce(0, NT_option_QUESTION_, yy_action_454)
    _ => Error
  }
}

// [606, non_empty_list_commas_rev(map_elem_pat) → map_syntax_key option(QUESTION) • COLON pattern, COMMA / RBRACE]
fn yy_state_54(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_55)
    _ => Error
  }
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [289, constr → • UIDENT, LPAREN / COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, LPAREN / COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [291, constr → • type_name COLONCOLON UIDENT, LPAREN / COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [362, pattern → • pattern AS LIDENT, COMMA / RBRACE / AS]
// [363, pattern → • or_pattern, COMMA / RBRACE / AS]
// [364, or_pattern → • range_pattern BAR or_pattern, COMMA / RBRACE / AS]
// [365, or_pattern → • range_pattern, COMMA / RBRACE / AS]
// [366, range_pattern → • simple_pattern RANGE_EXCLUSIVE simple_pattern, COMMA / BAR / RBRACE / AS]
// [367, range_pattern → • simple_pattern RANGE_INCLUSIVE simple_pattern, COMMA / BAR / RBRACE / AS]
// [368, range_pattern → • simple_pattern, COMMA / BAR / RBRACE / AS]
// [369, simple_pattern → • TRUE, COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [370, simple_pattern → • FALSE, COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [371, simple_pattern → • CHAR, COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [372, simple_pattern → • INT, COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [373, simple_pattern → • BYTE, COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [374, simple_pattern → • FLOAT, COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [375, simple_pattern → • MINUS INT, COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [376, simple_pattern → • MINUS FLOAT, COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [377, simple_pattern → • STRING, COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [378, simple_pattern → • BYTES, COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [379, simple_pattern → • UNDERSCORE, COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [380, simple_pattern → • LIDENT, COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [381, simple_pattern → • constr option(delimited(LPAREN,constr_pat_arguments,RPAREN)), COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [382, simple_pattern → • LPAREN pattern RPAREN, COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [383, simple_pattern → • LPAREN pattern COMMA non_empty_list_commas(pattern) RPAREN, COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [384, simple_pattern → • LPAREN pattern COLON type_ RPAREN, COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [385, simple_pattern → • LBRACKET array_sub_patterns RBRACKET, COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [386, simple_pattern → • LBRACE RBRACE, COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [387, simple_pattern → • LBRACE DOTDOT option(COMMA) RBRACE, COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [388, simple_pattern → • LBRACE non_empty_fields_pat RBRACE, COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [389, simple_pattern → • LBRACE non_empty_map_elems_pat RBRACE, COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [606, non_empty_list_commas_rev(map_elem_pat) → map_syntax_key option(QUESTION) COLON • pattern, COMMA / RBRACE]
fn yy_state_55(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACE => Shift(yy_state_52)
    T_LBRACKET => Shift(yy_state_56)
    T_LPAREN => Shift(yy_state_70)
    NT_constr => Shift(yy_state_71)
    T_UNDERSCORE => Shift(yy_state_82)
    T_BYTES => Shift(yy_state_83)
    T_STRING => Shift(yy_state_84)
    T_MINUS => Shift(yy_state_85)
    T_FLOAT => Shift(yy_state_88)
    T_BYTE => Shift(yy_state_89)
    T_INT => Shift(yy_state_90)
    T_CHAR => Shift(yy_state_91)
    T_FALSE => Shift(yy_state_92)
    T_TRUE => Shift(yy_state_93)
    NT_simple_pattern => Shift(yy_state_94)
    NT_type_name => Shift(yy_state_97)
    T_PACKAGE_NAME => Shift(yy_state_100)
    T_UIDENT => Shift(yy_state_102)
    T_LIDENT => Shift(yy_state_103)
    NT_range_pattern => Shift(yy_state_106)
    NT_or_pattern => Shift(yy_state_109)
    NT_pattern => Shift(yy_state_195)
    _ => Error
  }
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [289, constr → • UIDENT, LPAREN / COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, LPAREN / COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [291, constr → • type_name COLONCOLON UIDENT, LPAREN / COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [362, pattern → • pattern AS LIDENT, COMMA / RBRACKET / AS]
// [363, pattern → • or_pattern, COMMA / RBRACKET / AS]
// [364, or_pattern → • range_pattern BAR or_pattern, COMMA / RBRACKET / AS]
// [365, or_pattern → • range_pattern, COMMA / RBRACKET / AS]
// [366, range_pattern → • simple_pattern RANGE_EXCLUSIVE simple_pattern, COMMA / RBRACKET / BAR / AS]
// [367, range_pattern → • simple_pattern RANGE_INCLUSIVE simple_pattern, COMMA / RBRACKET / BAR / AS]
// [368, range_pattern → • simple_pattern, COMMA / RBRACKET / BAR / AS]
// [369, simple_pattern → • TRUE, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [370, simple_pattern → • FALSE, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [371, simple_pattern → • CHAR, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [372, simple_pattern → • INT, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [373, simple_pattern → • BYTE, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [374, simple_pattern → • FLOAT, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [375, simple_pattern → • MINUS INT, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [376, simple_pattern → • MINUS FLOAT, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [377, simple_pattern → • STRING, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [378, simple_pattern → • BYTES, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [379, simple_pattern → • UNDERSCORE, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [380, simple_pattern → • LIDENT, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [381, simple_pattern → • constr option(delimited(LPAREN,constr_pat_arguments,RPAREN)), COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [382, simple_pattern → • LPAREN pattern RPAREN, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [383, simple_pattern → • LPAREN pattern COMMA non_empty_list_commas(pattern) RPAREN, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [384, simple_pattern → • LPAREN pattern COLON type_ RPAREN, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [385, simple_pattern → • LBRACKET array_sub_patterns RBRACKET, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [385, simple_pattern → LBRACKET • array_sub_patterns RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [386, simple_pattern → • LBRACE RBRACE, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [387, simple_pattern → • LBRACE DOTDOT option(COMMA) RBRACE, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [388, simple_pattern → • LBRACE non_empty_fields_pat RBRACE, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [389, simple_pattern → • LBRACE non_empty_map_elems_pat RBRACE, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [390, array_sub_pattern → • pattern, COMMA / RBRACKET]
// [391, array_sub_pattern → • DOTDOT STRING, COMMA / RBRACKET]
// [392, array_sub_pattern → • DOTDOT BYTES, COMMA / RBRACKET]
// [393, array_sub_pattern → • DOTDOT UIDENT, COMMA / RBRACKET]
// [394, array_sub_pattern → • DOTDOT PACKAGE_NAME DOT_UIDENT, COMMA / RBRACKET]
// [395, dotdot_binder → • DOTDOT LIDENT, COMMA / RBRACKET]
// [396, dotdot_binder → • DOTDOT UNDERSCORE, COMMA / RBRACKET]
// [397, dotdot_binder → • DOTDOT AS LIDENT, COMMA / RBRACKET]
// [398, dotdot_binder → • DOTDOT, COMMA / RBRACKET]
// [399, array_sub_patterns → •, RBRACKET]
// [400, array_sub_patterns → • array_sub_pattern, RBRACKET]
// [401, array_sub_patterns → • array_sub_pattern COMMA array_sub_patterns, RBRACKET]
// [402, array_sub_patterns → • dotdot_binder COMMA non_empty_list_commas(array_sub_pattern), RBRACKET]
// [403, array_sub_patterns → • dotdot_binder, RBRACKET]
// [404, array_sub_patterns → • dotdot_binder COMMA, RBRACKET]
fn yy_state_56(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACE => Shift(yy_state_52)
    T_LBRACKET => Shift(yy_state_56)
    NT_dotdot_binder => Shift(yy_state_57)
    T_LPAREN => Shift(yy_state_70)
    NT_constr => Shift(yy_state_71)
    T_UNDERSCORE => Shift(yy_state_82)
    T_BYTES => Shift(yy_state_83)
    T_STRING => Shift(yy_state_84)
    T_MINUS => Shift(yy_state_85)
    T_FLOAT => Shift(yy_state_88)
    T_BYTE => Shift(yy_state_89)
    T_INT => Shift(yy_state_90)
    T_CHAR => Shift(yy_state_91)
    T_FALSE => Shift(yy_state_92)
    T_TRUE => Shift(yy_state_93)
    NT_simple_pattern => Shift(yy_state_94)
    NT_type_name => Shift(yy_state_97)
    T_PACKAGE_NAME => Shift(yy_state_100)
    T_UIDENT => Shift(yy_state_102)
    T_LIDENT => Shift(yy_state_103)
    NT_range_pattern => Shift(yy_state_106)
    NT_or_pattern => Shift(yy_state_109)
    NT_pattern => Shift(yy_state_183)
    NT_array_sub_pattern => Shift(yy_state_185)
    T_DOTDOT => Shift(yy_state_188)
    NT_array_sub_patterns => Shift(yy_state_193)
    T_RBRACKET => Reduce(0, NT_array_sub_patterns, yy_action_460)
    _ => Error
  }
}

// [402, array_sub_patterns → dotdot_binder • COMMA non_empty_list_commas(array_sub_pattern), RBRACKET]
// [403, array_sub_patterns → dotdot_binder •, RBRACKET]
// [404, array_sub_patterns → dotdot_binder • COMMA, RBRACKET]
fn yy_state_57(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COMMA => Shift(yy_state_58)
    T_RBRACKET => Reduce(1, NT_array_sub_patterns, yy_action_628)
    _ => Error
  }
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [289, constr → • UIDENT, LPAREN / COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, LPAREN / COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [291, constr → • type_name COLONCOLON UIDENT, LPAREN / COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [362, pattern → • pattern AS LIDENT, COMMA / RBRACKET / AS]
// [363, pattern → • or_pattern, COMMA / RBRACKET / AS]
// [364, or_pattern → • range_pattern BAR or_pattern, COMMA / RBRACKET / AS]
// [365, or_pattern → • range_pattern, COMMA / RBRACKET / AS]
// [366, range_pattern → • simple_pattern RANGE_EXCLUSIVE simple_pattern, COMMA / RBRACKET / BAR / AS]
// [367, range_pattern → • simple_pattern RANGE_INCLUSIVE simple_pattern, COMMA / RBRACKET / BAR / AS]
// [368, range_pattern → • simple_pattern, COMMA / RBRACKET / BAR / AS]
// [369, simple_pattern → • TRUE, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [370, simple_pattern → • FALSE, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [371, simple_pattern → • CHAR, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [372, simple_pattern → • INT, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [373, simple_pattern → • BYTE, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [374, simple_pattern → • FLOAT, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [375, simple_pattern → • MINUS INT, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [376, simple_pattern → • MINUS FLOAT, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [377, simple_pattern → • STRING, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [378, simple_pattern → • BYTES, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [379, simple_pattern → • UNDERSCORE, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [380, simple_pattern → • LIDENT, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [381, simple_pattern → • constr option(delimited(LPAREN,constr_pat_arguments,RPAREN)), COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [382, simple_pattern → • LPAREN pattern RPAREN, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [383, simple_pattern → • LPAREN pattern COMMA non_empty_list_commas(pattern) RPAREN, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [384, simple_pattern → • LPAREN pattern COLON type_ RPAREN, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [385, simple_pattern → • LBRACKET array_sub_patterns RBRACKET, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [386, simple_pattern → • LBRACE RBRACE, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [387, simple_pattern → • LBRACE DOTDOT option(COMMA) RBRACE, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [388, simple_pattern → • LBRACE non_empty_fields_pat RBRACE, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [389, simple_pattern → • LBRACE non_empty_map_elems_pat RBRACE, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [390, array_sub_pattern → • pattern, COMMA / RBRACKET]
// [391, array_sub_pattern → • DOTDOT STRING, COMMA / RBRACKET]
// [392, array_sub_pattern → • DOTDOT BYTES, COMMA / RBRACKET]
// [393, array_sub_pattern → • DOTDOT UIDENT, COMMA / RBRACKET]
// [394, array_sub_pattern → • DOTDOT PACKAGE_NAME DOT_UIDENT, COMMA / RBRACKET]
// [402, array_sub_patterns → dotdot_binder COMMA • non_empty_list_commas(array_sub_pattern), RBRACKET]
// [404, array_sub_patterns → dotdot_binder COMMA •, RBRACKET]
// [535, non_empty_list_commas(array_sub_pattern) → • non_empty_list_commas_rev(array_sub_pattern) option(COMMA), RBRACKET]
// [598, non_empty_list_commas_rev(array_sub_pattern) → • array_sub_pattern, COMMA / RBRACKET]
// [599, non_empty_list_commas_rev(array_sub_pattern) → • non_empty_list_commas_rev(array_sub_pattern) COMMA array_sub_pattern, COMMA / RBRACKET]
fn yy_state_58(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACE => Shift(yy_state_52)
    T_LBRACKET => Shift(yy_state_56)
    NT_array_sub_pattern => Shift(yy_state_59)
    NT_non_empty_list_commas_rev_array_sub_pattern_ => Shift(yy_state_60)
    T_DOTDOT => Shift(yy_state_64)
    T_LPAREN => Shift(yy_state_70)
    NT_constr => Shift(yy_state_71)
    T_UNDERSCORE => Shift(yy_state_82)
    T_BYTES => Shift(yy_state_83)
    T_STRING => Shift(yy_state_84)
    T_MINUS => Shift(yy_state_85)
    T_FLOAT => Shift(yy_state_88)
    T_BYTE => Shift(yy_state_89)
    T_INT => Shift(yy_state_90)
    T_CHAR => Shift(yy_state_91)
    T_FALSE => Shift(yy_state_92)
    T_TRUE => Shift(yy_state_93)
    NT_simple_pattern => Shift(yy_state_94)
    NT_type_name => Shift(yy_state_97)
    T_PACKAGE_NAME => Shift(yy_state_100)
    T_UIDENT => Shift(yy_state_102)
    T_LIDENT => Shift(yy_state_103)
    NT_range_pattern => Shift(yy_state_106)
    NT_or_pattern => Shift(yy_state_109)
    NT_pattern => Shift(yy_state_183)
    NT_non_empty_list_commas_array_sub_pattern_ => Shift(yy_state_184)
    T_RBRACKET => Reduce(2, NT_array_sub_patterns, yy_action_82)
    _ => Error
  }
}

// [598, non_empty_list_commas_rev(array_sub_pattern) → array_sub_pattern •, COMMA / RBRACKET]
fn yy_state_59(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_non_empty_list_commas_rev_array_sub_pattern_, yy_action_708)
}

// [533, option(COMMA) → •, RBRACKET]
// [534, option(COMMA) → • COMMA, RBRACKET]
// [535, non_empty_list_commas(array_sub_pattern) → non_empty_list_commas_rev(array_sub_pattern) • option(COMMA), RBRACKET]
// [599, non_empty_list_commas_rev(array_sub_pattern) → non_empty_list_commas_rev(array_sub_pattern) • COMMA array_sub_pattern, COMMA / RBRACKET]
fn yy_state_60(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_option_COMMA_ => Shift(yy_state_61)
    T_COMMA => Shift(yy_state_62)
    T_RBRACKET => Reduce(0, NT_option_COMMA_, yy_action_181)
    _ => Error
  }
}

// [535, non_empty_list_commas(array_sub_pattern) → non_empty_list_commas_rev(array_sub_pattern) option(COMMA) •, RBRACKET]
fn yy_state_61(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_non_empty_list_commas_array_sub_pattern_, yy_action_418)
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [289, constr → • UIDENT, LPAREN / COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, LPAREN / COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [291, constr → • type_name COLONCOLON UIDENT, LPAREN / COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [362, pattern → • pattern AS LIDENT, COMMA / RBRACKET / AS]
// [363, pattern → • or_pattern, COMMA / RBRACKET / AS]
// [364, or_pattern → • range_pattern BAR or_pattern, COMMA / RBRACKET / AS]
// [365, or_pattern → • range_pattern, COMMA / RBRACKET / AS]
// [366, range_pattern → • simple_pattern RANGE_EXCLUSIVE simple_pattern, COMMA / RBRACKET / BAR / AS]
// [367, range_pattern → • simple_pattern RANGE_INCLUSIVE simple_pattern, COMMA / RBRACKET / BAR / AS]
// [368, range_pattern → • simple_pattern, COMMA / RBRACKET / BAR / AS]
// [369, simple_pattern → • TRUE, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [370, simple_pattern → • FALSE, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [371, simple_pattern → • CHAR, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [372, simple_pattern → • INT, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [373, simple_pattern → • BYTE, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [374, simple_pattern → • FLOAT, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [375, simple_pattern → • MINUS INT, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [376, simple_pattern → • MINUS FLOAT, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [377, simple_pattern → • STRING, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [378, simple_pattern → • BYTES, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [379, simple_pattern → • UNDERSCORE, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [380, simple_pattern → • LIDENT, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [381, simple_pattern → • constr option(delimited(LPAREN,constr_pat_arguments,RPAREN)), COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [382, simple_pattern → • LPAREN pattern RPAREN, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [383, simple_pattern → • LPAREN pattern COMMA non_empty_list_commas(pattern) RPAREN, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [384, simple_pattern → • LPAREN pattern COLON type_ RPAREN, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [385, simple_pattern → • LBRACKET array_sub_patterns RBRACKET, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [386, simple_pattern → • LBRACE RBRACE, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [387, simple_pattern → • LBRACE DOTDOT option(COMMA) RBRACE, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [388, simple_pattern → • LBRACE non_empty_fields_pat RBRACE, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [389, simple_pattern → • LBRACE non_empty_map_elems_pat RBRACE, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [390, array_sub_pattern → • pattern, COMMA / RBRACKET]
// [391, array_sub_pattern → • DOTDOT STRING, COMMA / RBRACKET]
// [392, array_sub_pattern → • DOTDOT BYTES, COMMA / RBRACKET]
// [393, array_sub_pattern → • DOTDOT UIDENT, COMMA / RBRACKET]
// [394, array_sub_pattern → • DOTDOT PACKAGE_NAME DOT_UIDENT, COMMA / RBRACKET]
// [534, option(COMMA) → COMMA •, RBRACKET]
// [599, non_empty_list_commas_rev(array_sub_pattern) → non_empty_list_commas_rev(array_sub_pattern) COMMA • array_sub_pattern, COMMA / RBRACKET]
fn yy_state_62(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACE => Shift(yy_state_52)
    T_LBRACKET => Shift(yy_state_56)
    NT_array_sub_pattern => Shift(yy_state_63)
    T_DOTDOT => Shift(yy_state_64)
    T_LPAREN => Shift(yy_state_70)
    NT_constr => Shift(yy_state_71)
    T_UNDERSCORE => Shift(yy_state_82)
    T_BYTES => Shift(yy_state_83)
    T_STRING => Shift(yy_state_84)
    T_MINUS => Shift(yy_state_85)
    T_FLOAT => Shift(yy_state_88)
    T_BYTE => Shift(yy_state_89)
    T_INT => Shift(yy_state_90)
    T_CHAR => Shift(yy_state_91)
    T_FALSE => Shift(yy_state_92)
    T_TRUE => Shift(yy_state_93)
    NT_simple_pattern => Shift(yy_state_94)
    NT_type_name => Shift(yy_state_97)
    T_PACKAGE_NAME => Shift(yy_state_100)
    T_UIDENT => Shift(yy_state_102)
    T_LIDENT => Shift(yy_state_103)
    NT_range_pattern => Shift(yy_state_106)
    NT_or_pattern => Shift(yy_state_109)
    NT_pattern => Shift(yy_state_183)
    T_RBRACKET => Reduce(1, NT_option_COMMA_, yy_action_56)
    _ => Error
  }
}

// [599, non_empty_list_commas_rev(array_sub_pattern) → non_empty_list_commas_rev(array_sub_pattern) COMMA array_sub_pattern •, COMMA / RBRACKET]
fn yy_state_63(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_non_empty_list_commas_rev_array_sub_pattern_, yy_action_421)
}

// [391, array_sub_pattern → DOTDOT • STRING, COMMA / RBRACKET]
// [392, array_sub_pattern → DOTDOT • BYTES, COMMA / RBRACKET]
// [393, array_sub_pattern → DOTDOT • UIDENT, COMMA / RBRACKET]
// [394, array_sub_pattern → DOTDOT • PACKAGE_NAME DOT_UIDENT, COMMA / RBRACKET]
fn yy_state_64(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_65)
    T_UIDENT => Shift(yy_state_67)
    T_BYTES => Shift(yy_state_68)
    T_STRING => Shift(yy_state_69)
    _ => Error
  }
}

// [394, array_sub_pattern → DOTDOT PACKAGE_NAME • DOT_UIDENT, COMMA / RBRACKET]
fn yy_state_65(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_DOT_UIDENT => Shift(yy_state_66)
    _ => Error
  }
}

// [394, array_sub_pattern → DOTDOT PACKAGE_NAME DOT_UIDENT •, COMMA / RBRACKET]
fn yy_state_66(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_array_sub_pattern, yy_action_393)
}

// [393, array_sub_pattern → DOTDOT UIDENT •, COMMA / RBRACKET]
fn yy_state_67(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_array_sub_pattern, yy_action_680)
}

// [392, array_sub_pattern → DOTDOT BYTES •, COMMA / RBRACKET]
fn yy_state_68(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_array_sub_pattern, yy_action_396)
}

// [391, array_sub_pattern → DOTDOT STRING •, COMMA / RBRACKET]
fn yy_state_69(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_array_sub_pattern, yy_action_65)
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [289, constr → • UIDENT, LPAREN / RPAREN / COMMA / COLON / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, LPAREN / RPAREN / COMMA / COLON / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [291, constr → • type_name COLONCOLON UIDENT, LPAREN / RPAREN / COMMA / COLON / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [362, pattern → • pattern AS LIDENT, RPAREN / COMMA / COLON / AS]
// [363, pattern → • or_pattern, RPAREN / COMMA / COLON / AS]
// [364, or_pattern → • range_pattern BAR or_pattern, RPAREN / COMMA / COLON / AS]
// [365, or_pattern → • range_pattern, RPAREN / COMMA / COLON / AS]
// [366, range_pattern → • simple_pattern RANGE_EXCLUSIVE simple_pattern, RPAREN / COMMA / COLON / BAR / AS]
// [367, range_pattern → • simple_pattern RANGE_INCLUSIVE simple_pattern, RPAREN / COMMA / COLON / BAR / AS]
// [368, range_pattern → • simple_pattern, RPAREN / COMMA / COLON / BAR / AS]
// [369, simple_pattern → • TRUE, RPAREN / COMMA / COLON / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [370, simple_pattern → • FALSE, RPAREN / COMMA / COLON / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [371, simple_pattern → • CHAR, RPAREN / COMMA / COLON / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [372, simple_pattern → • INT, RPAREN / COMMA / COLON / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [373, simple_pattern → • BYTE, RPAREN / COMMA / COLON / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [374, simple_pattern → • FLOAT, RPAREN / COMMA / COLON / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [375, simple_pattern → • MINUS INT, RPAREN / COMMA / COLON / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [376, simple_pattern → • MINUS FLOAT, RPAREN / COMMA / COLON / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [377, simple_pattern → • STRING, RPAREN / COMMA / COLON / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [378, simple_pattern → • BYTES, RPAREN / COMMA / COLON / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [379, simple_pattern → • UNDERSCORE, RPAREN / COMMA / COLON / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [380, simple_pattern → • LIDENT, RPAREN / COMMA / COLON / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [381, simple_pattern → • constr option(delimited(LPAREN,constr_pat_arguments,RPAREN)), RPAREN / COMMA / COLON / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [382, simple_pattern → • LPAREN pattern RPAREN, RPAREN / COMMA / COLON / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [382, simple_pattern → LPAREN • pattern RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [383, simple_pattern → • LPAREN pattern COMMA non_empty_list_commas(pattern) RPAREN, RPAREN / COMMA / COLON / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [383, simple_pattern → LPAREN • pattern COMMA non_empty_list_commas(pattern) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [384, simple_pattern → • LPAREN pattern COLON type_ RPAREN, RPAREN / COMMA / COLON / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [384, simple_pattern → LPAREN • pattern COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [385, simple_pattern → • LBRACKET array_sub_patterns RBRACKET, RPAREN / COMMA / COLON / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [386, simple_pattern → • LBRACE RBRACE, RPAREN / COMMA / COLON / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [387, simple_pattern → • LBRACE DOTDOT option(COMMA) RBRACE, RPAREN / COMMA / COLON / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [388, simple_pattern → • LBRACE non_empty_fields_pat RBRACE, RPAREN / COMMA / COLON / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [389, simple_pattern → • LBRACE non_empty_map_elems_pat RBRACE, RPAREN / COMMA / COLON / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
fn yy_state_70(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACE => Shift(yy_state_52)
    T_LBRACKET => Shift(yy_state_56)
    T_LPAREN => Shift(yy_state_70)
    NT_constr => Shift(yy_state_71)
    T_UNDERSCORE => Shift(yy_state_82)
    T_BYTES => Shift(yy_state_83)
    T_STRING => Shift(yy_state_84)
    T_MINUS => Shift(yy_state_85)
    T_FLOAT => Shift(yy_state_88)
    T_BYTE => Shift(yy_state_89)
    T_INT => Shift(yy_state_90)
    T_CHAR => Shift(yy_state_91)
    T_FALSE => Shift(yy_state_92)
    T_TRUE => Shift(yy_state_93)
    NT_simple_pattern => Shift(yy_state_94)
    NT_type_name => Shift(yy_state_97)
    T_PACKAGE_NAME => Shift(yy_state_100)
    T_UIDENT => Shift(yy_state_102)
    T_LIDENT => Shift(yy_state_103)
    NT_range_pattern => Shift(yy_state_106)
    NT_or_pattern => Shift(yy_state_109)
    NT_pattern => Shift(yy_state_118)
    _ => Error
  }
}

// [381, simple_pattern → constr • option(delimited(LPAREN,constr_pat_arguments,RPAREN)), INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [531, option(delimited(LPAREN,constr_pat_arguments,RPAREN)) → •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [532, option(delimited(LPAREN,constr_pat_arguments,RPAREN)) → • LPAREN constr_pat_arguments RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
fn yy_state_71(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_72)
    NT_option_delimited_LPAREN_constr_pat_arguments_RPAREN__ => Shift(yy_state_117)
    T_INFIX1 | T_INFIX2 | T_INFIX3 | T_INFIX4 | T_EOF | T_CATCH | T_EQUAL | T_RPAREN | T_COMMA | T_MINUS | T_COLON | T_SEMI | T_PLUS | T_RBRACKET | T_BAR | T_LBRACE | T_RBRACE | T_AMPERAMPER | T_AMPER | T_CARET | T_BARBAR | T_AS | T_PIPE | T_ELSE | T_IF | T_FAT_ARROW | T_RANGE_INCLUSIVE | T_RANGE_EXCLUSIVE => Reduce(0, NT_option_delimited_LPAREN_constr_pat_arguments_RPAREN__, yy_action_558)
    _ => Error
  }
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [289, constr → • UIDENT, LPAREN / RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, LPAREN / RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [291, constr → • type_name COLONCOLON UIDENT, LPAREN / RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [362, pattern → • pattern AS LIDENT, RPAREN / COMMA / AS]
// [363, pattern → • or_pattern, RPAREN / COMMA / AS]
// [364, or_pattern → • range_pattern BAR or_pattern, RPAREN / COMMA / AS]
// [365, or_pattern → • range_pattern, RPAREN / COMMA / AS]
// [366, range_pattern → • simple_pattern RANGE_EXCLUSIVE simple_pattern, RPAREN / COMMA / BAR / AS]
// [367, range_pattern → • simple_pattern RANGE_INCLUSIVE simple_pattern, RPAREN / COMMA / BAR / AS]
// [368, range_pattern → • simple_pattern, RPAREN / COMMA / BAR / AS]
// [369, simple_pattern → • TRUE, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [370, simple_pattern → • FALSE, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [371, simple_pattern → • CHAR, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [372, simple_pattern → • INT, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [373, simple_pattern → • BYTE, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [374, simple_pattern → • FLOAT, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [375, simple_pattern → • MINUS INT, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [376, simple_pattern → • MINUS FLOAT, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [377, simple_pattern → • STRING, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [378, simple_pattern → • BYTES, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [379, simple_pattern → • UNDERSCORE, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [380, simple_pattern → • LIDENT, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [381, simple_pattern → • constr option(delimited(LPAREN,constr_pat_arguments,RPAREN)), RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [382, simple_pattern → • LPAREN pattern RPAREN, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [383, simple_pattern → • LPAREN pattern COMMA non_empty_list_commas(pattern) RPAREN, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [384, simple_pattern → • LPAREN pattern COLON type_ RPAREN, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [385, simple_pattern → • LBRACKET array_sub_patterns RBRACKET, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [386, simple_pattern → • LBRACE RBRACE, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [387, simple_pattern → • LBRACE DOTDOT option(COMMA) RBRACE, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [388, simple_pattern → • LBRACE non_empty_fields_pat RBRACE, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [389, simple_pattern → • LBRACE non_empty_map_elems_pat RBRACE, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [441, constr_pat_arguments → • constr_pat_argument option(COMMA), RPAREN]
// [442, constr_pat_arguments → • DOTDOT option(COMMA), RPAREN]
// [443, constr_pat_arguments → • constr_pat_argument COMMA constr_pat_arguments, RPAREN]
// [444, constr_pat_argument → • LIDENT EQUAL pattern, RPAREN / COMMA]
// [445, constr_pat_argument → • POST_LABEL, RPAREN / COMMA]
// [446, constr_pat_argument → • pattern, RPAREN / COMMA]
// [532, option(delimited(LPAREN,constr_pat_arguments,RPAREN)) → LPAREN • constr_pat_arguments RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
fn yy_state_72(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACE => Shift(yy_state_52)
    T_LBRACKET => Shift(yy_state_56)
    T_LPAREN => Shift(yy_state_70)
    NT_constr => Shift(yy_state_71)
    NT_constr_pat_arguments => Shift(yy_state_73)
    T_POST_LABEL => Shift(yy_state_75)
    T_DOTDOT => Shift(yy_state_76)
    NT_constr_pat_argument => Shift(yy_state_79)
    T_UNDERSCORE => Shift(yy_state_82)
    T_BYTES => Shift(yy_state_83)
    T_STRING => Shift(yy_state_84)
    T_MINUS => Shift(yy_state_85)
    T_FLOAT => Shift(yy_state_88)
    T_BYTE => Shift(yy_state_89)
    T_INT => Shift(yy_state_90)
    T_CHAR => Shift(yy_state_91)
    T_FALSE => Shift(yy_state_92)
    T_TRUE => Shift(yy_state_93)
    NT_simple_pattern => Shift(yy_state_94)
    NT_type_name => Shift(yy_state_97)
    T_PACKAGE_NAME => Shift(yy_state_100)
    T_UIDENT => Shift(yy_state_102)
    NT_range_pattern => Shift(yy_state_106)
    NT_or_pattern => Shift(yy_state_109)
    NT_pattern => Shift(yy_state_110)
    T_LIDENT => Shift(yy_state_113)
    _ => Error
  }
}

// [532, option(delimited(LPAREN,constr_pat_arguments,RPAREN)) → LPAREN constr_pat_arguments • RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
fn yy_state_73(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RPAREN => Shift(yy_state_74)
    _ => Error
  }
}

// [532, option(delimited(LPAREN,constr_pat_arguments,RPAREN)) → LPAREN constr_pat_arguments RPAREN •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
fn yy_state_74(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_option_delimited_LPAREN_constr_pat_arguments_RPAREN__, yy_action_585)
}

// [445, constr_pat_argument → POST_LABEL •, RPAREN / COMMA]
fn yy_state_75(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_constr_pat_argument, yy_action_326)
}

// [442, constr_pat_arguments → DOTDOT • option(COMMA), RPAREN]
// [533, option(COMMA) → •, RPAREN]
// [534, option(COMMA) → • COMMA, RPAREN]
fn yy_state_76(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COMMA => Shift(yy_state_77)
    NT_option_COMMA_ => Shift(yy_state_78)
    T_RPAREN => Reduce(0, NT_option_COMMA_, yy_action_181)
    _ => Error
  }
}

// [534, option(COMMA) → COMMA •, RPAREN / RBRACE]
fn yy_state_77(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_option_COMMA_, yy_action_56)
}

// [442, constr_pat_arguments → DOTDOT option(COMMA) •, RPAREN]
fn yy_state_78(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_constr_pat_arguments, yy_action_187)
}

// [441, constr_pat_arguments → constr_pat_argument • option(COMMA), RPAREN]
// [443, constr_pat_arguments → constr_pat_argument • COMMA constr_pat_arguments, RPAREN]
// [533, option(COMMA) → •, RPAREN]
// [534, option(COMMA) → • COMMA, RPAREN]
fn yy_state_79(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COMMA => Shift(yy_state_80)
    NT_option_COMMA_ => Shift(yy_state_116)
    T_RPAREN => Reduce(0, NT_option_COMMA_, yy_action_181)
    _ => Error
  }
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [289, constr → • UIDENT, LPAREN / RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, LPAREN / RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [291, constr → • type_name COLONCOLON UIDENT, LPAREN / RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [362, pattern → • pattern AS LIDENT, RPAREN / COMMA / AS]
// [363, pattern → • or_pattern, RPAREN / COMMA / AS]
// [364, or_pattern → • range_pattern BAR or_pattern, RPAREN / COMMA / AS]
// [365, or_pattern → • range_pattern, RPAREN / COMMA / AS]
// [366, range_pattern → • simple_pattern RANGE_EXCLUSIVE simple_pattern, RPAREN / COMMA / BAR / AS]
// [367, range_pattern → • simple_pattern RANGE_INCLUSIVE simple_pattern, RPAREN / COMMA / BAR / AS]
// [368, range_pattern → • simple_pattern, RPAREN / COMMA / BAR / AS]
// [369, simple_pattern → • TRUE, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [370, simple_pattern → • FALSE, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [371, simple_pattern → • CHAR, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [372, simple_pattern → • INT, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [373, simple_pattern → • BYTE, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [374, simple_pattern → • FLOAT, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [375, simple_pattern → • MINUS INT, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [376, simple_pattern → • MINUS FLOAT, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [377, simple_pattern → • STRING, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [378, simple_pattern → • BYTES, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [379, simple_pattern → • UNDERSCORE, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [380, simple_pattern → • LIDENT, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [381, simple_pattern → • constr option(delimited(LPAREN,constr_pat_arguments,RPAREN)), RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [382, simple_pattern → • LPAREN pattern RPAREN, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [383, simple_pattern → • LPAREN pattern COMMA non_empty_list_commas(pattern) RPAREN, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [384, simple_pattern → • LPAREN pattern COLON type_ RPAREN, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [385, simple_pattern → • LBRACKET array_sub_patterns RBRACKET, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [386, simple_pattern → • LBRACE RBRACE, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [387, simple_pattern → • LBRACE DOTDOT option(COMMA) RBRACE, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [388, simple_pattern → • LBRACE non_empty_fields_pat RBRACE, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [389, simple_pattern → • LBRACE non_empty_map_elems_pat RBRACE, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [441, constr_pat_arguments → • constr_pat_argument option(COMMA), RPAREN]
// [442, constr_pat_arguments → • DOTDOT option(COMMA), RPAREN]
// [443, constr_pat_arguments → • constr_pat_argument COMMA constr_pat_arguments, RPAREN]
// [443, constr_pat_arguments → constr_pat_argument COMMA • constr_pat_arguments, RPAREN]
// [444, constr_pat_argument → • LIDENT EQUAL pattern, RPAREN / COMMA]
// [445, constr_pat_argument → • POST_LABEL, RPAREN / COMMA]
// [446, constr_pat_argument → • pattern, RPAREN / COMMA]
// [534, option(COMMA) → COMMA •, RPAREN]
fn yy_state_80(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACE => Shift(yy_state_52)
    T_LBRACKET => Shift(yy_state_56)
    T_LPAREN => Shift(yy_state_70)
    NT_constr => Shift(yy_state_71)
    T_POST_LABEL => Shift(yy_state_75)
    T_DOTDOT => Shift(yy_state_76)
    NT_constr_pat_argument => Shift(yy_state_79)
    NT_constr_pat_arguments => Shift(yy_state_81)
    T_UNDERSCORE => Shift(yy_state_82)
    T_BYTES => Shift(yy_state_83)
    T_STRING => Shift(yy_state_84)
    T_MINUS => Shift(yy_state_85)
    T_FLOAT => Shift(yy_state_88)
    T_BYTE => Shift(yy_state_89)
    T_INT => Shift(yy_state_90)
    T_CHAR => Shift(yy_state_91)
    T_FALSE => Shift(yy_state_92)
    T_TRUE => Shift(yy_state_93)
    NT_simple_pattern => Shift(yy_state_94)
    NT_type_name => Shift(yy_state_97)
    T_PACKAGE_NAME => Shift(yy_state_100)
    T_UIDENT => Shift(yy_state_102)
    NT_range_pattern => Shift(yy_state_106)
    NT_or_pattern => Shift(yy_state_109)
    NT_pattern => Shift(yy_state_110)
    T_LIDENT => Shift(yy_state_113)
    T_RPAREN => Reduce(1, NT_option_COMMA_, yy_action_56)
    _ => Error
  }
}

// [443, constr_pat_arguments → constr_pat_argument COMMA constr_pat_arguments •, RPAREN]
fn yy_state_81(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_constr_pat_arguments, yy_action_663)
}

// [379, simple_pattern → UNDERSCORE •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
fn yy_state_82(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_simple_pattern, yy_action_272)
}

// [378, simple_pattern → BYTES •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
fn yy_state_83(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_simple_pattern, yy_action_381)
}

// [377, simple_pattern → STRING •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
fn yy_state_84(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_simple_pattern, yy_action_629)
}

// [375, simple_pattern → MINUS • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [376, simple_pattern → MINUS • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
fn yy_state_85(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_FLOAT => Shift(yy_state_86)
    T_INT => Shift(yy_state_87)
    _ => Error
  }
}

// [376, simple_pattern → MINUS FLOAT •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
fn yy_state_86(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_simple_pattern, yy_action_128)
}

// [375, simple_pattern → MINUS INT •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
fn yy_state_87(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_simple_pattern, yy_action_660)
}

// [374, simple_pattern → FLOAT •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
fn yy_state_88(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_simple_pattern, yy_action_231)
}

// [373, simple_pattern → BYTE •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
fn yy_state_89(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_simple_pattern, yy_action_340)
}

// [372, simple_pattern → INT •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
fn yy_state_90(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_simple_pattern, yy_action_30)
}

// [371, simple_pattern → CHAR •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
fn yy_state_91(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_simple_pattern, yy_action_52)
}

// [370, simple_pattern → FALSE •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
fn yy_state_92(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_simple_pattern, yy_action_327)
}

// [369, simple_pattern → TRUE •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
fn yy_state_93(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_simple_pattern, yy_action_689)
}

// [366, range_pattern → simple_pattern • RANGE_EXCLUSIVE simple_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW]
// [367, range_pattern → simple_pattern • RANGE_INCLUSIVE simple_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW]
// [368, range_pattern → simple_pattern •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW]
fn yy_state_94(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RANGE_INCLUSIVE => Shift(yy_state_95)
    T_RANGE_EXCLUSIVE => Shift(yy_state_104)
    T_INFIX1 | T_INFIX2 | T_INFIX3 | T_INFIX4 | T_EOF | T_CATCH | T_EQUAL | T_RPAREN | T_COMMA | T_MINUS | T_COLON | T_SEMI | T_PLUS | T_RBRACKET | T_BAR | T_LBRACE | T_RBRACE | T_AMPERAMPER | T_AMPER | T_CARET | T_BARBAR | T_AS | T_PIPE | T_ELSE | T_IF | T_FAT_ARROW => Reduce(1, NT_range_pattern, yy_action_499)
    _ => Error
  }
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / LPAREN / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / LPAREN / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / LPAREN / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [367, range_pattern → simple_pattern RANGE_INCLUSIVE • simple_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW]
// [369, simple_pattern → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW]
// [370, simple_pattern → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW]
// [371, simple_pattern → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW]
// [372, simple_pattern → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW]
// [373, simple_pattern → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW]
// [374, simple_pattern → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW]
// [375, simple_pattern → • MINUS INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW]
// [376, simple_pattern → • MINUS FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW]
// [377, simple_pattern → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW]
// [378, simple_pattern → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW]
// [379, simple_pattern → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW]
// [380, simple_pattern → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW]
// [381, simple_pattern → • constr option(delimited(LPAREN,constr_pat_arguments,RPAREN)), INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW]
// [382, simple_pattern → • LPAREN pattern RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW]
// [383, simple_pattern → • LPAREN pattern COMMA non_empty_list_commas(pattern) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW]
// [384, simple_pattern → • LPAREN pattern COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW]
// [385, simple_pattern → • LBRACKET array_sub_patterns RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW]
// [386, simple_pattern → • LBRACE RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW]
// [387, simple_pattern → • LBRACE DOTDOT option(COMMA) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW]
// [388, simple_pattern → • LBRACE non_empty_fields_pat RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW]
// [389, simple_pattern → • LBRACE non_empty_map_elems_pat RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW]
fn yy_state_95(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACE => Shift(yy_state_52)
    T_LBRACKET => Shift(yy_state_56)
    T_LPAREN => Shift(yy_state_70)
    NT_constr => Shift(yy_state_71)
    T_UNDERSCORE => Shift(yy_state_82)
    T_BYTES => Shift(yy_state_83)
    T_STRING => Shift(yy_state_84)
    T_MINUS => Shift(yy_state_85)
    T_FLOAT => Shift(yy_state_88)
    T_BYTE => Shift(yy_state_89)
    T_INT => Shift(yy_state_90)
    T_CHAR => Shift(yy_state_91)
    T_FALSE => Shift(yy_state_92)
    T_TRUE => Shift(yy_state_93)
    NT_simple_pattern => Shift(yy_state_96)
    NT_type_name => Shift(yy_state_97)
    T_PACKAGE_NAME => Shift(yy_state_100)
    T_UIDENT => Shift(yy_state_102)
    T_LIDENT => Shift(yy_state_103)
    _ => Error
  }
}

// [367, range_pattern → simple_pattern RANGE_INCLUSIVE simple_pattern •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW]
fn yy_state_96(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_range_pattern, yy_action_112)
}

// [291, constr → type_name • COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / LPAREN / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
fn yy_state_97(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLONCOLON => Shift(yy_state_98)
    _ => Error
  }
}

// [291, constr → type_name COLONCOLON • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / LPAREN / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
fn yy_state_98(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_99)
    _ => Error
  }
}

// [291, constr → type_name COLONCOLON UIDENT •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_99(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_constr, yy_action_197)
}

// [199, qual_ident_ty → PACKAGE_NAME • DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → PACKAGE_NAME • DOT_UIDENT, COLONCOLON]
// [290, constr → PACKAGE_NAME • DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / LPAREN / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
fn yy_state_100(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_DOT_LIDENT => Shift(yy_state_22)
    T_DOT_UIDENT => Shift(yy_state_101)
    _ => Error
  }
}

// [200, qual_ident_ty → PACKAGE_NAME DOT_UIDENT •, COLONCOLON]
// [290, constr → PACKAGE_NAME DOT_UIDENT •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_101(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLONCOLON => Reduce(2, NT_qual_ident_ty, yy_action_292)
    T_INFIX1 | T_INFIX2 | T_INFIX3 | T_INFIX4 | T_EOF | T_CATCH | T_EQUAL | T_LPAREN | T_RPAREN | T_COMMA | T_MINUS | T_QUESTION | T_EXCLAMATION | T_DOT_LIDENT | T_DOT_INT | T_COLON | T_SEMI | T_LBRACKET | T_PLUS | T_RBRACKET | T_BAR | T_LBRACE | T_RBRACE | T_AMPERAMPER | T_AMPER | T_CARET | T_BARBAR | T_AS | T_PIPE | T_ELSE | T_IF | T_FAT_ARROW | T_DOTDOT | T_RANGE_INCLUSIVE | T_RANGE_EXCLUSIVE | T_IS => Reduce(2, NT_constr, yy_action_196)
    _ => Error
  }
}

// [193, luident → UIDENT •, COLONCOLON]
// [289, constr → UIDENT •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_102(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLONCOLON => Reduce(1, NT_luident, yy_action_676)
    T_INFIX1 | T_INFIX2 | T_INFIX3 | T_INFIX4 | T_EOF | T_CATCH | T_EQUAL | T_LPAREN | T_RPAREN | T_COMMA | T_MINUS | T_QUESTION | T_EXCLAMATION | T_DOT_LIDENT | T_DOT_INT | T_COLON | T_SEMI | T_LBRACKET | T_PLUS | T_RBRACKET | T_BAR | T_LBRACE | T_RBRACE | T_AMPERAMPER | T_AMPER | T_CARET | T_BARBAR | T_AS | T_PIPE | T_ELSE | T_IF | T_FAT_ARROW | T_DOTDOT | T_RANGE_INCLUSIVE | T_RANGE_EXCLUSIVE | T_IS => Reduce(1, NT_constr, yy_action_543)
    _ => Error
  }
}

// [192, luident → LIDENT •, COLONCOLON]
// [380, simple_pattern → LIDENT •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
fn yy_state_103(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLONCOLON => Reduce(1, NT_luident, yy_action_155)
    T_INFIX1 | T_INFIX2 | T_INFIX3 | T_INFIX4 | T_EOF | T_CATCH | T_EQUAL | T_RPAREN | T_COMMA | T_MINUS | T_COLON | T_SEMI | T_PLUS | T_RBRACKET | T_BAR | T_LBRACE | T_RBRACE | T_AMPERAMPER | T_AMPER | T_CARET | T_BARBAR | T_AS | T_PIPE | T_ELSE | T_IF | T_FAT_ARROW | T_RANGE_INCLUSIVE | T_RANGE_EXCLUSIVE => Reduce(1, NT_simple_pattern, yy_action_116)
    _ => Error
  }
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / LPAREN / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / LPAREN / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / LPAREN / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [366, range_pattern → simple_pattern RANGE_EXCLUSIVE • simple_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW]
// [369, simple_pattern → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW]
// [370, simple_pattern → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW]
// [371, simple_pattern → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW]
// [372, simple_pattern → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW]
// [373, simple_pattern → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW]
// [374, simple_pattern → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW]
// [375, simple_pattern → • MINUS INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW]
// [376, simple_pattern → • MINUS FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW]
// [377, simple_pattern → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW]
// [378, simple_pattern → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW]
// [379, simple_pattern → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW]
// [380, simple_pattern → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW]
// [381, simple_pattern → • constr option(delimited(LPAREN,constr_pat_arguments,RPAREN)), INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW]
// [382, simple_pattern → • LPAREN pattern RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW]
// [383, simple_pattern → • LPAREN pattern COMMA non_empty_list_commas(pattern) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW]
// [384, simple_pattern → • LPAREN pattern COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW]
// [385, simple_pattern → • LBRACKET array_sub_patterns RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW]
// [386, simple_pattern → • LBRACE RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW]
// [387, simple_pattern → • LBRACE DOTDOT option(COMMA) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW]
// [388, simple_pattern → • LBRACE non_empty_fields_pat RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW]
// [389, simple_pattern → • LBRACE non_empty_map_elems_pat RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW]
fn yy_state_104(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACE => Shift(yy_state_52)
    T_LBRACKET => Shift(yy_state_56)
    T_LPAREN => Shift(yy_state_70)
    NT_constr => Shift(yy_state_71)
    T_UNDERSCORE => Shift(yy_state_82)
    T_BYTES => Shift(yy_state_83)
    T_STRING => Shift(yy_state_84)
    T_MINUS => Shift(yy_state_85)
    T_FLOAT => Shift(yy_state_88)
    T_BYTE => Shift(yy_state_89)
    T_INT => Shift(yy_state_90)
    T_CHAR => Shift(yy_state_91)
    T_FALSE => Shift(yy_state_92)
    T_TRUE => Shift(yy_state_93)
    NT_type_name => Shift(yy_state_97)
    T_PACKAGE_NAME => Shift(yy_state_100)
    T_UIDENT => Shift(yy_state_102)
    T_LIDENT => Shift(yy_state_103)
    NT_simple_pattern => Shift(yy_state_105)
    _ => Error
  }
}

// [366, range_pattern → simple_pattern RANGE_EXCLUSIVE simple_pattern •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW]
fn yy_state_105(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_range_pattern, yy_action_253)
}

// [364, or_pattern → range_pattern • BAR or_pattern, EQUAL / RPAREN / COMMA / COLON / RBRACKET / RBRACE / AS / IF / FAT_ARROW]
// [365, or_pattern → range_pattern •, EQUAL / RPAREN / COMMA / COLON / RBRACKET / RBRACE / AS / IF / FAT_ARROW]
fn yy_state_106(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_BAR => Shift(yy_state_107)
    T_EQUAL | T_RPAREN | T_COMMA | T_COLON | T_RBRACKET | T_RBRACE | T_AS | T_IF | T_FAT_ARROW => Reduce(1, NT_or_pattern, yy_action_709)
    _ => Error
  }
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [289, constr → • UIDENT, EQUAL / LPAREN / RPAREN / COMMA / COLON / RBRACKET / BAR / RBRACE / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, EQUAL / LPAREN / RPAREN / COMMA / COLON / RBRACKET / BAR / RBRACE / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [291, constr → • type_name COLONCOLON UIDENT, EQUAL / LPAREN / RPAREN / COMMA / COLON / RBRACKET / BAR / RBRACE / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [364, or_pattern → • range_pattern BAR or_pattern, EQUAL / RPAREN / COMMA / COLON / RBRACKET / RBRACE / AS / IF / FAT_ARROW]
// [364, or_pattern → range_pattern BAR • or_pattern, EQUAL / RPAREN / COMMA / COLON / RBRACKET / RBRACE / AS / IF / FAT_ARROW]
// [365, or_pattern → • range_pattern, EQUAL / RPAREN / COMMA / COLON / RBRACKET / RBRACE / AS / IF / FAT_ARROW]
// [366, range_pattern → • simple_pattern RANGE_EXCLUSIVE simple_pattern, EQUAL / RPAREN / COMMA / COLON / RBRACKET / BAR / RBRACE / AS / IF / FAT_ARROW]
// [367, range_pattern → • simple_pattern RANGE_INCLUSIVE simple_pattern, EQUAL / RPAREN / COMMA / COLON / RBRACKET / BAR / RBRACE / AS / IF / FAT_ARROW]
// [368, range_pattern → • simple_pattern, EQUAL / RPAREN / COMMA / COLON / RBRACKET / BAR / RBRACE / AS / IF / FAT_ARROW]
// [369, simple_pattern → • TRUE, EQUAL / RPAREN / COMMA / COLON / RBRACKET / BAR / RBRACE / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [370, simple_pattern → • FALSE, EQUAL / RPAREN / COMMA / COLON / RBRACKET / BAR / RBRACE / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [371, simple_pattern → • CHAR, EQUAL / RPAREN / COMMA / COLON / RBRACKET / BAR / RBRACE / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [372, simple_pattern → • INT, EQUAL / RPAREN / COMMA / COLON / RBRACKET / BAR / RBRACE / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [373, simple_pattern → • BYTE, EQUAL / RPAREN / COMMA / COLON / RBRACKET / BAR / RBRACE / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [374, simple_pattern → • FLOAT, EQUAL / RPAREN / COMMA / COLON / RBRACKET / BAR / RBRACE / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [375, simple_pattern → • MINUS INT, EQUAL / RPAREN / COMMA / COLON / RBRACKET / BAR / RBRACE / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [376, simple_pattern → • MINUS FLOAT, EQUAL / RPAREN / COMMA / COLON / RBRACKET / BAR / RBRACE / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [377, simple_pattern → • STRING, EQUAL / RPAREN / COMMA / COLON / RBRACKET / BAR / RBRACE / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [378, simple_pattern → • BYTES, EQUAL / RPAREN / COMMA / COLON / RBRACKET / BAR / RBRACE / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [379, simple_pattern → • UNDERSCORE, EQUAL / RPAREN / COMMA / COLON / RBRACKET / BAR / RBRACE / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [380, simple_pattern → • LIDENT, EQUAL / RPAREN / COMMA / COLON / RBRACKET / BAR / RBRACE / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [381, simple_pattern → • constr option(delimited(LPAREN,constr_pat_arguments,RPAREN)), EQUAL / RPAREN / COMMA / COLON / RBRACKET / BAR / RBRACE / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [382, simple_pattern → • LPAREN pattern RPAREN, EQUAL / RPAREN / COMMA / COLON / RBRACKET / BAR / RBRACE / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [383, simple_pattern → • LPAREN pattern COMMA non_empty_list_commas(pattern) RPAREN, EQUAL / RPAREN / COMMA / COLON / RBRACKET / BAR / RBRACE / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [384, simple_pattern → • LPAREN pattern COLON type_ RPAREN, EQUAL / RPAREN / COMMA / COLON / RBRACKET / BAR / RBRACE / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [385, simple_pattern → • LBRACKET array_sub_patterns RBRACKET, EQUAL / RPAREN / COMMA / COLON / RBRACKET / BAR / RBRACE / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [386, simple_pattern → • LBRACE RBRACE, EQUAL / RPAREN / COMMA / COLON / RBRACKET / BAR / RBRACE / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [387, simple_pattern → • LBRACE DOTDOT option(COMMA) RBRACE, EQUAL / RPAREN / COMMA / COLON / RBRACKET / BAR / RBRACE / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [388, simple_pattern → • LBRACE non_empty_fields_pat RBRACE, EQUAL / RPAREN / COMMA / COLON / RBRACKET / BAR / RBRACE / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [389, simple_pattern → • LBRACE non_empty_map_elems_pat RBRACE, EQUAL / RPAREN / COMMA / COLON / RBRACKET / BAR / RBRACE / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
fn yy_state_107(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACE => Shift(yy_state_52)
    T_LBRACKET => Shift(yy_state_56)
    T_LPAREN => Shift(yy_state_70)
    NT_constr => Shift(yy_state_71)
    T_UNDERSCORE => Shift(yy_state_82)
    T_BYTES => Shift(yy_state_83)
    T_STRING => Shift(yy_state_84)
    T_MINUS => Shift(yy_state_85)
    T_FLOAT => Shift(yy_state_88)
    T_BYTE => Shift(yy_state_89)
    T_INT => Shift(yy_state_90)
    T_CHAR => Shift(yy_state_91)
    T_FALSE => Shift(yy_state_92)
    T_TRUE => Shift(yy_state_93)
    NT_simple_pattern => Shift(yy_state_94)
    NT_type_name => Shift(yy_state_97)
    T_PACKAGE_NAME => Shift(yy_state_100)
    T_UIDENT => Shift(yy_state_102)
    T_LIDENT => Shift(yy_state_103)
    NT_range_pattern => Shift(yy_state_106)
    NT_or_pattern => Shift(yy_state_108)
    _ => Error
  }
}

// [364, or_pattern → range_pattern BAR or_pattern •, EQUAL / RPAREN / COMMA / COLON / RBRACKET / RBRACE / AS / IF / FAT_ARROW]
fn yy_state_108(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_or_pattern, yy_action_593)
}

// [363, pattern → or_pattern •, EQUAL / RPAREN / COMMA / COLON / RBRACKET / RBRACE / AS / IF / FAT_ARROW]
fn yy_state_109(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_pattern, yy_action_656)
}

// [362, pattern → pattern • AS LIDENT, RPAREN / COMMA / AS]
// [446, constr_pat_argument → pattern •, RPAREN / COMMA]
fn yy_state_110(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AS => Shift(yy_state_111)
    T_RPAREN | T_COMMA => Reduce(1, NT_constr_pat_argument, yy_action_366)
    _ => Error
  }
}

// [362, pattern → pattern AS • LIDENT, EQUAL / RPAREN / COMMA / COLON / RBRACKET / RBRACE / AS / IF / FAT_ARROW]
fn yy_state_111(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_112)
    _ => Error
  }
}

// [362, pattern → pattern AS LIDENT •, EQUAL / RPAREN / COMMA / COLON / RBRACKET / RBRACE / AS / IF / FAT_ARROW]
fn yy_state_112(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_pattern, yy_action_268)
}

// [192, luident → LIDENT •, COLONCOLON]
// [380, simple_pattern → LIDENT •, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [444, constr_pat_argument → LIDENT • EQUAL pattern, RPAREN / COMMA]
fn yy_state_113(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EQUAL => Shift(yy_state_114)
    T_COLONCOLON => Reduce(1, NT_luident, yy_action_155)
    T_RPAREN | T_COMMA | T_BAR | T_AS | T_RANGE_INCLUSIVE | T_RANGE_EXCLUSIVE => Reduce(1, NT_simple_pattern, yy_action_116)
    _ => Error
  }
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [289, constr → • UIDENT, LPAREN / RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, LPAREN / RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [291, constr → • type_name COLONCOLON UIDENT, LPAREN / RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [362, pattern → • pattern AS LIDENT, RPAREN / COMMA / AS]
// [363, pattern → • or_pattern, RPAREN / COMMA / AS]
// [364, or_pattern → • range_pattern BAR or_pattern, RPAREN / COMMA / AS]
// [365, or_pattern → • range_pattern, RPAREN / COMMA / AS]
// [366, range_pattern → • simple_pattern RANGE_EXCLUSIVE simple_pattern, RPAREN / COMMA / BAR / AS]
// [367, range_pattern → • simple_pattern RANGE_INCLUSIVE simple_pattern, RPAREN / COMMA / BAR / AS]
// [368, range_pattern → • simple_pattern, RPAREN / COMMA / BAR / AS]
// [369, simple_pattern → • TRUE, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [370, simple_pattern → • FALSE, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [371, simple_pattern → • CHAR, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [372, simple_pattern → • INT, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [373, simple_pattern → • BYTE, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [374, simple_pattern → • FLOAT, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [375, simple_pattern → • MINUS INT, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [376, simple_pattern → • MINUS FLOAT, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [377, simple_pattern → • STRING, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [378, simple_pattern → • BYTES, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [379, simple_pattern → • UNDERSCORE, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [380, simple_pattern → • LIDENT, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [381, simple_pattern → • constr option(delimited(LPAREN,constr_pat_arguments,RPAREN)), RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [382, simple_pattern → • LPAREN pattern RPAREN, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [383, simple_pattern → • LPAREN pattern COMMA non_empty_list_commas(pattern) RPAREN, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [384, simple_pattern → • LPAREN pattern COLON type_ RPAREN, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [385, simple_pattern → • LBRACKET array_sub_patterns RBRACKET, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [386, simple_pattern → • LBRACE RBRACE, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [387, simple_pattern → • LBRACE DOTDOT option(COMMA) RBRACE, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [388, simple_pattern → • LBRACE non_empty_fields_pat RBRACE, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [389, simple_pattern → • LBRACE non_empty_map_elems_pat RBRACE, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [444, constr_pat_argument → LIDENT EQUAL • pattern, RPAREN / COMMA]
fn yy_state_114(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACE => Shift(yy_state_52)
    T_LBRACKET => Shift(yy_state_56)
    T_LPAREN => Shift(yy_state_70)
    NT_constr => Shift(yy_state_71)
    T_UNDERSCORE => Shift(yy_state_82)
    T_BYTES => Shift(yy_state_83)
    T_STRING => Shift(yy_state_84)
    T_MINUS => Shift(yy_state_85)
    T_FLOAT => Shift(yy_state_88)
    T_BYTE => Shift(yy_state_89)
    T_INT => Shift(yy_state_90)
    T_CHAR => Shift(yy_state_91)
    T_FALSE => Shift(yy_state_92)
    T_TRUE => Shift(yy_state_93)
    NT_simple_pattern => Shift(yy_state_94)
    NT_type_name => Shift(yy_state_97)
    T_PACKAGE_NAME => Shift(yy_state_100)
    T_UIDENT => Shift(yy_state_102)
    T_LIDENT => Shift(yy_state_103)
    NT_range_pattern => Shift(yy_state_106)
    NT_or_pattern => Shift(yy_state_109)
    NT_pattern => Shift(yy_state_115)
    _ => Error
  }
}

// [362, pattern → pattern • AS LIDENT, RPAREN / COMMA / AS]
// [444, constr_pat_argument → LIDENT EQUAL pattern •, RPAREN / COMMA]
fn yy_state_115(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AS => Shift(yy_state_111)
    T_RPAREN | T_COMMA => Reduce(3, NT_constr_pat_argument, yy_action_261)
    _ => Error
  }
}

// [441, constr_pat_arguments → constr_pat_argument option(COMMA) •, RPAREN]
fn yy_state_116(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_constr_pat_arguments, yy_action_473)
}

// [381, simple_pattern → constr option(delimited(LPAREN,constr_pat_arguments,RPAREN)) •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
fn yy_state_117(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_simple_pattern, yy_action_153)
}

// [362, pattern → pattern • AS LIDENT, RPAREN / COMMA / COLON / AS]
// [382, simple_pattern → LPAREN pattern • RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [383, simple_pattern → LPAREN pattern • COMMA non_empty_list_commas(pattern) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [384, simple_pattern → LPAREN pattern • COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
fn yy_state_118(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AS => Shift(yy_state_111)
    T_COLON => Shift(yy_state_119)
    T_COMMA => Shift(yy_state_178)
    T_RPAREN => Shift(yy_state_182)
    _ => Error
  }
}

// [192, luident → • LIDENT, RPAREN / QUESTION / LBRACKET]
// [193, luident → • UIDENT, RPAREN / QUESTION / LBRACKET]
// [198, qual_ident_ty → • luident, RPAREN / QUESTION / LBRACKET]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, RPAREN / QUESTION / LBRACKET]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, RPAREN / QUESTION / LBRACKET]
// [384, simple_pattern → LPAREN pattern COLON • type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [410, type_ → • type_ QUESTION, RPAREN / QUESTION]
// [411, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN, RPAREN / QUESTION]
// [412, type_ → • ASYNC LPAREN type_ COMMA RPAREN THIN_ARROW return_type, RPAREN / QUESTION]
// [413, type_ → • ASYNC LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, RPAREN / QUESTION]
// [414, type_ → • LPAREN type_ COMMA RPAREN THIN_ARROW return_type, RPAREN / QUESTION]
// [415, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, RPAREN / QUESTION]
// [416, type_ → • ASYNC LPAREN RPAREN THIN_ARROW return_type, RPAREN / QUESTION]
// [417, type_ → • LPAREN RPAREN THIN_ARROW return_type, RPAREN / QUESTION]
// [418, type_ → • LPAREN type_ RPAREN, RPAREN / QUESTION]
// [419, type_ → • ASYNC LPAREN type_ RPAREN THIN_ARROW return_type, RPAREN / QUESTION]
// [420, type_ → • LPAREN type_ RPAREN THIN_ARROW return_type, RPAREN / QUESTION]
// [421, type_ → • qual_ident_ty optional_type_arguments, RPAREN / QUESTION]
// [422, type_ → • AMPER qual_ident_ty, RPAREN / QUESTION]
// [423, type_ → • UNDERSCORE, RPAREN / QUESTION]
fn yy_state_119(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    T_UNDERSCORE => Shift(yy_state_120)
    T_AMPER => Shift(yy_state_121)
    NT_qual_ident_ty => Shift(yy_state_123)
    T_ASYNC => Shift(yy_state_129)
    T_LPAREN => Shift(yy_state_134)
    NT_type_ => Shift(yy_state_176)
    _ => Error
  }
}

// [423, type_ → UNDERSCORE •, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
fn yy_state_120(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_type_, yy_action_648)
}

// [192, luident → • LIDENT, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [193, luident → • UIDENT, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [198, qual_ident_ty → • luident, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [422, type_ → AMPER • qual_ident_ty, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
fn yy_state_121(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    NT_qual_ident_ty => Shift(yy_state_122)
    _ => Error
  }
}

// [422, type_ → AMPER qual_ident_ty •, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
fn yy_state_122(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_type_, yy_action_318)
}

// [14, optional_type_arguments → • option(delimited(LBRACKET,non_empty_list_commas(type_),RBRACKET)), EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [421, type_ → qual_ident_ty • optional_type_arguments, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [456, option(delimited(LBRACKET,non_empty_list_commas(type_),RBRACKET)) → •, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [457, option(delimited(LBRACKET,non_empty_list_commas(type_),RBRACKET)) → • LBRACKET non_empty_list_commas(type_) RBRACKET, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
fn yy_state_123(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_124)
    NT_optional_type_arguments => Shift(yy_state_174)
    NT_option_delimited_LBRACKET_non_empty_list_commas_type___RBRACKET__ => Shift(yy_state_175)
    T_EOF | T_DERIVE | T_WITH | T_EQUAL | T_RPAREN | T_COMMA | T_QUESTION | T_EXCLAMATION | T_SEMI | T_RBRACKET | T_LBRACE | T_RBRACE => Reduce(0, NT_option_delimited_LBRACKET_non_empty_list_commas_type___RBRACKET__, yy_action_428)
    _ => Error
  }
}

// [192, luident → • LIDENT, COMMA / QUESTION / LBRACKET / RBRACKET]
// [193, luident → • UIDENT, COMMA / QUESTION / LBRACKET / RBRACKET]
// [198, qual_ident_ty → • luident, COMMA / QUESTION / LBRACKET / RBRACKET]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COMMA / QUESTION / LBRACKET / RBRACKET]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COMMA / QUESTION / LBRACKET / RBRACKET]
// [410, type_ → • type_ QUESTION, COMMA / QUESTION / RBRACKET]
// [411, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN, COMMA / QUESTION / RBRACKET]
// [412, type_ → • ASYNC LPAREN type_ COMMA RPAREN THIN_ARROW return_type, COMMA / QUESTION / RBRACKET]
// [413, type_ → • ASYNC LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, COMMA / QUESTION / RBRACKET]
// [414, type_ → • LPAREN type_ COMMA RPAREN THIN_ARROW return_type, COMMA / QUESTION / RBRACKET]
// [415, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, COMMA / QUESTION / RBRACKET]
// [416, type_ → • ASYNC LPAREN RPAREN THIN_ARROW return_type, COMMA / QUESTION / RBRACKET]
// [417, type_ → • LPAREN RPAREN THIN_ARROW return_type, COMMA / QUESTION / RBRACKET]
// [418, type_ → • LPAREN type_ RPAREN, COMMA / QUESTION / RBRACKET]
// [419, type_ → • ASYNC LPAREN type_ RPAREN THIN_ARROW return_type, COMMA / QUESTION / RBRACKET]
// [420, type_ → • LPAREN type_ RPAREN THIN_ARROW return_type, COMMA / QUESTION / RBRACKET]
// [421, type_ → • qual_ident_ty optional_type_arguments, COMMA / QUESTION / RBRACKET]
// [422, type_ → • AMPER qual_ident_ty, COMMA / QUESTION / RBRACKET]
// [423, type_ → • UNDERSCORE, COMMA / QUESTION / RBRACKET]
// [455, non_empty_list_commas(type_) → • non_empty_list_commas_rev(type_) option(COMMA), RBRACKET]
// [457, option(delimited(LBRACKET,non_empty_list_commas(type_),RBRACKET)) → LBRACKET • non_empty_list_commas(type_) RBRACKET, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [557, non_empty_list_commas_rev(type_) → • type_, COMMA / RBRACKET]
// [558, non_empty_list_commas_rev(type_) → • non_empty_list_commas_rev(type_) COMMA type_, COMMA / RBRACKET]
fn yy_state_124(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    T_UNDERSCORE => Shift(yy_state_120)
    T_AMPER => Shift(yy_state_121)
    NT_qual_ident_ty => Shift(yy_state_123)
    NT_non_empty_list_commas_type__ => Shift(yy_state_125)
    NT_non_empty_list_commas_rev_type__ => Shift(yy_state_127)
    T_ASYNC => Shift(yy_state_129)
    T_LPAREN => Shift(yy_state_134)
    NT_type_ => Shift(yy_state_159)
    _ => Error
  }
}

// [457, option(delimited(LBRACKET,non_empty_list_commas(type_),RBRACKET)) → LBRACKET non_empty_list_commas(type_) • RBRACKET, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
fn yy_state_125(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACKET => Shift(yy_state_126)
    _ => Error
  }
}

// [457, option(delimited(LBRACKET,non_empty_list_commas(type_),RBRACKET)) → LBRACKET non_empty_list_commas(type_) RBRACKET •, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
fn yy_state_126(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_option_delimited_LBRACKET_non_empty_list_commas_type___RBRACKET__, yy_action_214)
}

// [455, non_empty_list_commas(type_) → non_empty_list_commas_rev(type_) • option(COMMA), RPAREN / RBRACKET]
// [533, option(COMMA) → •, RPAREN / RBRACKET]
// [534, option(COMMA) → • COMMA, RPAREN / RBRACKET]
// [558, non_empty_list_commas_rev(type_) → non_empty_list_commas_rev(type_) • COMMA type_, RPAREN / COMMA / RBRACKET]
fn yy_state_127(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COMMA => Shift(yy_state_128)
    NT_option_COMMA_ => Shift(yy_state_173)
    T_RPAREN | T_RBRACKET => Reduce(0, NT_option_COMMA_, yy_action_181)
    _ => Error
  }
}

// [192, luident → • LIDENT, RPAREN / COMMA / QUESTION / LBRACKET / RBRACKET]
// [193, luident → • UIDENT, RPAREN / COMMA / QUESTION / LBRACKET / RBRACKET]
// [198, qual_ident_ty → • luident, RPAREN / COMMA / QUESTION / LBRACKET / RBRACKET]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, RPAREN / COMMA / QUESTION / LBRACKET / RBRACKET]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, RPAREN / COMMA / QUESTION / LBRACKET / RBRACKET]
// [410, type_ → • type_ QUESTION, RPAREN / COMMA / QUESTION / RBRACKET]
// [411, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN, RPAREN / COMMA / QUESTION / RBRACKET]
// [412, type_ → • ASYNC LPAREN type_ COMMA RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION / RBRACKET]
// [413, type_ → • ASYNC LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION / RBRACKET]
// [414, type_ → • LPAREN type_ COMMA RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION / RBRACKET]
// [415, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION / RBRACKET]
// [416, type_ → • ASYNC LPAREN RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION / RBRACKET]
// [417, type_ → • LPAREN RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION / RBRACKET]
// [418, type_ → • LPAREN type_ RPAREN, RPAREN / COMMA / QUESTION / RBRACKET]
// [419, type_ → • ASYNC LPAREN type_ RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION / RBRACKET]
// [420, type_ → • LPAREN type_ RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION / RBRACKET]
// [421, type_ → • qual_ident_ty optional_type_arguments, RPAREN / COMMA / QUESTION / RBRACKET]
// [422, type_ → • AMPER qual_ident_ty, RPAREN / COMMA / QUESTION / RBRACKET]
// [423, type_ → • UNDERSCORE, RPAREN / COMMA / QUESTION / RBRACKET]
// [534, option(COMMA) → COMMA •, RPAREN / RBRACKET]
// [558, non_empty_list_commas_rev(type_) → non_empty_list_commas_rev(type_) COMMA • type_, RPAREN / COMMA / RBRACKET]
fn yy_state_128(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    T_UNDERSCORE => Shift(yy_state_120)
    T_AMPER => Shift(yy_state_121)
    NT_qual_ident_ty => Shift(yy_state_123)
    T_ASYNC => Shift(yy_state_129)
    T_LPAREN => Shift(yy_state_134)
    NT_type_ => Shift(yy_state_172)
    T_RPAREN | T_RBRACKET => Reduce(1, NT_option_COMMA_, yy_action_56)
    _ => Error
  }
}

// [412, type_ → ASYNC • LPAREN type_ COMMA RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [413, type_ → ASYNC • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [416, type_ → ASYNC • LPAREN RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [419, type_ → ASYNC • LPAREN type_ RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
fn yy_state_129(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_130)
    _ => Error
  }
}

// [192, luident → • LIDENT, RPAREN / COMMA / QUESTION / LBRACKET]
// [193, luident → • UIDENT, RPAREN / COMMA / QUESTION / LBRACKET]
// [198, qual_ident_ty → • luident, RPAREN / COMMA / QUESTION / LBRACKET]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, RPAREN / COMMA / QUESTION / LBRACKET]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, RPAREN / COMMA / QUESTION / LBRACKET]
// [410, type_ → • type_ QUESTION, RPAREN / COMMA / QUESTION]
// [411, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN, RPAREN / COMMA / QUESTION]
// [412, type_ → • ASYNC LPAREN type_ COMMA RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [412, type_ → ASYNC LPAREN • type_ COMMA RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [413, type_ → • ASYNC LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [413, type_ → ASYNC LPAREN • type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [414, type_ → • LPAREN type_ COMMA RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [415, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [416, type_ → • ASYNC LPAREN RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [416, type_ → ASYNC LPAREN • RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [417, type_ → • LPAREN RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [418, type_ → • LPAREN type_ RPAREN, RPAREN / COMMA / QUESTION]
// [419, type_ → • ASYNC LPAREN type_ RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [419, type_ → ASYNC LPAREN • type_ RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [420, type_ → • LPAREN type_ RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [421, type_ → • qual_ident_ty optional_type_arguments, RPAREN / COMMA / QUESTION]
// [422, type_ → • AMPER qual_ident_ty, RPAREN / COMMA / QUESTION]
// [423, type_ → • UNDERSCORE, RPAREN / COMMA / QUESTION]
fn yy_state_130(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    T_UNDERSCORE => Shift(yy_state_120)
    T_AMPER => Shift(yy_state_121)
    NT_qual_ident_ty => Shift(yy_state_123)
    T_ASYNC => Shift(yy_state_129)
    T_RPAREN => Shift(yy_state_131)
    T_LPAREN => Shift(yy_state_134)
    NT_type_ => Shift(yy_state_160)
    _ => Error
  }
}

// [416, type_ → ASYNC LPAREN RPAREN • THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
fn yy_state_131(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_THIN_ARROW => Shift(yy_state_132)
    _ => Error
  }
}

// [192, luident → • LIDENT, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / LBRACKET / RBRACKET / LBRACE / RBRACE]
// [193, luident → • UIDENT, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / LBRACKET / RBRACKET / LBRACE / RBRACE]
// [198, qual_ident_ty → • luident, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / LBRACKET / RBRACKET / LBRACE / RBRACE]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / LBRACKET / RBRACKET / LBRACE / RBRACE]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / LBRACKET / RBRACKET / LBRACE / RBRACE]
// [405, return_type → • type_, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [406, return_type → • type_ EXCLAMATION, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [407, return_type → • type_ EXCLAMATION separated_nonempty_list(PLUS,error_type), EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [410, type_ → • type_ QUESTION, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [411, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [412, type_ → • ASYNC LPAREN type_ COMMA RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [413, type_ → • ASYNC LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [414, type_ → • LPAREN type_ COMMA RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [415, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [416, type_ → • ASYNC LPAREN RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [416, type_ → ASYNC LPAREN RPAREN THIN_ARROW • return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [417, type_ → • LPAREN RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [418, type_ → • LPAREN type_ RPAREN, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [419, type_ → • ASYNC LPAREN type_ RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [420, type_ → • LPAREN type_ RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [421, type_ → • qual_ident_ty optional_type_arguments, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [422, type_ → • AMPER qual_ident_ty, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [423, type_ → • UNDERSCORE, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
fn yy_state_132(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    T_UNDERSCORE => Shift(yy_state_120)
    T_AMPER => Shift(yy_state_121)
    NT_qual_ident_ty => Shift(yy_state_123)
    T_ASYNC => Shift(yy_state_129)
    NT_return_type => Shift(yy_state_133)
    T_LPAREN => Shift(yy_state_134)
    NT_type_ => Shift(yy_state_138)
    _ => Error
  }
}

// [416, type_ → ASYNC LPAREN RPAREN THIN_ARROW return_type •, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
fn yy_state_133(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_type_, yy_action_63)
}

// [192, luident → • LIDENT, RPAREN / COMMA / QUESTION / LBRACKET]
// [193, luident → • UIDENT, RPAREN / COMMA / QUESTION / LBRACKET]
// [198, qual_ident_ty → • luident, RPAREN / COMMA / QUESTION / LBRACKET]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, RPAREN / COMMA / QUESTION / LBRACKET]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, RPAREN / COMMA / QUESTION / LBRACKET]
// [410, type_ → • type_ QUESTION, RPAREN / COMMA / QUESTION]
// [411, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN, RPAREN / COMMA / QUESTION]
// [411, type_ → LPAREN • type_ COMMA non_empty_list_commas(type_) RPAREN, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [412, type_ → • ASYNC LPAREN type_ COMMA RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [413, type_ → • ASYNC LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [414, type_ → • LPAREN type_ COMMA RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [414, type_ → LPAREN • type_ COMMA RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [415, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [415, type_ → LPAREN • type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [416, type_ → • ASYNC LPAREN RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [417, type_ → • LPAREN RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [417, type_ → LPAREN • RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [418, type_ → • LPAREN type_ RPAREN, RPAREN / COMMA / QUESTION]
// [418, type_ → LPAREN • type_ RPAREN, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [419, type_ → • ASYNC LPAREN type_ RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [420, type_ → • LPAREN type_ RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [420, type_ → LPAREN • type_ RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [421, type_ → • qual_ident_ty optional_type_arguments, RPAREN / COMMA / QUESTION]
// [422, type_ → • AMPER qual_ident_ty, RPAREN / COMMA / QUESTION]
// [423, type_ → • UNDERSCORE, RPAREN / COMMA / QUESTION]
fn yy_state_134(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    T_UNDERSCORE => Shift(yy_state_120)
    T_AMPER => Shift(yy_state_121)
    NT_qual_ident_ty => Shift(yy_state_123)
    T_ASYNC => Shift(yy_state_129)
    T_LPAREN => Shift(yy_state_134)
    T_RPAREN => Shift(yy_state_135)
    NT_type_ => Shift(yy_state_147)
    _ => Error
  }
}

// [417, type_ → LPAREN RPAREN • THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
fn yy_state_135(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_THIN_ARROW => Shift(yy_state_136)
    _ => Error
  }
}

// [192, luident → • LIDENT, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / LBRACKET / RBRACKET / LBRACE / RBRACE]
// [193, luident → • UIDENT, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / LBRACKET / RBRACKET / LBRACE / RBRACE]
// [198, qual_ident_ty → • luident, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / LBRACKET / RBRACKET / LBRACE / RBRACE]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / LBRACKET / RBRACKET / LBRACE / RBRACE]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / LBRACKET / RBRACKET / LBRACE / RBRACE]
// [405, return_type → • type_, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [406, return_type → • type_ EXCLAMATION, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [407, return_type → • type_ EXCLAMATION separated_nonempty_list(PLUS,error_type), EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [410, type_ → • type_ QUESTION, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [411, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [412, type_ → • ASYNC LPAREN type_ COMMA RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [413, type_ → • ASYNC LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [414, type_ → • LPAREN type_ COMMA RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [415, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [416, type_ → • ASYNC LPAREN RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [417, type_ → • LPAREN RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [417, type_ → LPAREN RPAREN THIN_ARROW • return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [418, type_ → • LPAREN type_ RPAREN, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [419, type_ → • ASYNC LPAREN type_ RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [420, type_ → • LPAREN type_ RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [421, type_ → • qual_ident_ty optional_type_arguments, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [422, type_ → • AMPER qual_ident_ty, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [423, type_ → • UNDERSCORE, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
fn yy_state_136(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    T_UNDERSCORE => Shift(yy_state_120)
    T_AMPER => Shift(yy_state_121)
    NT_qual_ident_ty => Shift(yy_state_123)
    T_ASYNC => Shift(yy_state_129)
    T_LPAREN => Shift(yy_state_134)
    NT_return_type => Shift(yy_state_137)
    NT_type_ => Shift(yy_state_138)
    _ => Error
  }
}

// [417, type_ → LPAREN RPAREN THIN_ARROW return_type •, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
fn yy_state_137(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_type_, yy_action_546)
}

// [405, return_type → type_ •, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [406, return_type → type_ • EXCLAMATION, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [407, return_type → type_ • EXCLAMATION separated_nonempty_list(PLUS,error_type), EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [410, type_ → type_ • QUESTION, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
fn yy_state_138(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_QUESTION => Shift(yy_state_139)
    T_EXCLAMATION => Shift(yy_state_140)
    T_EOF | T_DERIVE | T_WITH | T_EQUAL | T_RPAREN | T_COMMA | T_SEMI | T_RBRACKET | T_LBRACE | T_RBRACE => Reduce(1, NT_return_type, yy_action_295)
    _ => Error
  }
}

// [410, type_ → type_ QUESTION •, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
fn yy_state_139(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_type_, yy_action_20)
}

// [192, luident → • LIDENT, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / PLUS / RBRACKET / LBRACE / RBRACE]
// [193, luident → • UIDENT, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / PLUS / RBRACKET / LBRACE / RBRACE]
// [198, qual_ident_ty → • luident, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / PLUS / RBRACKET / LBRACE / RBRACE]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / PLUS / RBRACKET / LBRACE / RBRACE]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / PLUS / RBRACKET / LBRACE / RBRACE]
// [406, return_type → type_ EXCLAMATION •, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [407, return_type → type_ EXCLAMATION • separated_nonempty_list(PLUS,error_type), EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [408, error_type → • qual_ident_ty, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / PLUS / RBRACKET / LBRACE / RBRACE]
// [409, error_type → • UNDERSCORE, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / PLUS / RBRACKET / LBRACE / RBRACE]
// [536, separated_nonempty_list(PLUS,error_type) → • error_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [537, separated_nonempty_list(PLUS,error_type) → • error_type PLUS separated_nonempty_list(PLUS,error_type), EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
fn yy_state_140(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    NT_error_type => Shift(yy_state_141)
    T_UNDERSCORE => Shift(yy_state_144)
    NT_qual_ident_ty => Shift(yy_state_145)
    NT_separated_nonempty_list_PLUS_error_type_ => Shift(yy_state_146)
    T_EOF | T_DERIVE | T_WITH | T_EQUAL | T_RPAREN | T_COMMA | T_QUESTION | T_EXCLAMATION | T_SEMI | T_RBRACKET | T_LBRACE | T_RBRACE => Reduce(2, NT_return_type, yy_action_668)
    _ => Error
  }
}

// [536, separated_nonempty_list(PLUS,error_type) → error_type •, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [537, separated_nonempty_list(PLUS,error_type) → error_type • PLUS separated_nonempty_list(PLUS,error_type), EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
fn yy_state_141(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PLUS => Shift(yy_state_142)
    T_EOF | T_DERIVE | T_WITH | T_EQUAL | T_RPAREN | T_COMMA | T_QUESTION | T_EXCLAMATION | T_SEMI | T_RBRACKET | T_LBRACE | T_RBRACE => Reduce(1, NT_separated_nonempty_list_PLUS_error_type_, yy_action_459)
    _ => Error
  }
}

// [192, luident → • LIDENT, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / PLUS / RBRACKET / LBRACE / RBRACE]
// [193, luident → • UIDENT, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / PLUS / RBRACKET / LBRACE / RBRACE]
// [198, qual_ident_ty → • luident, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / PLUS / RBRACKET / LBRACE / RBRACE]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / PLUS / RBRACKET / LBRACE / RBRACE]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / PLUS / RBRACKET / LBRACE / RBRACE]
// [408, error_type → • qual_ident_ty, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / PLUS / RBRACKET / LBRACE / RBRACE]
// [409, error_type → • UNDERSCORE, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / PLUS / RBRACKET / LBRACE / RBRACE]
// [536, separated_nonempty_list(PLUS,error_type) → • error_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [537, separated_nonempty_list(PLUS,error_type) → • error_type PLUS separated_nonempty_list(PLUS,error_type), EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [537, separated_nonempty_list(PLUS,error_type) → error_type PLUS • separated_nonempty_list(PLUS,error_type), EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
fn yy_state_142(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    NT_error_type => Shift(yy_state_141)
    NT_separated_nonempty_list_PLUS_error_type_ => Shift(yy_state_143)
    T_UNDERSCORE => Shift(yy_state_144)
    NT_qual_ident_ty => Shift(yy_state_145)
    _ => Error
  }
}

// [537, separated_nonempty_list(PLUS,error_type) → error_type PLUS separated_nonempty_list(PLUS,error_type) •, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
fn yy_state_143(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_separated_nonempty_list_PLUS_error_type_, yy_action_503)
}

// [409, error_type → UNDERSCORE •, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / PLUS / RBRACKET / LBRACE / RBRACE]
fn yy_state_144(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_error_type, yy_action_706)
}

// [408, error_type → qual_ident_ty •, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / PLUS / RBRACKET / LBRACE / RBRACE]
fn yy_state_145(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_error_type, yy_action_672)
}

// [407, return_type → type_ EXCLAMATION separated_nonempty_list(PLUS,error_type) •, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
fn yy_state_146(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_return_type, yy_action_129)
}

// [410, type_ → type_ • QUESTION, RPAREN / COMMA / QUESTION]
// [411, type_ → LPAREN type_ • COMMA non_empty_list_commas(type_) RPAREN, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [414, type_ → LPAREN type_ • COMMA RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [415, type_ → LPAREN type_ • COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [418, type_ → LPAREN type_ • RPAREN, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [420, type_ → LPAREN type_ • RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
fn yy_state_147(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_QUESTION => Shift(yy_state_139)
    T_RPAREN => Shift(yy_state_148)
    T_COMMA => Shift(yy_state_151)
    _ => Error
  }
}

// [418, type_ → LPAREN type_ RPAREN •, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [420, type_ → LPAREN type_ RPAREN • THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
fn yy_state_148(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_THIN_ARROW => Shift(yy_state_149)
    T_EOF | T_DERIVE | T_WITH | T_EQUAL | T_RPAREN | T_COMMA | T_QUESTION | T_EXCLAMATION | T_SEMI | T_RBRACKET | T_LBRACE | T_RBRACE => Reduce(3, NT_type_, yy_action_289)
    _ => Error
  }
}

// [192, luident → • LIDENT, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / LBRACKET / RBRACKET / LBRACE / RBRACE]
// [193, luident → • UIDENT, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / LBRACKET / RBRACKET / LBRACE / RBRACE]
// [198, qual_ident_ty → • luident, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / LBRACKET / RBRACKET / LBRACE / RBRACE]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / LBRACKET / RBRACKET / LBRACE / RBRACE]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / LBRACKET / RBRACKET / LBRACE / RBRACE]
// [405, return_type → • type_, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [406, return_type → • type_ EXCLAMATION, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [407, return_type → • type_ EXCLAMATION separated_nonempty_list(PLUS,error_type), EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [410, type_ → • type_ QUESTION, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [411, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [412, type_ → • ASYNC LPAREN type_ COMMA RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [413, type_ → • ASYNC LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [414, type_ → • LPAREN type_ COMMA RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [415, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [416, type_ → • ASYNC LPAREN RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [417, type_ → • LPAREN RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [418, type_ → • LPAREN type_ RPAREN, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [419, type_ → • ASYNC LPAREN type_ RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [420, type_ → • LPAREN type_ RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [420, type_ → LPAREN type_ RPAREN THIN_ARROW • return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [421, type_ → • qual_ident_ty optional_type_arguments, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [422, type_ → • AMPER qual_ident_ty, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [423, type_ → • UNDERSCORE, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
fn yy_state_149(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    T_UNDERSCORE => Shift(yy_state_120)
    T_AMPER => Shift(yy_state_121)
    NT_qual_ident_ty => Shift(yy_state_123)
    T_ASYNC => Shift(yy_state_129)
    T_LPAREN => Shift(yy_state_134)
    NT_type_ => Shift(yy_state_138)
    NT_return_type => Shift(yy_state_150)
    _ => Error
  }
}

// [420, type_ → LPAREN type_ RPAREN THIN_ARROW return_type •, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
fn yy_state_150(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_type_, yy_action_581)
}

// [192, luident → • LIDENT, RPAREN / COMMA / QUESTION / LBRACKET]
// [193, luident → • UIDENT, RPAREN / COMMA / QUESTION / LBRACKET]
// [198, qual_ident_ty → • luident, RPAREN / COMMA / QUESTION / LBRACKET]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, RPAREN / COMMA / QUESTION / LBRACKET]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, RPAREN / COMMA / QUESTION / LBRACKET]
// [410, type_ → • type_ QUESTION, RPAREN / COMMA / QUESTION]
// [411, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN, RPAREN / COMMA / QUESTION]
// [411, type_ → LPAREN type_ COMMA • non_empty_list_commas(type_) RPAREN, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [412, type_ → • ASYNC LPAREN type_ COMMA RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [413, type_ → • ASYNC LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [414, type_ → • LPAREN type_ COMMA RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [414, type_ → LPAREN type_ COMMA • RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [415, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [415, type_ → LPAREN type_ COMMA • non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [416, type_ → • ASYNC LPAREN RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [417, type_ → • LPAREN RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [418, type_ → • LPAREN type_ RPAREN, RPAREN / COMMA / QUESTION]
// [419, type_ → • ASYNC LPAREN type_ RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [420, type_ → • LPAREN type_ RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [421, type_ → • qual_ident_ty optional_type_arguments, RPAREN / COMMA / QUESTION]
// [422, type_ → • AMPER qual_ident_ty, RPAREN / COMMA / QUESTION]
// [423, type_ → • UNDERSCORE, RPAREN / COMMA / QUESTION]
// [455, non_empty_list_commas(type_) → • non_empty_list_commas_rev(type_) option(COMMA), RPAREN]
// [557, non_empty_list_commas_rev(type_) → • type_, RPAREN / COMMA]
// [558, non_empty_list_commas_rev(type_) → • non_empty_list_commas_rev(type_) COMMA type_, RPAREN / COMMA]
fn yy_state_151(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    T_UNDERSCORE => Shift(yy_state_120)
    T_AMPER => Shift(yy_state_121)
    NT_qual_ident_ty => Shift(yy_state_123)
    NT_non_empty_list_commas_rev_type__ => Shift(yy_state_127)
    T_ASYNC => Shift(yy_state_129)
    T_LPAREN => Shift(yy_state_134)
    T_RPAREN => Shift(yy_state_152)
    NT_non_empty_list_commas_type__ => Shift(yy_state_155)
    NT_type_ => Shift(yy_state_159)
    _ => Error
  }
}

// [414, type_ → LPAREN type_ COMMA RPAREN • THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
fn yy_state_152(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_THIN_ARROW => Shift(yy_state_153)
    _ => Error
  }
}

// [192, luident → • LIDENT, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / LBRACKET / RBRACKET / LBRACE / RBRACE]
// [193, luident → • UIDENT, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / LBRACKET / RBRACKET / LBRACE / RBRACE]
// [198, qual_ident_ty → • luident, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / LBRACKET / RBRACKET / LBRACE / RBRACE]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / LBRACKET / RBRACKET / LBRACE / RBRACE]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / LBRACKET / RBRACKET / LBRACE / RBRACE]
// [405, return_type → • type_, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [406, return_type → • type_ EXCLAMATION, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [407, return_type → • type_ EXCLAMATION separated_nonempty_list(PLUS,error_type), EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [410, type_ → • type_ QUESTION, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [411, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [412, type_ → • ASYNC LPAREN type_ COMMA RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [413, type_ → • ASYNC LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [414, type_ → • LPAREN type_ COMMA RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [414, type_ → LPAREN type_ COMMA RPAREN THIN_ARROW • return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [415, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [416, type_ → • ASYNC LPAREN RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [417, type_ → • LPAREN RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [418, type_ → • LPAREN type_ RPAREN, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [419, type_ → • ASYNC LPAREN type_ RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [420, type_ → • LPAREN type_ RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [421, type_ → • qual_ident_ty optional_type_arguments, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [422, type_ → • AMPER qual_ident_ty, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [423, type_ → • UNDERSCORE, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
fn yy_state_153(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    T_UNDERSCORE => Shift(yy_state_120)
    T_AMPER => Shift(yy_state_121)
    NT_qual_ident_ty => Shift(yy_state_123)
    T_ASYNC => Shift(yy_state_129)
    T_LPAREN => Shift(yy_state_134)
    NT_type_ => Shift(yy_state_138)
    NT_return_type => Shift(yy_state_154)
    _ => Error
  }
}

// [414, type_ → LPAREN type_ COMMA RPAREN THIN_ARROW return_type •, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
fn yy_state_154(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(6, NT_type_, yy_action_436)
}

// [411, type_ → LPAREN type_ COMMA non_empty_list_commas(type_) • RPAREN, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [415, type_ → LPAREN type_ COMMA non_empty_list_commas(type_) • RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
fn yy_state_155(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RPAREN => Shift(yy_state_156)
    _ => Error
  }
}

// [411, type_ → LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN •, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [415, type_ → LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN • THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
fn yy_state_156(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_THIN_ARROW => Shift(yy_state_157)
    T_EOF | T_DERIVE | T_WITH | T_EQUAL | T_RPAREN | T_COMMA | T_QUESTION | T_EXCLAMATION | T_SEMI | T_RBRACKET | T_LBRACE | T_RBRACE => Reduce(5, NT_type_, yy_action_168)
    _ => Error
  }
}

// [192, luident → • LIDENT, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / LBRACKET / RBRACKET / LBRACE / RBRACE]
// [193, luident → • UIDENT, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / LBRACKET / RBRACKET / LBRACE / RBRACE]
// [198, qual_ident_ty → • luident, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / LBRACKET / RBRACKET / LBRACE / RBRACE]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / LBRACKET / RBRACKET / LBRACE / RBRACE]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / LBRACKET / RBRACKET / LBRACE / RBRACE]
// [405, return_type → • type_, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [406, return_type → • type_ EXCLAMATION, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [407, return_type → • type_ EXCLAMATION separated_nonempty_list(PLUS,error_type), EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [410, type_ → • type_ QUESTION, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [411, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [412, type_ → • ASYNC LPAREN type_ COMMA RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [413, type_ → • ASYNC LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [414, type_ → • LPAREN type_ COMMA RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [415, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [415, type_ → LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW • return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [416, type_ → • ASYNC LPAREN RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [417, type_ → • LPAREN RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [418, type_ → • LPAREN type_ RPAREN, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [419, type_ → • ASYNC LPAREN type_ RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [420, type_ → • LPAREN type_ RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [421, type_ → • qual_ident_ty optional_type_arguments, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [422, type_ → • AMPER qual_ident_ty, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [423, type_ → • UNDERSCORE, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
fn yy_state_157(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    T_UNDERSCORE => Shift(yy_state_120)
    T_AMPER => Shift(yy_state_121)
    NT_qual_ident_ty => Shift(yy_state_123)
    T_ASYNC => Shift(yy_state_129)
    T_LPAREN => Shift(yy_state_134)
    NT_type_ => Shift(yy_state_138)
    NT_return_type => Shift(yy_state_158)
    _ => Error
  }
}

// [415, type_ → LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type •, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
fn yy_state_158(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(7, NT_type_, yy_action_9)
}

// [410, type_ → type_ • QUESTION, RPAREN / COMMA / QUESTION / RBRACKET]
// [557, non_empty_list_commas_rev(type_) → type_ •, RPAREN / COMMA / RBRACKET]
fn yy_state_159(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_QUESTION => Shift(yy_state_139)
    T_RPAREN | T_COMMA | T_RBRACKET => Reduce(1, NT_non_empty_list_commas_rev_type__, yy_action_511)
    _ => Error
  }
}

// [410, type_ → type_ • QUESTION, RPAREN / COMMA / QUESTION]
// [412, type_ → ASYNC LPAREN type_ • COMMA RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [413, type_ → ASYNC LPAREN type_ • COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [419, type_ → ASYNC LPAREN type_ • RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
fn yy_state_160(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_QUESTION => Shift(yy_state_139)
    T_RPAREN => Shift(yy_state_161)
    T_COMMA => Shift(yy_state_164)
    _ => Error
  }
}

// [419, type_ → ASYNC LPAREN type_ RPAREN • THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
fn yy_state_161(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_THIN_ARROW => Shift(yy_state_162)
    _ => Error
  }
}

// [192, luident → • LIDENT, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / LBRACKET / RBRACKET / LBRACE / RBRACE]
// [193, luident → • UIDENT, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / LBRACKET / RBRACKET / LBRACE / RBRACE]
// [198, qual_ident_ty → • luident, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / LBRACKET / RBRACKET / LBRACE / RBRACE]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / LBRACKET / RBRACKET / LBRACE / RBRACE]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / LBRACKET / RBRACKET / LBRACE / RBRACE]
// [405, return_type → • type_, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [406, return_type → • type_ EXCLAMATION, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [407, return_type → • type_ EXCLAMATION separated_nonempty_list(PLUS,error_type), EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [410, type_ → • type_ QUESTION, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [411, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [412, type_ → • ASYNC LPAREN type_ COMMA RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [413, type_ → • ASYNC LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [414, type_ → • LPAREN type_ COMMA RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [415, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [416, type_ → • ASYNC LPAREN RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [417, type_ → • LPAREN RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [418, type_ → • LPAREN type_ RPAREN, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [419, type_ → • ASYNC LPAREN type_ RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [419, type_ → ASYNC LPAREN type_ RPAREN THIN_ARROW • return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [420, type_ → • LPAREN type_ RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [421, type_ → • qual_ident_ty optional_type_arguments, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [422, type_ → • AMPER qual_ident_ty, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [423, type_ → • UNDERSCORE, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
fn yy_state_162(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    T_UNDERSCORE => Shift(yy_state_120)
    T_AMPER => Shift(yy_state_121)
    NT_qual_ident_ty => Shift(yy_state_123)
    T_ASYNC => Shift(yy_state_129)
    T_LPAREN => Shift(yy_state_134)
    NT_type_ => Shift(yy_state_138)
    NT_return_type => Shift(yy_state_163)
    _ => Error
  }
}

// [419, type_ → ASYNC LPAREN type_ RPAREN THIN_ARROW return_type •, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
fn yy_state_163(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(6, NT_type_, yy_action_666)
}

// [192, luident → • LIDENT, RPAREN / COMMA / QUESTION / LBRACKET]
// [193, luident → • UIDENT, RPAREN / COMMA / QUESTION / LBRACKET]
// [198, qual_ident_ty → • luident, RPAREN / COMMA / QUESTION / LBRACKET]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, RPAREN / COMMA / QUESTION / LBRACKET]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, RPAREN / COMMA / QUESTION / LBRACKET]
// [410, type_ → • type_ QUESTION, RPAREN / COMMA / QUESTION]
// [411, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN, RPAREN / COMMA / QUESTION]
// [412, type_ → • ASYNC LPAREN type_ COMMA RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [412, type_ → ASYNC LPAREN type_ COMMA • RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [413, type_ → • ASYNC LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [413, type_ → ASYNC LPAREN type_ COMMA • non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [414, type_ → • LPAREN type_ COMMA RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [415, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [416, type_ → • ASYNC LPAREN RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [417, type_ → • LPAREN RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [418, type_ → • LPAREN type_ RPAREN, RPAREN / COMMA / QUESTION]
// [419, type_ → • ASYNC LPAREN type_ RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [420, type_ → • LPAREN type_ RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [421, type_ → • qual_ident_ty optional_type_arguments, RPAREN / COMMA / QUESTION]
// [422, type_ → • AMPER qual_ident_ty, RPAREN / COMMA / QUESTION]
// [423, type_ → • UNDERSCORE, RPAREN / COMMA / QUESTION]
// [455, non_empty_list_commas(type_) → • non_empty_list_commas_rev(type_) option(COMMA), RPAREN]
// [557, non_empty_list_commas_rev(type_) → • type_, RPAREN / COMMA]
// [558, non_empty_list_commas_rev(type_) → • non_empty_list_commas_rev(type_) COMMA type_, RPAREN / COMMA]
fn yy_state_164(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    T_UNDERSCORE => Shift(yy_state_120)
    T_AMPER => Shift(yy_state_121)
    NT_qual_ident_ty => Shift(yy_state_123)
    NT_non_empty_list_commas_rev_type__ => Shift(yy_state_127)
    T_ASYNC => Shift(yy_state_129)
    T_LPAREN => Shift(yy_state_134)
    NT_type_ => Shift(yy_state_159)
    NT_non_empty_list_commas_type__ => Shift(yy_state_165)
    T_RPAREN => Shift(yy_state_169)
    _ => Error
  }
}

// [413, type_ → ASYNC LPAREN type_ COMMA non_empty_list_commas(type_) • RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
fn yy_state_165(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RPAREN => Shift(yy_state_166)
    _ => Error
  }
}

// [413, type_ → ASYNC LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN • THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
fn yy_state_166(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_THIN_ARROW => Shift(yy_state_167)
    _ => Error
  }
}

// [192, luident → • LIDENT, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / LBRACKET / RBRACKET / LBRACE / RBRACE]
// [193, luident → • UIDENT, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / LBRACKET / RBRACKET / LBRACE / RBRACE]
// [198, qual_ident_ty → • luident, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / LBRACKET / RBRACKET / LBRACE / RBRACE]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / LBRACKET / RBRACKET / LBRACE / RBRACE]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / LBRACKET / RBRACKET / LBRACE / RBRACE]
// [405, return_type → • type_, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [406, return_type → • type_ EXCLAMATION, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [407, return_type → • type_ EXCLAMATION separated_nonempty_list(PLUS,error_type), EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [410, type_ → • type_ QUESTION, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [411, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [412, type_ → • ASYNC LPAREN type_ COMMA RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [413, type_ → • ASYNC LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [413, type_ → ASYNC LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW • return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [414, type_ → • LPAREN type_ COMMA RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [415, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [416, type_ → • ASYNC LPAREN RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [417, type_ → • LPAREN RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [418, type_ → • LPAREN type_ RPAREN, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [419, type_ → • ASYNC LPAREN type_ RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [420, type_ → • LPAREN type_ RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [421, type_ → • qual_ident_ty optional_type_arguments, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [422, type_ → • AMPER qual_ident_ty, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [423, type_ → • UNDERSCORE, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
fn yy_state_167(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    T_UNDERSCORE => Shift(yy_state_120)
    T_AMPER => Shift(yy_state_121)
    NT_qual_ident_ty => Shift(yy_state_123)
    T_ASYNC => Shift(yy_state_129)
    T_LPAREN => Shift(yy_state_134)
    NT_type_ => Shift(yy_state_138)
    NT_return_type => Shift(yy_state_168)
    _ => Error
  }
}

// [413, type_ → ASYNC LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type •, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
fn yy_state_168(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(8, NT_type_, yy_action_679)
}

// [412, type_ → ASYNC LPAREN type_ COMMA RPAREN • THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
fn yy_state_169(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_THIN_ARROW => Shift(yy_state_170)
    _ => Error
  }
}

// [192, luident → • LIDENT, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / LBRACKET / RBRACKET / LBRACE / RBRACE]
// [193, luident → • UIDENT, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / LBRACKET / RBRACKET / LBRACE / RBRACE]
// [198, qual_ident_ty → • luident, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / LBRACKET / RBRACKET / LBRACE / RBRACE]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / LBRACKET / RBRACKET / LBRACE / RBRACE]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / LBRACKET / RBRACKET / LBRACE / RBRACE]
// [405, return_type → • type_, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [406, return_type → • type_ EXCLAMATION, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [407, return_type → • type_ EXCLAMATION separated_nonempty_list(PLUS,error_type), EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [410, type_ → • type_ QUESTION, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [411, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [412, type_ → • ASYNC LPAREN type_ COMMA RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [412, type_ → ASYNC LPAREN type_ COMMA RPAREN THIN_ARROW • return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [413, type_ → • ASYNC LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [414, type_ → • LPAREN type_ COMMA RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [415, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [416, type_ → • ASYNC LPAREN RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [417, type_ → • LPAREN RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [418, type_ → • LPAREN type_ RPAREN, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [419, type_ → • ASYNC LPAREN type_ RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [420, type_ → • LPAREN type_ RPAREN THIN_ARROW return_type, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [421, type_ → • qual_ident_ty optional_type_arguments, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [422, type_ → • AMPER qual_ident_ty, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
// [423, type_ → • UNDERSCORE, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
fn yy_state_170(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    T_UNDERSCORE => Shift(yy_state_120)
    T_AMPER => Shift(yy_state_121)
    NT_qual_ident_ty => Shift(yy_state_123)
    T_ASYNC => Shift(yy_state_129)
    T_LPAREN => Shift(yy_state_134)
    NT_type_ => Shift(yy_state_138)
    NT_return_type => Shift(yy_state_171)
    _ => Error
  }
}

// [412, type_ → ASYNC LPAREN type_ COMMA RPAREN THIN_ARROW return_type •, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
fn yy_state_171(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(7, NT_type_, yy_action_207)
}

// [410, type_ → type_ • QUESTION, RPAREN / COMMA / QUESTION / RBRACKET]
// [558, non_empty_list_commas_rev(type_) → non_empty_list_commas_rev(type_) COMMA type_ •, RPAREN / COMMA / RBRACKET]
fn yy_state_172(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_QUESTION => Shift(yy_state_139)
    T_RPAREN | T_COMMA | T_RBRACKET => Reduce(3, NT_non_empty_list_commas_rev_type__, yy_action_145)
    _ => Error
  }
}

// [455, non_empty_list_commas(type_) → non_empty_list_commas_rev(type_) option(COMMA) •, RPAREN / RBRACKET]
fn yy_state_173(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_non_empty_list_commas_type__, yy_action_293)
}

// [421, type_ → qual_ident_ty optional_type_arguments •, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
fn yy_state_174(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_type_, yy_action_132)
}

// [14, optional_type_arguments → option(delimited(LBRACKET,non_empty_list_commas(type_),RBRACKET)) •, EOF / DERIVE / WITH / EQUAL / RPAREN / COMMA / QUESTION / EXCLAMATION / SEMI / RBRACKET / LBRACE / RBRACE]
fn yy_state_175(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_optional_type_arguments, yy_action_661)
}

// [384, simple_pattern → LPAREN pattern COLON type_ • RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [410, type_ → type_ • QUESTION, RPAREN / QUESTION]
fn yy_state_176(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_QUESTION => Shift(yy_state_139)
    T_RPAREN => Shift(yy_state_177)
    _ => Error
  }
}

// [384, simple_pattern → LPAREN pattern COLON type_ RPAREN •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
fn yy_state_177(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_simple_pattern, yy_action_309)
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [289, constr → • UIDENT, LPAREN / RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, LPAREN / RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [291, constr → • type_name COLONCOLON UIDENT, LPAREN / RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [362, pattern → • pattern AS LIDENT, RPAREN / COMMA / AS]
// [363, pattern → • or_pattern, RPAREN / COMMA / AS]
// [364, or_pattern → • range_pattern BAR or_pattern, RPAREN / COMMA / AS]
// [365, or_pattern → • range_pattern, RPAREN / COMMA / AS]
// [366, range_pattern → • simple_pattern RANGE_EXCLUSIVE simple_pattern, RPAREN / COMMA / BAR / AS]
// [367, range_pattern → • simple_pattern RANGE_INCLUSIVE simple_pattern, RPAREN / COMMA / BAR / AS]
// [368, range_pattern → • simple_pattern, RPAREN / COMMA / BAR / AS]
// [369, simple_pattern → • TRUE, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [370, simple_pattern → • FALSE, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [371, simple_pattern → • CHAR, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [372, simple_pattern → • INT, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [373, simple_pattern → • BYTE, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [374, simple_pattern → • FLOAT, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [375, simple_pattern → • MINUS INT, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [376, simple_pattern → • MINUS FLOAT, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [377, simple_pattern → • STRING, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [378, simple_pattern → • BYTES, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [379, simple_pattern → • UNDERSCORE, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [380, simple_pattern → • LIDENT, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [381, simple_pattern → • constr option(delimited(LPAREN,constr_pat_arguments,RPAREN)), RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [382, simple_pattern → • LPAREN pattern RPAREN, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [383, simple_pattern → • LPAREN pattern COMMA non_empty_list_commas(pattern) RPAREN, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [383, simple_pattern → LPAREN pattern COMMA • non_empty_list_commas(pattern) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [384, simple_pattern → • LPAREN pattern COLON type_ RPAREN, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [385, simple_pattern → • LBRACKET array_sub_patterns RBRACKET, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [386, simple_pattern → • LBRACE RBRACE, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [387, simple_pattern → • LBRACE DOTDOT option(COMMA) RBRACE, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [388, simple_pattern → • LBRACE non_empty_fields_pat RBRACE, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [389, simple_pattern → • LBRACE non_empty_map_elems_pat RBRACE, RPAREN / COMMA / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [512, non_empty_list_commas(pattern) → • non_empty_list_commas_rev(pattern) option(COMMA), RPAREN]
// [584, non_empty_list_commas_rev(pattern) → • pattern, RPAREN / COMMA]
// [585, non_empty_list_commas_rev(pattern) → • non_empty_list_commas_rev(pattern) COMMA pattern, RPAREN / COMMA]
fn yy_state_178(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    NT_non_empty_list_commas_rev_pattern_ => Shift(yy_state_50)
    T_LBRACE => Shift(yy_state_52)
    T_LBRACKET => Shift(yy_state_56)
    T_LPAREN => Shift(yy_state_70)
    NT_constr => Shift(yy_state_71)
    T_UNDERSCORE => Shift(yy_state_82)
    T_BYTES => Shift(yy_state_83)
    T_STRING => Shift(yy_state_84)
    T_MINUS => Shift(yy_state_85)
    T_FLOAT => Shift(yy_state_88)
    T_BYTE => Shift(yy_state_89)
    T_INT => Shift(yy_state_90)
    T_CHAR => Shift(yy_state_91)
    T_FALSE => Shift(yy_state_92)
    T_TRUE => Shift(yy_state_93)
    NT_simple_pattern => Shift(yy_state_94)
    NT_type_name => Shift(yy_state_97)
    T_PACKAGE_NAME => Shift(yy_state_100)
    T_UIDENT => Shift(yy_state_102)
    T_LIDENT => Shift(yy_state_103)
    NT_range_pattern => Shift(yy_state_106)
    NT_or_pattern => Shift(yy_state_109)
    NT_non_empty_list_commas_pattern_ => Shift(yy_state_179)
    NT_pattern => Shift(yy_state_181)
    _ => Error
  }
}

// [383, simple_pattern → LPAREN pattern COMMA non_empty_list_commas(pattern) • RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
fn yy_state_179(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RPAREN => Shift(yy_state_180)
    _ => Error
  }
}

// [383, simple_pattern → LPAREN pattern COMMA non_empty_list_commas(pattern) RPAREN •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
fn yy_state_180(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_simple_pattern, yy_action_665)
}

// [362, pattern → pattern • AS LIDENT, RPAREN / COMMA / AS / IF / FAT_ARROW]
// [584, non_empty_list_commas_rev(pattern) → pattern •, RPAREN / COMMA / IF / FAT_ARROW]
fn yy_state_181(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AS => Shift(yy_state_111)
    T_RPAREN | T_COMMA | T_IF | T_FAT_ARROW => Reduce(1, NT_non_empty_list_commas_rev_pattern_, yy_action_362)
    _ => Error
  }
}

// [382, simple_pattern → LPAREN pattern RPAREN •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
fn yy_state_182(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_simple_pattern, yy_action_480)
}

// [362, pattern → pattern • AS LIDENT, COMMA / RBRACKET / AS]
// [390, array_sub_pattern → pattern •, COMMA / RBRACKET]
fn yy_state_183(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AS => Shift(yy_state_111)
    T_COMMA | T_RBRACKET => Reduce(1, NT_array_sub_pattern, yy_action_75)
    _ => Error
  }
}

// [402, array_sub_patterns → dotdot_binder COMMA non_empty_list_commas(array_sub_pattern) •, RBRACKET]
fn yy_state_184(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_array_sub_patterns, yy_action_551)
}

// [400, array_sub_patterns → array_sub_pattern •, RBRACKET]
// [401, array_sub_patterns → array_sub_pattern • COMMA array_sub_patterns, RBRACKET]
fn yy_state_185(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COMMA => Shift(yy_state_186)
    T_RBRACKET => Reduce(1, NT_array_sub_patterns, yy_action_549)
    _ => Error
  }
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [289, constr → • UIDENT, LPAREN / COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, LPAREN / COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [291, constr → • type_name COLONCOLON UIDENT, LPAREN / COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [362, pattern → • pattern AS LIDENT, COMMA / RBRACKET / AS]
// [363, pattern → • or_pattern, COMMA / RBRACKET / AS]
// [364, or_pattern → • range_pattern BAR or_pattern, COMMA / RBRACKET / AS]
// [365, or_pattern → • range_pattern, COMMA / RBRACKET / AS]
// [366, range_pattern → • simple_pattern RANGE_EXCLUSIVE simple_pattern, COMMA / RBRACKET / BAR / AS]
// [367, range_pattern → • simple_pattern RANGE_INCLUSIVE simple_pattern, COMMA / RBRACKET / BAR / AS]
// [368, range_pattern → • simple_pattern, COMMA / RBRACKET / BAR / AS]
// [369, simple_pattern → • TRUE, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [370, simple_pattern → • FALSE, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [371, simple_pattern → • CHAR, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [372, simple_pattern → • INT, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [373, simple_pattern → • BYTE, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [374, simple_pattern → • FLOAT, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [375, simple_pattern → • MINUS INT, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [376, simple_pattern → • MINUS FLOAT, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [377, simple_pattern → • STRING, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [378, simple_pattern → • BYTES, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [379, simple_pattern → • UNDERSCORE, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [380, simple_pattern → • LIDENT, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [381, simple_pattern → • constr option(delimited(LPAREN,constr_pat_arguments,RPAREN)), COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [382, simple_pattern → • LPAREN pattern RPAREN, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [383, simple_pattern → • LPAREN pattern COMMA non_empty_list_commas(pattern) RPAREN, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [384, simple_pattern → • LPAREN pattern COLON type_ RPAREN, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [385, simple_pattern → • LBRACKET array_sub_patterns RBRACKET, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [386, simple_pattern → • LBRACE RBRACE, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [387, simple_pattern → • LBRACE DOTDOT option(COMMA) RBRACE, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [388, simple_pattern → • LBRACE non_empty_fields_pat RBRACE, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [389, simple_pattern → • LBRACE non_empty_map_elems_pat RBRACE, COMMA / RBRACKET / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [390, array_sub_pattern → • pattern, COMMA / RBRACKET]
// [391, array_sub_pattern → • DOTDOT STRING, COMMA / RBRACKET]
// [392, array_sub_pattern → • DOTDOT BYTES, COMMA / RBRACKET]
// [393, array_sub_pattern → • DOTDOT UIDENT, COMMA / RBRACKET]
// [394, array_sub_pattern → • DOTDOT PACKAGE_NAME DOT_UIDENT, COMMA / RBRACKET]
// [395, dotdot_binder → • DOTDOT LIDENT, COMMA / RBRACKET]
// [396, dotdot_binder → • DOTDOT UNDERSCORE, COMMA / RBRACKET]
// [397, dotdot_binder → • DOTDOT AS LIDENT, COMMA / RBRACKET]
// [398, dotdot_binder → • DOTDOT, COMMA / RBRACKET]
// [399, array_sub_patterns → •, RBRACKET]
// [400, array_sub_patterns → • array_sub_pattern, RBRACKET]
// [401, array_sub_patterns → • array_sub_pattern COMMA array_sub_patterns, RBRACKET]
// [401, array_sub_patterns → array_sub_pattern COMMA • array_sub_patterns, RBRACKET]
// [402, array_sub_patterns → • dotdot_binder COMMA non_empty_list_commas(array_sub_pattern), RBRACKET]
// [403, array_sub_patterns → • dotdot_binder, RBRACKET]
// [404, array_sub_patterns → • dotdot_binder COMMA, RBRACKET]
fn yy_state_186(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACE => Shift(yy_state_52)
    T_LBRACKET => Shift(yy_state_56)
    NT_dotdot_binder => Shift(yy_state_57)
    T_LPAREN => Shift(yy_state_70)
    NT_constr => Shift(yy_state_71)
    T_UNDERSCORE => Shift(yy_state_82)
    T_BYTES => Shift(yy_state_83)
    T_STRING => Shift(yy_state_84)
    T_MINUS => Shift(yy_state_85)
    T_FLOAT => Shift(yy_state_88)
    T_BYTE => Shift(yy_state_89)
    T_INT => Shift(yy_state_90)
    T_CHAR => Shift(yy_state_91)
    T_FALSE => Shift(yy_state_92)
    T_TRUE => Shift(yy_state_93)
    NT_simple_pattern => Shift(yy_state_94)
    NT_type_name => Shift(yy_state_97)
    T_PACKAGE_NAME => Shift(yy_state_100)
    T_UIDENT => Shift(yy_state_102)
    T_LIDENT => Shift(yy_state_103)
    NT_range_pattern => Shift(yy_state_106)
    NT_or_pattern => Shift(yy_state_109)
    NT_pattern => Shift(yy_state_183)
    NT_array_sub_pattern => Shift(yy_state_185)
    NT_array_sub_patterns => Shift(yy_state_187)
    T_DOTDOT => Shift(yy_state_188)
    T_RBRACKET => Reduce(0, NT_array_sub_patterns, yy_action_460)
    _ => Error
  }
}

// [401, array_sub_patterns → array_sub_pattern COMMA array_sub_patterns •, RBRACKET]
fn yy_state_187(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_array_sub_patterns, yy_action_450)
}

// [391, array_sub_pattern → DOTDOT • STRING, COMMA / RBRACKET]
// [392, array_sub_pattern → DOTDOT • BYTES, COMMA / RBRACKET]
// [393, array_sub_pattern → DOTDOT • UIDENT, COMMA / RBRACKET]
// [394, array_sub_pattern → DOTDOT • PACKAGE_NAME DOT_UIDENT, COMMA / RBRACKET]
// [395, dotdot_binder → DOTDOT • LIDENT, COMMA / RBRACKET]
// [396, dotdot_binder → DOTDOT • UNDERSCORE, COMMA / RBRACKET]
// [397, dotdot_binder → DOTDOT • AS LIDENT, COMMA / RBRACKET]
// [398, dotdot_binder → DOTDOT •, COMMA / RBRACKET]
fn yy_state_188(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_65)
    T_UIDENT => Shift(yy_state_67)
    T_BYTES => Shift(yy_state_68)
    T_STRING => Shift(yy_state_69)
    T_AS => Shift(yy_state_189)
    T_UNDERSCORE => Shift(yy_state_191)
    T_LIDENT => Shift(yy_state_192)
    T_COMMA | T_RBRACKET => Reduce(1, NT_dotdot_binder, yy_action_365)
    _ => Error
  }
}

// [397, dotdot_binder → DOTDOT AS • LIDENT, COMMA / RBRACKET]
fn yy_state_189(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_190)
    _ => Error
  }
}

// [397, dotdot_binder → DOTDOT AS LIDENT •, COMMA / RBRACKET]
fn yy_state_190(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_dotdot_binder, yy_action_446)
}

// [396, dotdot_binder → DOTDOT UNDERSCORE •, COMMA / RBRACKET]
fn yy_state_191(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_dotdot_binder, yy_action_545)
}

// [395, dotdot_binder → DOTDOT LIDENT •, COMMA / RBRACKET]
fn yy_state_192(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_dotdot_binder, yy_action_477)
}

// [385, simple_pattern → LBRACKET array_sub_patterns • RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
fn yy_state_193(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACKET => Shift(yy_state_194)
    _ => Error
  }
}

// [385, simple_pattern → LBRACKET array_sub_patterns RBRACKET •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
fn yy_state_194(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_simple_pattern, yy_action_468)
}

// [362, pattern → pattern • AS LIDENT, COMMA / RBRACE / AS]
// [606, non_empty_list_commas_rev(map_elem_pat) → map_syntax_key option(QUESTION) COLON pattern •, COMMA / RBRACE]
fn yy_state_195(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AS => Shift(yy_state_111)
    T_COMMA | T_RBRACE => Reduce(4, NT_non_empty_list_commas_rev_map_elem_pat_, yy_action_678)
    _ => Error
  }
}

// [551, option(QUESTION) → QUESTION •, COLON]
fn yy_state_196(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_option_QUESTION_, yy_action_346)
}

// [604, non_empty_list_commas_rev(fields_pat_single) → fields_pat_single •, COMMA / RBRACE]
fn yy_state_197(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_non_empty_list_commas_rev_fields_pat_single_, yy_action_497)
}

// [533, option(COMMA) → •, RBRACE]
// [534, option(COMMA) → • COMMA, RBRACE]
// [548, non_empty_list_commas(map_elem_pat) → non_empty_list_commas_rev(map_elem_pat) • option(COMMA), RBRACE]
// [549, non_empty_list_commas_with_tail(map_elem_pat) → non_empty_list_commas_rev(map_elem_pat) • COMMA, DOTDOT]
// [607, non_empty_list_commas_rev(map_elem_pat) → non_empty_list_commas_rev(map_elem_pat) • COMMA map_syntax_key option(QUESTION) COLON pattern, COMMA / RBRACE]
fn yy_state_198(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_option_COMMA_ => Shift(yy_state_199)
    T_COMMA => Shift(yy_state_200)
    T_RBRACE => Reduce(0, NT_option_COMMA_, yy_action_181)
    _ => Error
  }
}

// [548, non_empty_list_commas(map_elem_pat) → non_empty_list_commas_rev(map_elem_pat) option(COMMA) •, RBRACE]
fn yy_state_199(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_non_empty_list_commas_map_elem_pat_, yy_action_699)
}

// [342, simple_constant → • TRUE, QUESTION / COLON]
// [343, simple_constant → • FALSE, QUESTION / COLON]
// [344, simple_constant → • BYTE, QUESTION / COLON]
// [345, simple_constant → • BYTES, QUESTION / COLON]
// [346, simple_constant → • CHAR, QUESTION / COLON]
// [347, simple_constant → • INT, QUESTION / COLON]
// [348, simple_constant → • FLOAT, QUESTION / COLON]
// [349, simple_constant → • STRING, QUESTION / COLON]
// [350, map_syntax_key → • simple_constant, QUESTION / COLON]
// [351, map_syntax_key → • MINUS INT, QUESTION / COLON]
// [352, map_syntax_key → • MINUS FLOAT, QUESTION / COLON]
// [534, option(COMMA) → COMMA •, RBRACE]
// [549, non_empty_list_commas_with_tail(map_elem_pat) → non_empty_list_commas_rev(map_elem_pat) COMMA •, DOTDOT]
// [607, non_empty_list_commas_rev(map_elem_pat) → non_empty_list_commas_rev(map_elem_pat) COMMA • map_syntax_key option(QUESTION) COLON pattern, COMMA / RBRACE]
fn yy_state_200(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    NT_map_syntax_key => Shift(yy_state_201)
    T_MINUS => Shift(yy_state_205)
    NT_simple_constant => Shift(yy_state_208)
    T_RBRACE => Reduce(1, NT_option_COMMA_, yy_action_56)
    T_DOTDOT => Reduce(2, NT_non_empty_list_commas_with_tail_map_elem_pat_, yy_action_547)
    _ => Error
  }
}

// [550, option(QUESTION) → •, COLON]
// [551, option(QUESTION) → • QUESTION, COLON]
// [607, non_empty_list_commas_rev(map_elem_pat) → non_empty_list_commas_rev(map_elem_pat) COMMA map_syntax_key • option(QUESTION) COLON pattern, COMMA / RBRACE]
fn yy_state_201(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_QUESTION => Shift(yy_state_196)
    NT_option_QUESTION_ => Shift(yy_state_202)
    T_COLON => Reduce(0, NT_option_QUESTION_, yy_action_454)
    _ => Error
  }
}

// [607, non_empty_list_commas_rev(map_elem_pat) → non_empty_list_commas_rev(map_elem_pat) COMMA map_syntax_key option(QUESTION) • COLON pattern, COMMA / RBRACE]
fn yy_state_202(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_203)
    _ => Error
  }
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [289, constr → • UIDENT, LPAREN / COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, LPAREN / COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [291, constr → • type_name COLONCOLON UIDENT, LPAREN / COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [362, pattern → • pattern AS LIDENT, COMMA / RBRACE / AS]
// [363, pattern → • or_pattern, COMMA / RBRACE / AS]
// [364, or_pattern → • range_pattern BAR or_pattern, COMMA / RBRACE / AS]
// [365, or_pattern → • range_pattern, COMMA / RBRACE / AS]
// [366, range_pattern → • simple_pattern RANGE_EXCLUSIVE simple_pattern, COMMA / BAR / RBRACE / AS]
// [367, range_pattern → • simple_pattern RANGE_INCLUSIVE simple_pattern, COMMA / BAR / RBRACE / AS]
// [368, range_pattern → • simple_pattern, COMMA / BAR / RBRACE / AS]
// [369, simple_pattern → • TRUE, COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [370, simple_pattern → • FALSE, COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [371, simple_pattern → • CHAR, COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [372, simple_pattern → • INT, COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [373, simple_pattern → • BYTE, COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [374, simple_pattern → • FLOAT, COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [375, simple_pattern → • MINUS INT, COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [376, simple_pattern → • MINUS FLOAT, COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [377, simple_pattern → • STRING, COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [378, simple_pattern → • BYTES, COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [379, simple_pattern → • UNDERSCORE, COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [380, simple_pattern → • LIDENT, COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [381, simple_pattern → • constr option(delimited(LPAREN,constr_pat_arguments,RPAREN)), COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [382, simple_pattern → • LPAREN pattern RPAREN, COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [383, simple_pattern → • LPAREN pattern COMMA non_empty_list_commas(pattern) RPAREN, COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [384, simple_pattern → • LPAREN pattern COLON type_ RPAREN, COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [385, simple_pattern → • LBRACKET array_sub_patterns RBRACKET, COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [386, simple_pattern → • LBRACE RBRACE, COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [387, simple_pattern → • LBRACE DOTDOT option(COMMA) RBRACE, COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [388, simple_pattern → • LBRACE non_empty_fields_pat RBRACE, COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [389, simple_pattern → • LBRACE non_empty_map_elems_pat RBRACE, COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [607, non_empty_list_commas_rev(map_elem_pat) → non_empty_list_commas_rev(map_elem_pat) COMMA map_syntax_key option(QUESTION) COLON • pattern, COMMA / RBRACE]
fn yy_state_203(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACE => Shift(yy_state_52)
    T_LBRACKET => Shift(yy_state_56)
    T_LPAREN => Shift(yy_state_70)
    NT_constr => Shift(yy_state_71)
    T_UNDERSCORE => Shift(yy_state_82)
    T_BYTES => Shift(yy_state_83)
    T_STRING => Shift(yy_state_84)
    T_MINUS => Shift(yy_state_85)
    T_FLOAT => Shift(yy_state_88)
    T_BYTE => Shift(yy_state_89)
    T_INT => Shift(yy_state_90)
    T_CHAR => Shift(yy_state_91)
    T_FALSE => Shift(yy_state_92)
    T_TRUE => Shift(yy_state_93)
    NT_simple_pattern => Shift(yy_state_94)
    NT_type_name => Shift(yy_state_97)
    T_PACKAGE_NAME => Shift(yy_state_100)
    T_UIDENT => Shift(yy_state_102)
    T_LIDENT => Shift(yy_state_103)
    NT_range_pattern => Shift(yy_state_106)
    NT_or_pattern => Shift(yy_state_109)
    NT_pattern => Shift(yy_state_204)
    _ => Error
  }
}

// [362, pattern → pattern • AS LIDENT, COMMA / RBRACE / AS]
// [607, non_empty_list_commas_rev(map_elem_pat) → non_empty_list_commas_rev(map_elem_pat) COMMA map_syntax_key option(QUESTION) COLON pattern •, COMMA / RBRACE]
fn yy_state_204(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AS => Shift(yy_state_111)
    T_COMMA | T_RBRACE => Reduce(6, NT_non_empty_list_commas_rev_map_elem_pat_, yy_action_605)
    _ => Error
  }
}

// [351, map_syntax_key → MINUS • INT, QUESTION / COLON]
// [352, map_syntax_key → MINUS • FLOAT, QUESTION / COLON]
fn yy_state_205(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_FLOAT => Shift(yy_state_206)
    T_INT => Shift(yy_state_207)
    _ => Error
  }
}

// [352, map_syntax_key → MINUS FLOAT •, QUESTION / COLON]
fn yy_state_206(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_map_syntax_key, yy_action_122)
}

// [351, map_syntax_key → MINUS INT •, QUESTION / COLON]
fn yy_state_207(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_map_syntax_key, yy_action_154)
}

// [350, map_syntax_key → simple_constant •, QUESTION / COLON]
fn yy_state_208(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_map_syntax_key, yy_action_0)
}

// [533, option(COMMA) → •, RBRACE]
// [534, option(COMMA) → • COMMA, RBRACE]
// [546, non_empty_list_commas(fields_pat_single) → non_empty_list_commas_rev(fields_pat_single) • option(COMMA), RBRACE]
// [547, non_empty_list_commas_with_tail(fields_pat_single) → non_empty_list_commas_rev(fields_pat_single) • COMMA, DOTDOT]
// [605, non_empty_list_commas_rev(fields_pat_single) → non_empty_list_commas_rev(fields_pat_single) • COMMA fields_pat_single, COMMA / RBRACE]
fn yy_state_209(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_option_COMMA_ => Shift(yy_state_210)
    T_COMMA => Shift(yy_state_211)
    T_RBRACE => Reduce(0, NT_option_COMMA_, yy_action_181)
    _ => Error
  }
}

// [546, non_empty_list_commas(fields_pat_single) → non_empty_list_commas_rev(fields_pat_single) option(COMMA) •, RBRACE]
fn yy_state_210(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_non_empty_list_commas_fields_pat_single_, yy_action_413)
}

// [437, fields_pat_single → • LIDENT COLON pattern, COMMA / RBRACE]
// [438, fields_pat_single → • LIDENT, COMMA / RBRACE]
// [534, option(COMMA) → COMMA •, RBRACE]
// [547, non_empty_list_commas_with_tail(fields_pat_single) → non_empty_list_commas_rev(fields_pat_single) COMMA •, DOTDOT]
// [605, non_empty_list_commas_rev(fields_pat_single) → non_empty_list_commas_rev(fields_pat_single) COMMA • fields_pat_single, COMMA / RBRACE]
fn yy_state_211(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_fields_pat_single => Shift(yy_state_212)
    T_LIDENT => Shift(yy_state_213)
    T_RBRACE => Reduce(1, NT_option_COMMA_, yy_action_56)
    T_DOTDOT => Reduce(2, NT_non_empty_list_commas_with_tail_fields_pat_single_, yy_action_574)
    _ => Error
  }
}

// [605, non_empty_list_commas_rev(fields_pat_single) → non_empty_list_commas_rev(fields_pat_single) COMMA fields_pat_single •, COMMA / RBRACE]
fn yy_state_212(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_non_empty_list_commas_rev_fields_pat_single_, yy_action_15)
}

// [437, fields_pat_single → LIDENT • COLON pattern, COMMA / RBRACE]
// [438, fields_pat_single → LIDENT •, COMMA / RBRACE]
fn yy_state_213(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_214)
    T_COMMA | T_RBRACE => Reduce(1, NT_fields_pat_single, yy_action_448)
    _ => Error
  }
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [289, constr → • UIDENT, LPAREN / COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, LPAREN / COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [291, constr → • type_name COLONCOLON UIDENT, LPAREN / COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [362, pattern → • pattern AS LIDENT, COMMA / RBRACE / AS]
// [363, pattern → • or_pattern, COMMA / RBRACE / AS]
// [364, or_pattern → • range_pattern BAR or_pattern, COMMA / RBRACE / AS]
// [365, or_pattern → • range_pattern, COMMA / RBRACE / AS]
// [366, range_pattern → • simple_pattern RANGE_EXCLUSIVE simple_pattern, COMMA / BAR / RBRACE / AS]
// [367, range_pattern → • simple_pattern RANGE_INCLUSIVE simple_pattern, COMMA / BAR / RBRACE / AS]
// [368, range_pattern → • simple_pattern, COMMA / BAR / RBRACE / AS]
// [369, simple_pattern → • TRUE, COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [370, simple_pattern → • FALSE, COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [371, simple_pattern → • CHAR, COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [372, simple_pattern → • INT, COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [373, simple_pattern → • BYTE, COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [374, simple_pattern → • FLOAT, COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [375, simple_pattern → • MINUS INT, COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [376, simple_pattern → • MINUS FLOAT, COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [377, simple_pattern → • STRING, COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [378, simple_pattern → • BYTES, COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [379, simple_pattern → • UNDERSCORE, COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [380, simple_pattern → • LIDENT, COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [381, simple_pattern → • constr option(delimited(LPAREN,constr_pat_arguments,RPAREN)), COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [382, simple_pattern → • LPAREN pattern RPAREN, COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [383, simple_pattern → • LPAREN pattern COMMA non_empty_list_commas(pattern) RPAREN, COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [384, simple_pattern → • LPAREN pattern COLON type_ RPAREN, COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [385, simple_pattern → • LBRACKET array_sub_patterns RBRACKET, COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [386, simple_pattern → • LBRACE RBRACE, COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [387, simple_pattern → • LBRACE DOTDOT option(COMMA) RBRACE, COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [388, simple_pattern → • LBRACE non_empty_fields_pat RBRACE, COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [389, simple_pattern → • LBRACE non_empty_map_elems_pat RBRACE, COMMA / BAR / RBRACE / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [437, fields_pat_single → LIDENT COLON • pattern, COMMA / RBRACE]
fn yy_state_214(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACE => Shift(yy_state_52)
    T_LBRACKET => Shift(yy_state_56)
    T_LPAREN => Shift(yy_state_70)
    NT_constr => Shift(yy_state_71)
    T_UNDERSCORE => Shift(yy_state_82)
    T_BYTES => Shift(yy_state_83)
    T_STRING => Shift(yy_state_84)
    T_MINUS => Shift(yy_state_85)
    T_FLOAT => Shift(yy_state_88)
    T_BYTE => Shift(yy_state_89)
    T_INT => Shift(yy_state_90)
    T_CHAR => Shift(yy_state_91)
    T_FALSE => Shift(yy_state_92)
    T_TRUE => Shift(yy_state_93)
    NT_simple_pattern => Shift(yy_state_94)
    NT_type_name => Shift(yy_state_97)
    T_PACKAGE_NAME => Shift(yy_state_100)
    T_UIDENT => Shift(yy_state_102)
    T_LIDENT => Shift(yy_state_103)
    NT_range_pattern => Shift(yy_state_106)
    NT_or_pattern => Shift(yy_state_109)
    NT_pattern => Shift(yy_state_215)
    _ => Error
  }
}

// [362, pattern → pattern • AS LIDENT, COMMA / RBRACE / AS]
// [437, fields_pat_single → LIDENT COLON pattern •, COMMA / RBRACE]
fn yy_state_215(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AS => Shift(yy_state_111)
    T_COMMA | T_RBRACE => Reduce(3, NT_fields_pat_single, yy_action_156)
    _ => Error
  }
}

// [440, non_empty_map_elems_pat → non_empty_list_commas_with_tail(map_elem_pat) • DOTDOT option(COMMA), RBRACE]
fn yy_state_216(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_DOTDOT => Shift(yy_state_217)
    _ => Error
  }
}

// [440, non_empty_map_elems_pat → non_empty_list_commas_with_tail(map_elem_pat) DOTDOT • option(COMMA), RBRACE]
// [533, option(COMMA) → •, RBRACE]
// [534, option(COMMA) → • COMMA, RBRACE]
fn yy_state_217(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COMMA => Shift(yy_state_77)
    NT_option_COMMA_ => Shift(yy_state_218)
    T_RBRACE => Reduce(0, NT_option_COMMA_, yy_action_181)
    _ => Error
  }
}

// [440, non_empty_map_elems_pat → non_empty_list_commas_with_tail(map_elem_pat) DOTDOT option(COMMA) •, RBRACE]
fn yy_state_218(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_non_empty_map_elems_pat, yy_action_442)
}

// [439, non_empty_map_elems_pat → non_empty_list_commas(map_elem_pat) •, RBRACE]
fn yy_state_219(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_non_empty_map_elems_pat, yy_action_110)
}

// [436, non_empty_fields_pat → non_empty_list_commas_with_tail(fields_pat_single) • DOTDOT option(COMMA), RBRACE]
fn yy_state_220(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_DOTDOT => Shift(yy_state_221)
    _ => Error
  }
}

// [436, non_empty_fields_pat → non_empty_list_commas_with_tail(fields_pat_single) DOTDOT • option(COMMA), RBRACE]
// [533, option(COMMA) → •, RBRACE]
// [534, option(COMMA) → • COMMA, RBRACE]
fn yy_state_221(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COMMA => Shift(yy_state_77)
    NT_option_COMMA_ => Shift(yy_state_222)
    T_RBRACE => Reduce(0, NT_option_COMMA_, yy_action_181)
    _ => Error
  }
}

// [436, non_empty_fields_pat → non_empty_list_commas_with_tail(fields_pat_single) DOTDOT option(COMMA) •, RBRACE]
fn yy_state_222(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_non_empty_fields_pat, yy_action_382)
}

// [435, non_empty_fields_pat → non_empty_list_commas(fields_pat_single) •, RBRACE]
fn yy_state_223(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_non_empty_fields_pat, yy_action_694)
}

// [389, simple_pattern → LBRACE non_empty_map_elems_pat • RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
fn yy_state_224(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACE => Shift(yy_state_225)
    _ => Error
  }
}

// [389, simple_pattern → LBRACE non_empty_map_elems_pat RBRACE •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
fn yy_state_225(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_simple_pattern, yy_action_423)
}

// [388, simple_pattern → LBRACE non_empty_fields_pat • RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
fn yy_state_226(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACE => Shift(yy_state_227)
    _ => Error
  }
}

// [388, simple_pattern → LBRACE non_empty_fields_pat RBRACE •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
fn yy_state_227(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_simple_pattern, yy_action_44)
}

// [387, simple_pattern → LBRACE DOTDOT • option(COMMA) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [533, option(COMMA) → •, RBRACE]
// [534, option(COMMA) → • COMMA, RBRACE]
fn yy_state_228(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COMMA => Shift(yy_state_77)
    NT_option_COMMA_ => Shift(yy_state_229)
    T_RBRACE => Reduce(0, NT_option_COMMA_, yy_action_181)
    _ => Error
  }
}

// [387, simple_pattern → LBRACE DOTDOT option(COMMA) • RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
fn yy_state_229(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACE => Shift(yy_state_230)
    _ => Error
  }
}

// [387, simple_pattern → LBRACE DOTDOT option(COMMA) RBRACE •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
fn yy_state_230(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_simple_pattern, yy_action_586)
}

// [386, simple_pattern → LBRACE RBRACE •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / EQUAL / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
fn yy_state_231(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_simple_pattern, yy_action_711)
}

// [362, pattern → pattern • AS LIDENT, RPAREN / COMMA / AS / IF / FAT_ARROW]
// [585, non_empty_list_commas_rev(pattern) → non_empty_list_commas_rev(pattern) COMMA pattern •, RPAREN / COMMA / IF / FAT_ARROW]
fn yy_state_232(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AS => Shift(yy_state_111)
    T_RPAREN | T_COMMA | T_IF | T_FAT_ARROW => Reduce(3, NT_non_empty_list_commas_rev_pattern_, yy_action_490)
    _ => Error
  }
}

// [512, non_empty_list_commas(pattern) → non_empty_list_commas_rev(pattern) option(COMMA) •, RPAREN / IF / FAT_ARROW]
fn yy_state_233(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_non_empty_list_commas_pattern_, yy_action_632)
}

// [234, multi_pattern_case → non_empty_list_commas(pattern) • option(preceded(IF,expr)) FAT_ARROW expr_statement, SEMI / RBRACE]
// [508, option(preceded(IF,expr)) → •, FAT_ARROW]
// [509, option(preceded(IF,expr)) → • IF expr, FAT_ARROW]
fn yy_state_234(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_IF => Shift(yy_state_235)
    NT_option_preceded_IF_expr__ => Shift(yy_state_646)
    T_FAT_ARROW => Reduce(0, NT_option_preceded_IF_expr__, yy_action_609)
    _ => Error
  }
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [229, loop_label_colon → • POST_LABEL COLON, WHILE / LOOP / FOR]
// [230, loop_label_colon → •, WHILE / LOOP / FOR]
// [231, while_expr → • loop_label_colon WHILE infix_expr block_expr optional_else, FAT_ARROW]
// [238, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE, FAT_ARROW]
// [239, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE ELSE LBRACE single_pattern_cases RBRACE, FAT_ARROW]
// [240, if_expr → • IF infix_expr block_expr ELSE block_expr, FAT_ARROW]
// [241, if_expr → • IF infix_expr block_expr ELSE if_expr, FAT_ARROW]
// [242, if_expr → • IF infix_expr block_expr, FAT_ARROW]
// [243, match_expr → • MATCH infix_expr LBRACE non_empty_list_semis(single_pattern_case) RBRACE, FAT_ARROW]
// [244, match_expr → • MATCH infix_expr LBRACE RBRACE, FAT_ARROW]
// [245, loop_expr → • loop_label_colon LOOP non_empty_list_commas_no_trailing(expr) LBRACE list_semis(multi_pattern_case) RBRACE, FAT_ARROW]
// [249, for_expr → • loop_label_colon FOR for_binders SEMI option(infix_expr) SEMI list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) block_expr optional_else, FAT_ARROW]
// [250, for_expr → • loop_label_colon FOR for_binders block_expr optional_else, FAT_ARROW]
// [251, foreach_expr → • loop_label_colon FOR non_empty_list_commas(foreach_binder) IN expr block_expr optional_else, FAT_ARROW]
// [254, expr → • loop_expr, FAT_ARROW]
// [255, expr → • for_expr, FAT_ARROW]
// [256, expr → • foreach_expr, FAT_ARROW]
// [257, expr → • while_expr, FAT_ARROW]
// [258, expr → • try_expr, FAT_ARROW]
// [259, expr → • if_expr, FAT_ARROW]
// [260, expr → • match_expr, FAT_ARROW]
// [261, expr → • pipe_expr, FAT_ARROW]
// [262, pipe_expr → • pipe_expr PIPE infix_expr, PIPE / FAT_ARROW]
// [263, pipe_expr → • infix_expr, PIPE / FAT_ARROW]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / FAT_ARROW]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / FAT_ARROW]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / FAT_ARROW]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / FAT_ARROW]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / FAT_ARROW]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / FAT_ARROW]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / FAT_ARROW]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / FAT_ARROW]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / FAT_ARROW]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / FAT_ARROW]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / FAT_ARROW]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / FAT_ARROW]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / FAT_ARROW]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / FAT_ARROW]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / FAT_ARROW]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [509, option(preceded(IF,expr)) → IF • expr, FAT_ARROW]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_235(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    NT_expr => Shift(yy_state_236)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    T_LIDENT => Shift(yy_state_311)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_323)
    NT_pipe_expr => Shift(yy_state_346)
    NT_match_expr => Shift(yy_state_349)
    NT_if_expr => Shift(yy_state_350)
    NT_try_expr => Shift(yy_state_351)
    NT_while_expr => Shift(yy_state_352)
    NT_foreach_expr => Shift(yy_state_353)
    NT_for_expr => Shift(yy_state_354)
    NT_loop_expr => Shift(yy_state_355)
    T_MATCH => Shift(yy_state_356)
    T_IF => Shift(yy_state_373)
    T_TRY => Shift(yy_state_379)
    NT_loop_label_colon => Shift(yy_state_396)
    T_POST_LABEL => Shift(yy_state_404)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_481)
    _ => Error
  }
}

// [509, option(preceded(IF,expr)) → IF expr •, FAT_ARROW]
fn yy_state_236(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_option_preceded_IF_expr__, yy_action_370)
}

// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [300, simple_expr → ASYNC • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → ASYNC • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_237(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_fn_header_no_binder => Shift(yy_state_238)
    T_FN => Shift(yy_state_243)
    _ => Error
  }
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [234, multi_pattern_case → • non_empty_list_commas(pattern) option(preceded(IF,expr)) FAT_ARROW expr_statement, SEMI / RBRACE]
// [289, constr → • UIDENT, LPAREN / COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, LPAREN / COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [291, constr → • type_name COLONCOLON UIDENT, LPAREN / COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [302, simple_expr → ASYNC fn_header_no_binder • list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [362, pattern → • pattern AS LIDENT, COMMA / AS / IF / FAT_ARROW]
// [363, pattern → • or_pattern, COMMA / AS / IF / FAT_ARROW]
// [364, or_pattern → • range_pattern BAR or_pattern, COMMA / AS / IF / FAT_ARROW]
// [365, or_pattern → • range_pattern, COMMA / AS / IF / FAT_ARROW]
// [366, range_pattern → • simple_pattern RANGE_EXCLUSIVE simple_pattern, COMMA / BAR / AS / IF / FAT_ARROW]
// [367, range_pattern → • simple_pattern RANGE_INCLUSIVE simple_pattern, COMMA / BAR / AS / IF / FAT_ARROW]
// [368, range_pattern → • simple_pattern, COMMA / BAR / AS / IF / FAT_ARROW]
// [369, simple_pattern → • TRUE, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [370, simple_pattern → • FALSE, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [371, simple_pattern → • CHAR, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [372, simple_pattern → • INT, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [373, simple_pattern → • BYTE, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [374, simple_pattern → • FLOAT, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [375, simple_pattern → • MINUS INT, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [376, simple_pattern → • MINUS FLOAT, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [377, simple_pattern → • STRING, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [378, simple_pattern → • BYTES, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [379, simple_pattern → • UNDERSCORE, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [380, simple_pattern → • LIDENT, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [381, simple_pattern → • constr option(delimited(LPAREN,constr_pat_arguments,RPAREN)), COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [382, simple_pattern → • LPAREN pattern RPAREN, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [383, simple_pattern → • LPAREN pattern COMMA non_empty_list_commas(pattern) RPAREN, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [384, simple_pattern → • LPAREN pattern COLON type_ RPAREN, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [385, simple_pattern → • LBRACKET array_sub_patterns RBRACKET, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [386, simple_pattern → • LBRACE RBRACE, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [387, simple_pattern → • LBRACE DOTDOT option(COMMA) RBRACE, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [388, simple_pattern → • LBRACE non_empty_fields_pat RBRACE, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [389, simple_pattern → • LBRACE non_empty_map_elems_pat RBRACE, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [502, list_semis(multi_pattern_case) → •, RBRACE]
// [503, list_semis(multi_pattern_case) → • non_empty_list_semis(multi_pattern_case), RBRACE]
// [512, non_empty_list_commas(pattern) → • non_empty_list_commas_rev(pattern) option(COMMA), IF / FAT_ARROW]
// [583, non_empty_list_semis(multi_pattern_case) → • non_empty_list_semis_rev(multi_pattern_case), RBRACE]
// [584, non_empty_list_commas_rev(pattern) → • pattern, COMMA / IF / FAT_ARROW]
// [585, non_empty_list_commas_rev(pattern) → • non_empty_list_commas_rev(pattern) COMMA pattern, COMMA / IF / FAT_ARROW]
// [620, non_empty_list_semis_rev(multi_pattern_case) → • non_empty_list_semi_rev_aux(multi_pattern_case) option(SEMI), RBRACE]
// [637, non_empty_list_semi_rev_aux(multi_pattern_case) → • multi_pattern_case, SEMI / RBRACE]
// [638, non_empty_list_semi_rev_aux(multi_pattern_case) → • non_empty_list_semi_rev_aux(multi_pattern_case) SEMI multi_pattern_case, SEMI / RBRACE]
fn yy_state_238(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    NT_multi_pattern_case => Shift(yy_state_45)
    NT_non_empty_list_semi_rev_aux_multi_pattern_case_ => Shift(yy_state_46)
    NT_non_empty_list_commas_rev_pattern_ => Shift(yy_state_50)
    T_LBRACE => Shift(yy_state_52)
    T_LBRACKET => Shift(yy_state_56)
    T_LPAREN => Shift(yy_state_70)
    NT_constr => Shift(yy_state_71)
    T_UNDERSCORE => Shift(yy_state_82)
    T_BYTES => Shift(yy_state_83)
    T_STRING => Shift(yy_state_84)
    T_MINUS => Shift(yy_state_85)
    T_FLOAT => Shift(yy_state_88)
    T_BYTE => Shift(yy_state_89)
    T_INT => Shift(yy_state_90)
    T_CHAR => Shift(yy_state_91)
    T_FALSE => Shift(yy_state_92)
    T_TRUE => Shift(yy_state_93)
    NT_simple_pattern => Shift(yy_state_94)
    NT_type_name => Shift(yy_state_97)
    T_PACKAGE_NAME => Shift(yy_state_100)
    T_UIDENT => Shift(yy_state_102)
    T_LIDENT => Shift(yy_state_103)
    NT_range_pattern => Shift(yy_state_106)
    NT_or_pattern => Shift(yy_state_109)
    NT_pattern => Shift(yy_state_181)
    NT_non_empty_list_commas_pattern_ => Shift(yy_state_234)
    NT_non_empty_list_semis_rev_multi_pattern_case_ => Shift(yy_state_239)
    NT_non_empty_list_semis_multi_pattern_case_ => Shift(yy_state_240)
    NT_list_semis_multi_pattern_case_ => Shift(yy_state_241)
    T_RBRACE => Reduce(0, NT_list_semis_multi_pattern_case_, yy_action_98)
    _ => Error
  }
}

// [583, non_empty_list_semis(multi_pattern_case) → non_empty_list_semis_rev(multi_pattern_case) •, RBRACE]
fn yy_state_239(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_non_empty_list_semis_multi_pattern_case_, yy_action_296)
}

// [503, list_semis(multi_pattern_case) → non_empty_list_semis(multi_pattern_case) •, RBRACE]
fn yy_state_240(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_list_semis_multi_pattern_case_, yy_action_151)
}

// [302, simple_expr → ASYNC fn_header_no_binder list_semis(multi_pattern_case) • RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_241(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACE => Shift(yy_state_242)
    _ => Error
  }
}

// [302, simple_expr → ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_242(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_simple_expr, yy_action_560)
}

// [201, optional_bang → • EXCLAMATION, LPAREN / LBRACE]
// [202, optional_bang → •, LPAREN / LBRACE]
// [204, fn_header_no_binder → FN • optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [300, simple_expr → ASYNC FN • optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_243(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_optional_bang => Shift(yy_state_244)
    T_EXCLAMATION => Shift(yy_state_535)
    T_LPAREN | T_LBRACE => Reduce(0, NT_optional_bang, yy_action_662)
    _ => Error
  }
}

// [10, parameters → • LPAREN list_commas(parameter) RPAREN, LBRACE / THIN_ARROW]
// [204, fn_header_no_binder → FN optional_bang • LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [300, simple_expr → ASYNC FN optional_bang • parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_244(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_parameters => Shift(yy_state_245)
    T_LBRACE => Shift(yy_state_297)
    T_LPAREN => Shift(yy_state_298)
    _ => Error
  }
}

// [300, simple_expr → ASYNC FN optional_bang parameters • option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [460, option(preceded(THIN_ARROW,return_type)) → •, LBRACE]
// [461, option(preceded(THIN_ARROW,return_type)) → • THIN_ARROW return_type, LBRACE]
fn yy_state_245(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_THIN_ARROW => Shift(yy_state_246)
    NT_option_preceded_THIN_ARROW_return_type__ => Shift(yy_state_248)
    T_LBRACE => Reduce(0, NT_option_preceded_THIN_ARROW_return_type__, yy_action_161)
    _ => Error
  }
}

// [192, luident → • LIDENT, EQUAL / QUESTION / EXCLAMATION / SEMI / LBRACKET / LBRACE / RBRACE]
// [193, luident → • UIDENT, EQUAL / QUESTION / EXCLAMATION / SEMI / LBRACKET / LBRACE / RBRACE]
// [198, qual_ident_ty → • luident, EQUAL / QUESTION / EXCLAMATION / SEMI / LBRACKET / LBRACE / RBRACE]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, EQUAL / QUESTION / EXCLAMATION / SEMI / LBRACKET / LBRACE / RBRACE]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, EQUAL / QUESTION / EXCLAMATION / SEMI / LBRACKET / LBRACE / RBRACE]
// [405, return_type → • type_, EQUAL / SEMI / LBRACE / RBRACE]
// [406, return_type → • type_ EXCLAMATION, EQUAL / SEMI / LBRACE / RBRACE]
// [407, return_type → • type_ EXCLAMATION separated_nonempty_list(PLUS,error_type), EQUAL / SEMI / LBRACE / RBRACE]
// [410, type_ → • type_ QUESTION, EQUAL / QUESTION / EXCLAMATION / SEMI / LBRACE / RBRACE]
// [411, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN, EQUAL / QUESTION / EXCLAMATION / SEMI / LBRACE / RBRACE]
// [412, type_ → • ASYNC LPAREN type_ COMMA RPAREN THIN_ARROW return_type, EQUAL / QUESTION / EXCLAMATION / SEMI / LBRACE / RBRACE]
// [413, type_ → • ASYNC LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, EQUAL / QUESTION / EXCLAMATION / SEMI / LBRACE / RBRACE]
// [414, type_ → • LPAREN type_ COMMA RPAREN THIN_ARROW return_type, EQUAL / QUESTION / EXCLAMATION / SEMI / LBRACE / RBRACE]
// [415, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, EQUAL / QUESTION / EXCLAMATION / SEMI / LBRACE / RBRACE]
// [416, type_ → • ASYNC LPAREN RPAREN THIN_ARROW return_type, EQUAL / QUESTION / EXCLAMATION / SEMI / LBRACE / RBRACE]
// [417, type_ → • LPAREN RPAREN THIN_ARROW return_type, EQUAL / QUESTION / EXCLAMATION / SEMI / LBRACE / RBRACE]
// [418, type_ → • LPAREN type_ RPAREN, EQUAL / QUESTION / EXCLAMATION / SEMI / LBRACE / RBRACE]
// [419, type_ → • ASYNC LPAREN type_ RPAREN THIN_ARROW return_type, EQUAL / QUESTION / EXCLAMATION / SEMI / LBRACE / RBRACE]
// [420, type_ → • LPAREN type_ RPAREN THIN_ARROW return_type, EQUAL / QUESTION / EXCLAMATION / SEMI / LBRACE / RBRACE]
// [421, type_ → • qual_ident_ty optional_type_arguments, EQUAL / QUESTION / EXCLAMATION / SEMI / LBRACE / RBRACE]
// [422, type_ → • AMPER qual_ident_ty, EQUAL / QUESTION / EXCLAMATION / SEMI / LBRACE / RBRACE]
// [423, type_ → • UNDERSCORE, EQUAL / QUESTION / EXCLAMATION / SEMI / LBRACE / RBRACE]
// [461, option(preceded(THIN_ARROW,return_type)) → THIN_ARROW • return_type, EQUAL / SEMI / LBRACE / RBRACE]
fn yy_state_246(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    T_UNDERSCORE => Shift(yy_state_120)
    T_AMPER => Shift(yy_state_121)
    NT_qual_ident_ty => Shift(yy_state_123)
    T_ASYNC => Shift(yy_state_129)
    T_LPAREN => Shift(yy_state_134)
    NT_type_ => Shift(yy_state_138)
    NT_return_type => Shift(yy_state_247)
    _ => Error
  }
}

// [461, option(preceded(THIN_ARROW,return_type)) → THIN_ARROW return_type •, EQUAL / SEMI / LBRACE / RBRACE]
fn yy_state_247(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_option_preceded_THIN_ARROW_return_type__, yy_action_332)
}

// [38, block_expr → • LBRACE list_semis_rev(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) • block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_248(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_block_expr => Shift(yy_state_249)
    T_LBRACE => Shift(yy_state_250)
    _ => Error
  }
}

// [300, simple_expr → ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_249(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(6, NT_simple_expr, yy_action_484)
}

// [38, block_expr → LBRACE • list_semis_rev(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [194, qual_ident → • LIDENT, AUGMENTED_ASSIGNMENT / EQUAL]
// [195, qual_ident → • PACKAGE_NAME DOT_LIDENT, AUGMENTED_ASSIGNMENT / EQUAL]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [203, fn_header → • FN LIDENT optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [205, statement → • LET pattern EQUAL expr, SEMI / RBRACE]
// [206, statement → • LET pattern COLON type_ EQUAL expr, SEMI / RBRACE]
// [207, statement → • LET MUTABLE LIDENT EQUAL expr, SEMI / RBRACE]
// [208, statement → • LET MUTABLE LIDENT COLON type_ EQUAL expr, SEMI / RBRACE]
// [209, statement → • ASYNC FN LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, SEMI / RBRACE]
// [210, statement → • FN LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, SEMI / RBRACE]
// [211, statement → • ASYNC fn_header list_semis(multi_pattern_case) RBRACE, SEMI / RBRACE]
// [212, statement → • fn_header list_semis(multi_pattern_case) RBRACE, SEMI / RBRACE]
// [213, statement → • guard_statement, SEMI / RBRACE]
// [214, statement → • expr_statement, SEMI / RBRACE]
// [215, guard_statement → • GUARD infix_expr, SEMI / RBRACE]
// [216, guard_statement → • GUARD infix_expr ELSE block_expr, SEMI / RBRACE]
// [217, guard_statement → • GUARD LET pattern EQUAL infix_expr, SEMI / RBRACE]
// [218, guard_statement → • GUARD LET pattern EQUAL infix_expr ELSE LBRACE single_pattern_cases RBRACE, SEMI / RBRACE]
// [219, expr_statement → • BREAK POST_LABEL option(expr), SEMI / RBRACE]
// [220, expr_statement → • BREAK option(expr), SEMI / RBRACE]
// [221, expr_statement → • CONTINUE POST_LABEL list_commas_no_trailing(expr), SEMI / RBRACE]
// [222, expr_statement → • CONTINUE list_commas_no_trailing(expr), SEMI / RBRACE]
// [223, expr_statement → • RETURN option(expr), SEMI / RBRACE]
// [224, expr_statement → • RAISE expr, SEMI / RBRACE]
// [225, expr_statement → • ELLIPSIS, SEMI / RBRACE]
// [226, expr_statement → • left_value AUGMENTED_ASSIGNMENT expr, SEMI / RBRACE]
// [227, expr_statement → • left_value EQUAL expr, SEMI / RBRACE]
// [228, expr_statement → • expr, SEMI / RBRACE]
// [229, loop_label_colon → • POST_LABEL COLON, WHILE / LOOP / FOR]
// [230, loop_label_colon → •, WHILE / LOOP / FOR]
// [231, while_expr → • loop_label_colon WHILE infix_expr block_expr optional_else, SEMI / RBRACE]
// [238, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE, SEMI / RBRACE]
// [239, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE ELSE LBRACE single_pattern_cases RBRACE, SEMI / RBRACE]
// [240, if_expr → • IF infix_expr block_expr ELSE block_expr, SEMI / RBRACE]
// [241, if_expr → • IF infix_expr block_expr ELSE if_expr, SEMI / RBRACE]
// [242, if_expr → • IF infix_expr block_expr, SEMI / RBRACE]
// [243, match_expr → • MATCH infix_expr LBRACE non_empty_list_semis(single_pattern_case) RBRACE, SEMI / RBRACE]
// [244, match_expr → • MATCH infix_expr LBRACE RBRACE, SEMI / RBRACE]
// [245, loop_expr → • loop_label_colon LOOP non_empty_list_commas_no_trailing(expr) LBRACE list_semis(multi_pattern_case) RBRACE, SEMI / RBRACE]
// [249, for_expr → • loop_label_colon FOR for_binders SEMI option(infix_expr) SEMI list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) block_expr optional_else, SEMI / RBRACE]
// [250, for_expr → • loop_label_colon FOR for_binders block_expr optional_else, SEMI / RBRACE]
// [251, foreach_expr → • loop_label_colon FOR non_empty_list_commas(foreach_binder) IN expr block_expr optional_else, SEMI / RBRACE]
// [254, expr → • loop_expr, SEMI / RBRACE]
// [255, expr → • for_expr, SEMI / RBRACE]
// [256, expr → • foreach_expr, SEMI / RBRACE]
// [257, expr → • while_expr, SEMI / RBRACE]
// [258, expr → • try_expr, SEMI / RBRACE]
// [259, expr → • if_expr, SEMI / RBRACE]
// [260, expr → • match_expr, SEMI / RBRACE]
// [261, expr → • pipe_expr, SEMI / RBRACE]
// [262, pipe_expr → • pipe_expr PIPE infix_expr, SEMI / RBRACE / PIPE]
// [263, pipe_expr → • infix_expr, SEMI / RBRACE / PIPE]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [285, left_value → • qual_ident, AUGMENTED_ASSIGNMENT / EQUAL]
// [286, left_value → • simple_expr DOT_LIDENT, AUGMENTED_ASSIGNMENT / EQUAL]
// [287, left_value → • simple_expr DOT_INT, AUGMENTED_ASSIGNMENT / EQUAL]
// [288, left_value → • simple_expr LBRACKET expr RBRACKET, AUGMENTED_ASSIGNMENT / EQUAL]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [466, list_semis_rev(statement) → •, RBRACE]
// [467, list_semis_rev(statement) → • non_empty_list_semis_rev(statement), RBRACE]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [561, non_empty_list_semis_rev(statement) → • non_empty_list_semi_rev_aux(statement) option(SEMI), RBRACE]
// [579, non_empty_list_semi_rev_aux(statement) → • statement, SEMI / RBRACE]
// [580, non_empty_list_semi_rev_aux(statement) → • non_empty_list_semi_rev_aux(statement) SEMI statement, SEMI / RBRACE]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_250(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    NT_statement => Shift(yy_state_251)
    NT_non_empty_list_semi_rev_aux_statement_ => Shift(yy_state_252)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    NT_prefix_expr => Shift(yy_state_306)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_323)
    NT_pipe_expr => Shift(yy_state_346)
    NT_match_expr => Shift(yy_state_349)
    NT_if_expr => Shift(yy_state_350)
    NT_try_expr => Shift(yy_state_351)
    NT_while_expr => Shift(yy_state_352)
    NT_foreach_expr => Shift(yy_state_353)
    NT_for_expr => Shift(yy_state_354)
    NT_loop_expr => Shift(yy_state_355)
    T_MATCH => Shift(yy_state_356)
    NT_qual_ident => Shift(yy_state_367)
    NT_simple_expr => Shift(yy_state_368)
    T_IF => Shift(yy_state_373)
    T_TRY => Shift(yy_state_379)
    NT_loop_label_colon => Shift(yy_state_396)
    T_POST_LABEL => Shift(yy_state_404)
    NT_expr => Shift(yy_state_490)
    NT_left_value => Shift(yy_state_491)
    T_ELLIPSIS => Shift(yy_state_496)
    T_RAISE => Shift(yy_state_497)
    T_RETURN => Shift(yy_state_499)
    T_CONTINUE => Shift(yy_state_501)
    T_BREAK => Shift(yy_state_506)
    T_PACKAGE_NAME => Shift(yy_state_510)
    T_LIDENT => Shift(yy_state_512)
    T_GUARD => Shift(yy_state_584)
    NT_expr_statement => Shift(yy_state_596)
    NT_guard_statement => Shift(yy_state_597)
    NT_fn_header => Shift(yy_state_598)
    T_ASYNC => Shift(yy_state_601)
    T_LET => Shift(yy_state_612)
    T_FN => Shift(yy_state_628)
    NT_non_empty_list_semis_rev_statement_ => Shift(yy_state_643)
    NT_list_semis_rev_statement_ => Shift(yy_state_644)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_481)
    T_RBRACE => Reduce(0, NT_list_semis_rev_statement_, yy_action_644)
    _ => Error
  }
}

// [579, non_empty_list_semi_rev_aux(statement) → statement •, SEMI / RBRACE]
fn yy_state_251(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_non_empty_list_semi_rev_aux_statement_, yy_action_631)
}

// [561, non_empty_list_semis_rev(statement) → non_empty_list_semi_rev_aux(statement) • option(SEMI), RBRACE]
// [580, non_empty_list_semi_rev_aux(statement) → non_empty_list_semi_rev_aux(statement) • SEMI statement, SEMI / RBRACE]
// [581, option(SEMI) → •, RBRACE]
// [582, option(SEMI) → • SEMI, RBRACE]
fn yy_state_252(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_SEMI => Shift(yy_state_253)
    NT_option_SEMI_ => Shift(yy_state_642)
    T_RBRACE => Reduce(0, NT_option_SEMI_, yy_action_539)
    _ => Error
  }
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [194, qual_ident → • LIDENT, AUGMENTED_ASSIGNMENT / EQUAL]
// [195, qual_ident → • PACKAGE_NAME DOT_LIDENT, AUGMENTED_ASSIGNMENT / EQUAL]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [203, fn_header → • FN LIDENT optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [205, statement → • LET pattern EQUAL expr, SEMI / RBRACE]
// [206, statement → • LET pattern COLON type_ EQUAL expr, SEMI / RBRACE]
// [207, statement → • LET MUTABLE LIDENT EQUAL expr, SEMI / RBRACE]
// [208, statement → • LET MUTABLE LIDENT COLON type_ EQUAL expr, SEMI / RBRACE]
// [209, statement → • ASYNC FN LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, SEMI / RBRACE]
// [210, statement → • FN LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, SEMI / RBRACE]
// [211, statement → • ASYNC fn_header list_semis(multi_pattern_case) RBRACE, SEMI / RBRACE]
// [212, statement → • fn_header list_semis(multi_pattern_case) RBRACE, SEMI / RBRACE]
// [213, statement → • guard_statement, SEMI / RBRACE]
// [214, statement → • expr_statement, SEMI / RBRACE]
// [215, guard_statement → • GUARD infix_expr, SEMI / RBRACE]
// [216, guard_statement → • GUARD infix_expr ELSE block_expr, SEMI / RBRACE]
// [217, guard_statement → • GUARD LET pattern EQUAL infix_expr, SEMI / RBRACE]
// [218, guard_statement → • GUARD LET pattern EQUAL infix_expr ELSE LBRACE single_pattern_cases RBRACE, SEMI / RBRACE]
// [219, expr_statement → • BREAK POST_LABEL option(expr), SEMI / RBRACE]
// [220, expr_statement → • BREAK option(expr), SEMI / RBRACE]
// [221, expr_statement → • CONTINUE POST_LABEL list_commas_no_trailing(expr), SEMI / RBRACE]
// [222, expr_statement → • CONTINUE list_commas_no_trailing(expr), SEMI / RBRACE]
// [223, expr_statement → • RETURN option(expr), SEMI / RBRACE]
// [224, expr_statement → • RAISE expr, SEMI / RBRACE]
// [225, expr_statement → • ELLIPSIS, SEMI / RBRACE]
// [226, expr_statement → • left_value AUGMENTED_ASSIGNMENT expr, SEMI / RBRACE]
// [227, expr_statement → • left_value EQUAL expr, SEMI / RBRACE]
// [228, expr_statement → • expr, SEMI / RBRACE]
// [229, loop_label_colon → • POST_LABEL COLON, WHILE / LOOP / FOR]
// [230, loop_label_colon → •, WHILE / LOOP / FOR]
// [231, while_expr → • loop_label_colon WHILE infix_expr block_expr optional_else, SEMI / RBRACE]
// [238, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE, SEMI / RBRACE]
// [239, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE ELSE LBRACE single_pattern_cases RBRACE, SEMI / RBRACE]
// [240, if_expr → • IF infix_expr block_expr ELSE block_expr, SEMI / RBRACE]
// [241, if_expr → • IF infix_expr block_expr ELSE if_expr, SEMI / RBRACE]
// [242, if_expr → • IF infix_expr block_expr, SEMI / RBRACE]
// [243, match_expr → • MATCH infix_expr LBRACE non_empty_list_semis(single_pattern_case) RBRACE, SEMI / RBRACE]
// [244, match_expr → • MATCH infix_expr LBRACE RBRACE, SEMI / RBRACE]
// [245, loop_expr → • loop_label_colon LOOP non_empty_list_commas_no_trailing(expr) LBRACE list_semis(multi_pattern_case) RBRACE, SEMI / RBRACE]
// [249, for_expr → • loop_label_colon FOR for_binders SEMI option(infix_expr) SEMI list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) block_expr optional_else, SEMI / RBRACE]
// [250, for_expr → • loop_label_colon FOR for_binders block_expr optional_else, SEMI / RBRACE]
// [251, foreach_expr → • loop_label_colon FOR non_empty_list_commas(foreach_binder) IN expr block_expr optional_else, SEMI / RBRACE]
// [254, expr → • loop_expr, SEMI / RBRACE]
// [255, expr → • for_expr, SEMI / RBRACE]
// [256, expr → • foreach_expr, SEMI / RBRACE]
// [257, expr → • while_expr, SEMI / RBRACE]
// [258, expr → • try_expr, SEMI / RBRACE]
// [259, expr → • if_expr, SEMI / RBRACE]
// [260, expr → • match_expr, SEMI / RBRACE]
// [261, expr → • pipe_expr, SEMI / RBRACE]
// [262, pipe_expr → • pipe_expr PIPE infix_expr, SEMI / RBRACE / PIPE]
// [263, pipe_expr → • infix_expr, SEMI / RBRACE / PIPE]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [285, left_value → • qual_ident, AUGMENTED_ASSIGNMENT / EQUAL]
// [286, left_value → • simple_expr DOT_LIDENT, AUGMENTED_ASSIGNMENT / EQUAL]
// [287, left_value → • simple_expr DOT_INT, AUGMENTED_ASSIGNMENT / EQUAL]
// [288, left_value → • simple_expr LBRACKET expr RBRACKET, AUGMENTED_ASSIGNMENT / EQUAL]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [580, non_empty_list_semi_rev_aux(statement) → non_empty_list_semi_rev_aux(statement) SEMI • statement, SEMI / RBRACE]
// [582, option(SEMI) → SEMI •, RBRACE]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_253(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    NT_statement => Shift(yy_state_254)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    NT_prefix_expr => Shift(yy_state_306)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_323)
    NT_pipe_expr => Shift(yy_state_346)
    NT_match_expr => Shift(yy_state_349)
    NT_if_expr => Shift(yy_state_350)
    NT_try_expr => Shift(yy_state_351)
    NT_while_expr => Shift(yy_state_352)
    NT_foreach_expr => Shift(yy_state_353)
    NT_for_expr => Shift(yy_state_354)
    NT_loop_expr => Shift(yy_state_355)
    T_MATCH => Shift(yy_state_356)
    NT_qual_ident => Shift(yy_state_367)
    NT_simple_expr => Shift(yy_state_368)
    T_IF => Shift(yy_state_373)
    T_TRY => Shift(yy_state_379)
    NT_loop_label_colon => Shift(yy_state_396)
    T_POST_LABEL => Shift(yy_state_404)
    NT_expr => Shift(yy_state_490)
    NT_left_value => Shift(yy_state_491)
    T_ELLIPSIS => Shift(yy_state_496)
    T_RAISE => Shift(yy_state_497)
    T_RETURN => Shift(yy_state_499)
    T_CONTINUE => Shift(yy_state_501)
    T_BREAK => Shift(yy_state_506)
    T_PACKAGE_NAME => Shift(yy_state_510)
    T_LIDENT => Shift(yy_state_512)
    T_GUARD => Shift(yy_state_584)
    NT_expr_statement => Shift(yy_state_596)
    NT_guard_statement => Shift(yy_state_597)
    NT_fn_header => Shift(yy_state_598)
    T_ASYNC => Shift(yy_state_601)
    T_LET => Shift(yy_state_612)
    T_FN => Shift(yy_state_628)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_481)
    T_RBRACE => Reduce(1, NT_option_SEMI_, yy_action_425)
    _ => Error
  }
}

// [580, non_empty_list_semi_rev_aux(statement) → non_empty_list_semi_rev_aux(statement) SEMI statement •, SEMI / RBRACE]
fn yy_state_254(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_non_empty_list_semi_rev_aux_statement_, yy_action_328)
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [194, qual_ident → • LIDENT, AUGMENTED_ASSIGNMENT / EQUAL]
// [195, qual_ident → • PACKAGE_NAME DOT_LIDENT, AUGMENTED_ASSIGNMENT / EQUAL]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [203, fn_header → • FN LIDENT optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [205, statement → • LET pattern EQUAL expr, SEMI / RBRACE]
// [206, statement → • LET pattern COLON type_ EQUAL expr, SEMI / RBRACE]
// [207, statement → • LET MUTABLE LIDENT EQUAL expr, SEMI / RBRACE]
// [208, statement → • LET MUTABLE LIDENT COLON type_ EQUAL expr, SEMI / RBRACE]
// [209, statement → • ASYNC FN LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, SEMI / RBRACE]
// [210, statement → • FN LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, SEMI / RBRACE]
// [211, statement → • ASYNC fn_header list_semis(multi_pattern_case) RBRACE, SEMI / RBRACE]
// [212, statement → • fn_header list_semis(multi_pattern_case) RBRACE, SEMI / RBRACE]
// [213, statement → • guard_statement, SEMI / RBRACE]
// [214, statement → • expr_statement, SEMI / RBRACE]
// [215, guard_statement → • GUARD infix_expr, SEMI / RBRACE]
// [216, guard_statement → • GUARD infix_expr ELSE block_expr, SEMI / RBRACE]
// [217, guard_statement → • GUARD LET pattern EQUAL infix_expr, SEMI / RBRACE]
// [218, guard_statement → • GUARD LET pattern EQUAL infix_expr ELSE LBRACE single_pattern_cases RBRACE, SEMI / RBRACE]
// [219, expr_statement → • BREAK POST_LABEL option(expr), SEMI / RBRACE]
// [220, expr_statement → • BREAK option(expr), SEMI / RBRACE]
// [221, expr_statement → • CONTINUE POST_LABEL list_commas_no_trailing(expr), SEMI / RBRACE]
// [222, expr_statement → • CONTINUE list_commas_no_trailing(expr), SEMI / RBRACE]
// [223, expr_statement → • RETURN option(expr), SEMI / RBRACE]
// [224, expr_statement → • RAISE expr, SEMI / RBRACE]
// [225, expr_statement → • ELLIPSIS, SEMI / RBRACE]
// [226, expr_statement → • left_value AUGMENTED_ASSIGNMENT expr, SEMI / RBRACE]
// [227, expr_statement → • left_value EQUAL expr, SEMI / RBRACE]
// [228, expr_statement → • expr, SEMI / RBRACE]
// [229, loop_label_colon → • POST_LABEL COLON, WHILE / LOOP / FOR]
// [230, loop_label_colon → •, WHILE / LOOP / FOR]
// [231, while_expr → • loop_label_colon WHILE infix_expr block_expr optional_else, SEMI / RBRACE]
// [238, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE, SEMI / RBRACE]
// [239, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE ELSE LBRACE single_pattern_cases RBRACE, SEMI / RBRACE]
// [240, if_expr → • IF infix_expr block_expr ELSE block_expr, SEMI / RBRACE]
// [241, if_expr → • IF infix_expr block_expr ELSE if_expr, SEMI / RBRACE]
// [242, if_expr → • IF infix_expr block_expr, SEMI / RBRACE]
// [243, match_expr → • MATCH infix_expr LBRACE non_empty_list_semis(single_pattern_case) RBRACE, SEMI / RBRACE]
// [244, match_expr → • MATCH infix_expr LBRACE RBRACE, SEMI / RBRACE]
// [245, loop_expr → • loop_label_colon LOOP non_empty_list_commas_no_trailing(expr) LBRACE list_semis(multi_pattern_case) RBRACE, SEMI / RBRACE]
// [249, for_expr → • loop_label_colon FOR for_binders SEMI option(infix_expr) SEMI list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) block_expr optional_else, SEMI / RBRACE]
// [250, for_expr → • loop_label_colon FOR for_binders block_expr optional_else, SEMI / RBRACE]
// [251, foreach_expr → • loop_label_colon FOR non_empty_list_commas(foreach_binder) IN expr block_expr optional_else, SEMI / RBRACE]
// [254, expr → • loop_expr, SEMI / RBRACE]
// [255, expr → • for_expr, SEMI / RBRACE]
// [256, expr → • foreach_expr, SEMI / RBRACE]
// [257, expr → • while_expr, SEMI / RBRACE]
// [258, expr → • try_expr, SEMI / RBRACE]
// [259, expr → • if_expr, SEMI / RBRACE]
// [260, expr → • match_expr, SEMI / RBRACE]
// [261, expr → • pipe_expr, SEMI / RBRACE]
// [262, pipe_expr → • pipe_expr PIPE infix_expr, SEMI / RBRACE / PIPE]
// [263, pipe_expr → • infix_expr, SEMI / RBRACE / PIPE]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [285, left_value → • qual_ident, AUGMENTED_ASSIGNMENT / EQUAL]
// [286, left_value → • simple_expr DOT_LIDENT, AUGMENTED_ASSIGNMENT / EQUAL]
// [287, left_value → • simple_expr DOT_INT, AUGMENTED_ASSIGNMENT / EQUAL]
// [288, left_value → • simple_expr LBRACKET expr RBRACKET, AUGMENTED_ASSIGNMENT / EQUAL]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → LBRACE • record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → LBRACE • DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → LBRACE • DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → LBRACE • none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → LBRACE • list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [350, map_syntax_key → • simple_constant, COLON]
// [351, map_syntax_key → • MINUS INT, COLON]
// [352, map_syntax_key → • MINUS FLOAT, COLON]
// [361, map_expr_elem → • map_syntax_key COLON expr, COMMA / RBRACE]
// [430, record_defn → • LIDENT COMMA list_commas_with_trailing_info(record_defn_single), RBRACE]
// [431, record_defn → • LIDENT COLON expr option(COMMA), RBRACE]
// [432, record_defn → • LIDENT COLON expr COMMA non_empty_list_commas_with_trailing_info(record_defn_single), RBRACE]
// [501, none_empty_list_semis_rev_with_trailing_info(statement) → • non_empty_list_semi_rev_aux(statement) option(SEMI), RBRACE]
// [524, list_commas(map_expr_elem) → •, RBRACE]
// [525, list_commas(map_expr_elem) → • non_empty_list_commas(map_expr_elem), RBRACE]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [579, non_empty_list_semi_rev_aux(statement) → • statement, SEMI / RBRACE]
// [580, non_empty_list_semi_rev_aux(statement) → • non_empty_list_semi_rev_aux(statement) SEMI statement, SEMI / RBRACE]
// [593, non_empty_list_commas(map_expr_elem) → • non_empty_list_commas_rev(map_expr_elem) option(COMMA), RBRACE]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [625, non_empty_list_commas_rev(map_expr_elem) → • map_expr_elem, COMMA / RBRACE]
// [626, non_empty_list_commas_rev(map_expr_elem) → • non_empty_list_commas_rev(map_expr_elem) COMMA map_expr_elem, COMMA / RBRACE]
fn yy_state_255(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    NT_statement => Shift(yy_state_251)
    T_LBRACE => Shift(yy_state_255)
    NT_map_expr_elem => Shift(yy_state_256)
    NT_non_empty_list_commas_rev_map_expr_elem_ => Shift(yy_state_257)
    NT_map_syntax_key => Shift(yy_state_261)
    NT_type_name => Shift(yy_state_264)
    T_PLUS => Shift(yy_state_290)
    NT_prefix_expr => Shift(yy_state_306)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_323)
    NT_pipe_expr => Shift(yy_state_346)
    NT_match_expr => Shift(yy_state_349)
    NT_if_expr => Shift(yy_state_350)
    NT_try_expr => Shift(yy_state_351)
    NT_while_expr => Shift(yy_state_352)
    NT_foreach_expr => Shift(yy_state_353)
    NT_for_expr => Shift(yy_state_354)
    NT_loop_expr => Shift(yy_state_355)
    T_MATCH => Shift(yy_state_356)
    NT_qual_ident => Shift(yy_state_367)
    NT_simple_expr => Shift(yy_state_368)
    T_IF => Shift(yy_state_373)
    T_TRY => Shift(yy_state_379)
    NT_loop_label_colon => Shift(yy_state_396)
    T_POST_LABEL => Shift(yy_state_404)
    NT_expr => Shift(yy_state_490)
    NT_left_value => Shift(yy_state_491)
    T_ELLIPSIS => Shift(yy_state_496)
    T_RAISE => Shift(yy_state_497)
    T_RETURN => Shift(yy_state_499)
    T_CONTINUE => Shift(yy_state_501)
    T_BREAK => Shift(yy_state_506)
    T_PACKAGE_NAME => Shift(yy_state_510)
    NT_non_empty_list_commas_map_expr_elem_ => Shift(yy_state_565)
    NT_non_empty_list_semi_rev_aux_statement_ => Shift(yy_state_566)
    NT_simple_constant => Shift(yy_state_568)
    NT_list_commas_map_expr_elem_ => Shift(yy_state_569)
    NT_none_empty_list_semis_rev_with_trailing_info_statement_ => Shift(yy_state_571)
    T_DOTDOT => Shift(yy_state_573)
    NT_record_defn => Shift(yy_state_579)
    T_MINUS => Shift(yy_state_581)
    T_GUARD => Shift(yy_state_584)
    NT_expr_statement => Shift(yy_state_596)
    NT_guard_statement => Shift(yy_state_597)
    NT_fn_header => Shift(yy_state_598)
    T_ASYNC => Shift(yy_state_601)
    T_LET => Shift(yy_state_612)
    T_FN => Shift(yy_state_628)
    T_LIDENT => Shift(yy_state_634)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_481)
    T_RBRACE => Reduce(0, NT_list_commas_map_expr_elem_, yy_action_693)
    _ => Error
  }
}

// [625, non_empty_list_commas_rev(map_expr_elem) → map_expr_elem •, COMMA / RBRACE]
fn yy_state_256(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_non_empty_list_commas_rev_map_expr_elem_, yy_action_548)
}

// [533, option(COMMA) → •, RBRACE]
// [534, option(COMMA) → • COMMA, RBRACE]
// [593, non_empty_list_commas(map_expr_elem) → non_empty_list_commas_rev(map_expr_elem) • option(COMMA), RBRACE]
// [626, non_empty_list_commas_rev(map_expr_elem) → non_empty_list_commas_rev(map_expr_elem) • COMMA map_expr_elem, COMMA / RBRACE]
fn yy_state_257(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_option_COMMA_ => Shift(yy_state_258)
    T_COMMA => Shift(yy_state_259)
    T_RBRACE => Reduce(0, NT_option_COMMA_, yy_action_181)
    _ => Error
  }
}

// [593, non_empty_list_commas(map_expr_elem) → non_empty_list_commas_rev(map_expr_elem) option(COMMA) •, RBRACE]
fn yy_state_258(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_non_empty_list_commas_map_expr_elem_, yy_action_104)
}

// [342, simple_constant → • TRUE, COLON]
// [343, simple_constant → • FALSE, COLON]
// [344, simple_constant → • BYTE, COLON]
// [345, simple_constant → • BYTES, COLON]
// [346, simple_constant → • CHAR, COLON]
// [347, simple_constant → • INT, COLON]
// [348, simple_constant → • FLOAT, COLON]
// [349, simple_constant → • STRING, COLON]
// [350, map_syntax_key → • simple_constant, COLON]
// [351, map_syntax_key → • MINUS INT, COLON]
// [352, map_syntax_key → • MINUS FLOAT, COLON]
// [361, map_expr_elem → • map_syntax_key COLON expr, COMMA / RBRACE]
// [534, option(COMMA) → COMMA •, RBRACE]
// [626, non_empty_list_commas_rev(map_expr_elem) → non_empty_list_commas_rev(map_expr_elem) COMMA • map_expr_elem, COMMA / RBRACE]
fn yy_state_259(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_MINUS => Shift(yy_state_205)
    NT_simple_constant => Shift(yy_state_208)
    NT_map_expr_elem => Shift(yy_state_260)
    NT_map_syntax_key => Shift(yy_state_261)
    T_RBRACE => Reduce(1, NT_option_COMMA_, yy_action_56)
    _ => Error
  }
}

// [626, non_empty_list_commas_rev(map_expr_elem) → non_empty_list_commas_rev(map_expr_elem) COMMA map_expr_elem •, COMMA / RBRACE]
fn yy_state_260(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_non_empty_list_commas_rev_map_expr_elem_, yy_action_244)
}

// [361, map_expr_elem → map_syntax_key • COLON expr, COMMA / RBRACE]
fn yy_state_261(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_262)
    _ => Error
  }
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [229, loop_label_colon → • POST_LABEL COLON, WHILE / LOOP / FOR]
// [230, loop_label_colon → •, WHILE / LOOP / FOR]
// [231, while_expr → • loop_label_colon WHILE infix_expr block_expr optional_else, COMMA / RBRACE]
// [238, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE, COMMA / RBRACE]
// [239, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE ELSE LBRACE single_pattern_cases RBRACE, COMMA / RBRACE]
// [240, if_expr → • IF infix_expr block_expr ELSE block_expr, COMMA / RBRACE]
// [241, if_expr → • IF infix_expr block_expr ELSE if_expr, COMMA / RBRACE]
// [242, if_expr → • IF infix_expr block_expr, COMMA / RBRACE]
// [243, match_expr → • MATCH infix_expr LBRACE non_empty_list_semis(single_pattern_case) RBRACE, COMMA / RBRACE]
// [244, match_expr → • MATCH infix_expr LBRACE RBRACE, COMMA / RBRACE]
// [245, loop_expr → • loop_label_colon LOOP non_empty_list_commas_no_trailing(expr) LBRACE list_semis(multi_pattern_case) RBRACE, COMMA / RBRACE]
// [249, for_expr → • loop_label_colon FOR for_binders SEMI option(infix_expr) SEMI list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) block_expr optional_else, COMMA / RBRACE]
// [250, for_expr → • loop_label_colon FOR for_binders block_expr optional_else, COMMA / RBRACE]
// [251, foreach_expr → • loop_label_colon FOR non_empty_list_commas(foreach_binder) IN expr block_expr optional_else, COMMA / RBRACE]
// [254, expr → • loop_expr, COMMA / RBRACE]
// [255, expr → • for_expr, COMMA / RBRACE]
// [256, expr → • foreach_expr, COMMA / RBRACE]
// [257, expr → • while_expr, COMMA / RBRACE]
// [258, expr → • try_expr, COMMA / RBRACE]
// [259, expr → • if_expr, COMMA / RBRACE]
// [260, expr → • match_expr, COMMA / RBRACE]
// [261, expr → • pipe_expr, COMMA / RBRACE]
// [262, pipe_expr → • pipe_expr PIPE infix_expr, COMMA / RBRACE / PIPE]
// [263, pipe_expr → • infix_expr, COMMA / RBRACE / PIPE]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [361, map_expr_elem → map_syntax_key COLON • expr, COMMA / RBRACE]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_262(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_expr => Shift(yy_state_263)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    T_LIDENT => Shift(yy_state_311)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_323)
    NT_pipe_expr => Shift(yy_state_346)
    NT_match_expr => Shift(yy_state_349)
    NT_if_expr => Shift(yy_state_350)
    NT_try_expr => Shift(yy_state_351)
    NT_while_expr => Shift(yy_state_352)
    NT_foreach_expr => Shift(yy_state_353)
    NT_for_expr => Shift(yy_state_354)
    NT_loop_expr => Shift(yy_state_355)
    T_MATCH => Shift(yy_state_356)
    T_IF => Shift(yy_state_373)
    T_TRY => Shift(yy_state_379)
    NT_loop_label_colon => Shift(yy_state_396)
    T_POST_LABEL => Shift(yy_state_404)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_481)
    _ => Error
  }
}

// [361, map_expr_elem → map_syntax_key COLON expr •, COMMA / RBRACE]
fn yy_state_263(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_map_expr_elem, yy_action_191)
}

// [291, constr → type_name • COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → type_name • COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → type_name • COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → type_name • COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → type_name • COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_264(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLONCOLON => Shift(yy_state_265)
    _ => Error
  }
}

// [291, constr → type_name COLONCOLON • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → type_name COLONCOLON • LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → type_name COLONCOLON • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → type_name COLONCOLON • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → type_name COLONCOLON • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_265(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_99)
    T_LIDENT => Shift(yy_state_266)
    T_LBRACE => Shift(yy_state_267)
    _ => Error
  }
}

// [325, simple_expr → type_name COLONCOLON LIDENT •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_266(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_simple_expr, yy_action_677)
}

// [293, simple_expr → type_name COLONCOLON LBRACE • list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → type_name COLONCOLON LBRACE • DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → type_name COLONCOLON LBRACE • DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [433, record_defn_single → • LIDENT COLON expr, COMMA / RBRACE]
// [434, record_defn_single → • LIDENT, COMMA / RBRACE]
// [520, list_commas_with_trailing_info(record_defn_single) → •, RBRACE]
// [521, list_commas_with_trailing_info(record_defn_single) → • non_empty_list_commas_with_trailing_info(record_defn_single), RBRACE]
// [545, non_empty_list_commas_with_trailing_info(record_defn_single) → • non_empty_list_commas_rev(record_defn_single) option(COMMA), RBRACE]
// [602, non_empty_list_commas_rev(record_defn_single) → • record_defn_single, COMMA / RBRACE]
// [603, non_empty_list_commas_rev(record_defn_single) → • non_empty_list_commas_rev(record_defn_single) COMMA record_defn_single, COMMA / RBRACE]
fn yy_state_267(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_record_defn_single => Shift(yy_state_268)
    NT_non_empty_list_commas_rev_record_defn_single_ => Shift(yy_state_269)
    T_LIDENT => Shift(yy_state_273)
    NT_non_empty_list_commas_with_trailing_info_record_defn_single_ => Shift(yy_state_553)
    T_DOTDOT => Shift(yy_state_554)
    NT_list_commas_with_trailing_info_record_defn_single_ => Shift(yy_state_563)
    T_RBRACE => Reduce(0, NT_list_commas_with_trailing_info_record_defn_single_, yy_action_278)
    _ => Error
  }
}

// [602, non_empty_list_commas_rev(record_defn_single) → record_defn_single •, COMMA / RBRACE]
fn yy_state_268(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_non_empty_list_commas_rev_record_defn_single_, yy_action_344)
}

// [533, option(COMMA) → •, RBRACE]
// [534, option(COMMA) → • COMMA, RBRACE]
// [545, non_empty_list_commas_with_trailing_info(record_defn_single) → non_empty_list_commas_rev(record_defn_single) • option(COMMA), RBRACE]
// [603, non_empty_list_commas_rev(record_defn_single) → non_empty_list_commas_rev(record_defn_single) • COMMA record_defn_single, COMMA / RBRACE]
fn yy_state_269(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_option_COMMA_ => Shift(yy_state_270)
    T_COMMA => Shift(yy_state_271)
    T_RBRACE => Reduce(0, NT_option_COMMA_, yy_action_181)
    _ => Error
  }
}

// [545, non_empty_list_commas_with_trailing_info(record_defn_single) → non_empty_list_commas_rev(record_defn_single) option(COMMA) •, RBRACE]
fn yy_state_270(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_non_empty_list_commas_with_trailing_info_record_defn_single_, yy_action_118)
}

// [433, record_defn_single → • LIDENT COLON expr, COMMA / RBRACE]
// [434, record_defn_single → • LIDENT, COMMA / RBRACE]
// [534, option(COMMA) → COMMA •, RBRACE]
// [603, non_empty_list_commas_rev(record_defn_single) → non_empty_list_commas_rev(record_defn_single) COMMA • record_defn_single, COMMA / RBRACE]
fn yy_state_271(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_record_defn_single => Shift(yy_state_272)
    T_LIDENT => Shift(yy_state_273)
    T_RBRACE => Reduce(1, NT_option_COMMA_, yy_action_56)
    _ => Error
  }
}

// [603, non_empty_list_commas_rev(record_defn_single) → non_empty_list_commas_rev(record_defn_single) COMMA record_defn_single •, COMMA / RBRACE]
fn yy_state_272(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_non_empty_list_commas_rev_record_defn_single_, yy_action_372)
}

// [433, record_defn_single → LIDENT • COLON expr, COMMA / RBRACE]
// [434, record_defn_single → LIDENT •, COMMA / RBRACE]
fn yy_state_273(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_274)
    T_COMMA | T_RBRACE => Reduce(1, NT_record_defn_single, yy_action_637)
    _ => Error
  }
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [229, loop_label_colon → • POST_LABEL COLON, WHILE / LOOP / FOR]
// [230, loop_label_colon → •, WHILE / LOOP / FOR]
// [231, while_expr → • loop_label_colon WHILE infix_expr block_expr optional_else, COMMA / RBRACE]
// [238, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE, COMMA / RBRACE]
// [239, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE ELSE LBRACE single_pattern_cases RBRACE, COMMA / RBRACE]
// [240, if_expr → • IF infix_expr block_expr ELSE block_expr, COMMA / RBRACE]
// [241, if_expr → • IF infix_expr block_expr ELSE if_expr, COMMA / RBRACE]
// [242, if_expr → • IF infix_expr block_expr, COMMA / RBRACE]
// [243, match_expr → • MATCH infix_expr LBRACE non_empty_list_semis(single_pattern_case) RBRACE, COMMA / RBRACE]
// [244, match_expr → • MATCH infix_expr LBRACE RBRACE, COMMA / RBRACE]
// [245, loop_expr → • loop_label_colon LOOP non_empty_list_commas_no_trailing(expr) LBRACE list_semis(multi_pattern_case) RBRACE, COMMA / RBRACE]
// [249, for_expr → • loop_label_colon FOR for_binders SEMI option(infix_expr) SEMI list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) block_expr optional_else, COMMA / RBRACE]
// [250, for_expr → • loop_label_colon FOR for_binders block_expr optional_else, COMMA / RBRACE]
// [251, foreach_expr → • loop_label_colon FOR non_empty_list_commas(foreach_binder) IN expr block_expr optional_else, COMMA / RBRACE]
// [254, expr → • loop_expr, COMMA / RBRACE]
// [255, expr → • for_expr, COMMA / RBRACE]
// [256, expr → • foreach_expr, COMMA / RBRACE]
// [257, expr → • while_expr, COMMA / RBRACE]
// [258, expr → • try_expr, COMMA / RBRACE]
// [259, expr → • if_expr, COMMA / RBRACE]
// [260, expr → • match_expr, COMMA / RBRACE]
// [261, expr → • pipe_expr, COMMA / RBRACE]
// [262, pipe_expr → • pipe_expr PIPE infix_expr, COMMA / RBRACE / PIPE]
// [263, pipe_expr → • infix_expr, COMMA / RBRACE / PIPE]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [433, record_defn_single → LIDENT COLON • expr, COMMA / RBRACE]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_274(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_expr => Shift(yy_state_275)
    NT_simple_expr => Shift(yy_state_276)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    T_LIDENT => Shift(yy_state_311)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_323)
    NT_pipe_expr => Shift(yy_state_346)
    NT_match_expr => Shift(yy_state_349)
    NT_if_expr => Shift(yy_state_350)
    NT_try_expr => Shift(yy_state_351)
    NT_while_expr => Shift(yy_state_352)
    NT_foreach_expr => Shift(yy_state_353)
    NT_for_expr => Shift(yy_state_354)
    NT_loop_expr => Shift(yy_state_355)
    T_MATCH => Shift(yy_state_356)
    T_IF => Shift(yy_state_373)
    T_TRY => Shift(yy_state_379)
    NT_loop_label_colon => Shift(yy_state_396)
    T_POST_LABEL => Shift(yy_state_404)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_481)
    _ => Error
  }
}

// [433, record_defn_single → LIDENT COLON expr •, COMMA / RBRACE]
fn yy_state_275(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_record_defn_single, yy_action_531)
}

// [284, prefix_expr → simple_expr •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → simple_expr • LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → simple_expr • EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → simple_expr • EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → simple_expr • QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → simple_expr • LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → simple_expr • LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → simple_expr • DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → simple_expr • DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → simple_expr • DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → simple_expr • DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → simple_expr • DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → simple_expr • DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → simple_expr • DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → simple_expr • DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → simple_expr • DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → simple_expr • DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_276(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_DOT_INT => Shift(yy_state_277)
    T_DOTDOT => Shift(yy_state_278)
    T_QUESTION => Shift(yy_state_369)
    T_EXCLAMATION => Shift(yy_state_453)
    T_LPAREN => Shift(yy_state_461)
    T_DOT_LIDENT => Shift(yy_state_549)
    T_LBRACKET => Shift(yy_state_550)
    T_INFIX1 | T_INFIX2 | T_INFIX3 | T_INFIX4 | T_EOF | T_CATCH | T_RPAREN | T_COMMA | T_MINUS | T_COLON | T_SEMI | T_PLUS | T_RBRACKET | T_BAR | T_LBRACE | T_RBRACE | T_AMPERAMPER | T_AMPER | T_CARET | T_BARBAR | T_AS | T_PIPE | T_ELSE | T_FAT_ARROW | T_RANGE_INCLUSIVE | T_RANGE_EXCLUSIVE | T_IS => Reduce(1, NT_prefix_expr, yy_action_486)
    _ => Error
  }
}

// [324, simple_expr → simple_expr DOT_INT •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_277(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_simple_expr, yy_action_99)
}

// [319, simple_expr → simple_expr DOTDOT • LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → simple_expr DOTDOT • LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → simple_expr DOTDOT • LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → simple_expr DOTDOT • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_278(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_279)
    _ => Error
  }
}

// [319, simple_expr → simple_expr DOTDOT LIDENT • LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → simple_expr DOTDOT LIDENT • EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → simple_expr DOTDOT LIDENT • EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → simple_expr DOTDOT LIDENT • QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_279(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_QUESTION => Shift(yy_state_280)
    T_EXCLAMATION => Shift(yy_state_538)
    T_LPAREN => Shift(yy_state_546)
    _ => Error
  }
}

// [322, simple_expr → simple_expr DOTDOT LIDENT QUESTION • LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_280(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_281)
    _ => Error
  }
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [229, loop_label_colon → • POST_LABEL COLON, WHILE / LOOP / FOR]
// [230, loop_label_colon → •, WHILE / LOOP / FOR]
// [231, while_expr → • loop_label_colon WHILE infix_expr block_expr optional_else, RPAREN / COMMA]
// [238, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE, RPAREN / COMMA]
// [239, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE ELSE LBRACE single_pattern_cases RBRACE, RPAREN / COMMA]
// [240, if_expr → • IF infix_expr block_expr ELSE block_expr, RPAREN / COMMA]
// [241, if_expr → • IF infix_expr block_expr ELSE if_expr, RPAREN / COMMA]
// [242, if_expr → • IF infix_expr block_expr, RPAREN / COMMA]
// [243, match_expr → • MATCH infix_expr LBRACE non_empty_list_semis(single_pattern_case) RBRACE, RPAREN / COMMA]
// [244, match_expr → • MATCH infix_expr LBRACE RBRACE, RPAREN / COMMA]
// [245, loop_expr → • loop_label_colon LOOP non_empty_list_commas_no_trailing(expr) LBRACE list_semis(multi_pattern_case) RBRACE, RPAREN / COMMA]
// [249, for_expr → • loop_label_colon FOR for_binders SEMI option(infix_expr) SEMI list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) block_expr optional_else, RPAREN / COMMA]
// [250, for_expr → • loop_label_colon FOR for_binders block_expr optional_else, RPAREN / COMMA]
// [251, foreach_expr → • loop_label_colon FOR non_empty_list_commas(foreach_binder) IN expr block_expr optional_else, RPAREN / COMMA]
// [254, expr → • loop_expr, RPAREN / COMMA]
// [255, expr → • for_expr, RPAREN / COMMA]
// [256, expr → • foreach_expr, RPAREN / COMMA]
// [257, expr → • while_expr, RPAREN / COMMA]
// [258, expr → • try_expr, RPAREN / COMMA]
// [259, expr → • if_expr, RPAREN / COMMA]
// [260, expr → • match_expr, RPAREN / COMMA]
// [261, expr → • pipe_expr, RPAREN / COMMA]
// [262, pipe_expr → • pipe_expr PIPE infix_expr, RPAREN / COMMA / PIPE]
// [263, pipe_expr → • infix_expr, RPAREN / COMMA / PIPE]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → simple_expr DOTDOT LIDENT QUESTION LPAREN • list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [355, argument → • LIDENT optional_question EQUAL expr, RPAREN / COMMA]
// [356, argument → • expr, RPAREN / COMMA]
// [357, argument → • POST_LABEL, RPAREN / COMMA]
// [358, argument → • LIDENT QUESTION, RPAREN / COMMA]
// [493, list_commas(argument) → •, RPAREN]
// [494, list_commas(argument) → • non_empty_list_commas(argument), RPAREN]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [576, non_empty_list_commas(argument) → • non_empty_list_commas_rev(argument) option(COMMA), RPAREN]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [614, non_empty_list_commas_rev(argument) → • argument, RPAREN / COMMA]
// [615, non_empty_list_commas_rev(argument) → • non_empty_list_commas_rev(argument) COMMA argument, RPAREN / COMMA]
fn yy_state_281(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    NT_argument => Shift(yy_state_282)
    NT_non_empty_list_commas_rev_argument_ => Shift(yy_state_283)
    NT_expr => Shift(yy_state_287)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    NT_non_empty_list_commas_argument_ => Shift(yy_state_314)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_323)
    NT_pipe_expr => Shift(yy_state_346)
    NT_match_expr => Shift(yy_state_349)
    NT_if_expr => Shift(yy_state_350)
    NT_try_expr => Shift(yy_state_351)
    NT_while_expr => Shift(yy_state_352)
    NT_foreach_expr => Shift(yy_state_353)
    NT_for_expr => Shift(yy_state_354)
    NT_loop_expr => Shift(yy_state_355)
    T_MATCH => Shift(yy_state_356)
    T_IF => Shift(yy_state_373)
    T_TRY => Shift(yy_state_379)
    NT_loop_label_colon => Shift(yy_state_396)
    T_POST_LABEL => Shift(yy_state_447)
    T_LIDENT => Shift(yy_state_448)
    NT_list_commas_argument_ => Shift(yy_state_536)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_481)
    T_RPAREN => Reduce(0, NT_list_commas_argument_, yy_action_394)
    _ => Error
  }
}

// [614, non_empty_list_commas_rev(argument) → argument •, RPAREN / COMMA]
fn yy_state_282(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_non_empty_list_commas_rev_argument_, yy_action_564)
}

// [533, option(COMMA) → •, RPAREN]
// [534, option(COMMA) → • COMMA, RPAREN]
// [576, non_empty_list_commas(argument) → non_empty_list_commas_rev(argument) • option(COMMA), RPAREN]
// [615, non_empty_list_commas_rev(argument) → non_empty_list_commas_rev(argument) • COMMA argument, RPAREN / COMMA]
fn yy_state_283(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_option_COMMA_ => Shift(yy_state_284)
    T_COMMA => Shift(yy_state_285)
    T_RPAREN => Reduce(0, NT_option_COMMA_, yy_action_181)
    _ => Error
  }
}

// [576, non_empty_list_commas(argument) → non_empty_list_commas_rev(argument) option(COMMA) •, RPAREN]
fn yy_state_284(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_non_empty_list_commas_argument_, yy_action_229)
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [229, loop_label_colon → • POST_LABEL COLON, WHILE / LOOP / FOR]
// [230, loop_label_colon → •, WHILE / LOOP / FOR]
// [231, while_expr → • loop_label_colon WHILE infix_expr block_expr optional_else, RPAREN / COMMA]
// [238, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE, RPAREN / COMMA]
// [239, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE ELSE LBRACE single_pattern_cases RBRACE, RPAREN / COMMA]
// [240, if_expr → • IF infix_expr block_expr ELSE block_expr, RPAREN / COMMA]
// [241, if_expr → • IF infix_expr block_expr ELSE if_expr, RPAREN / COMMA]
// [242, if_expr → • IF infix_expr block_expr, RPAREN / COMMA]
// [243, match_expr → • MATCH infix_expr LBRACE non_empty_list_semis(single_pattern_case) RBRACE, RPAREN / COMMA]
// [244, match_expr → • MATCH infix_expr LBRACE RBRACE, RPAREN / COMMA]
// [245, loop_expr → • loop_label_colon LOOP non_empty_list_commas_no_trailing(expr) LBRACE list_semis(multi_pattern_case) RBRACE, RPAREN / COMMA]
// [249, for_expr → • loop_label_colon FOR for_binders SEMI option(infix_expr) SEMI list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) block_expr optional_else, RPAREN / COMMA]
// [250, for_expr → • loop_label_colon FOR for_binders block_expr optional_else, RPAREN / COMMA]
// [251, foreach_expr → • loop_label_colon FOR non_empty_list_commas(foreach_binder) IN expr block_expr optional_else, RPAREN / COMMA]
// [254, expr → • loop_expr, RPAREN / COMMA]
// [255, expr → • for_expr, RPAREN / COMMA]
// [256, expr → • foreach_expr, RPAREN / COMMA]
// [257, expr → • while_expr, RPAREN / COMMA]
// [258, expr → • try_expr, RPAREN / COMMA]
// [259, expr → • if_expr, RPAREN / COMMA]
// [260, expr → • match_expr, RPAREN / COMMA]
// [261, expr → • pipe_expr, RPAREN / COMMA]
// [262, pipe_expr → • pipe_expr PIPE infix_expr, RPAREN / COMMA / PIPE]
// [263, pipe_expr → • infix_expr, RPAREN / COMMA / PIPE]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [355, argument → • LIDENT optional_question EQUAL expr, RPAREN / COMMA]
// [356, argument → • expr, RPAREN / COMMA]
// [357, argument → • POST_LABEL, RPAREN / COMMA]
// [358, argument → • LIDENT QUESTION, RPAREN / COMMA]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [534, option(COMMA) → COMMA •, RPAREN]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [615, non_empty_list_commas_rev(argument) → non_empty_list_commas_rev(argument) COMMA • argument, RPAREN / COMMA]
fn yy_state_285(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    NT_argument => Shift(yy_state_286)
    NT_expr => Shift(yy_state_287)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_323)
    NT_pipe_expr => Shift(yy_state_346)
    NT_match_expr => Shift(yy_state_349)
    NT_if_expr => Shift(yy_state_350)
    NT_try_expr => Shift(yy_state_351)
    NT_while_expr => Shift(yy_state_352)
    NT_foreach_expr => Shift(yy_state_353)
    NT_for_expr => Shift(yy_state_354)
    NT_loop_expr => Shift(yy_state_355)
    T_MATCH => Shift(yy_state_356)
    T_IF => Shift(yy_state_373)
    T_TRY => Shift(yy_state_379)
    NT_loop_label_colon => Shift(yy_state_396)
    T_POST_LABEL => Shift(yy_state_447)
    T_LIDENT => Shift(yy_state_448)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_481)
    T_RPAREN => Reduce(1, NT_option_COMMA_, yy_action_56)
    _ => Error
  }
}

// [615, non_empty_list_commas_rev(argument) → non_empty_list_commas_rev(argument) COMMA argument •, RPAREN / COMMA]
fn yy_state_286(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_non_empty_list_commas_rev_argument_, yy_action_390)
}

// [356, argument → expr •, RPAREN / COMMA]
fn yy_state_287(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_argument, yy_action_561)
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → MINUS • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_288(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    T_MINUS => Shift(yy_state_288)
    NT_prefix_expr => Shift(yy_state_289)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    T_PACKAGE_NAME => Shift(yy_state_309)
    T_LIDENT => Shift(yy_state_311)
    _ => Error
  }
}

// [283, prefix_expr → MINUS prefix_expr •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_289(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_prefix_expr, yy_action_525)
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [282, prefix_expr → PLUS • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_290(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    NT_prefix_expr => Shift(yy_state_291)
    T_FN => Shift(yy_state_292)
    T_PACKAGE_NAME => Shift(yy_state_309)
    T_LIDENT => Shift(yy_state_311)
    _ => Error
  }
}

// [282, prefix_expr → PLUS prefix_expr •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_291(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_prefix_expr, yy_action_489)
}

// [201, optional_bang → • EXCLAMATION, LPAREN / LBRACE]
// [202, optional_bang → •, LPAREN / LBRACE]
// [204, fn_header_no_binder → FN • optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [301, simple_expr → FN • optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_292(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_optional_bang => Shift(yy_state_293)
    T_EXCLAMATION => Shift(yy_state_535)
    T_LPAREN | T_LBRACE => Reduce(0, NT_optional_bang, yy_action_662)
    _ => Error
  }
}

// [10, parameters → • LPAREN list_commas(parameter) RPAREN, LBRACE / THIN_ARROW]
// [204, fn_header_no_binder → FN optional_bang • LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [301, simple_expr → FN optional_bang • parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_293(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_parameters => Shift(yy_state_294)
    T_LBRACE => Shift(yy_state_297)
    T_LPAREN => Shift(yy_state_298)
    _ => Error
  }
}

// [301, simple_expr → FN optional_bang parameters • option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [460, option(preceded(THIN_ARROW,return_type)) → •, LBRACE]
// [461, option(preceded(THIN_ARROW,return_type)) → • THIN_ARROW return_type, LBRACE]
fn yy_state_294(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_THIN_ARROW => Shift(yy_state_246)
    NT_option_preceded_THIN_ARROW_return_type__ => Shift(yy_state_295)
    T_LBRACE => Reduce(0, NT_option_preceded_THIN_ARROW_return_type__, yy_action_161)
    _ => Error
  }
}

// [38, block_expr → • LBRACE list_semis_rev(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) • block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_295(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACE => Shift(yy_state_250)
    NT_block_expr => Shift(yy_state_296)
    _ => Error
  }
}

// [301, simple_expr → FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_296(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_simple_expr, yy_action_308)
}

// [204, fn_header_no_binder → FN optional_bang LBRACE •, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
fn yy_state_297(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_fn_header_no_binder, yy_action_702)
}

// [0, parameter → • UNDERSCORE, RPAREN / COMMA]
// [1, parameter → • UNDERSCORE COLON type_, RPAREN / COMMA]
// [2, parameter → • LIDENT, RPAREN / COMMA]
// [3, parameter → • LIDENT COLON type_, RPAREN / COMMA]
// [4, parameter → • POST_LABEL, RPAREN / COMMA]
// [5, parameter → • POST_LABEL COLON type_, RPAREN / COMMA]
// [6, parameter → • POST_LABEL EQUAL expr, RPAREN / COMMA]
// [7, parameter → • POST_LABEL COLON type_ EQUAL expr, RPAREN / COMMA]
// [8, parameter → • LIDENT QUESTION, RPAREN / COMMA]
// [9, parameter → • LIDENT QUESTION COLON type_, RPAREN / COMMA]
// [10, parameters → LPAREN • list_commas(parameter) RPAREN, EQUAL / LBRACE / THIN_ARROW]
// [447, list_commas(parameter) → •, RPAREN]
// [448, list_commas(parameter) → • non_empty_list_commas(parameter), RPAREN]
// [552, non_empty_list_commas(parameter) → • non_empty_list_commas_rev(parameter) option(COMMA), RPAREN]
// [608, non_empty_list_commas_rev(parameter) → • parameter, RPAREN / COMMA]
// [609, non_empty_list_commas_rev(parameter) → • non_empty_list_commas_rev(parameter) COMMA parameter, RPAREN / COMMA]
fn yy_state_298(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_parameter => Shift(yy_state_299)
    NT_non_empty_list_commas_rev_parameter_ => Shift(yy_state_300)
    T_POST_LABEL => Shift(yy_state_304)
    T_LIDENT => Shift(yy_state_523)
    T_UNDERSCORE => Shift(yy_state_529)
    NT_non_empty_list_commas_parameter_ => Shift(yy_state_532)
    NT_list_commas_parameter_ => Shift(yy_state_533)
    T_RPAREN => Reduce(0, NT_list_commas_parameter_, yy_action_658)
    _ => Error
  }
}

// [608, non_empty_list_commas_rev(parameter) → parameter •, RPAREN / COMMA]
fn yy_state_299(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_non_empty_list_commas_rev_parameter_, yy_action_615)
}

// [533, option(COMMA) → •, RPAREN]
// [534, option(COMMA) → • COMMA, RPAREN]
// [552, non_empty_list_commas(parameter) → non_empty_list_commas_rev(parameter) • option(COMMA), RPAREN]
// [609, non_empty_list_commas_rev(parameter) → non_empty_list_commas_rev(parameter) • COMMA parameter, RPAREN / COMMA]
fn yy_state_300(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_option_COMMA_ => Shift(yy_state_301)
    T_COMMA => Shift(yy_state_302)
    T_RPAREN => Reduce(0, NT_option_COMMA_, yy_action_181)
    _ => Error
  }
}

// [552, non_empty_list_commas(parameter) → non_empty_list_commas_rev(parameter) option(COMMA) •, RPAREN]
fn yy_state_301(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_non_empty_list_commas_parameter_, yy_action_410)
}

// [0, parameter → • UNDERSCORE, RPAREN / COMMA]
// [1, parameter → • UNDERSCORE COLON type_, RPAREN / COMMA]
// [2, parameter → • LIDENT, RPAREN / COMMA]
// [3, parameter → • LIDENT COLON type_, RPAREN / COMMA]
// [4, parameter → • POST_LABEL, RPAREN / COMMA]
// [5, parameter → • POST_LABEL COLON type_, RPAREN / COMMA]
// [6, parameter → • POST_LABEL EQUAL expr, RPAREN / COMMA]
// [7, parameter → • POST_LABEL COLON type_ EQUAL expr, RPAREN / COMMA]
// [8, parameter → • LIDENT QUESTION, RPAREN / COMMA]
// [9, parameter → • LIDENT QUESTION COLON type_, RPAREN / COMMA]
// [534, option(COMMA) → COMMA •, RPAREN]
// [609, non_empty_list_commas_rev(parameter) → non_empty_list_commas_rev(parameter) COMMA • parameter, RPAREN / COMMA]
fn yy_state_302(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_parameter => Shift(yy_state_303)
    T_POST_LABEL => Shift(yy_state_304)
    T_LIDENT => Shift(yy_state_523)
    T_UNDERSCORE => Shift(yy_state_529)
    T_RPAREN => Reduce(1, NT_option_COMMA_, yy_action_56)
    _ => Error
  }
}

// [609, non_empty_list_commas_rev(parameter) → non_empty_list_commas_rev(parameter) COMMA parameter •, RPAREN / COMMA]
fn yy_state_303(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_non_empty_list_commas_rev_parameter_, yy_action_97)
}

// [4, parameter → POST_LABEL •, RPAREN / COMMA]
// [5, parameter → POST_LABEL • COLON type_, RPAREN / COMMA]
// [6, parameter → POST_LABEL • EQUAL expr, RPAREN / COMMA]
// [7, parameter → POST_LABEL • COLON type_ EQUAL expr, RPAREN / COMMA]
fn yy_state_304(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EQUAL => Shift(yy_state_305)
    T_COLON => Shift(yy_state_519)
    T_RPAREN | T_COMMA => Reduce(1, NT_parameter, yy_action_471)
    _ => Error
  }
}

// [6, parameter → POST_LABEL EQUAL • expr, RPAREN / COMMA]
// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [229, loop_label_colon → • POST_LABEL COLON, WHILE / LOOP / FOR]
// [230, loop_label_colon → •, WHILE / LOOP / FOR]
// [231, while_expr → • loop_label_colon WHILE infix_expr block_expr optional_else, RPAREN / COMMA]
// [238, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE, RPAREN / COMMA]
// [239, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE ELSE LBRACE single_pattern_cases RBRACE, RPAREN / COMMA]
// [240, if_expr → • IF infix_expr block_expr ELSE block_expr, RPAREN / COMMA]
// [241, if_expr → • IF infix_expr block_expr ELSE if_expr, RPAREN / COMMA]
// [242, if_expr → • IF infix_expr block_expr, RPAREN / COMMA]
// [243, match_expr → • MATCH infix_expr LBRACE non_empty_list_semis(single_pattern_case) RBRACE, RPAREN / COMMA]
// [244, match_expr → • MATCH infix_expr LBRACE RBRACE, RPAREN / COMMA]
// [245, loop_expr → • loop_label_colon LOOP non_empty_list_commas_no_trailing(expr) LBRACE list_semis(multi_pattern_case) RBRACE, RPAREN / COMMA]
// [249, for_expr → • loop_label_colon FOR for_binders SEMI option(infix_expr) SEMI list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) block_expr optional_else, RPAREN / COMMA]
// [250, for_expr → • loop_label_colon FOR for_binders block_expr optional_else, RPAREN / COMMA]
// [251, foreach_expr → • loop_label_colon FOR non_empty_list_commas(foreach_binder) IN expr block_expr optional_else, RPAREN / COMMA]
// [254, expr → • loop_expr, RPAREN / COMMA]
// [255, expr → • for_expr, RPAREN / COMMA]
// [256, expr → • foreach_expr, RPAREN / COMMA]
// [257, expr → • while_expr, RPAREN / COMMA]
// [258, expr → • try_expr, RPAREN / COMMA]
// [259, expr → • if_expr, RPAREN / COMMA]
// [260, expr → • match_expr, RPAREN / COMMA]
// [261, expr → • pipe_expr, RPAREN / COMMA]
// [262, pipe_expr → • pipe_expr PIPE infix_expr, RPAREN / COMMA / PIPE]
// [263, pipe_expr → • infix_expr, RPAREN / COMMA / PIPE]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_305(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    T_LIDENT => Shift(yy_state_311)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_323)
    NT_pipe_expr => Shift(yy_state_346)
    NT_match_expr => Shift(yy_state_349)
    NT_if_expr => Shift(yy_state_350)
    NT_try_expr => Shift(yy_state_351)
    NT_while_expr => Shift(yy_state_352)
    NT_foreach_expr => Shift(yy_state_353)
    NT_for_expr => Shift(yy_state_354)
    NT_loop_expr => Shift(yy_state_355)
    T_MATCH => Shift(yy_state_356)
    T_IF => Shift(yy_state_373)
    T_TRY => Shift(yy_state_379)
    NT_loop_label_colon => Shift(yy_state_396)
    T_POST_LABEL => Shift(yy_state_404)
    NT_expr => Shift(yy_state_518)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_481)
    _ => Error
  }
}

// [279, range_expr → prefix_expr • RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / IS]
// [280, range_expr → prefix_expr • RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / IS]
// [281, range_expr → prefix_expr •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / IS]
fn yy_state_306(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RANGE_INCLUSIVE => Shift(yy_state_307)
    T_RANGE_EXCLUSIVE => Shift(yy_state_516)
    T_INFIX1 | T_INFIX2 | T_INFIX3 | T_INFIX4 | T_EOF | T_CATCH | T_RPAREN | T_COMMA | T_MINUS | T_COLON | T_SEMI | T_PLUS | T_RBRACKET | T_BAR | T_LBRACE | T_RBRACE | T_AMPERAMPER | T_AMPER | T_CARET | T_BARBAR | T_AS | T_PIPE | T_ELSE | T_FAT_ARROW | T_IS => Reduce(1, NT_range_expr, yy_action_123)
    _ => Error
  }
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [280, range_expr → prefix_expr RANGE_INCLUSIVE • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
fn yy_state_307(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_308)
    T_PACKAGE_NAME => Shift(yy_state_309)
    T_LIDENT => Shift(yy_state_311)
    _ => Error
  }
}

// [280, range_expr → prefix_expr RANGE_INCLUSIVE prefix_expr •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / IS]
fn yy_state_308(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_range_expr, yy_action_74)
}

// [197, qual_ident_simple_expr → PACKAGE_NAME • DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [199, qual_ident_ty → PACKAGE_NAME • DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → PACKAGE_NAME • DOT_UIDENT, COLONCOLON]
// [290, constr → PACKAGE_NAME • DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_309(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_DOT_UIDENT => Shift(yy_state_101)
    T_DOT_LIDENT => Shift(yy_state_310)
    _ => Error
  }
}

// [197, qual_ident_simple_expr → PACKAGE_NAME DOT_LIDENT •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [199, qual_ident_ty → PACKAGE_NAME DOT_LIDENT •, COLONCOLON]
fn yy_state_310(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_INFIX1 | T_INFIX2 | T_INFIX3 | T_INFIX4 | T_EOF | T_CATCH | T_LPAREN | T_RPAREN | T_COMMA | T_MINUS | T_QUESTION | T_EXCLAMATION | T_DOT_LIDENT | T_DOT_INT | T_COLON | T_SEMI | T_LBRACKET | T_PLUS | T_RBRACKET | T_BAR | T_LBRACE | T_RBRACE | T_AMPERAMPER | T_AMPER | T_CARET | T_BARBAR | T_AS | T_PIPE | T_ELSE | T_FAT_ARROW | T_DOTDOT | T_RANGE_INCLUSIVE | T_RANGE_EXCLUSIVE | T_IS => Reduce(2, NT_qual_ident_simple_expr, yy_action_569)
    T_COLONCOLON => Reduce(2, NT_qual_ident_ty, yy_action_184)
    _ => Error
  }
}

// [192, luident → LIDENT •, COLONCOLON]
// [196, qual_ident_simple_expr → LIDENT •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → LIDENT • QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_311(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_QUESTION => Shift(yy_state_312)
    T_COLONCOLON => Reduce(1, NT_luident, yy_action_155)
    T_INFIX1 | T_INFIX2 | T_INFIX3 | T_INFIX4 | T_EOF | T_CATCH | T_LPAREN | T_RPAREN | T_COMMA | T_MINUS | T_EXCLAMATION | T_DOT_LIDENT | T_DOT_INT | T_COLON | T_SEMI | T_LBRACKET | T_PLUS | T_RBRACKET | T_BAR | T_LBRACE | T_RBRACE | T_AMPERAMPER | T_AMPER | T_CARET | T_BARBAR | T_AS | T_PIPE | T_ELSE | T_FAT_ARROW | T_DOTDOT | T_RANGE_INCLUSIVE | T_RANGE_EXCLUSIVE | T_IS => Reduce(1, NT_qual_ident_simple_expr, yy_action_653)
    _ => Error
  }
}

// [308, simple_expr → LIDENT QUESTION • LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_312(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_313)
    _ => Error
  }
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [229, loop_label_colon → • POST_LABEL COLON, WHILE / LOOP / FOR]
// [230, loop_label_colon → •, WHILE / LOOP / FOR]
// [231, while_expr → • loop_label_colon WHILE infix_expr block_expr optional_else, RPAREN / COMMA]
// [238, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE, RPAREN / COMMA]
// [239, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE ELSE LBRACE single_pattern_cases RBRACE, RPAREN / COMMA]
// [240, if_expr → • IF infix_expr block_expr ELSE block_expr, RPAREN / COMMA]
// [241, if_expr → • IF infix_expr block_expr ELSE if_expr, RPAREN / COMMA]
// [242, if_expr → • IF infix_expr block_expr, RPAREN / COMMA]
// [243, match_expr → • MATCH infix_expr LBRACE non_empty_list_semis(single_pattern_case) RBRACE, RPAREN / COMMA]
// [244, match_expr → • MATCH infix_expr LBRACE RBRACE, RPAREN / COMMA]
// [245, loop_expr → • loop_label_colon LOOP non_empty_list_commas_no_trailing(expr) LBRACE list_semis(multi_pattern_case) RBRACE, RPAREN / COMMA]
// [249, for_expr → • loop_label_colon FOR for_binders SEMI option(infix_expr) SEMI list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) block_expr optional_else, RPAREN / COMMA]
// [250, for_expr → • loop_label_colon FOR for_binders block_expr optional_else, RPAREN / COMMA]
// [251, foreach_expr → • loop_label_colon FOR non_empty_list_commas(foreach_binder) IN expr block_expr optional_else, RPAREN / COMMA]
// [254, expr → • loop_expr, RPAREN / COMMA]
// [255, expr → • for_expr, RPAREN / COMMA]
// [256, expr → • foreach_expr, RPAREN / COMMA]
// [257, expr → • while_expr, RPAREN / COMMA]
// [258, expr → • try_expr, RPAREN / COMMA]
// [259, expr → • if_expr, RPAREN / COMMA]
// [260, expr → • match_expr, RPAREN / COMMA]
// [261, expr → • pipe_expr, RPAREN / COMMA]
// [262, pipe_expr → • pipe_expr PIPE infix_expr, RPAREN / COMMA / PIPE]
// [263, pipe_expr → • infix_expr, RPAREN / COMMA / PIPE]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → LIDENT QUESTION LPAREN • list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [355, argument → • LIDENT optional_question EQUAL expr, RPAREN / COMMA]
// [356, argument → • expr, RPAREN / COMMA]
// [357, argument → • POST_LABEL, RPAREN / COMMA]
// [358, argument → • LIDENT QUESTION, RPAREN / COMMA]
// [493, list_commas(argument) → •, RPAREN]
// [494, list_commas(argument) → • non_empty_list_commas(argument), RPAREN]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [576, non_empty_list_commas(argument) → • non_empty_list_commas_rev(argument) option(COMMA), RPAREN]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [614, non_empty_list_commas_rev(argument) → • argument, RPAREN / COMMA]
// [615, non_empty_list_commas_rev(argument) → • non_empty_list_commas_rev(argument) COMMA argument, RPAREN / COMMA]
fn yy_state_313(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    NT_argument => Shift(yy_state_282)
    NT_non_empty_list_commas_rev_argument_ => Shift(yy_state_283)
    NT_expr => Shift(yy_state_287)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    NT_non_empty_list_commas_argument_ => Shift(yy_state_314)
    NT_list_commas_argument_ => Shift(yy_state_315)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_323)
    NT_pipe_expr => Shift(yy_state_346)
    NT_match_expr => Shift(yy_state_349)
    NT_if_expr => Shift(yy_state_350)
    NT_try_expr => Shift(yy_state_351)
    NT_while_expr => Shift(yy_state_352)
    NT_foreach_expr => Shift(yy_state_353)
    NT_for_expr => Shift(yy_state_354)
    NT_loop_expr => Shift(yy_state_355)
    T_MATCH => Shift(yy_state_356)
    T_IF => Shift(yy_state_373)
    T_TRY => Shift(yy_state_379)
    NT_loop_label_colon => Shift(yy_state_396)
    T_POST_LABEL => Shift(yy_state_447)
    T_LIDENT => Shift(yy_state_448)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_481)
    T_RPAREN => Reduce(0, NT_list_commas_argument_, yy_action_394)
    _ => Error
  }
}

// [494, list_commas(argument) → non_empty_list_commas(argument) •, RPAREN]
fn yy_state_314(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_list_commas_argument_, yy_action_219)
}

// [308, simple_expr → LIDENT QUESTION LPAREN list_commas(argument) • RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_315(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RPAREN => Shift(yy_state_316)
    _ => Error
  }
}

// [308, simple_expr → LIDENT QUESTION LPAREN list_commas(argument) RPAREN •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_316(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_simple_expr, yy_action_270)
}

// [276, postfix_expr → range_expr • AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [277, postfix_expr → range_expr • IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [278, postfix_expr → range_expr •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
fn yy_state_317(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_IS => Shift(yy_state_318)
    T_AS => Shift(yy_state_320)
    T_INFIX1 | T_INFIX2 | T_INFIX3 | T_INFIX4 | T_EOF | T_CATCH | T_RPAREN | T_COMMA | T_MINUS | T_COLON | T_SEMI | T_PLUS | T_RBRACKET | T_BAR | T_LBRACE | T_RBRACE | T_AMPERAMPER | T_AMPER | T_CARET | T_BARBAR | T_PIPE | T_ELSE | T_FAT_ARROW => Reduce(1, NT_postfix_expr, yy_action_179)
    _ => Error
  }
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [277, postfix_expr → range_expr IS • range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [366, range_pattern → • simple_pattern RANGE_EXCLUSIVE simple_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [367, range_pattern → • simple_pattern RANGE_INCLUSIVE simple_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [368, range_pattern → • simple_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [369, simple_pattern → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [370, simple_pattern → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [371, simple_pattern → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [372, simple_pattern → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [373, simple_pattern → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [374, simple_pattern → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [375, simple_pattern → • MINUS INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [376, simple_pattern → • MINUS FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [377, simple_pattern → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [378, simple_pattern → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [379, simple_pattern → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [380, simple_pattern → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [381, simple_pattern → • constr option(delimited(LPAREN,constr_pat_arguments,RPAREN)), INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [382, simple_pattern → • LPAREN pattern RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [383, simple_pattern → • LPAREN pattern COMMA non_empty_list_commas(pattern) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [384, simple_pattern → • LPAREN pattern COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [385, simple_pattern → • LBRACKET array_sub_patterns RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [386, simple_pattern → • LBRACE RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [387, simple_pattern → • LBRACE DOTDOT option(COMMA) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [388, simple_pattern → • LBRACE non_empty_fields_pat RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [389, simple_pattern → • LBRACE non_empty_map_elems_pat RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
fn yy_state_318(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACE => Shift(yy_state_52)
    T_LBRACKET => Shift(yy_state_56)
    T_LPAREN => Shift(yy_state_70)
    NT_constr => Shift(yy_state_71)
    T_UNDERSCORE => Shift(yy_state_82)
    T_BYTES => Shift(yy_state_83)
    T_STRING => Shift(yy_state_84)
    T_MINUS => Shift(yy_state_85)
    T_FLOAT => Shift(yy_state_88)
    T_BYTE => Shift(yy_state_89)
    T_INT => Shift(yy_state_90)
    T_CHAR => Shift(yy_state_91)
    T_FALSE => Shift(yy_state_92)
    T_TRUE => Shift(yy_state_93)
    NT_simple_pattern => Shift(yy_state_94)
    NT_type_name => Shift(yy_state_97)
    T_PACKAGE_NAME => Shift(yy_state_100)
    T_UIDENT => Shift(yy_state_102)
    T_LIDENT => Shift(yy_state_103)
    NT_range_pattern => Shift(yy_state_319)
    _ => Error
  }
}

// [277, postfix_expr → range_expr IS range_pattern •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
fn yy_state_319(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_postfix_expr, yy_action_227)
}

// [192, luident → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [193, luident → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [198, qual_ident_ty → • luident, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [276, postfix_expr → range_expr AS • type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [335, type_name → • qual_ident_ty, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [336, type_name → • AMPER qual_ident_ty, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
fn yy_state_320(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    NT_qual_ident_ty => Shift(yy_state_26)
    NT_type_name => Shift(yy_state_321)
    _ => Error
  }
}

// [276, postfix_expr → range_expr AS type_name •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
fn yy_state_321(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_postfix_expr, yy_action_358)
}

// [275, infix_expr → postfix_expr •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
fn yy_state_322(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_infix_expr, yy_action_622)
}

// [263, pipe_expr → infix_expr •, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / PIPE / FAT_ARROW]
// [264, infix_expr → infix_expr • INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / FAT_ARROW]
// [265, infix_expr → infix_expr • INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / FAT_ARROW]
// [266, infix_expr → infix_expr • INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / FAT_ARROW]
// [267, infix_expr → infix_expr • INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / FAT_ARROW]
// [268, infix_expr → infix_expr • PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / FAT_ARROW]
// [269, infix_expr → infix_expr • MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / FAT_ARROW]
// [270, infix_expr → infix_expr • AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / FAT_ARROW]
// [271, infix_expr → infix_expr • CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / FAT_ARROW]
// [272, infix_expr → infix_expr • BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / FAT_ARROW]
// [273, infix_expr → infix_expr • AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / FAT_ARROW]
// [274, infix_expr → infix_expr • BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / FAT_ARROW]
fn yy_state_323(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_BARBAR => Shift(yy_state_324)
    T_AMPERAMPER => Shift(yy_state_326)
    T_BAR => Shift(yy_state_328)
    T_CARET => Shift(yy_state_330)
    T_AMPER => Shift(yy_state_332)
    T_MINUS => Shift(yy_state_334)
    T_PLUS => Shift(yy_state_336)
    T_INFIX1 => Shift(yy_state_338)
    T_INFIX2 => Shift(yy_state_340)
    T_INFIX3 => Shift(yy_state_342)
    T_INFIX4 => Shift(yy_state_344)
    T_EOF | T_CATCH | T_RPAREN | T_COMMA | T_COLON | T_SEMI | T_RBRACKET | T_LBRACE | T_RBRACE | T_PIPE | T_FAT_ARROW => Reduce(1, NT_pipe_expr, yy_action_649)
    _ => Error
  }
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [274, infix_expr → infix_expr BARBAR • infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_324(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    T_LIDENT => Shift(yy_state_311)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_325)
    _ => Error
  }
}

// [264, infix_expr → infix_expr • INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [265, infix_expr → infix_expr • INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [266, infix_expr → infix_expr • INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [267, infix_expr → infix_expr • INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [268, infix_expr → infix_expr • PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [269, infix_expr → infix_expr • MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [270, infix_expr → infix_expr • AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [271, infix_expr → infix_expr • CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [272, infix_expr → infix_expr • BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [273, infix_expr → infix_expr • AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [274, infix_expr → infix_expr • BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [274, infix_expr → infix_expr BARBAR infix_expr •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
fn yy_state_325(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_BARBAR => Shift(yy_state_324)
    T_AMPERAMPER => Shift(yy_state_326)
    T_BAR => Shift(yy_state_328)
    T_CARET => Shift(yy_state_330)
    T_AMPER => Shift(yy_state_332)
    T_MINUS => Shift(yy_state_334)
    T_PLUS => Shift(yy_state_336)
    T_INFIX1 => Shift(yy_state_338)
    T_INFIX2 => Shift(yy_state_340)
    T_INFIX3 => Shift(yy_state_342)
    T_INFIX4 => Shift(yy_state_344)
    T_EOF | T_CATCH | T_RPAREN | T_COMMA | T_COLON | T_SEMI | T_RBRACKET | T_LBRACE | T_RBRACE | T_PIPE | T_ELSE | T_FAT_ARROW => Reduce(3, NT_infix_expr, yy_action_441)
    _ => Error
  }
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [273, infix_expr → infix_expr AMPERAMPER • infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_326(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    T_LIDENT => Shift(yy_state_311)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_327)
    _ => Error
  }
}

// [264, infix_expr → infix_expr • INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [265, infix_expr → infix_expr • INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [266, infix_expr → infix_expr • INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [267, infix_expr → infix_expr • INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [268, infix_expr → infix_expr • PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [269, infix_expr → infix_expr • MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [270, infix_expr → infix_expr • AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [271, infix_expr → infix_expr • CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [272, infix_expr → infix_expr • BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [273, infix_expr → infix_expr • AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [273, infix_expr → infix_expr AMPERAMPER infix_expr •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [274, infix_expr → infix_expr • BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
fn yy_state_327(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPERAMPER => Shift(yy_state_326)
    T_BAR => Shift(yy_state_328)
    T_CARET => Shift(yy_state_330)
    T_AMPER => Shift(yy_state_332)
    T_MINUS => Shift(yy_state_334)
    T_PLUS => Shift(yy_state_336)
    T_INFIX1 => Shift(yy_state_338)
    T_INFIX2 => Shift(yy_state_340)
    T_INFIX3 => Shift(yy_state_342)
    T_INFIX4 => Shift(yy_state_344)
    T_EOF | T_CATCH | T_RPAREN | T_COMMA | T_COLON | T_SEMI | T_RBRACKET | T_LBRACE | T_RBRACE | T_BARBAR | T_PIPE | T_ELSE | T_FAT_ARROW => Reduce(3, NT_infix_expr, yy_action_58)
    _ => Error
  }
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [272, infix_expr → infix_expr BAR • infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_328(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    T_LIDENT => Shift(yy_state_311)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_329)
    _ => Error
  }
}

// [264, infix_expr → infix_expr • INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [265, infix_expr → infix_expr • INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [266, infix_expr → infix_expr • INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [267, infix_expr → infix_expr • INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [268, infix_expr → infix_expr • PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [269, infix_expr → infix_expr • MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [270, infix_expr → infix_expr • AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [271, infix_expr → infix_expr • CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [272, infix_expr → infix_expr • BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [272, infix_expr → infix_expr BAR infix_expr •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [273, infix_expr → infix_expr • AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [274, infix_expr → infix_expr • BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
fn yy_state_329(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_CARET => Shift(yy_state_330)
    T_AMPER => Shift(yy_state_332)
    T_MINUS => Shift(yy_state_334)
    T_PLUS => Shift(yy_state_336)
    T_INFIX1 => Shift(yy_state_338)
    T_INFIX2 => Shift(yy_state_340)
    T_INFIX3 => Shift(yy_state_342)
    T_INFIX4 => Shift(yy_state_344)
    T_EOF | T_CATCH | T_RPAREN | T_COMMA | T_COLON | T_SEMI | T_RBRACKET | T_BAR | T_LBRACE | T_RBRACE | T_AMPERAMPER | T_BARBAR | T_PIPE | T_ELSE | T_FAT_ARROW => Reduce(3, NT_infix_expr, yy_action_664)
    _ => Error
  }
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [271, infix_expr → infix_expr CARET • infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_330(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    T_LIDENT => Shift(yy_state_311)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_331)
    _ => Error
  }
}

// [264, infix_expr → infix_expr • INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [265, infix_expr → infix_expr • INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [266, infix_expr → infix_expr • INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [267, infix_expr → infix_expr • INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [268, infix_expr → infix_expr • PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [269, infix_expr → infix_expr • MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [270, infix_expr → infix_expr • AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [271, infix_expr → infix_expr • CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [271, infix_expr → infix_expr CARET infix_expr •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [272, infix_expr → infix_expr • BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [273, infix_expr → infix_expr • AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [274, infix_expr → infix_expr • BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
fn yy_state_331(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_332)
    T_MINUS => Shift(yy_state_334)
    T_PLUS => Shift(yy_state_336)
    T_INFIX1 => Shift(yy_state_338)
    T_INFIX2 => Shift(yy_state_340)
    T_INFIX3 => Shift(yy_state_342)
    T_INFIX4 => Shift(yy_state_344)
    T_EOF | T_CATCH | T_RPAREN | T_COMMA | T_COLON | T_SEMI | T_RBRACKET | T_BAR | T_LBRACE | T_RBRACE | T_AMPERAMPER | T_CARET | T_BARBAR | T_PIPE | T_ELSE | T_FAT_ARROW => Reduce(3, NT_infix_expr, yy_action_443)
    _ => Error
  }
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [270, infix_expr → infix_expr AMPER • infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_332(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    T_LIDENT => Shift(yy_state_311)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_333)
    _ => Error
  }
}

// [264, infix_expr → infix_expr • INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [265, infix_expr → infix_expr • INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [266, infix_expr → infix_expr • INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [267, infix_expr → infix_expr • INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [268, infix_expr → infix_expr • PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [269, infix_expr → infix_expr • MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [270, infix_expr → infix_expr • AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [270, infix_expr → infix_expr AMPER infix_expr •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [271, infix_expr → infix_expr • CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [272, infix_expr → infix_expr • BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [273, infix_expr → infix_expr • AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [274, infix_expr → infix_expr • BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
fn yy_state_333(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_MINUS => Shift(yy_state_334)
    T_PLUS => Shift(yy_state_336)
    T_INFIX1 => Shift(yy_state_338)
    T_INFIX2 => Shift(yy_state_340)
    T_INFIX3 => Shift(yy_state_342)
    T_INFIX4 => Shift(yy_state_344)
    T_EOF | T_CATCH | T_RPAREN | T_COMMA | T_COLON | T_SEMI | T_RBRACKET | T_BAR | T_LBRACE | T_RBRACE | T_AMPERAMPER | T_AMPER | T_CARET | T_BARBAR | T_PIPE | T_ELSE | T_FAT_ARROW => Reduce(3, NT_infix_expr, yy_action_474)
    _ => Error
  }
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [269, infix_expr → infix_expr MINUS • infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_334(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    T_LIDENT => Shift(yy_state_311)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_335)
    _ => Error
  }
}

// [264, infix_expr → infix_expr • INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [265, infix_expr → infix_expr • INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [266, infix_expr → infix_expr • INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [267, infix_expr → infix_expr • INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [268, infix_expr → infix_expr • PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [269, infix_expr → infix_expr • MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [269, infix_expr → infix_expr MINUS infix_expr •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [270, infix_expr → infix_expr • AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [271, infix_expr → infix_expr • CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [272, infix_expr → infix_expr • BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [273, infix_expr → infix_expr • AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [274, infix_expr → infix_expr • BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
fn yy_state_335(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_INFIX3 => Shift(yy_state_342)
    T_INFIX4 => Shift(yy_state_344)
    T_INFIX1 | T_INFIX2 | T_EOF | T_CATCH | T_RPAREN | T_COMMA | T_MINUS | T_COLON | T_SEMI | T_PLUS | T_RBRACKET | T_BAR | T_LBRACE | T_RBRACE | T_AMPERAMPER | T_AMPER | T_CARET | T_BARBAR | T_PIPE | T_ELSE | T_FAT_ARROW => Reduce(3, NT_infix_expr, yy_action_433)
    _ => Error
  }
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [268, infix_expr → infix_expr PLUS • infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_336(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    T_LIDENT => Shift(yy_state_311)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_337)
    _ => Error
  }
}

// [264, infix_expr → infix_expr • INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [265, infix_expr → infix_expr • INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [266, infix_expr → infix_expr • INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [267, infix_expr → infix_expr • INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [268, infix_expr → infix_expr • PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [268, infix_expr → infix_expr PLUS infix_expr •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [269, infix_expr → infix_expr • MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [270, infix_expr → infix_expr • AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [271, infix_expr → infix_expr • CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [272, infix_expr → infix_expr • BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [273, infix_expr → infix_expr • AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [274, infix_expr → infix_expr • BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
fn yy_state_337(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_INFIX3 => Shift(yy_state_342)
    T_INFIX4 => Shift(yy_state_344)
    T_INFIX1 | T_INFIX2 | T_EOF | T_CATCH | T_RPAREN | T_COMMA | T_MINUS | T_COLON | T_SEMI | T_PLUS | T_RBRACKET | T_BAR | T_LBRACE | T_RBRACE | T_AMPERAMPER | T_AMPER | T_CARET | T_BARBAR | T_PIPE | T_ELSE | T_FAT_ARROW => Reduce(3, NT_infix_expr, yy_action_686)
    _ => Error
  }
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [267, infix_expr → infix_expr INFIX1 • infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_338(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    T_LIDENT => Shift(yy_state_311)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_339)
    _ => Error
  }
}

// [264, infix_expr → infix_expr • INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [265, infix_expr → infix_expr • INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [266, infix_expr → infix_expr • INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [267, infix_expr → infix_expr • INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [267, infix_expr → infix_expr INFIX1 infix_expr •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [268, infix_expr → infix_expr • PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [269, infix_expr → infix_expr • MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [270, infix_expr → infix_expr • AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [271, infix_expr → infix_expr • CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [272, infix_expr → infix_expr • BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [273, infix_expr → infix_expr • AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [274, infix_expr → infix_expr • BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
fn yy_state_339(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_MINUS => Shift(yy_state_334)
    T_PLUS => Shift(yy_state_336)
    T_INFIX2 => Shift(yy_state_340)
    T_INFIX3 => Shift(yy_state_342)
    T_INFIX4 => Shift(yy_state_344)
    T_INFIX1 | T_EOF | T_CATCH | T_RPAREN | T_COMMA | T_COLON | T_SEMI | T_RBRACKET | T_BAR | T_LBRACE | T_RBRACE | T_AMPERAMPER | T_AMPER | T_CARET | T_BARBAR | T_PIPE | T_ELSE | T_FAT_ARROW => Reduce(3, NT_infix_expr, yy_action_565)
    _ => Error
  }
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [266, infix_expr → infix_expr INFIX2 • infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_340(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    T_LIDENT => Shift(yy_state_311)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_341)
    _ => Error
  }
}

// [264, infix_expr → infix_expr • INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [265, infix_expr → infix_expr • INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [266, infix_expr → infix_expr • INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [266, infix_expr → infix_expr INFIX2 infix_expr •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [267, infix_expr → infix_expr • INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [268, infix_expr → infix_expr • PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [269, infix_expr → infix_expr • MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [270, infix_expr → infix_expr • AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [271, infix_expr → infix_expr • CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [272, infix_expr → infix_expr • BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [273, infix_expr → infix_expr • AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [274, infix_expr → infix_expr • BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
fn yy_state_341(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_MINUS => Shift(yy_state_334)
    T_PLUS => Shift(yy_state_336)
    T_INFIX3 => Shift(yy_state_342)
    T_INFIX4 => Shift(yy_state_344)
    T_INFIX1 | T_INFIX2 | T_EOF | T_CATCH | T_RPAREN | T_COMMA | T_COLON | T_SEMI | T_RBRACKET | T_BAR | T_LBRACE | T_RBRACE | T_AMPERAMPER | T_AMPER | T_CARET | T_BARBAR | T_PIPE | T_ELSE | T_FAT_ARROW => Reduce(3, NT_infix_expr, yy_action_105)
    _ => Error
  }
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [265, infix_expr → infix_expr INFIX3 • infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_342(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    T_LIDENT => Shift(yy_state_311)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_343)
    _ => Error
  }
}

// [264, infix_expr → infix_expr • INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [265, infix_expr → infix_expr • INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [265, infix_expr → infix_expr INFIX3 infix_expr •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [266, infix_expr → infix_expr • INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [267, infix_expr → infix_expr • INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [268, infix_expr → infix_expr • PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [269, infix_expr → infix_expr • MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [270, infix_expr → infix_expr • AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [271, infix_expr → infix_expr • CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [272, infix_expr → infix_expr • BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [273, infix_expr → infix_expr • AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [274, infix_expr → infix_expr • BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
fn yy_state_343(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_INFIX4 => Shift(yy_state_344)
    T_INFIX1 | T_INFIX2 | T_INFIX3 | T_EOF | T_CATCH | T_RPAREN | T_COMMA | T_MINUS | T_COLON | T_SEMI | T_PLUS | T_RBRACKET | T_BAR | T_LBRACE | T_RBRACE | T_AMPERAMPER | T_AMPER | T_CARET | T_BARBAR | T_PIPE | T_ELSE | T_FAT_ARROW => Reduce(3, NT_infix_expr, yy_action_290)
    _ => Error
  }
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [264, infix_expr → infix_expr INFIX4 • infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_344(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    T_LIDENT => Shift(yy_state_311)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_345)
    _ => Error
  }
}

// [264, infix_expr → infix_expr • INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [264, infix_expr → infix_expr INFIX4 infix_expr •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [265, infix_expr → infix_expr • INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [266, infix_expr → infix_expr • INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [267, infix_expr → infix_expr • INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [268, infix_expr → infix_expr • PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [269, infix_expr → infix_expr • MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [270, infix_expr → infix_expr • AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [271, infix_expr → infix_expr • CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [272, infix_expr → infix_expr • BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [273, infix_expr → infix_expr • AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
// [274, infix_expr → infix_expr • BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / ELSE / FAT_ARROW]
fn yy_state_345(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_infix_expr, yy_action_500)
}

// [261, expr → pipe_expr •, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
// [262, pipe_expr → pipe_expr • PIPE infix_expr, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / PIPE / FAT_ARROW]
fn yy_state_346(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PIPE => Shift(yy_state_347)
    T_EOF | T_CATCH | T_RPAREN | T_COMMA | T_COLON | T_SEMI | T_RBRACKET | T_LBRACE | T_RBRACE | T_FAT_ARROW => Reduce(1, NT_expr, yy_action_3)
    _ => Error
  }
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [262, pipe_expr → pipe_expr PIPE • infix_expr, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / PIPE / FAT_ARROW]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / FAT_ARROW]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / FAT_ARROW]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / FAT_ARROW]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / FAT_ARROW]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / FAT_ARROW]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / FAT_ARROW]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / FAT_ARROW]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / FAT_ARROW]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / FAT_ARROW]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / FAT_ARROW]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / FAT_ARROW]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / FAT_ARROW]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / FAT_ARROW]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / FAT_ARROW]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / FAT_ARROW]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_347(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    T_LIDENT => Shift(yy_state_311)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_348)
    _ => Error
  }
}

// [262, pipe_expr → pipe_expr PIPE infix_expr •, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / PIPE / FAT_ARROW]
// [264, infix_expr → infix_expr • INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / FAT_ARROW]
// [265, infix_expr → infix_expr • INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / FAT_ARROW]
// [266, infix_expr → infix_expr • INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / FAT_ARROW]
// [267, infix_expr → infix_expr • INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / FAT_ARROW]
// [268, infix_expr → infix_expr • PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / FAT_ARROW]
// [269, infix_expr → infix_expr • MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / FAT_ARROW]
// [270, infix_expr → infix_expr • AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / FAT_ARROW]
// [271, infix_expr → infix_expr • CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / FAT_ARROW]
// [272, infix_expr → infix_expr • BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / FAT_ARROW]
// [273, infix_expr → infix_expr • AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / FAT_ARROW]
// [274, infix_expr → infix_expr • BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE / FAT_ARROW]
fn yy_state_348(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_BARBAR => Shift(yy_state_324)
    T_AMPERAMPER => Shift(yy_state_326)
    T_BAR => Shift(yy_state_328)
    T_CARET => Shift(yy_state_330)
    T_AMPER => Shift(yy_state_332)
    T_MINUS => Shift(yy_state_334)
    T_PLUS => Shift(yy_state_336)
    T_INFIX1 => Shift(yy_state_338)
    T_INFIX2 => Shift(yy_state_340)
    T_INFIX3 => Shift(yy_state_342)
    T_INFIX4 => Shift(yy_state_344)
    T_EOF | T_CATCH | T_RPAREN | T_COMMA | T_COLON | T_SEMI | T_RBRACKET | T_LBRACE | T_RBRACE | T_PIPE | T_FAT_ARROW => Reduce(3, NT_pipe_expr, yy_action_336)
    _ => Error
  }
}

// [260, expr → match_expr •, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
fn yy_state_349(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_expr, yy_action_406)
}

// [259, expr → if_expr •, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
fn yy_state_350(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_expr, yy_action_434)
}

// [258, expr → try_expr •, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
fn yy_state_351(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_expr, yy_action_626)
}

// [257, expr → while_expr •, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
fn yy_state_352(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_expr, yy_action_64)
}

// [256, expr → foreach_expr •, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
fn yy_state_353(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_expr, yy_action_671)
}

// [255, expr → for_expr •, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
fn yy_state_354(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_expr, yy_action_7)
}

// [254, expr → loop_expr •, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
fn yy_state_355(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_expr, yy_action_215)
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [243, match_expr → MATCH • infix_expr LBRACE non_empty_list_semis(single_pattern_case) RBRACE, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
// [244, match_expr → MATCH • infix_expr LBRACE RBRACE, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_356(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    T_LIDENT => Shift(yy_state_311)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_357)
    _ => Error
  }
}

// [243, match_expr → MATCH infix_expr • LBRACE non_empty_list_semis(single_pattern_case) RBRACE, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
// [244, match_expr → MATCH infix_expr • LBRACE RBRACE, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
// [264, infix_expr → infix_expr • INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [265, infix_expr → infix_expr • INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [266, infix_expr → infix_expr • INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [267, infix_expr → infix_expr • INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [268, infix_expr → infix_expr • PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [269, infix_expr → infix_expr • MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [270, infix_expr → infix_expr • AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [271, infix_expr → infix_expr • CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [272, infix_expr → infix_expr • BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [273, infix_expr → infix_expr • AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [274, infix_expr → infix_expr • BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
fn yy_state_357(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_BARBAR => Shift(yy_state_324)
    T_AMPERAMPER => Shift(yy_state_326)
    T_BAR => Shift(yy_state_328)
    T_CARET => Shift(yy_state_330)
    T_AMPER => Shift(yy_state_332)
    T_MINUS => Shift(yy_state_334)
    T_PLUS => Shift(yy_state_336)
    T_INFIX1 => Shift(yy_state_338)
    T_INFIX2 => Shift(yy_state_340)
    T_INFIX3 => Shift(yy_state_342)
    T_INFIX4 => Shift(yy_state_344)
    T_LBRACE => Shift(yy_state_358)
    _ => Error
  }
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [232, single_pattern_case → • pattern option(preceded(IF,expr)) FAT_ARROW expr_statement, SEMI / RBRACE]
// [243, match_expr → MATCH infix_expr LBRACE • non_empty_list_semis(single_pattern_case) RBRACE, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
// [244, match_expr → MATCH infix_expr LBRACE • RBRACE, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
// [289, constr → • UIDENT, LPAREN / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, LPAREN / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [291, constr → • type_name COLONCOLON UIDENT, LPAREN / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [362, pattern → • pattern AS LIDENT, AS / IF / FAT_ARROW]
// [363, pattern → • or_pattern, AS / IF / FAT_ARROW]
// [364, or_pattern → • range_pattern BAR or_pattern, AS / IF / FAT_ARROW]
// [365, or_pattern → • range_pattern, AS / IF / FAT_ARROW]
// [366, range_pattern → • simple_pattern RANGE_EXCLUSIVE simple_pattern, BAR / AS / IF / FAT_ARROW]
// [367, range_pattern → • simple_pattern RANGE_INCLUSIVE simple_pattern, BAR / AS / IF / FAT_ARROW]
// [368, range_pattern → • simple_pattern, BAR / AS / IF / FAT_ARROW]
// [369, simple_pattern → • TRUE, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [370, simple_pattern → • FALSE, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [371, simple_pattern → • CHAR, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [372, simple_pattern → • INT, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [373, simple_pattern → • BYTE, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [374, simple_pattern → • FLOAT, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [375, simple_pattern → • MINUS INT, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [376, simple_pattern → • MINUS FLOAT, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [377, simple_pattern → • STRING, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [378, simple_pattern → • BYTES, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [379, simple_pattern → • UNDERSCORE, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [380, simple_pattern → • LIDENT, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [381, simple_pattern → • constr option(delimited(LPAREN,constr_pat_arguments,RPAREN)), BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [382, simple_pattern → • LPAREN pattern RPAREN, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [383, simple_pattern → • LPAREN pattern COMMA non_empty_list_commas(pattern) RPAREN, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [384, simple_pattern → • LPAREN pattern COLON type_ RPAREN, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [385, simple_pattern → • LBRACKET array_sub_patterns RBRACKET, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [386, simple_pattern → • LBRACE RBRACE, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [387, simple_pattern → • LBRACE DOTDOT option(COMMA) RBRACE, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [388, simple_pattern → • LBRACE non_empty_fields_pat RBRACE, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [389, simple_pattern → • LBRACE non_empty_map_elems_pat RBRACE, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [513, non_empty_list_semis(single_pattern_case) → • non_empty_list_semis_rev(single_pattern_case), RBRACE]
// [586, non_empty_list_semis_rev(single_pattern_case) → • non_empty_list_semi_rev_aux(single_pattern_case) option(SEMI), RBRACE]
// [621, non_empty_list_semi_rev_aux(single_pattern_case) → • single_pattern_case, SEMI / RBRACE]
// [622, non_empty_list_semi_rev_aux(single_pattern_case) → • non_empty_list_semi_rev_aux(single_pattern_case) SEMI single_pattern_case, SEMI / RBRACE]
fn yy_state_358(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACE => Shift(yy_state_52)
    T_LBRACKET => Shift(yy_state_56)
    T_LPAREN => Shift(yy_state_70)
    NT_constr => Shift(yy_state_71)
    T_UNDERSCORE => Shift(yy_state_82)
    T_BYTES => Shift(yy_state_83)
    T_STRING => Shift(yy_state_84)
    T_MINUS => Shift(yy_state_85)
    T_FLOAT => Shift(yy_state_88)
    T_BYTE => Shift(yy_state_89)
    T_INT => Shift(yy_state_90)
    T_CHAR => Shift(yy_state_91)
    T_FALSE => Shift(yy_state_92)
    T_TRUE => Shift(yy_state_93)
    NT_simple_pattern => Shift(yy_state_94)
    NT_type_name => Shift(yy_state_97)
    T_PACKAGE_NAME => Shift(yy_state_100)
    T_UIDENT => Shift(yy_state_102)
    T_LIDENT => Shift(yy_state_103)
    NT_range_pattern => Shift(yy_state_106)
    NT_or_pattern => Shift(yy_state_109)
    NT_single_pattern_case => Shift(yy_state_359)
    NT_non_empty_list_semi_rev_aux_single_pattern_case_ => Shift(yy_state_360)
    NT_pattern => Shift(yy_state_364)
    NT_non_empty_list_semis_rev_single_pattern_case_ => Shift(yy_state_382)
    T_RBRACE => Shift(yy_state_513)
    NT_non_empty_list_semis_single_pattern_case_ => Shift(yy_state_514)
    _ => Error
  }
}

// [621, non_empty_list_semi_rev_aux(single_pattern_case) → single_pattern_case •, SEMI / RBRACE]
fn yy_state_359(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_non_empty_list_semi_rev_aux_single_pattern_case_, yy_action_273)
}

// [581, option(SEMI) → •, RBRACE]
// [582, option(SEMI) → • SEMI, RBRACE]
// [586, non_empty_list_semis_rev(single_pattern_case) → non_empty_list_semi_rev_aux(single_pattern_case) • option(SEMI), RBRACE]
// [622, non_empty_list_semi_rev_aux(single_pattern_case) → non_empty_list_semi_rev_aux(single_pattern_case) • SEMI single_pattern_case, SEMI / RBRACE]
fn yy_state_360(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_option_SEMI_ => Shift(yy_state_361)
    T_SEMI => Shift(yy_state_362)
    T_RBRACE => Reduce(0, NT_option_SEMI_, yy_action_539)
    _ => Error
  }
}

// [586, non_empty_list_semis_rev(single_pattern_case) → non_empty_list_semi_rev_aux(single_pattern_case) option(SEMI) •, RBRACE]
fn yy_state_361(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_non_empty_list_semis_rev_single_pattern_case_, yy_action_325)
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [232, single_pattern_case → • pattern option(preceded(IF,expr)) FAT_ARROW expr_statement, SEMI / RBRACE]
// [289, constr → • UIDENT, LPAREN / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, LPAREN / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [291, constr → • type_name COLONCOLON UIDENT, LPAREN / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [362, pattern → • pattern AS LIDENT, AS / IF / FAT_ARROW]
// [363, pattern → • or_pattern, AS / IF / FAT_ARROW]
// [364, or_pattern → • range_pattern BAR or_pattern, AS / IF / FAT_ARROW]
// [365, or_pattern → • range_pattern, AS / IF / FAT_ARROW]
// [366, range_pattern → • simple_pattern RANGE_EXCLUSIVE simple_pattern, BAR / AS / IF / FAT_ARROW]
// [367, range_pattern → • simple_pattern RANGE_INCLUSIVE simple_pattern, BAR / AS / IF / FAT_ARROW]
// [368, range_pattern → • simple_pattern, BAR / AS / IF / FAT_ARROW]
// [369, simple_pattern → • TRUE, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [370, simple_pattern → • FALSE, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [371, simple_pattern → • CHAR, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [372, simple_pattern → • INT, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [373, simple_pattern → • BYTE, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [374, simple_pattern → • FLOAT, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [375, simple_pattern → • MINUS INT, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [376, simple_pattern → • MINUS FLOAT, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [377, simple_pattern → • STRING, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [378, simple_pattern → • BYTES, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [379, simple_pattern → • UNDERSCORE, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [380, simple_pattern → • LIDENT, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [381, simple_pattern → • constr option(delimited(LPAREN,constr_pat_arguments,RPAREN)), BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [382, simple_pattern → • LPAREN pattern RPAREN, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [383, simple_pattern → • LPAREN pattern COMMA non_empty_list_commas(pattern) RPAREN, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [384, simple_pattern → • LPAREN pattern COLON type_ RPAREN, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [385, simple_pattern → • LBRACKET array_sub_patterns RBRACKET, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [386, simple_pattern → • LBRACE RBRACE, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [387, simple_pattern → • LBRACE DOTDOT option(COMMA) RBRACE, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [388, simple_pattern → • LBRACE non_empty_fields_pat RBRACE, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [389, simple_pattern → • LBRACE non_empty_map_elems_pat RBRACE, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [582, option(SEMI) → SEMI •, RBRACE]
// [622, non_empty_list_semi_rev_aux(single_pattern_case) → non_empty_list_semi_rev_aux(single_pattern_case) SEMI • single_pattern_case, SEMI / RBRACE]
fn yy_state_362(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACE => Shift(yy_state_52)
    T_LBRACKET => Shift(yy_state_56)
    T_LPAREN => Shift(yy_state_70)
    NT_constr => Shift(yy_state_71)
    T_UNDERSCORE => Shift(yy_state_82)
    T_BYTES => Shift(yy_state_83)
    T_STRING => Shift(yy_state_84)
    T_MINUS => Shift(yy_state_85)
    T_FLOAT => Shift(yy_state_88)
    T_BYTE => Shift(yy_state_89)
    T_INT => Shift(yy_state_90)
    T_CHAR => Shift(yy_state_91)
    T_FALSE => Shift(yy_state_92)
    T_TRUE => Shift(yy_state_93)
    NT_simple_pattern => Shift(yy_state_94)
    NT_type_name => Shift(yy_state_97)
    T_PACKAGE_NAME => Shift(yy_state_100)
    T_UIDENT => Shift(yy_state_102)
    T_LIDENT => Shift(yy_state_103)
    NT_range_pattern => Shift(yy_state_106)
    NT_or_pattern => Shift(yy_state_109)
    NT_single_pattern_case => Shift(yy_state_363)
    NT_pattern => Shift(yy_state_364)
    T_RBRACE => Reduce(1, NT_option_SEMI_, yy_action_425)
    _ => Error
  }
}

// [622, non_empty_list_semi_rev_aux(single_pattern_case) → non_empty_list_semi_rev_aux(single_pattern_case) SEMI single_pattern_case •, SEMI / RBRACE]
fn yy_state_363(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_non_empty_list_semi_rev_aux_single_pattern_case_, yy_action_183)
}

// [232, single_pattern_case → pattern • option(preceded(IF,expr)) FAT_ARROW expr_statement, SEMI / RBRACE]
// [362, pattern → pattern • AS LIDENT, AS / IF / FAT_ARROW]
// [508, option(preceded(IF,expr)) → •, FAT_ARROW]
// [509, option(preceded(IF,expr)) → • IF expr, FAT_ARROW]
fn yy_state_364(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AS => Shift(yy_state_111)
    T_IF => Shift(yy_state_235)
    NT_option_preceded_IF_expr__ => Shift(yy_state_365)
    T_FAT_ARROW => Reduce(0, NT_option_preceded_IF_expr__, yy_action_609)
    _ => Error
  }
}

// [232, single_pattern_case → pattern option(preceded(IF,expr)) • FAT_ARROW expr_statement, SEMI / RBRACE]
fn yy_state_365(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_FAT_ARROW => Shift(yy_state_366)
    _ => Error
  }
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [194, qual_ident → • LIDENT, AUGMENTED_ASSIGNMENT / EQUAL]
// [195, qual_ident → • PACKAGE_NAME DOT_LIDENT, AUGMENTED_ASSIGNMENT / EQUAL]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [219, expr_statement → • BREAK POST_LABEL option(expr), SEMI / RBRACE]
// [220, expr_statement → • BREAK option(expr), SEMI / RBRACE]
// [221, expr_statement → • CONTINUE POST_LABEL list_commas_no_trailing(expr), SEMI / RBRACE]
// [222, expr_statement → • CONTINUE list_commas_no_trailing(expr), SEMI / RBRACE]
// [223, expr_statement → • RETURN option(expr), SEMI / RBRACE]
// [224, expr_statement → • RAISE expr, SEMI / RBRACE]
// [225, expr_statement → • ELLIPSIS, SEMI / RBRACE]
// [226, expr_statement → • left_value AUGMENTED_ASSIGNMENT expr, SEMI / RBRACE]
// [227, expr_statement → • left_value EQUAL expr, SEMI / RBRACE]
// [228, expr_statement → • expr, SEMI / RBRACE]
// [229, loop_label_colon → • POST_LABEL COLON, WHILE / LOOP / FOR]
// [230, loop_label_colon → •, WHILE / LOOP / FOR]
// [231, while_expr → • loop_label_colon WHILE infix_expr block_expr optional_else, SEMI / RBRACE]
// [232, single_pattern_case → pattern option(preceded(IF,expr)) FAT_ARROW • expr_statement, SEMI / RBRACE]
// [238, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE, SEMI / RBRACE]
// [239, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE ELSE LBRACE single_pattern_cases RBRACE, SEMI / RBRACE]
// [240, if_expr → • IF infix_expr block_expr ELSE block_expr, SEMI / RBRACE]
// [241, if_expr → • IF infix_expr block_expr ELSE if_expr, SEMI / RBRACE]
// [242, if_expr → • IF infix_expr block_expr, SEMI / RBRACE]
// [243, match_expr → • MATCH infix_expr LBRACE non_empty_list_semis(single_pattern_case) RBRACE, SEMI / RBRACE]
// [244, match_expr → • MATCH infix_expr LBRACE RBRACE, SEMI / RBRACE]
// [245, loop_expr → • loop_label_colon LOOP non_empty_list_commas_no_trailing(expr) LBRACE list_semis(multi_pattern_case) RBRACE, SEMI / RBRACE]
// [249, for_expr → • loop_label_colon FOR for_binders SEMI option(infix_expr) SEMI list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) block_expr optional_else, SEMI / RBRACE]
// [250, for_expr → • loop_label_colon FOR for_binders block_expr optional_else, SEMI / RBRACE]
// [251, foreach_expr → • loop_label_colon FOR non_empty_list_commas(foreach_binder) IN expr block_expr optional_else, SEMI / RBRACE]
// [254, expr → • loop_expr, SEMI / RBRACE]
// [255, expr → • for_expr, SEMI / RBRACE]
// [256, expr → • foreach_expr, SEMI / RBRACE]
// [257, expr → • while_expr, SEMI / RBRACE]
// [258, expr → • try_expr, SEMI / RBRACE]
// [259, expr → • if_expr, SEMI / RBRACE]
// [260, expr → • match_expr, SEMI / RBRACE]
// [261, expr → • pipe_expr, SEMI / RBRACE]
// [262, pipe_expr → • pipe_expr PIPE infix_expr, SEMI / RBRACE / PIPE]
// [263, pipe_expr → • infix_expr, SEMI / RBRACE / PIPE]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [285, left_value → • qual_ident, AUGMENTED_ASSIGNMENT / EQUAL]
// [286, left_value → • simple_expr DOT_LIDENT, AUGMENTED_ASSIGNMENT / EQUAL]
// [287, left_value → • simple_expr DOT_INT, AUGMENTED_ASSIGNMENT / EQUAL]
// [288, left_value → • simple_expr LBRACKET expr RBRACKET, AUGMENTED_ASSIGNMENT / EQUAL]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_366(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_323)
    NT_pipe_expr => Shift(yy_state_346)
    NT_match_expr => Shift(yy_state_349)
    NT_if_expr => Shift(yy_state_350)
    NT_try_expr => Shift(yy_state_351)
    NT_while_expr => Shift(yy_state_352)
    NT_foreach_expr => Shift(yy_state_353)
    NT_for_expr => Shift(yy_state_354)
    NT_loop_expr => Shift(yy_state_355)
    T_MATCH => Shift(yy_state_356)
    NT_qual_ident => Shift(yy_state_367)
    NT_simple_expr => Shift(yy_state_368)
    T_IF => Shift(yy_state_373)
    T_TRY => Shift(yy_state_379)
    NT_loop_label_colon => Shift(yy_state_396)
    T_POST_LABEL => Shift(yy_state_404)
    NT_expr_statement => Shift(yy_state_489)
    NT_expr => Shift(yy_state_490)
    NT_left_value => Shift(yy_state_491)
    T_ELLIPSIS => Shift(yy_state_496)
    T_RAISE => Shift(yy_state_497)
    T_RETURN => Shift(yy_state_499)
    T_CONTINUE => Shift(yy_state_501)
    T_BREAK => Shift(yy_state_506)
    T_PACKAGE_NAME => Shift(yy_state_510)
    T_LIDENT => Shift(yy_state_512)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_481)
    _ => Error
  }
}

// [285, left_value → qual_ident •, AUGMENTED_ASSIGNMENT / EQUAL]
fn yy_state_367(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_left_value, yy_action_149)
}

// [284, prefix_expr → simple_expr •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [286, left_value → simple_expr • DOT_LIDENT, AUGMENTED_ASSIGNMENT / EQUAL]
// [287, left_value → simple_expr • DOT_INT, AUGMENTED_ASSIGNMENT / EQUAL]
// [288, left_value → simple_expr • LBRACKET expr RBRACKET, AUGMENTED_ASSIGNMENT / EQUAL]
// [309, simple_expr → simple_expr • LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → simple_expr • EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → simple_expr • EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → simple_expr • QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → simple_expr • LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → simple_expr • LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → simple_expr • DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → simple_expr • DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → simple_expr • DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → simple_expr • DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → simple_expr • DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → simple_expr • DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → simple_expr • DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → simple_expr • DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → simple_expr • DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → simple_expr • DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_368(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_DOTDOT => Shift(yy_state_278)
    T_QUESTION => Shift(yy_state_369)
    T_EXCLAMATION => Shift(yy_state_453)
    T_LPAREN => Shift(yy_state_461)
    T_LBRACKET => Shift(yy_state_464)
    T_DOT_INT => Shift(yy_state_472)
    T_DOT_LIDENT => Shift(yy_state_473)
    T_INFIX1 | T_INFIX2 | T_INFIX3 | T_INFIX4 | T_MINUS | T_SEMI | T_PLUS | T_BAR | T_RBRACE | T_AMPERAMPER | T_AMPER | T_CARET | T_BARBAR | T_AS | T_PIPE | T_RANGE_INCLUSIVE | T_RANGE_EXCLUSIVE | T_IS => Reduce(1, NT_prefix_expr, yy_action_486)
    _ => Error
  }
}

// [312, simple_expr → simple_expr QUESTION • LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_369(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_370)
    _ => Error
  }
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [229, loop_label_colon → • POST_LABEL COLON, WHILE / LOOP / FOR]
// [230, loop_label_colon → •, WHILE / LOOP / FOR]
// [231, while_expr → • loop_label_colon WHILE infix_expr block_expr optional_else, RPAREN / COMMA]
// [238, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE, RPAREN / COMMA]
// [239, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE ELSE LBRACE single_pattern_cases RBRACE, RPAREN / COMMA]
// [240, if_expr → • IF infix_expr block_expr ELSE block_expr, RPAREN / COMMA]
// [241, if_expr → • IF infix_expr block_expr ELSE if_expr, RPAREN / COMMA]
// [242, if_expr → • IF infix_expr block_expr, RPAREN / COMMA]
// [243, match_expr → • MATCH infix_expr LBRACE non_empty_list_semis(single_pattern_case) RBRACE, RPAREN / COMMA]
// [244, match_expr → • MATCH infix_expr LBRACE RBRACE, RPAREN / COMMA]
// [245, loop_expr → • loop_label_colon LOOP non_empty_list_commas_no_trailing(expr) LBRACE list_semis(multi_pattern_case) RBRACE, RPAREN / COMMA]
// [249, for_expr → • loop_label_colon FOR for_binders SEMI option(infix_expr) SEMI list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) block_expr optional_else, RPAREN / COMMA]
// [250, for_expr → • loop_label_colon FOR for_binders block_expr optional_else, RPAREN / COMMA]
// [251, foreach_expr → • loop_label_colon FOR non_empty_list_commas(foreach_binder) IN expr block_expr optional_else, RPAREN / COMMA]
// [254, expr → • loop_expr, RPAREN / COMMA]
// [255, expr → • for_expr, RPAREN / COMMA]
// [256, expr → • foreach_expr, RPAREN / COMMA]
// [257, expr → • while_expr, RPAREN / COMMA]
// [258, expr → • try_expr, RPAREN / COMMA]
// [259, expr → • if_expr, RPAREN / COMMA]
// [260, expr → • match_expr, RPAREN / COMMA]
// [261, expr → • pipe_expr, RPAREN / COMMA]
// [262, pipe_expr → • pipe_expr PIPE infix_expr, RPAREN / COMMA / PIPE]
// [263, pipe_expr → • infix_expr, RPAREN / COMMA / PIPE]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → simple_expr QUESTION LPAREN • list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [355, argument → • LIDENT optional_question EQUAL expr, RPAREN / COMMA]
// [356, argument → • expr, RPAREN / COMMA]
// [357, argument → • POST_LABEL, RPAREN / COMMA]
// [358, argument → • LIDENT QUESTION, RPAREN / COMMA]
// [493, list_commas(argument) → •, RPAREN]
// [494, list_commas(argument) → • non_empty_list_commas(argument), RPAREN]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [576, non_empty_list_commas(argument) → • non_empty_list_commas_rev(argument) option(COMMA), RPAREN]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [614, non_empty_list_commas_rev(argument) → • argument, RPAREN / COMMA]
// [615, non_empty_list_commas_rev(argument) → • non_empty_list_commas_rev(argument) COMMA argument, RPAREN / COMMA]
fn yy_state_370(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    NT_argument => Shift(yy_state_282)
    NT_non_empty_list_commas_rev_argument_ => Shift(yy_state_283)
    NT_expr => Shift(yy_state_287)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    NT_non_empty_list_commas_argument_ => Shift(yy_state_314)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_323)
    NT_pipe_expr => Shift(yy_state_346)
    NT_match_expr => Shift(yy_state_349)
    NT_if_expr => Shift(yy_state_350)
    NT_try_expr => Shift(yy_state_351)
    NT_while_expr => Shift(yy_state_352)
    NT_foreach_expr => Shift(yy_state_353)
    NT_for_expr => Shift(yy_state_354)
    NT_loop_expr => Shift(yy_state_355)
    T_MATCH => Shift(yy_state_356)
    NT_list_commas_argument_ => Shift(yy_state_371)
    T_IF => Shift(yy_state_373)
    T_TRY => Shift(yy_state_379)
    NT_loop_label_colon => Shift(yy_state_396)
    T_POST_LABEL => Shift(yy_state_447)
    T_LIDENT => Shift(yy_state_448)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_481)
    T_RPAREN => Reduce(0, NT_list_commas_argument_, yy_action_394)
    _ => Error
  }
}

// [312, simple_expr → simple_expr QUESTION LPAREN list_commas(argument) • RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_371(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RPAREN => Shift(yy_state_372)
    _ => Error
  }
}

// [312, simple_expr → simple_expr QUESTION LPAREN list_commas(argument) RPAREN •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_372(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_simple_expr, yy_action_401)
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [240, if_expr → IF • infix_expr block_expr ELSE block_expr, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
// [241, if_expr → IF • infix_expr block_expr ELSE if_expr, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
// [242, if_expr → IF • infix_expr block_expr, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_373(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    T_LIDENT => Shift(yy_state_311)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_374)
    _ => Error
  }
}

// [38, block_expr → • LBRACE list_semis_rev(statement) RBRACE, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / ELSE / FAT_ARROW]
// [240, if_expr → IF infix_expr • block_expr ELSE block_expr, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
// [241, if_expr → IF infix_expr • block_expr ELSE if_expr, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
// [242, if_expr → IF infix_expr • block_expr, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
// [264, infix_expr → infix_expr • INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [265, infix_expr → infix_expr • INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [266, infix_expr → infix_expr • INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [267, infix_expr → infix_expr • INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [268, infix_expr → infix_expr • PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [269, infix_expr → infix_expr • MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [270, infix_expr → infix_expr • AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [271, infix_expr → infix_expr • CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [272, infix_expr → infix_expr • BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [273, infix_expr → infix_expr • AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [274, infix_expr → infix_expr • BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
fn yy_state_374(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACE => Shift(yy_state_250)
    T_BARBAR => Shift(yy_state_324)
    T_AMPERAMPER => Shift(yy_state_326)
    T_BAR => Shift(yy_state_328)
    T_CARET => Shift(yy_state_330)
    T_AMPER => Shift(yy_state_332)
    T_MINUS => Shift(yy_state_334)
    T_PLUS => Shift(yy_state_336)
    T_INFIX1 => Shift(yy_state_338)
    T_INFIX2 => Shift(yy_state_340)
    T_INFIX3 => Shift(yy_state_342)
    T_INFIX4 => Shift(yy_state_344)
    NT_block_expr => Shift(yy_state_375)
    _ => Error
  }
}

// [240, if_expr → IF infix_expr block_expr • ELSE block_expr, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
// [241, if_expr → IF infix_expr block_expr • ELSE if_expr, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
// [242, if_expr → IF infix_expr block_expr •, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
fn yy_state_375(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ELSE => Shift(yy_state_376)
    T_EOF | T_CATCH | T_RPAREN | T_COMMA | T_COLON | T_SEMI | T_RBRACKET | T_LBRACE | T_RBRACE | T_FAT_ARROW => Reduce(3, NT_if_expr, yy_action_389)
    _ => Error
  }
}

// [38, block_expr → • LBRACE list_semis_rev(statement) RBRACE, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
// [240, if_expr → • IF infix_expr block_expr ELSE block_expr, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
// [240, if_expr → IF infix_expr block_expr ELSE • block_expr, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
// [241, if_expr → • IF infix_expr block_expr ELSE if_expr, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
// [241, if_expr → IF infix_expr block_expr ELSE • if_expr, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
// [242, if_expr → • IF infix_expr block_expr, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
fn yy_state_376(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACE => Shift(yy_state_250)
    T_IF => Shift(yy_state_373)
    NT_if_expr => Shift(yy_state_377)
    NT_block_expr => Shift(yy_state_378)
    _ => Error
  }
}

// [241, if_expr → IF infix_expr block_expr ELSE if_expr •, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
fn yy_state_377(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_if_expr, yy_action_506)
}

// [240, if_expr → IF infix_expr block_expr ELSE block_expr •, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
fn yy_state_378(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_if_expr, yy_action_192)
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [229, loop_label_colon → • POST_LABEL COLON, WHILE / LOOP / FOR]
// [230, loop_label_colon → •, WHILE / LOOP / FOR]
// [231, while_expr → • loop_label_colon WHILE infix_expr block_expr optional_else, CATCH / LBRACE]
// [238, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE, CATCH / LBRACE]
// [238, try_expr → TRY • expr catch_keyword single_pattern_cases RBRACE, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
// [239, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE ELSE LBRACE single_pattern_cases RBRACE, CATCH / LBRACE]
// [239, try_expr → TRY • expr catch_keyword single_pattern_cases RBRACE ELSE LBRACE single_pattern_cases RBRACE, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
// [240, if_expr → • IF infix_expr block_expr ELSE block_expr, CATCH / LBRACE]
// [241, if_expr → • IF infix_expr block_expr ELSE if_expr, CATCH / LBRACE]
// [242, if_expr → • IF infix_expr block_expr, CATCH / LBRACE]
// [243, match_expr → • MATCH infix_expr LBRACE non_empty_list_semis(single_pattern_case) RBRACE, CATCH / LBRACE]
// [244, match_expr → • MATCH infix_expr LBRACE RBRACE, CATCH / LBRACE]
// [245, loop_expr → • loop_label_colon LOOP non_empty_list_commas_no_trailing(expr) LBRACE list_semis(multi_pattern_case) RBRACE, CATCH / LBRACE]
// [249, for_expr → • loop_label_colon FOR for_binders SEMI option(infix_expr) SEMI list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) block_expr optional_else, CATCH / LBRACE]
// [250, for_expr → • loop_label_colon FOR for_binders block_expr optional_else, CATCH / LBRACE]
// [251, foreach_expr → • loop_label_colon FOR non_empty_list_commas(foreach_binder) IN expr block_expr optional_else, CATCH / LBRACE]
// [254, expr → • loop_expr, CATCH / LBRACE]
// [255, expr → • for_expr, CATCH / LBRACE]
// [256, expr → • foreach_expr, CATCH / LBRACE]
// [257, expr → • while_expr, CATCH / LBRACE]
// [258, expr → • try_expr, CATCH / LBRACE]
// [259, expr → • if_expr, CATCH / LBRACE]
// [260, expr → • match_expr, CATCH / LBRACE]
// [261, expr → • pipe_expr, CATCH / LBRACE]
// [262, pipe_expr → • pipe_expr PIPE infix_expr, CATCH / LBRACE / PIPE]
// [263, pipe_expr → • infix_expr, CATCH / LBRACE / PIPE]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / CATCH / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_379(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    T_LIDENT => Shift(yy_state_311)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_323)
    NT_pipe_expr => Shift(yy_state_346)
    NT_match_expr => Shift(yy_state_349)
    NT_if_expr => Shift(yy_state_350)
    NT_try_expr => Shift(yy_state_351)
    NT_while_expr => Shift(yy_state_352)
    NT_foreach_expr => Shift(yy_state_353)
    NT_for_expr => Shift(yy_state_354)
    NT_loop_expr => Shift(yy_state_355)
    T_MATCH => Shift(yy_state_356)
    T_IF => Shift(yy_state_373)
    T_TRY => Shift(yy_state_379)
    NT_expr => Shift(yy_state_380)
    NT_loop_label_colon => Shift(yy_state_396)
    T_POST_LABEL => Shift(yy_state_404)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_481)
    _ => Error
  }
}

// [235, catch_keyword → • CATCH LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [236, catch_keyword → • LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [237, catch_keyword → • CATCH EXCLAMATION LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [238, try_expr → TRY expr • catch_keyword single_pattern_cases RBRACE, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
// [239, try_expr → TRY expr • catch_keyword single_pattern_cases RBRACE ELSE LBRACE single_pattern_cases RBRACE, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
fn yy_state_380(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_catch_keyword => Shift(yy_state_381)
    T_LBRACE => Shift(yy_state_391)
    T_CATCH => Shift(yy_state_392)
    _ => Error
  }
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [232, single_pattern_case → • pattern option(preceded(IF,expr)) FAT_ARROW expr_statement, SEMI / RBRACE]
// [233, single_pattern_cases → • list_semis(single_pattern_case), RBRACE]
// [238, try_expr → TRY expr catch_keyword • single_pattern_cases RBRACE, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
// [239, try_expr → TRY expr catch_keyword • single_pattern_cases RBRACE ELSE LBRACE single_pattern_cases RBRACE, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
// [289, constr → • UIDENT, LPAREN / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, LPAREN / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [291, constr → • type_name COLONCOLON UIDENT, LPAREN / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [362, pattern → • pattern AS LIDENT, AS / IF / FAT_ARROW]
// [363, pattern → • or_pattern, AS / IF / FAT_ARROW]
// [364, or_pattern → • range_pattern BAR or_pattern, AS / IF / FAT_ARROW]
// [365, or_pattern → • range_pattern, AS / IF / FAT_ARROW]
// [366, range_pattern → • simple_pattern RANGE_EXCLUSIVE simple_pattern, BAR / AS / IF / FAT_ARROW]
// [367, range_pattern → • simple_pattern RANGE_INCLUSIVE simple_pattern, BAR / AS / IF / FAT_ARROW]
// [368, range_pattern → • simple_pattern, BAR / AS / IF / FAT_ARROW]
// [369, simple_pattern → • TRUE, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [370, simple_pattern → • FALSE, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [371, simple_pattern → • CHAR, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [372, simple_pattern → • INT, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [373, simple_pattern → • BYTE, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [374, simple_pattern → • FLOAT, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [375, simple_pattern → • MINUS INT, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [376, simple_pattern → • MINUS FLOAT, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [377, simple_pattern → • STRING, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [378, simple_pattern → • BYTES, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [379, simple_pattern → • UNDERSCORE, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [380, simple_pattern → • LIDENT, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [381, simple_pattern → • constr option(delimited(LPAREN,constr_pat_arguments,RPAREN)), BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [382, simple_pattern → • LPAREN pattern RPAREN, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [383, simple_pattern → • LPAREN pattern COMMA non_empty_list_commas(pattern) RPAREN, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [384, simple_pattern → • LPAREN pattern COLON type_ RPAREN, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [385, simple_pattern → • LBRACKET array_sub_patterns RBRACKET, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [386, simple_pattern → • LBRACE RBRACE, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [387, simple_pattern → • LBRACE DOTDOT option(COMMA) RBRACE, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [388, simple_pattern → • LBRACE non_empty_fields_pat RBRACE, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [389, simple_pattern → • LBRACE non_empty_map_elems_pat RBRACE, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [510, list_semis(single_pattern_case) → •, RBRACE]
// [511, list_semis(single_pattern_case) → • non_empty_list_semis(single_pattern_case), RBRACE]
// [513, non_empty_list_semis(single_pattern_case) → • non_empty_list_semis_rev(single_pattern_case), RBRACE]
// [586, non_empty_list_semis_rev(single_pattern_case) → • non_empty_list_semi_rev_aux(single_pattern_case) option(SEMI), RBRACE]
// [621, non_empty_list_semi_rev_aux(single_pattern_case) → • single_pattern_case, SEMI / RBRACE]
// [622, non_empty_list_semi_rev_aux(single_pattern_case) → • non_empty_list_semi_rev_aux(single_pattern_case) SEMI single_pattern_case, SEMI / RBRACE]
fn yy_state_381(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACE => Shift(yy_state_52)
    T_LBRACKET => Shift(yy_state_56)
    T_LPAREN => Shift(yy_state_70)
    NT_constr => Shift(yy_state_71)
    T_UNDERSCORE => Shift(yy_state_82)
    T_BYTES => Shift(yy_state_83)
    T_STRING => Shift(yy_state_84)
    T_MINUS => Shift(yy_state_85)
    T_FLOAT => Shift(yy_state_88)
    T_BYTE => Shift(yy_state_89)
    T_INT => Shift(yy_state_90)
    T_CHAR => Shift(yy_state_91)
    T_FALSE => Shift(yy_state_92)
    T_TRUE => Shift(yy_state_93)
    NT_simple_pattern => Shift(yy_state_94)
    NT_type_name => Shift(yy_state_97)
    T_PACKAGE_NAME => Shift(yy_state_100)
    T_UIDENT => Shift(yy_state_102)
    T_LIDENT => Shift(yy_state_103)
    NT_range_pattern => Shift(yy_state_106)
    NT_or_pattern => Shift(yy_state_109)
    NT_single_pattern_case => Shift(yy_state_359)
    NT_non_empty_list_semi_rev_aux_single_pattern_case_ => Shift(yy_state_360)
    NT_pattern => Shift(yy_state_364)
    NT_non_empty_list_semis_rev_single_pattern_case_ => Shift(yy_state_382)
    NT_non_empty_list_semis_single_pattern_case_ => Shift(yy_state_383)
    NT_single_pattern_cases => Shift(yy_state_384)
    NT_list_semis_single_pattern_case_ => Shift(yy_state_390)
    T_RBRACE => Reduce(0, NT_list_semis_single_pattern_case_, yy_action_4)
    _ => Error
  }
}

// [513, non_empty_list_semis(single_pattern_case) → non_empty_list_semis_rev(single_pattern_case) •, RBRACE]
fn yy_state_382(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_non_empty_list_semis_single_pattern_case_, yy_action_200)
}

// [511, list_semis(single_pattern_case) → non_empty_list_semis(single_pattern_case) •, RBRACE]
fn yy_state_383(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_list_semis_single_pattern_case_, yy_action_610)
}

// [238, try_expr → TRY expr catch_keyword single_pattern_cases • RBRACE, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
// [239, try_expr → TRY expr catch_keyword single_pattern_cases • RBRACE ELSE LBRACE single_pattern_cases RBRACE, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
fn yy_state_384(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACE => Shift(yy_state_385)
    _ => Error
  }
}

// [238, try_expr → TRY expr catch_keyword single_pattern_cases RBRACE •, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
// [239, try_expr → TRY expr catch_keyword single_pattern_cases RBRACE • ELSE LBRACE single_pattern_cases RBRACE, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
fn yy_state_385(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ELSE => Shift(yy_state_386)
    T_EOF | T_CATCH | T_RPAREN | T_COMMA | T_COLON | T_SEMI | T_RBRACKET | T_LBRACE | T_RBRACE | T_FAT_ARROW => Reduce(5, NT_try_expr, yy_action_700)
    _ => Error
  }
}

// [239, try_expr → TRY expr catch_keyword single_pattern_cases RBRACE ELSE • LBRACE single_pattern_cases RBRACE, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
fn yy_state_386(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACE => Shift(yy_state_387)
    _ => Error
  }
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [232, single_pattern_case → • pattern option(preceded(IF,expr)) FAT_ARROW expr_statement, SEMI / RBRACE]
// [233, single_pattern_cases → • list_semis(single_pattern_case), RBRACE]
// [239, try_expr → TRY expr catch_keyword single_pattern_cases RBRACE ELSE LBRACE • single_pattern_cases RBRACE, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
// [289, constr → • UIDENT, LPAREN / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, LPAREN / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [291, constr → • type_name COLONCOLON UIDENT, LPAREN / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [362, pattern → • pattern AS LIDENT, AS / IF / FAT_ARROW]
// [363, pattern → • or_pattern, AS / IF / FAT_ARROW]
// [364, or_pattern → • range_pattern BAR or_pattern, AS / IF / FAT_ARROW]
// [365, or_pattern → • range_pattern, AS / IF / FAT_ARROW]
// [366, range_pattern → • simple_pattern RANGE_EXCLUSIVE simple_pattern, BAR / AS / IF / FAT_ARROW]
// [367, range_pattern → • simple_pattern RANGE_INCLUSIVE simple_pattern, BAR / AS / IF / FAT_ARROW]
// [368, range_pattern → • simple_pattern, BAR / AS / IF / FAT_ARROW]
// [369, simple_pattern → • TRUE, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [370, simple_pattern → • FALSE, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [371, simple_pattern → • CHAR, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [372, simple_pattern → • INT, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [373, simple_pattern → • BYTE, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [374, simple_pattern → • FLOAT, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [375, simple_pattern → • MINUS INT, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [376, simple_pattern → • MINUS FLOAT, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [377, simple_pattern → • STRING, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [378, simple_pattern → • BYTES, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [379, simple_pattern → • UNDERSCORE, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [380, simple_pattern → • LIDENT, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [381, simple_pattern → • constr option(delimited(LPAREN,constr_pat_arguments,RPAREN)), BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [382, simple_pattern → • LPAREN pattern RPAREN, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [383, simple_pattern → • LPAREN pattern COMMA non_empty_list_commas(pattern) RPAREN, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [384, simple_pattern → • LPAREN pattern COLON type_ RPAREN, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [385, simple_pattern → • LBRACKET array_sub_patterns RBRACKET, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [386, simple_pattern → • LBRACE RBRACE, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [387, simple_pattern → • LBRACE DOTDOT option(COMMA) RBRACE, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [388, simple_pattern → • LBRACE non_empty_fields_pat RBRACE, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [389, simple_pattern → • LBRACE non_empty_map_elems_pat RBRACE, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [510, list_semis(single_pattern_case) → •, RBRACE]
// [511, list_semis(single_pattern_case) → • non_empty_list_semis(single_pattern_case), RBRACE]
// [513, non_empty_list_semis(single_pattern_case) → • non_empty_list_semis_rev(single_pattern_case), RBRACE]
// [586, non_empty_list_semis_rev(single_pattern_case) → • non_empty_list_semi_rev_aux(single_pattern_case) option(SEMI), RBRACE]
// [621, non_empty_list_semi_rev_aux(single_pattern_case) → • single_pattern_case, SEMI / RBRACE]
// [622, non_empty_list_semi_rev_aux(single_pattern_case) → • non_empty_list_semi_rev_aux(single_pattern_case) SEMI single_pattern_case, SEMI / RBRACE]
fn yy_state_387(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACE => Shift(yy_state_52)
    T_LBRACKET => Shift(yy_state_56)
    T_LPAREN => Shift(yy_state_70)
    NT_constr => Shift(yy_state_71)
    T_UNDERSCORE => Shift(yy_state_82)
    T_BYTES => Shift(yy_state_83)
    T_STRING => Shift(yy_state_84)
    T_MINUS => Shift(yy_state_85)
    T_FLOAT => Shift(yy_state_88)
    T_BYTE => Shift(yy_state_89)
    T_INT => Shift(yy_state_90)
    T_CHAR => Shift(yy_state_91)
    T_FALSE => Shift(yy_state_92)
    T_TRUE => Shift(yy_state_93)
    NT_simple_pattern => Shift(yy_state_94)
    NT_type_name => Shift(yy_state_97)
    T_PACKAGE_NAME => Shift(yy_state_100)
    T_UIDENT => Shift(yy_state_102)
    T_LIDENT => Shift(yy_state_103)
    NT_range_pattern => Shift(yy_state_106)
    NT_or_pattern => Shift(yy_state_109)
    NT_single_pattern_case => Shift(yy_state_359)
    NT_non_empty_list_semi_rev_aux_single_pattern_case_ => Shift(yy_state_360)
    NT_pattern => Shift(yy_state_364)
    NT_non_empty_list_semis_rev_single_pattern_case_ => Shift(yy_state_382)
    NT_non_empty_list_semis_single_pattern_case_ => Shift(yy_state_383)
    NT_single_pattern_cases => Shift(yy_state_388)
    NT_list_semis_single_pattern_case_ => Shift(yy_state_390)
    T_RBRACE => Reduce(0, NT_list_semis_single_pattern_case_, yy_action_4)
    _ => Error
  }
}

// [239, try_expr → TRY expr catch_keyword single_pattern_cases RBRACE ELSE LBRACE single_pattern_cases • RBRACE, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
fn yy_state_388(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACE => Shift(yy_state_389)
    _ => Error
  }
}

// [239, try_expr → TRY expr catch_keyword single_pattern_cases RBRACE ELSE LBRACE single_pattern_cases RBRACE •, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
fn yy_state_389(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(9, NT_try_expr, yy_action_553)
}

// [233, single_pattern_cases → list_semis(single_pattern_case) •, RBRACE]
fn yy_state_390(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_single_pattern_cases, yy_action_704)
}

// [236, catch_keyword → LBRACE •, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
fn yy_state_391(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_catch_keyword, yy_action_101)
}

// [235, catch_keyword → CATCH • LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [237, catch_keyword → CATCH • EXCLAMATION LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
fn yy_state_392(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EXCLAMATION => Shift(yy_state_393)
    T_LBRACE => Shift(yy_state_395)
    _ => Error
  }
}

// [237, catch_keyword → CATCH EXCLAMATION • LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
fn yy_state_393(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACE => Shift(yy_state_394)
    _ => Error
  }
}

// [237, catch_keyword → CATCH EXCLAMATION LBRACE •, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
fn yy_state_394(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_catch_keyword, yy_action_190)
}

// [235, catch_keyword → CATCH LBRACE •, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
fn yy_state_395(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_catch_keyword, yy_action_523)
}

// [231, while_expr → loop_label_colon • WHILE infix_expr block_expr optional_else, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
// [245, loop_expr → loop_label_colon • LOOP non_empty_list_commas_no_trailing(expr) LBRACE list_semis(multi_pattern_case) RBRACE, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
// [249, for_expr → loop_label_colon • FOR for_binders SEMI option(infix_expr) SEMI list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) block_expr optional_else, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
// [250, for_expr → loop_label_colon • FOR for_binders block_expr optional_else, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
// [251, foreach_expr → loop_label_colon • FOR non_empty_list_commas(foreach_binder) IN expr block_expr optional_else, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
fn yy_state_396(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_FOR => Shift(yy_state_397)
    T_LOOP => Shift(yy_state_435)
    T_WHILE => Shift(yy_state_443)
    _ => Error
  }
}

// [246, for_binders → • list_commas_no_trailing(separated_pair(binder,EQUAL,expr)), SEMI / LBRACE]
// [249, for_expr → loop_label_colon FOR • for_binders SEMI option(infix_expr) SEMI list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) block_expr optional_else, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
// [250, for_expr → loop_label_colon FOR • for_binders block_expr optional_else, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
// [251, foreach_expr → loop_label_colon FOR • non_empty_list_commas(foreach_binder) IN expr block_expr optional_else, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
// [252, foreach_binder → • LIDENT, COMMA / IN]
// [253, foreach_binder → • UNDERSCORE, COMMA / IN]
// [515, list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) → •, SEMI / LBRACE]
// [516, list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) → • non_empty_list_commas_no_trailing(separated_pair(binder,EQUAL,expr)), SEMI / LBRACE]
// [519, non_empty_list_commas(foreach_binder) → • non_empty_list_commas_rev(foreach_binder) option(COMMA), IN]
// [589, non_empty_list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) → • non_empty_list_commas_rev(separated_pair(binder,EQUAL,expr)), SEMI / LBRACE]
// [590, non_empty_list_commas_rev(foreach_binder) → • foreach_binder, COMMA / IN]
// [591, non_empty_list_commas_rev(foreach_binder) → • non_empty_list_commas_rev(foreach_binder) COMMA foreach_binder, COMMA / IN]
// [623, non_empty_list_commas_rev(separated_pair(binder,EQUAL,expr)) → • LIDENT EQUAL expr, COMMA / SEMI / LBRACE]
// [624, non_empty_list_commas_rev(separated_pair(binder,EQUAL,expr)) → • non_empty_list_commas_rev(separated_pair(binder,EQUAL,expr)) COMMA LIDENT EQUAL expr, COMMA / SEMI / LBRACE]
fn yy_state_397(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_foreach_binder => Shift(yy_state_398)
    NT_non_empty_list_commas_rev_separated_pair_binder_EQUAL_expr__ => Shift(yy_state_399)
    NT_non_empty_list_commas_rev_foreach_binder_ => Shift(yy_state_406)
    T_UNDERSCORE => Shift(yy_state_409)
    NT_non_empty_list_commas_no_trailing_separated_pair_binder_EQUAL_expr__ => Shift(yy_state_412)
    T_LIDENT => Shift(yy_state_413)
    NT_non_empty_list_commas_foreach_binder_ => Shift(yy_state_416)
    NT_for_binders => Shift(yy_state_423)
    NT_list_commas_no_trailing_separated_pair_binder_EQUAL_expr__ => Shift(yy_state_434)
    T_SEMI | T_LBRACE => Reduce(0, NT_list_commas_no_trailing_separated_pair_binder_EQUAL_expr__, yy_action_72)
    _ => Error
  }
}

// [590, non_empty_list_commas_rev(foreach_binder) → foreach_binder •, COMMA / IN]
fn yy_state_398(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_non_empty_list_commas_rev_foreach_binder_, yy_action_533)
}

// [589, non_empty_list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) → non_empty_list_commas_rev(separated_pair(binder,EQUAL,expr)) •, SEMI / LBRACE]
// [624, non_empty_list_commas_rev(separated_pair(binder,EQUAL,expr)) → non_empty_list_commas_rev(separated_pair(binder,EQUAL,expr)) • COMMA LIDENT EQUAL expr, COMMA / SEMI / LBRACE]
fn yy_state_399(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COMMA => Shift(yy_state_400)
    T_SEMI | T_LBRACE => Reduce(1, NT_non_empty_list_commas_no_trailing_separated_pair_binder_EQUAL_expr__, yy_action_385)
    _ => Error
  }
}

// [624, non_empty_list_commas_rev(separated_pair(binder,EQUAL,expr)) → non_empty_list_commas_rev(separated_pair(binder,EQUAL,expr)) COMMA • LIDENT EQUAL expr, COMMA / SEMI / LBRACE]
fn yy_state_400(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_401)
    _ => Error
  }
}

// [624, non_empty_list_commas_rev(separated_pair(binder,EQUAL,expr)) → non_empty_list_commas_rev(separated_pair(binder,EQUAL,expr)) COMMA LIDENT • EQUAL expr, COMMA / SEMI / LBRACE]
fn yy_state_401(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EQUAL => Shift(yy_state_402)
    _ => Error
  }
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [229, loop_label_colon → • POST_LABEL COLON, WHILE / LOOP / FOR]
// [230, loop_label_colon → •, WHILE / LOOP / FOR]
// [231, while_expr → • loop_label_colon WHILE infix_expr block_expr optional_else, COMMA / SEMI / LBRACE]
// [238, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE, COMMA / SEMI / LBRACE]
// [239, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE ELSE LBRACE single_pattern_cases RBRACE, COMMA / SEMI / LBRACE]
// [240, if_expr → • IF infix_expr block_expr ELSE block_expr, COMMA / SEMI / LBRACE]
// [241, if_expr → • IF infix_expr block_expr ELSE if_expr, COMMA / SEMI / LBRACE]
// [242, if_expr → • IF infix_expr block_expr, COMMA / SEMI / LBRACE]
// [243, match_expr → • MATCH infix_expr LBRACE non_empty_list_semis(single_pattern_case) RBRACE, COMMA / SEMI / LBRACE]
// [244, match_expr → • MATCH infix_expr LBRACE RBRACE, COMMA / SEMI / LBRACE]
// [245, loop_expr → • loop_label_colon LOOP non_empty_list_commas_no_trailing(expr) LBRACE list_semis(multi_pattern_case) RBRACE, COMMA / SEMI / LBRACE]
// [249, for_expr → • loop_label_colon FOR for_binders SEMI option(infix_expr) SEMI list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) block_expr optional_else, COMMA / SEMI / LBRACE]
// [250, for_expr → • loop_label_colon FOR for_binders block_expr optional_else, COMMA / SEMI / LBRACE]
// [251, foreach_expr → • loop_label_colon FOR non_empty_list_commas(foreach_binder) IN expr block_expr optional_else, COMMA / SEMI / LBRACE]
// [254, expr → • loop_expr, COMMA / SEMI / LBRACE]
// [255, expr → • for_expr, COMMA / SEMI / LBRACE]
// [256, expr → • foreach_expr, COMMA / SEMI / LBRACE]
// [257, expr → • while_expr, COMMA / SEMI / LBRACE]
// [258, expr → • try_expr, COMMA / SEMI / LBRACE]
// [259, expr → • if_expr, COMMA / SEMI / LBRACE]
// [260, expr → • match_expr, COMMA / SEMI / LBRACE]
// [261, expr → • pipe_expr, COMMA / SEMI / LBRACE]
// [262, pipe_expr → • pipe_expr PIPE infix_expr, COMMA / SEMI / LBRACE / PIPE]
// [263, pipe_expr → • infix_expr, COMMA / SEMI / LBRACE / PIPE]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [624, non_empty_list_commas_rev(separated_pair(binder,EQUAL,expr)) → non_empty_list_commas_rev(separated_pair(binder,EQUAL,expr)) COMMA LIDENT EQUAL • expr, COMMA / SEMI / LBRACE]
fn yy_state_402(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    T_LIDENT => Shift(yy_state_311)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_323)
    NT_pipe_expr => Shift(yy_state_346)
    NT_match_expr => Shift(yy_state_349)
    NT_if_expr => Shift(yy_state_350)
    NT_try_expr => Shift(yy_state_351)
    NT_while_expr => Shift(yy_state_352)
    NT_foreach_expr => Shift(yy_state_353)
    NT_for_expr => Shift(yy_state_354)
    NT_loop_expr => Shift(yy_state_355)
    T_MATCH => Shift(yy_state_356)
    T_IF => Shift(yy_state_373)
    T_TRY => Shift(yy_state_379)
    NT_loop_label_colon => Shift(yy_state_396)
    NT_expr => Shift(yy_state_403)
    T_POST_LABEL => Shift(yy_state_404)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_481)
    _ => Error
  }
}

// [624, non_empty_list_commas_rev(separated_pair(binder,EQUAL,expr)) → non_empty_list_commas_rev(separated_pair(binder,EQUAL,expr)) COMMA LIDENT EQUAL expr •, COMMA / SEMI / LBRACE]
fn yy_state_403(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_non_empty_list_commas_rev_separated_pair_binder_EQUAL_expr__, yy_action_333)
}

// [229, loop_label_colon → POST_LABEL • COLON, WHILE / LOOP / FOR]
fn yy_state_404(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_405)
    _ => Error
  }
}

// [229, loop_label_colon → POST_LABEL COLON •, WHILE / LOOP / FOR]
fn yy_state_405(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_loop_label_colon, yy_action_659)
}

// [519, non_empty_list_commas(foreach_binder) → non_empty_list_commas_rev(foreach_binder) • option(COMMA), IN]
// [533, option(COMMA) → •, IN]
// [534, option(COMMA) → • COMMA, IN]
// [591, non_empty_list_commas_rev(foreach_binder) → non_empty_list_commas_rev(foreach_binder) • COMMA foreach_binder, COMMA / IN]
fn yy_state_406(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COMMA => Shift(yy_state_407)
    NT_option_COMMA_ => Shift(yy_state_411)
    T_IN => Reduce(0, NT_option_COMMA_, yy_action_181)
    _ => Error
  }
}

// [252, foreach_binder → • LIDENT, COMMA / IN]
// [253, foreach_binder → • UNDERSCORE, COMMA / IN]
// [534, option(COMMA) → COMMA •, IN]
// [591, non_empty_list_commas_rev(foreach_binder) → non_empty_list_commas_rev(foreach_binder) COMMA • foreach_binder, COMMA / IN]
fn yy_state_407(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_foreach_binder => Shift(yy_state_408)
    T_UNDERSCORE => Shift(yy_state_409)
    T_LIDENT => Shift(yy_state_410)
    T_IN => Reduce(1, NT_option_COMMA_, yy_action_56)
    _ => Error
  }
}

// [591, non_empty_list_commas_rev(foreach_binder) → non_empty_list_commas_rev(foreach_binder) COMMA foreach_binder •, COMMA / IN]
fn yy_state_408(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_non_empty_list_commas_rev_foreach_binder_, yy_action_264)
}

// [253, foreach_binder → UNDERSCORE •, COMMA / IN]
fn yy_state_409(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_foreach_binder, yy_action_529)
}

// [252, foreach_binder → LIDENT •, COMMA / IN]
fn yy_state_410(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_foreach_binder, yy_action_317)
}

// [519, non_empty_list_commas(foreach_binder) → non_empty_list_commas_rev(foreach_binder) option(COMMA) •, IN]
fn yy_state_411(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_non_empty_list_commas_foreach_binder_, yy_action_507)
}

// [516, list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) → non_empty_list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) •, SEMI / LBRACE]
fn yy_state_412(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_list_commas_no_trailing_separated_pair_binder_EQUAL_expr__, yy_action_492)
}

// [252, foreach_binder → LIDENT •, COMMA / IN]
// [623, non_empty_list_commas_rev(separated_pair(binder,EQUAL,expr)) → LIDENT • EQUAL expr, COMMA / SEMI / LBRACE]
fn yy_state_413(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EQUAL => Shift(yy_state_414)
    T_COMMA | T_IN => Reduce(1, NT_foreach_binder, yy_action_317)
    _ => Error
  }
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [229, loop_label_colon → • POST_LABEL COLON, WHILE / LOOP / FOR]
// [230, loop_label_colon → •, WHILE / LOOP / FOR]
// [231, while_expr → • loop_label_colon WHILE infix_expr block_expr optional_else, COMMA / SEMI / LBRACE]
// [238, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE, COMMA / SEMI / LBRACE]
// [239, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE ELSE LBRACE single_pattern_cases RBRACE, COMMA / SEMI / LBRACE]
// [240, if_expr → • IF infix_expr block_expr ELSE block_expr, COMMA / SEMI / LBRACE]
// [241, if_expr → • IF infix_expr block_expr ELSE if_expr, COMMA / SEMI / LBRACE]
// [242, if_expr → • IF infix_expr block_expr, COMMA / SEMI / LBRACE]
// [243, match_expr → • MATCH infix_expr LBRACE non_empty_list_semis(single_pattern_case) RBRACE, COMMA / SEMI / LBRACE]
// [244, match_expr → • MATCH infix_expr LBRACE RBRACE, COMMA / SEMI / LBRACE]
// [245, loop_expr → • loop_label_colon LOOP non_empty_list_commas_no_trailing(expr) LBRACE list_semis(multi_pattern_case) RBRACE, COMMA / SEMI / LBRACE]
// [249, for_expr → • loop_label_colon FOR for_binders SEMI option(infix_expr) SEMI list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) block_expr optional_else, COMMA / SEMI / LBRACE]
// [250, for_expr → • loop_label_colon FOR for_binders block_expr optional_else, COMMA / SEMI / LBRACE]
// [251, foreach_expr → • loop_label_colon FOR non_empty_list_commas(foreach_binder) IN expr block_expr optional_else, COMMA / SEMI / LBRACE]
// [254, expr → • loop_expr, COMMA / SEMI / LBRACE]
// [255, expr → • for_expr, COMMA / SEMI / LBRACE]
// [256, expr → • foreach_expr, COMMA / SEMI / LBRACE]
// [257, expr → • while_expr, COMMA / SEMI / LBRACE]
// [258, expr → • try_expr, COMMA / SEMI / LBRACE]
// [259, expr → • if_expr, COMMA / SEMI / LBRACE]
// [260, expr → • match_expr, COMMA / SEMI / LBRACE]
// [261, expr → • pipe_expr, COMMA / SEMI / LBRACE]
// [262, pipe_expr → • pipe_expr PIPE infix_expr, COMMA / SEMI / LBRACE / PIPE]
// [263, pipe_expr → • infix_expr, COMMA / SEMI / LBRACE / PIPE]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [623, non_empty_list_commas_rev(separated_pair(binder,EQUAL,expr)) → LIDENT EQUAL • expr, COMMA / SEMI / LBRACE]
fn yy_state_414(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    T_LIDENT => Shift(yy_state_311)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_323)
    NT_pipe_expr => Shift(yy_state_346)
    NT_match_expr => Shift(yy_state_349)
    NT_if_expr => Shift(yy_state_350)
    NT_try_expr => Shift(yy_state_351)
    NT_while_expr => Shift(yy_state_352)
    NT_foreach_expr => Shift(yy_state_353)
    NT_for_expr => Shift(yy_state_354)
    NT_loop_expr => Shift(yy_state_355)
    T_MATCH => Shift(yy_state_356)
    T_IF => Shift(yy_state_373)
    T_TRY => Shift(yy_state_379)
    NT_loop_label_colon => Shift(yy_state_396)
    T_POST_LABEL => Shift(yy_state_404)
    NT_expr => Shift(yy_state_415)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_481)
    _ => Error
  }
}

// [623, non_empty_list_commas_rev(separated_pair(binder,EQUAL,expr)) → LIDENT EQUAL expr •, COMMA / SEMI / LBRACE]
fn yy_state_415(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_non_empty_list_commas_rev_separated_pair_binder_EQUAL_expr__, yy_action_135)
}

// [251, foreach_expr → loop_label_colon FOR non_empty_list_commas(foreach_binder) • IN expr block_expr optional_else, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
fn yy_state_416(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_IN => Shift(yy_state_417)
    _ => Error
  }
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [229, loop_label_colon → • POST_LABEL COLON, WHILE / LOOP / FOR]
// [230, loop_label_colon → •, WHILE / LOOP / FOR]
// [231, while_expr → • loop_label_colon WHILE infix_expr block_expr optional_else, LBRACE]
// [238, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE, LBRACE]
// [239, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE ELSE LBRACE single_pattern_cases RBRACE, LBRACE]
// [240, if_expr → • IF infix_expr block_expr ELSE block_expr, LBRACE]
// [241, if_expr → • IF infix_expr block_expr ELSE if_expr, LBRACE]
// [242, if_expr → • IF infix_expr block_expr, LBRACE]
// [243, match_expr → • MATCH infix_expr LBRACE non_empty_list_semis(single_pattern_case) RBRACE, LBRACE]
// [244, match_expr → • MATCH infix_expr LBRACE RBRACE, LBRACE]
// [245, loop_expr → • loop_label_colon LOOP non_empty_list_commas_no_trailing(expr) LBRACE list_semis(multi_pattern_case) RBRACE, LBRACE]
// [249, for_expr → • loop_label_colon FOR for_binders SEMI option(infix_expr) SEMI list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) block_expr optional_else, LBRACE]
// [250, for_expr → • loop_label_colon FOR for_binders block_expr optional_else, LBRACE]
// [251, foreach_expr → • loop_label_colon FOR non_empty_list_commas(foreach_binder) IN expr block_expr optional_else, LBRACE]
// [251, foreach_expr → loop_label_colon FOR non_empty_list_commas(foreach_binder) IN • expr block_expr optional_else, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
// [254, expr → • loop_expr, LBRACE]
// [255, expr → • for_expr, LBRACE]
// [256, expr → • foreach_expr, LBRACE]
// [257, expr → • while_expr, LBRACE]
// [258, expr → • try_expr, LBRACE]
// [259, expr → • if_expr, LBRACE]
// [260, expr → • match_expr, LBRACE]
// [261, expr → • pipe_expr, LBRACE]
// [262, pipe_expr → • pipe_expr PIPE infix_expr, LBRACE / PIPE]
// [263, pipe_expr → • infix_expr, LBRACE / PIPE]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_417(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    T_LIDENT => Shift(yy_state_311)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_323)
    NT_pipe_expr => Shift(yy_state_346)
    NT_match_expr => Shift(yy_state_349)
    NT_if_expr => Shift(yy_state_350)
    NT_try_expr => Shift(yy_state_351)
    NT_while_expr => Shift(yy_state_352)
    NT_foreach_expr => Shift(yy_state_353)
    NT_for_expr => Shift(yy_state_354)
    NT_loop_expr => Shift(yy_state_355)
    T_MATCH => Shift(yy_state_356)
    T_IF => Shift(yy_state_373)
    T_TRY => Shift(yy_state_379)
    NT_loop_label_colon => Shift(yy_state_396)
    T_POST_LABEL => Shift(yy_state_404)
    NT_expr => Shift(yy_state_418)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_481)
    _ => Error
  }
}

// [38, block_expr → • LBRACE list_semis_rev(statement) RBRACE, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / ELSE / FAT_ARROW]
// [251, foreach_expr → loop_label_colon FOR non_empty_list_commas(foreach_binder) IN expr • block_expr optional_else, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
fn yy_state_418(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACE => Shift(yy_state_250)
    NT_block_expr => Shift(yy_state_419)
    _ => Error
  }
}

// [247, optional_else → • ELSE block_expr, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
// [248, optional_else → •, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
// [251, foreach_expr → loop_label_colon FOR non_empty_list_commas(foreach_binder) IN expr block_expr • optional_else, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
fn yy_state_419(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_optional_else => Shift(yy_state_420)
    T_ELSE => Shift(yy_state_421)
    T_EOF | T_CATCH | T_RPAREN | T_COMMA | T_COLON | T_SEMI | T_RBRACKET | T_LBRACE | T_RBRACE | T_FAT_ARROW => Reduce(0, NT_optional_else, yy_action_681)
    _ => Error
  }
}

// [251, foreach_expr → loop_label_colon FOR non_empty_list_commas(foreach_binder) IN expr block_expr optional_else •, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
fn yy_state_420(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(7, NT_foreach_expr, yy_action_335)
}

// [38, block_expr → • LBRACE list_semis_rev(statement) RBRACE, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
// [247, optional_else → ELSE • block_expr, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
fn yy_state_421(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACE => Shift(yy_state_250)
    NT_block_expr => Shift(yy_state_422)
    _ => Error
  }
}

// [247, optional_else → ELSE block_expr •, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
fn yy_state_422(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_optional_else, yy_action_25)
}

// [38, block_expr → • LBRACE list_semis_rev(statement) RBRACE, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / ELSE / FAT_ARROW]
// [249, for_expr → loop_label_colon FOR for_binders • SEMI option(infix_expr) SEMI list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) block_expr optional_else, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
// [250, for_expr → loop_label_colon FOR for_binders • block_expr optional_else, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
fn yy_state_423(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACE => Shift(yy_state_250)
    NT_block_expr => Shift(yy_state_424)
    T_SEMI => Shift(yy_state_426)
    _ => Error
  }
}

// [247, optional_else → • ELSE block_expr, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
// [248, optional_else → •, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
// [250, for_expr → loop_label_colon FOR for_binders block_expr • optional_else, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
fn yy_state_424(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ELSE => Shift(yy_state_421)
    NT_optional_else => Shift(yy_state_425)
    T_EOF | T_CATCH | T_RPAREN | T_COMMA | T_COLON | T_SEMI | T_RBRACKET | T_LBRACE | T_RBRACE | T_FAT_ARROW => Reduce(0, NT_optional_else, yy_action_681)
    _ => Error
  }
}

// [250, for_expr → loop_label_colon FOR for_binders block_expr optional_else •, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
fn yy_state_425(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_for_expr, yy_action_141)
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [249, for_expr → loop_label_colon FOR for_binders SEMI • option(infix_expr) SEMI list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) block_expr optional_else, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [517, option(infix_expr) → •, SEMI]
// [518, option(infix_expr) → • infix_expr, SEMI]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_426(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    T_LIDENT => Shift(yy_state_311)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_427)
    NT_option_infix_expr_ => Shift(yy_state_428)
    T_SEMI => Reduce(0, NT_option_infix_expr_, yy_action_96)
    _ => Error
  }
}

// [264, infix_expr → infix_expr • INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR]
// [265, infix_expr → infix_expr • INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR]
// [266, infix_expr → infix_expr • INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR]
// [267, infix_expr → infix_expr • INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR]
// [268, infix_expr → infix_expr • PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR]
// [269, infix_expr → infix_expr • MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR]
// [270, infix_expr → infix_expr • AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR]
// [271, infix_expr → infix_expr • CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR]
// [272, infix_expr → infix_expr • BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR]
// [273, infix_expr → infix_expr • AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR]
// [274, infix_expr → infix_expr • BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR]
// [518, option(infix_expr) → infix_expr •, SEMI]
fn yy_state_427(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_BARBAR => Shift(yy_state_324)
    T_AMPERAMPER => Shift(yy_state_326)
    T_BAR => Shift(yy_state_328)
    T_CARET => Shift(yy_state_330)
    T_AMPER => Shift(yy_state_332)
    T_MINUS => Shift(yy_state_334)
    T_PLUS => Shift(yy_state_336)
    T_INFIX1 => Shift(yy_state_338)
    T_INFIX2 => Shift(yy_state_340)
    T_INFIX3 => Shift(yy_state_342)
    T_INFIX4 => Shift(yy_state_344)
    T_SEMI => Reduce(1, NT_option_infix_expr_, yy_action_232)
    _ => Error
  }
}

// [249, for_expr → loop_label_colon FOR for_binders SEMI option(infix_expr) • SEMI list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) block_expr optional_else, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
fn yy_state_428(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_SEMI => Shift(yy_state_429)
    _ => Error
  }
}

// [249, for_expr → loop_label_colon FOR for_binders SEMI option(infix_expr) SEMI • list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) block_expr optional_else, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
// [515, list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) → •, LBRACE]
// [516, list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) → • non_empty_list_commas_no_trailing(separated_pair(binder,EQUAL,expr)), LBRACE]
// [589, non_empty_list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) → • non_empty_list_commas_rev(separated_pair(binder,EQUAL,expr)), LBRACE]
// [623, non_empty_list_commas_rev(separated_pair(binder,EQUAL,expr)) → • LIDENT EQUAL expr, COMMA / LBRACE]
// [624, non_empty_list_commas_rev(separated_pair(binder,EQUAL,expr)) → • non_empty_list_commas_rev(separated_pair(binder,EQUAL,expr)) COMMA LIDENT EQUAL expr, COMMA / LBRACE]
fn yy_state_429(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_non_empty_list_commas_rev_separated_pair_binder_EQUAL_expr__ => Shift(yy_state_399)
    NT_non_empty_list_commas_no_trailing_separated_pair_binder_EQUAL_expr__ => Shift(yy_state_412)
    T_LIDENT => Shift(yy_state_430)
    NT_list_commas_no_trailing_separated_pair_binder_EQUAL_expr__ => Shift(yy_state_431)
    T_LBRACE => Reduce(0, NT_list_commas_no_trailing_separated_pair_binder_EQUAL_expr__, yy_action_72)
    _ => Error
  }
}

// [623, non_empty_list_commas_rev(separated_pair(binder,EQUAL,expr)) → LIDENT • EQUAL expr, COMMA / LBRACE]
fn yy_state_430(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EQUAL => Shift(yy_state_414)
    _ => Error
  }
}

// [38, block_expr → • LBRACE list_semis_rev(statement) RBRACE, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / ELSE / FAT_ARROW]
// [249, for_expr → loop_label_colon FOR for_binders SEMI option(infix_expr) SEMI list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) • block_expr optional_else, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
fn yy_state_431(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACE => Shift(yy_state_250)
    NT_block_expr => Shift(yy_state_432)
    _ => Error
  }
}

// [247, optional_else → • ELSE block_expr, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
// [248, optional_else → •, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
// [249, for_expr → loop_label_colon FOR for_binders SEMI option(infix_expr) SEMI list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) block_expr • optional_else, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
fn yy_state_432(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ELSE => Shift(yy_state_421)
    NT_optional_else => Shift(yy_state_433)
    T_EOF | T_CATCH | T_RPAREN | T_COMMA | T_COLON | T_SEMI | T_RBRACKET | T_LBRACE | T_RBRACE | T_FAT_ARROW => Reduce(0, NT_optional_else, yy_action_681)
    _ => Error
  }
}

// [249, for_expr → loop_label_colon FOR for_binders SEMI option(infix_expr) SEMI list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) block_expr optional_else •, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
fn yy_state_433(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(9, NT_for_expr, yy_action_654)
}

// [246, for_binders → list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) •, SEMI / LBRACE]
fn yy_state_434(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_for_binders, yy_action_205)
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [229, loop_label_colon → • POST_LABEL COLON, WHILE / LOOP / FOR]
// [230, loop_label_colon → •, WHILE / LOOP / FOR]
// [231, while_expr → • loop_label_colon WHILE infix_expr block_expr optional_else, COMMA / LBRACE]
// [238, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE, COMMA / LBRACE]
// [239, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE ELSE LBRACE single_pattern_cases RBRACE, COMMA / LBRACE]
// [240, if_expr → • IF infix_expr block_expr ELSE block_expr, COMMA / LBRACE]
// [241, if_expr → • IF infix_expr block_expr ELSE if_expr, COMMA / LBRACE]
// [242, if_expr → • IF infix_expr block_expr, COMMA / LBRACE]
// [243, match_expr → • MATCH infix_expr LBRACE non_empty_list_semis(single_pattern_case) RBRACE, COMMA / LBRACE]
// [244, match_expr → • MATCH infix_expr LBRACE RBRACE, COMMA / LBRACE]
// [245, loop_expr → • loop_label_colon LOOP non_empty_list_commas_no_trailing(expr) LBRACE list_semis(multi_pattern_case) RBRACE, COMMA / LBRACE]
// [245, loop_expr → loop_label_colon LOOP • non_empty_list_commas_no_trailing(expr) LBRACE list_semis(multi_pattern_case) RBRACE, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
// [249, for_expr → • loop_label_colon FOR for_binders SEMI option(infix_expr) SEMI list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) block_expr optional_else, COMMA / LBRACE]
// [250, for_expr → • loop_label_colon FOR for_binders block_expr optional_else, COMMA / LBRACE]
// [251, foreach_expr → • loop_label_colon FOR non_empty_list_commas(foreach_binder) IN expr block_expr optional_else, COMMA / LBRACE]
// [254, expr → • loop_expr, COMMA / LBRACE]
// [255, expr → • for_expr, COMMA / LBRACE]
// [256, expr → • foreach_expr, COMMA / LBRACE]
// [257, expr → • while_expr, COMMA / LBRACE]
// [258, expr → • try_expr, COMMA / LBRACE]
// [259, expr → • if_expr, COMMA / LBRACE]
// [260, expr → • match_expr, COMMA / LBRACE]
// [261, expr → • pipe_expr, COMMA / LBRACE]
// [262, pipe_expr → • pipe_expr PIPE infix_expr, COMMA / LBRACE / PIPE]
// [263, pipe_expr → • infix_expr, COMMA / LBRACE / PIPE]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [514, non_empty_list_commas_no_trailing(expr) → • non_empty_list_commas_rev(expr), LBRACE]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [587, non_empty_list_commas_rev(expr) → • expr, COMMA / LBRACE]
// [588, non_empty_list_commas_rev(expr) → • non_empty_list_commas_rev(expr) COMMA expr, COMMA / LBRACE]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_435(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    T_LIDENT => Shift(yy_state_311)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_323)
    NT_pipe_expr => Shift(yy_state_346)
    NT_match_expr => Shift(yy_state_349)
    NT_if_expr => Shift(yy_state_350)
    NT_try_expr => Shift(yy_state_351)
    NT_while_expr => Shift(yy_state_352)
    NT_foreach_expr => Shift(yy_state_353)
    NT_for_expr => Shift(yy_state_354)
    NT_loop_expr => Shift(yy_state_355)
    T_MATCH => Shift(yy_state_356)
    T_IF => Shift(yy_state_373)
    T_TRY => Shift(yy_state_379)
    NT_loop_label_colon => Shift(yy_state_396)
    T_POST_LABEL => Shift(yy_state_404)
    NT_expr => Shift(yy_state_436)
    NT_non_empty_list_commas_rev_expr_ => Shift(yy_state_437)
    NT_non_empty_list_commas_no_trailing_expr_ => Shift(yy_state_439)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_481)
    _ => Error
  }
}

// [587, non_empty_list_commas_rev(expr) → expr •, COMMA / SEMI / LBRACE / RBRACE]
fn yy_state_436(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_non_empty_list_commas_rev_expr_, yy_action_40)
}

// [514, non_empty_list_commas_no_trailing(expr) → non_empty_list_commas_rev(expr) •, SEMI / LBRACE / RBRACE]
// [588, non_empty_list_commas_rev(expr) → non_empty_list_commas_rev(expr) • COMMA expr, COMMA / SEMI / LBRACE / RBRACE]
fn yy_state_437(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COMMA => Shift(yy_state_438)
    T_SEMI | T_LBRACE | T_RBRACE => Reduce(1, NT_non_empty_list_commas_no_trailing_expr_, yy_action_465)
    _ => Error
  }
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [229, loop_label_colon → • POST_LABEL COLON, WHILE / LOOP / FOR]
// [230, loop_label_colon → •, WHILE / LOOP / FOR]
// [231, while_expr → • loop_label_colon WHILE infix_expr block_expr optional_else, COMMA / SEMI / LBRACE / RBRACE]
// [238, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE, COMMA / SEMI / LBRACE / RBRACE]
// [239, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE ELSE LBRACE single_pattern_cases RBRACE, COMMA / SEMI / LBRACE / RBRACE]
// [240, if_expr → • IF infix_expr block_expr ELSE block_expr, COMMA / SEMI / LBRACE / RBRACE]
// [241, if_expr → • IF infix_expr block_expr ELSE if_expr, COMMA / SEMI / LBRACE / RBRACE]
// [242, if_expr → • IF infix_expr block_expr, COMMA / SEMI / LBRACE / RBRACE]
// [243, match_expr → • MATCH infix_expr LBRACE non_empty_list_semis(single_pattern_case) RBRACE, COMMA / SEMI / LBRACE / RBRACE]
// [244, match_expr → • MATCH infix_expr LBRACE RBRACE, COMMA / SEMI / LBRACE / RBRACE]
// [245, loop_expr → • loop_label_colon LOOP non_empty_list_commas_no_trailing(expr) LBRACE list_semis(multi_pattern_case) RBRACE, COMMA / SEMI / LBRACE / RBRACE]
// [249, for_expr → • loop_label_colon FOR for_binders SEMI option(infix_expr) SEMI list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) block_expr optional_else, COMMA / SEMI / LBRACE / RBRACE]
// [250, for_expr → • loop_label_colon FOR for_binders block_expr optional_else, COMMA / SEMI / LBRACE / RBRACE]
// [251, foreach_expr → • loop_label_colon FOR non_empty_list_commas(foreach_binder) IN expr block_expr optional_else, COMMA / SEMI / LBRACE / RBRACE]
// [254, expr → • loop_expr, COMMA / SEMI / LBRACE / RBRACE]
// [255, expr → • for_expr, COMMA / SEMI / LBRACE / RBRACE]
// [256, expr → • foreach_expr, COMMA / SEMI / LBRACE / RBRACE]
// [257, expr → • while_expr, COMMA / SEMI / LBRACE / RBRACE]
// [258, expr → • try_expr, COMMA / SEMI / LBRACE / RBRACE]
// [259, expr → • if_expr, COMMA / SEMI / LBRACE / RBRACE]
// [260, expr → • match_expr, COMMA / SEMI / LBRACE / RBRACE]
// [261, expr → • pipe_expr, COMMA / SEMI / LBRACE / RBRACE]
// [262, pipe_expr → • pipe_expr PIPE infix_expr, COMMA / SEMI / LBRACE / RBRACE / PIPE]
// [263, pipe_expr → • infix_expr, COMMA / SEMI / LBRACE / RBRACE / PIPE]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [588, non_empty_list_commas_rev(expr) → non_empty_list_commas_rev(expr) COMMA • expr, COMMA / SEMI / LBRACE / RBRACE]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_438(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_expr => Shift(yy_state_39)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    T_LIDENT => Shift(yy_state_311)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_323)
    NT_pipe_expr => Shift(yy_state_346)
    NT_match_expr => Shift(yy_state_349)
    NT_if_expr => Shift(yy_state_350)
    NT_try_expr => Shift(yy_state_351)
    NT_while_expr => Shift(yy_state_352)
    NT_foreach_expr => Shift(yy_state_353)
    NT_for_expr => Shift(yy_state_354)
    NT_loop_expr => Shift(yy_state_355)
    T_MATCH => Shift(yy_state_356)
    T_IF => Shift(yy_state_373)
    T_TRY => Shift(yy_state_379)
    NT_loop_label_colon => Shift(yy_state_396)
    T_POST_LABEL => Shift(yy_state_404)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_481)
    _ => Error
  }
}

// [245, loop_expr → loop_label_colon LOOP non_empty_list_commas_no_trailing(expr) • LBRACE list_semis(multi_pattern_case) RBRACE, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
fn yy_state_439(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACE => Shift(yy_state_440)
    _ => Error
  }
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [234, multi_pattern_case → • non_empty_list_commas(pattern) option(preceded(IF,expr)) FAT_ARROW expr_statement, SEMI / RBRACE]
// [245, loop_expr → loop_label_colon LOOP non_empty_list_commas_no_trailing(expr) LBRACE • list_semis(multi_pattern_case) RBRACE, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
// [289, constr → • UIDENT, LPAREN / COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, LPAREN / COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [291, constr → • type_name COLONCOLON UIDENT, LPAREN / COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [362, pattern → • pattern AS LIDENT, COMMA / AS / IF / FAT_ARROW]
// [363, pattern → • or_pattern, COMMA / AS / IF / FAT_ARROW]
// [364, or_pattern → • range_pattern BAR or_pattern, COMMA / AS / IF / FAT_ARROW]
// [365, or_pattern → • range_pattern, COMMA / AS / IF / FAT_ARROW]
// [366, range_pattern → • simple_pattern RANGE_EXCLUSIVE simple_pattern, COMMA / BAR / AS / IF / FAT_ARROW]
// [367, range_pattern → • simple_pattern RANGE_INCLUSIVE simple_pattern, COMMA / BAR / AS / IF / FAT_ARROW]
// [368, range_pattern → • simple_pattern, COMMA / BAR / AS / IF / FAT_ARROW]
// [369, simple_pattern → • TRUE, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [370, simple_pattern → • FALSE, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [371, simple_pattern → • CHAR, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [372, simple_pattern → • INT, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [373, simple_pattern → • BYTE, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [374, simple_pattern → • FLOAT, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [375, simple_pattern → • MINUS INT, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [376, simple_pattern → • MINUS FLOAT, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [377, simple_pattern → • STRING, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [378, simple_pattern → • BYTES, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [379, simple_pattern → • UNDERSCORE, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [380, simple_pattern → • LIDENT, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [381, simple_pattern → • constr option(delimited(LPAREN,constr_pat_arguments,RPAREN)), COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [382, simple_pattern → • LPAREN pattern RPAREN, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [383, simple_pattern → • LPAREN pattern COMMA non_empty_list_commas(pattern) RPAREN, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [384, simple_pattern → • LPAREN pattern COLON type_ RPAREN, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [385, simple_pattern → • LBRACKET array_sub_patterns RBRACKET, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [386, simple_pattern → • LBRACE RBRACE, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [387, simple_pattern → • LBRACE DOTDOT option(COMMA) RBRACE, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [388, simple_pattern → • LBRACE non_empty_fields_pat RBRACE, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [389, simple_pattern → • LBRACE non_empty_map_elems_pat RBRACE, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [502, list_semis(multi_pattern_case) → •, RBRACE]
// [503, list_semis(multi_pattern_case) → • non_empty_list_semis(multi_pattern_case), RBRACE]
// [512, non_empty_list_commas(pattern) → • non_empty_list_commas_rev(pattern) option(COMMA), IF / FAT_ARROW]
// [583, non_empty_list_semis(multi_pattern_case) → • non_empty_list_semis_rev(multi_pattern_case), RBRACE]
// [584, non_empty_list_commas_rev(pattern) → • pattern, COMMA / IF / FAT_ARROW]
// [585, non_empty_list_commas_rev(pattern) → • non_empty_list_commas_rev(pattern) COMMA pattern, COMMA / IF / FAT_ARROW]
// [620, non_empty_list_semis_rev(multi_pattern_case) → • non_empty_list_semi_rev_aux(multi_pattern_case) option(SEMI), RBRACE]
// [637, non_empty_list_semi_rev_aux(multi_pattern_case) → • multi_pattern_case, SEMI / RBRACE]
// [638, non_empty_list_semi_rev_aux(multi_pattern_case) → • non_empty_list_semi_rev_aux(multi_pattern_case) SEMI multi_pattern_case, SEMI / RBRACE]
fn yy_state_440(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    NT_multi_pattern_case => Shift(yy_state_45)
    NT_non_empty_list_semi_rev_aux_multi_pattern_case_ => Shift(yy_state_46)
    NT_non_empty_list_commas_rev_pattern_ => Shift(yy_state_50)
    T_LBRACE => Shift(yy_state_52)
    T_LBRACKET => Shift(yy_state_56)
    T_LPAREN => Shift(yy_state_70)
    NT_constr => Shift(yy_state_71)
    T_UNDERSCORE => Shift(yy_state_82)
    T_BYTES => Shift(yy_state_83)
    T_STRING => Shift(yy_state_84)
    T_MINUS => Shift(yy_state_85)
    T_FLOAT => Shift(yy_state_88)
    T_BYTE => Shift(yy_state_89)
    T_INT => Shift(yy_state_90)
    T_CHAR => Shift(yy_state_91)
    T_FALSE => Shift(yy_state_92)
    T_TRUE => Shift(yy_state_93)
    NT_simple_pattern => Shift(yy_state_94)
    NT_type_name => Shift(yy_state_97)
    T_PACKAGE_NAME => Shift(yy_state_100)
    T_UIDENT => Shift(yy_state_102)
    T_LIDENT => Shift(yy_state_103)
    NT_range_pattern => Shift(yy_state_106)
    NT_or_pattern => Shift(yy_state_109)
    NT_pattern => Shift(yy_state_181)
    NT_non_empty_list_commas_pattern_ => Shift(yy_state_234)
    NT_non_empty_list_semis_rev_multi_pattern_case_ => Shift(yy_state_239)
    NT_non_empty_list_semis_multi_pattern_case_ => Shift(yy_state_240)
    NT_list_semis_multi_pattern_case_ => Shift(yy_state_441)
    T_RBRACE => Reduce(0, NT_list_semis_multi_pattern_case_, yy_action_98)
    _ => Error
  }
}

// [245, loop_expr → loop_label_colon LOOP non_empty_list_commas_no_trailing(expr) LBRACE list_semis(multi_pattern_case) • RBRACE, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
fn yy_state_441(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACE => Shift(yy_state_442)
    _ => Error
  }
}

// [245, loop_expr → loop_label_colon LOOP non_empty_list_commas_no_trailing(expr) LBRACE list_semis(multi_pattern_case) RBRACE •, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
fn yy_state_442(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(6, NT_loop_expr, yy_action_90)
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [231, while_expr → loop_label_colon WHILE • infix_expr block_expr optional_else, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_443(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    T_LIDENT => Shift(yy_state_311)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_444)
    _ => Error
  }
}

// [38, block_expr → • LBRACE list_semis_rev(statement) RBRACE, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / ELSE / FAT_ARROW]
// [231, while_expr → loop_label_colon WHILE infix_expr • block_expr optional_else, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
// [264, infix_expr → infix_expr • INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [265, infix_expr → infix_expr • INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [266, infix_expr → infix_expr • INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [267, infix_expr → infix_expr • INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [268, infix_expr → infix_expr • PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [269, infix_expr → infix_expr • MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [270, infix_expr → infix_expr • AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [271, infix_expr → infix_expr • CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [272, infix_expr → infix_expr • BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [273, infix_expr → infix_expr • AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
// [274, infix_expr → infix_expr • BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / BAR / LBRACE / AMPERAMPER / AMPER / CARET / BARBAR]
fn yy_state_444(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACE => Shift(yy_state_250)
    T_BARBAR => Shift(yy_state_324)
    T_AMPERAMPER => Shift(yy_state_326)
    T_BAR => Shift(yy_state_328)
    T_CARET => Shift(yy_state_330)
    T_AMPER => Shift(yy_state_332)
    T_MINUS => Shift(yy_state_334)
    T_PLUS => Shift(yy_state_336)
    T_INFIX1 => Shift(yy_state_338)
    T_INFIX2 => Shift(yy_state_340)
    T_INFIX3 => Shift(yy_state_342)
    T_INFIX4 => Shift(yy_state_344)
    NT_block_expr => Shift(yy_state_445)
    _ => Error
  }
}

// [231, while_expr → loop_label_colon WHILE infix_expr block_expr • optional_else, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
// [247, optional_else → • ELSE block_expr, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
// [248, optional_else → •, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
fn yy_state_445(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ELSE => Shift(yy_state_421)
    NT_optional_else => Shift(yy_state_446)
    T_EOF | T_CATCH | T_RPAREN | T_COMMA | T_COLON | T_SEMI | T_RBRACKET | T_LBRACE | T_RBRACE | T_FAT_ARROW => Reduce(0, NT_optional_else, yy_action_681)
    _ => Error
  }
}

// [231, while_expr → loop_label_colon WHILE infix_expr block_expr optional_else •, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
fn yy_state_446(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_while_expr, yy_action_617)
}

// [229, loop_label_colon → POST_LABEL • COLON, WHILE / LOOP / FOR]
// [357, argument → POST_LABEL •, RPAREN / COMMA]
fn yy_state_447(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_405)
    T_RPAREN | T_COMMA => Reduce(1, NT_argument, yy_action_211)
    _ => Error
  }
}

// [192, luident → LIDENT •, COLONCOLON]
// [196, qual_ident_simple_expr → LIDENT •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → LIDENT • QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [353, optional_question → • QUESTION, EQUAL]
// [354, optional_question → •, EQUAL]
// [355, argument → LIDENT • optional_question EQUAL expr, RPAREN / COMMA]
// [358, argument → LIDENT • QUESTION, RPAREN / COMMA]
fn yy_state_448(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_optional_question => Shift(yy_state_449)
    T_QUESTION => Shift(yy_state_452)
    T_EQUAL => Reduce(0, NT_optional_question, yy_action_260)
    T_COLONCOLON => Reduce(1, NT_luident, yy_action_155)
    T_INFIX1 | T_INFIX2 | T_INFIX3 | T_INFIX4 | T_LPAREN | T_RPAREN | T_COMMA | T_MINUS | T_EXCLAMATION | T_DOT_LIDENT | T_DOT_INT | T_LBRACKET | T_PLUS | T_BAR | T_AMPERAMPER | T_AMPER | T_CARET | T_BARBAR | T_AS | T_PIPE | T_DOTDOT | T_RANGE_INCLUSIVE | T_RANGE_EXCLUSIVE | T_IS => Reduce(1, NT_qual_ident_simple_expr, yy_action_653)
    _ => Error
  }
}

// [355, argument → LIDENT optional_question • EQUAL expr, RPAREN / COMMA]
fn yy_state_449(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EQUAL => Shift(yy_state_450)
    _ => Error
  }
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [229, loop_label_colon → • POST_LABEL COLON, WHILE / LOOP / FOR]
// [230, loop_label_colon → •, WHILE / LOOP / FOR]
// [231, while_expr → • loop_label_colon WHILE infix_expr block_expr optional_else, RPAREN / COMMA]
// [238, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE, RPAREN / COMMA]
// [239, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE ELSE LBRACE single_pattern_cases RBRACE, RPAREN / COMMA]
// [240, if_expr → • IF infix_expr block_expr ELSE block_expr, RPAREN / COMMA]
// [241, if_expr → • IF infix_expr block_expr ELSE if_expr, RPAREN / COMMA]
// [242, if_expr → • IF infix_expr block_expr, RPAREN / COMMA]
// [243, match_expr → • MATCH infix_expr LBRACE non_empty_list_semis(single_pattern_case) RBRACE, RPAREN / COMMA]
// [244, match_expr → • MATCH infix_expr LBRACE RBRACE, RPAREN / COMMA]
// [245, loop_expr → • loop_label_colon LOOP non_empty_list_commas_no_trailing(expr) LBRACE list_semis(multi_pattern_case) RBRACE, RPAREN / COMMA]
// [249, for_expr → • loop_label_colon FOR for_binders SEMI option(infix_expr) SEMI list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) block_expr optional_else, RPAREN / COMMA]
// [250, for_expr → • loop_label_colon FOR for_binders block_expr optional_else, RPAREN / COMMA]
// [251, foreach_expr → • loop_label_colon FOR non_empty_list_commas(foreach_binder) IN expr block_expr optional_else, RPAREN / COMMA]
// [254, expr → • loop_expr, RPAREN / COMMA]
// [255, expr → • for_expr, RPAREN / COMMA]
// [256, expr → • foreach_expr, RPAREN / COMMA]
// [257, expr → • while_expr, RPAREN / COMMA]
// [258, expr → • try_expr, RPAREN / COMMA]
// [259, expr → • if_expr, RPAREN / COMMA]
// [260, expr → • match_expr, RPAREN / COMMA]
// [261, expr → • pipe_expr, RPAREN / COMMA]
// [262, pipe_expr → • pipe_expr PIPE infix_expr, RPAREN / COMMA / PIPE]
// [263, pipe_expr → • infix_expr, RPAREN / COMMA / PIPE]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [355, argument → LIDENT optional_question EQUAL • expr, RPAREN / COMMA]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_450(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    T_LIDENT => Shift(yy_state_311)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_323)
    NT_pipe_expr => Shift(yy_state_346)
    NT_match_expr => Shift(yy_state_349)
    NT_if_expr => Shift(yy_state_350)
    NT_try_expr => Shift(yy_state_351)
    NT_while_expr => Shift(yy_state_352)
    NT_foreach_expr => Shift(yy_state_353)
    NT_for_expr => Shift(yy_state_354)
    NT_loop_expr => Shift(yy_state_355)
    T_MATCH => Shift(yy_state_356)
    T_IF => Shift(yy_state_373)
    T_TRY => Shift(yy_state_379)
    NT_loop_label_colon => Shift(yy_state_396)
    T_POST_LABEL => Shift(yy_state_404)
    NT_expr => Shift(yy_state_451)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_481)
    _ => Error
  }
}

// [355, argument → LIDENT optional_question EQUAL expr •, RPAREN / COMMA]
fn yy_state_451(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_argument, yy_action_294)
}

// [308, simple_expr → LIDENT QUESTION • LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [353, optional_question → QUESTION •, EQUAL]
// [358, argument → LIDENT QUESTION •, RPAREN / COMMA]
fn yy_state_452(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_313)
    T_EQUAL => Reduce(1, NT_optional_question, yy_action_415)
    T_RPAREN | T_COMMA => Reduce(2, NT_argument, yy_action_173)
    _ => Error
  }
}

// [310, simple_expr → simple_expr EXCLAMATION • LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → simple_expr EXCLAMATION • EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_453(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EXCLAMATION => Shift(yy_state_454)
    T_LPAREN => Shift(yy_state_458)
    _ => Error
  }
}

// [311, simple_expr → simple_expr EXCLAMATION EXCLAMATION • LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_454(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_455)
    _ => Error
  }
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [229, loop_label_colon → • POST_LABEL COLON, WHILE / LOOP / FOR]
// [230, loop_label_colon → •, WHILE / LOOP / FOR]
// [231, while_expr → • loop_label_colon WHILE infix_expr block_expr optional_else, RPAREN / COMMA]
// [238, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE, RPAREN / COMMA]
// [239, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE ELSE LBRACE single_pattern_cases RBRACE, RPAREN / COMMA]
// [240, if_expr → • IF infix_expr block_expr ELSE block_expr, RPAREN / COMMA]
// [241, if_expr → • IF infix_expr block_expr ELSE if_expr, RPAREN / COMMA]
// [242, if_expr → • IF infix_expr block_expr, RPAREN / COMMA]
// [243, match_expr → • MATCH infix_expr LBRACE non_empty_list_semis(single_pattern_case) RBRACE, RPAREN / COMMA]
// [244, match_expr → • MATCH infix_expr LBRACE RBRACE, RPAREN / COMMA]
// [245, loop_expr → • loop_label_colon LOOP non_empty_list_commas_no_trailing(expr) LBRACE list_semis(multi_pattern_case) RBRACE, RPAREN / COMMA]
// [249, for_expr → • loop_label_colon FOR for_binders SEMI option(infix_expr) SEMI list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) block_expr optional_else, RPAREN / COMMA]
// [250, for_expr → • loop_label_colon FOR for_binders block_expr optional_else, RPAREN / COMMA]
// [251, foreach_expr → • loop_label_colon FOR non_empty_list_commas(foreach_binder) IN expr block_expr optional_else, RPAREN / COMMA]
// [254, expr → • loop_expr, RPAREN / COMMA]
// [255, expr → • for_expr, RPAREN / COMMA]
// [256, expr → • foreach_expr, RPAREN / COMMA]
// [257, expr → • while_expr, RPAREN / COMMA]
// [258, expr → • try_expr, RPAREN / COMMA]
// [259, expr → • if_expr, RPAREN / COMMA]
// [260, expr → • match_expr, RPAREN / COMMA]
// [261, expr → • pipe_expr, RPAREN / COMMA]
// [262, pipe_expr → • pipe_expr PIPE infix_expr, RPAREN / COMMA / PIPE]
// [263, pipe_expr → • infix_expr, RPAREN / COMMA / PIPE]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → simple_expr EXCLAMATION EXCLAMATION LPAREN • list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [355, argument → • LIDENT optional_question EQUAL expr, RPAREN / COMMA]
// [356, argument → • expr, RPAREN / COMMA]
// [357, argument → • POST_LABEL, RPAREN / COMMA]
// [358, argument → • LIDENT QUESTION, RPAREN / COMMA]
// [493, list_commas(argument) → •, RPAREN]
// [494, list_commas(argument) → • non_empty_list_commas(argument), RPAREN]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [576, non_empty_list_commas(argument) → • non_empty_list_commas_rev(argument) option(COMMA), RPAREN]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [614, non_empty_list_commas_rev(argument) → • argument, RPAREN / COMMA]
// [615, non_empty_list_commas_rev(argument) → • non_empty_list_commas_rev(argument) COMMA argument, RPAREN / COMMA]
fn yy_state_455(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    NT_argument => Shift(yy_state_282)
    NT_non_empty_list_commas_rev_argument_ => Shift(yy_state_283)
    NT_expr => Shift(yy_state_287)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    NT_non_empty_list_commas_argument_ => Shift(yy_state_314)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_323)
    NT_pipe_expr => Shift(yy_state_346)
    NT_match_expr => Shift(yy_state_349)
    NT_if_expr => Shift(yy_state_350)
    NT_try_expr => Shift(yy_state_351)
    NT_while_expr => Shift(yy_state_352)
    NT_foreach_expr => Shift(yy_state_353)
    NT_for_expr => Shift(yy_state_354)
    NT_loop_expr => Shift(yy_state_355)
    T_MATCH => Shift(yy_state_356)
    T_IF => Shift(yy_state_373)
    T_TRY => Shift(yy_state_379)
    NT_loop_label_colon => Shift(yy_state_396)
    T_POST_LABEL => Shift(yy_state_447)
    T_LIDENT => Shift(yy_state_448)
    NT_list_commas_argument_ => Shift(yy_state_456)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_481)
    T_RPAREN => Reduce(0, NT_list_commas_argument_, yy_action_394)
    _ => Error
  }
}

// [311, simple_expr → simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) • RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_456(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RPAREN => Shift(yy_state_457)
    _ => Error
  }
}

// [311, simple_expr → simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_457(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(6, NT_simple_expr, yy_action_429)
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [229, loop_label_colon → • POST_LABEL COLON, WHILE / LOOP / FOR]
// [230, loop_label_colon → •, WHILE / LOOP / FOR]
// [231, while_expr → • loop_label_colon WHILE infix_expr block_expr optional_else, RPAREN / COMMA]
// [238, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE, RPAREN / COMMA]
// [239, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE ELSE LBRACE single_pattern_cases RBRACE, RPAREN / COMMA]
// [240, if_expr → • IF infix_expr block_expr ELSE block_expr, RPAREN / COMMA]
// [241, if_expr → • IF infix_expr block_expr ELSE if_expr, RPAREN / COMMA]
// [242, if_expr → • IF infix_expr block_expr, RPAREN / COMMA]
// [243, match_expr → • MATCH infix_expr LBRACE non_empty_list_semis(single_pattern_case) RBRACE, RPAREN / COMMA]
// [244, match_expr → • MATCH infix_expr LBRACE RBRACE, RPAREN / COMMA]
// [245, loop_expr → • loop_label_colon LOOP non_empty_list_commas_no_trailing(expr) LBRACE list_semis(multi_pattern_case) RBRACE, RPAREN / COMMA]
// [249, for_expr → • loop_label_colon FOR for_binders SEMI option(infix_expr) SEMI list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) block_expr optional_else, RPAREN / COMMA]
// [250, for_expr → • loop_label_colon FOR for_binders block_expr optional_else, RPAREN / COMMA]
// [251, foreach_expr → • loop_label_colon FOR non_empty_list_commas(foreach_binder) IN expr block_expr optional_else, RPAREN / COMMA]
// [254, expr → • loop_expr, RPAREN / COMMA]
// [255, expr → • for_expr, RPAREN / COMMA]
// [256, expr → • foreach_expr, RPAREN / COMMA]
// [257, expr → • while_expr, RPAREN / COMMA]
// [258, expr → • try_expr, RPAREN / COMMA]
// [259, expr → • if_expr, RPAREN / COMMA]
// [260, expr → • match_expr, RPAREN / COMMA]
// [261, expr → • pipe_expr, RPAREN / COMMA]
// [262, pipe_expr → • pipe_expr PIPE infix_expr, RPAREN / COMMA / PIPE]
// [263, pipe_expr → • infix_expr, RPAREN / COMMA / PIPE]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → simple_expr EXCLAMATION LPAREN • list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [355, argument → • LIDENT optional_question EQUAL expr, RPAREN / COMMA]
// [356, argument → • expr, RPAREN / COMMA]
// [357, argument → • POST_LABEL, RPAREN / COMMA]
// [358, argument → • LIDENT QUESTION, RPAREN / COMMA]
// [493, list_commas(argument) → •, RPAREN]
// [494, list_commas(argument) → • non_empty_list_commas(argument), RPAREN]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [576, non_empty_list_commas(argument) → • non_empty_list_commas_rev(argument) option(COMMA), RPAREN]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [614, non_empty_list_commas_rev(argument) → • argument, RPAREN / COMMA]
// [615, non_empty_list_commas_rev(argument) → • non_empty_list_commas_rev(argument) COMMA argument, RPAREN / COMMA]
fn yy_state_458(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    NT_argument => Shift(yy_state_282)
    NT_non_empty_list_commas_rev_argument_ => Shift(yy_state_283)
    NT_expr => Shift(yy_state_287)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    NT_non_empty_list_commas_argument_ => Shift(yy_state_314)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_323)
    NT_pipe_expr => Shift(yy_state_346)
    NT_match_expr => Shift(yy_state_349)
    NT_if_expr => Shift(yy_state_350)
    NT_try_expr => Shift(yy_state_351)
    NT_while_expr => Shift(yy_state_352)
    NT_foreach_expr => Shift(yy_state_353)
    NT_for_expr => Shift(yy_state_354)
    NT_loop_expr => Shift(yy_state_355)
    T_MATCH => Shift(yy_state_356)
    T_IF => Shift(yy_state_373)
    T_TRY => Shift(yy_state_379)
    NT_loop_label_colon => Shift(yy_state_396)
    T_POST_LABEL => Shift(yy_state_447)
    T_LIDENT => Shift(yy_state_448)
    NT_list_commas_argument_ => Shift(yy_state_459)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_481)
    T_RPAREN => Reduce(0, NT_list_commas_argument_, yy_action_394)
    _ => Error
  }
}

// [310, simple_expr → simple_expr EXCLAMATION LPAREN list_commas(argument) • RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_459(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RPAREN => Shift(yy_state_460)
    _ => Error
  }
}

// [310, simple_expr → simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_460(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_simple_expr, yy_action_159)
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [229, loop_label_colon → • POST_LABEL COLON, WHILE / LOOP / FOR]
// [230, loop_label_colon → •, WHILE / LOOP / FOR]
// [231, while_expr → • loop_label_colon WHILE infix_expr block_expr optional_else, RPAREN / COMMA]
// [238, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE, RPAREN / COMMA]
// [239, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE ELSE LBRACE single_pattern_cases RBRACE, RPAREN / COMMA]
// [240, if_expr → • IF infix_expr block_expr ELSE block_expr, RPAREN / COMMA]
// [241, if_expr → • IF infix_expr block_expr ELSE if_expr, RPAREN / COMMA]
// [242, if_expr → • IF infix_expr block_expr, RPAREN / COMMA]
// [243, match_expr → • MATCH infix_expr LBRACE non_empty_list_semis(single_pattern_case) RBRACE, RPAREN / COMMA]
// [244, match_expr → • MATCH infix_expr LBRACE RBRACE, RPAREN / COMMA]
// [245, loop_expr → • loop_label_colon LOOP non_empty_list_commas_no_trailing(expr) LBRACE list_semis(multi_pattern_case) RBRACE, RPAREN / COMMA]
// [249, for_expr → • loop_label_colon FOR for_binders SEMI option(infix_expr) SEMI list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) block_expr optional_else, RPAREN / COMMA]
// [250, for_expr → • loop_label_colon FOR for_binders block_expr optional_else, RPAREN / COMMA]
// [251, foreach_expr → • loop_label_colon FOR non_empty_list_commas(foreach_binder) IN expr block_expr optional_else, RPAREN / COMMA]
// [254, expr → • loop_expr, RPAREN / COMMA]
// [255, expr → • for_expr, RPAREN / COMMA]
// [256, expr → • foreach_expr, RPAREN / COMMA]
// [257, expr → • while_expr, RPAREN / COMMA]
// [258, expr → • try_expr, RPAREN / COMMA]
// [259, expr → • if_expr, RPAREN / COMMA]
// [260, expr → • match_expr, RPAREN / COMMA]
// [261, expr → • pipe_expr, RPAREN / COMMA]
// [262, pipe_expr → • pipe_expr PIPE infix_expr, RPAREN / COMMA / PIPE]
// [263, pipe_expr → • infix_expr, RPAREN / COMMA / PIPE]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → simple_expr LPAREN • list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [355, argument → • LIDENT optional_question EQUAL expr, RPAREN / COMMA]
// [356, argument → • expr, RPAREN / COMMA]
// [357, argument → • POST_LABEL, RPAREN / COMMA]
// [358, argument → • LIDENT QUESTION, RPAREN / COMMA]
// [493, list_commas(argument) → •, RPAREN]
// [494, list_commas(argument) → • non_empty_list_commas(argument), RPAREN]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [576, non_empty_list_commas(argument) → • non_empty_list_commas_rev(argument) option(COMMA), RPAREN]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [614, non_empty_list_commas_rev(argument) → • argument, RPAREN / COMMA]
// [615, non_empty_list_commas_rev(argument) → • non_empty_list_commas_rev(argument) COMMA argument, RPAREN / COMMA]
fn yy_state_461(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    NT_argument => Shift(yy_state_282)
    NT_non_empty_list_commas_rev_argument_ => Shift(yy_state_283)
    NT_expr => Shift(yy_state_287)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    NT_non_empty_list_commas_argument_ => Shift(yy_state_314)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_323)
    NT_pipe_expr => Shift(yy_state_346)
    NT_match_expr => Shift(yy_state_349)
    NT_if_expr => Shift(yy_state_350)
    NT_try_expr => Shift(yy_state_351)
    NT_while_expr => Shift(yy_state_352)
    NT_foreach_expr => Shift(yy_state_353)
    NT_for_expr => Shift(yy_state_354)
    NT_loop_expr => Shift(yy_state_355)
    T_MATCH => Shift(yy_state_356)
    T_IF => Shift(yy_state_373)
    T_TRY => Shift(yy_state_379)
    NT_loop_label_colon => Shift(yy_state_396)
    T_POST_LABEL => Shift(yy_state_447)
    T_LIDENT => Shift(yy_state_448)
    NT_list_commas_argument_ => Shift(yy_state_462)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_481)
    T_RPAREN => Reduce(0, NT_list_commas_argument_, yy_action_394)
    _ => Error
  }
}

// [309, simple_expr → simple_expr LPAREN list_commas(argument) • RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_462(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RPAREN => Shift(yy_state_463)
    _ => Error
  }
}

// [309, simple_expr → simple_expr LPAREN list_commas(argument) RPAREN •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_463(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_simple_expr, yy_action_627)
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [229, loop_label_colon → • POST_LABEL COLON, WHILE / LOOP / FOR]
// [230, loop_label_colon → •, WHILE / LOOP / FOR]
// [231, while_expr → • loop_label_colon WHILE infix_expr block_expr optional_else, COLON / RBRACKET]
// [238, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE, COLON / RBRACKET]
// [239, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE ELSE LBRACE single_pattern_cases RBRACE, COLON / RBRACKET]
// [240, if_expr → • IF infix_expr block_expr ELSE block_expr, COLON / RBRACKET]
// [241, if_expr → • IF infix_expr block_expr ELSE if_expr, COLON / RBRACKET]
// [242, if_expr → • IF infix_expr block_expr, COLON / RBRACKET]
// [243, match_expr → • MATCH infix_expr LBRACE non_empty_list_semis(single_pattern_case) RBRACE, COLON / RBRACKET]
// [244, match_expr → • MATCH infix_expr LBRACE RBRACE, COLON / RBRACKET]
// [245, loop_expr → • loop_label_colon LOOP non_empty_list_commas_no_trailing(expr) LBRACE list_semis(multi_pattern_case) RBRACE, COLON / RBRACKET]
// [249, for_expr → • loop_label_colon FOR for_binders SEMI option(infix_expr) SEMI list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) block_expr optional_else, COLON / RBRACKET]
// [250, for_expr → • loop_label_colon FOR for_binders block_expr optional_else, COLON / RBRACKET]
// [251, foreach_expr → • loop_label_colon FOR non_empty_list_commas(foreach_binder) IN expr block_expr optional_else, COLON / RBRACKET]
// [254, expr → • loop_expr, COLON / RBRACKET]
// [255, expr → • for_expr, COLON / RBRACKET]
// [256, expr → • foreach_expr, COLON / RBRACKET]
// [257, expr → • while_expr, COLON / RBRACKET]
// [258, expr → • try_expr, COLON / RBRACKET]
// [259, expr → • if_expr, COLON / RBRACKET]
// [260, expr → • match_expr, COLON / RBRACKET]
// [261, expr → • pipe_expr, COLON / RBRACKET]
// [262, pipe_expr → • pipe_expr PIPE infix_expr, COLON / RBRACKET / PIPE]
// [263, pipe_expr → • infix_expr, COLON / RBRACKET / PIPE]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / COLON / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / COLON / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / COLON / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / COLON / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / COLON / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / COLON / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / COLON / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / COLON / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / COLON / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / COLON / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / COLON / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / COLON / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / COLON / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / COLON / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / COLON / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / COLON / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / COLON / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / COLON / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / COLON / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / COLON / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / COLON / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [288, left_value → simple_expr LBRACKET • expr RBRACKET, AUGMENTED_ASSIGNMENT / EQUAL]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → simple_expr LBRACKET • expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → simple_expr LBRACKET • option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [504, option(expr) → •, COLON]
// [505, option(expr) → • expr, COLON]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_464(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    T_LIDENT => Shift(yy_state_311)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_323)
    NT_pipe_expr => Shift(yy_state_346)
    NT_match_expr => Shift(yy_state_349)
    NT_if_expr => Shift(yy_state_350)
    NT_try_expr => Shift(yy_state_351)
    NT_while_expr => Shift(yy_state_352)
    NT_foreach_expr => Shift(yy_state_353)
    NT_for_expr => Shift(yy_state_354)
    NT_loop_expr => Shift(yy_state_355)
    T_MATCH => Shift(yy_state_356)
    T_IF => Shift(yy_state_373)
    T_TRY => Shift(yy_state_379)
    NT_loop_label_colon => Shift(yy_state_396)
    T_POST_LABEL => Shift(yy_state_404)
    NT_option_expr_ => Shift(yy_state_465)
    NT_expr => Shift(yy_state_470)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_481)
    T_COLON => Reduce(0, NT_option_expr_, yy_action_131)
    _ => Error
  }
}

// [314, simple_expr → simple_expr LBRACKET option(expr) • COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_465(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_466)
    _ => Error
  }
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [229, loop_label_colon → • POST_LABEL COLON, WHILE / LOOP / FOR]
// [230, loop_label_colon → •, WHILE / LOOP / FOR]
// [231, while_expr → • loop_label_colon WHILE infix_expr block_expr optional_else, RBRACKET]
// [238, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE, RBRACKET]
// [239, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE ELSE LBRACE single_pattern_cases RBRACE, RBRACKET]
// [240, if_expr → • IF infix_expr block_expr ELSE block_expr, RBRACKET]
// [241, if_expr → • IF infix_expr block_expr ELSE if_expr, RBRACKET]
// [242, if_expr → • IF infix_expr block_expr, RBRACKET]
// [243, match_expr → • MATCH infix_expr LBRACE non_empty_list_semis(single_pattern_case) RBRACE, RBRACKET]
// [244, match_expr → • MATCH infix_expr LBRACE RBRACE, RBRACKET]
// [245, loop_expr → • loop_label_colon LOOP non_empty_list_commas_no_trailing(expr) LBRACE list_semis(multi_pattern_case) RBRACE, RBRACKET]
// [249, for_expr → • loop_label_colon FOR for_binders SEMI option(infix_expr) SEMI list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) block_expr optional_else, RBRACKET]
// [250, for_expr → • loop_label_colon FOR for_binders block_expr optional_else, RBRACKET]
// [251, foreach_expr → • loop_label_colon FOR non_empty_list_commas(foreach_binder) IN expr block_expr optional_else, RBRACKET]
// [254, expr → • loop_expr, RBRACKET]
// [255, expr → • for_expr, RBRACKET]
// [256, expr → • foreach_expr, RBRACKET]
// [257, expr → • while_expr, RBRACKET]
// [258, expr → • try_expr, RBRACKET]
// [259, expr → • if_expr, RBRACKET]
// [260, expr → • match_expr, RBRACKET]
// [261, expr → • pipe_expr, RBRACKET]
// [262, pipe_expr → • pipe_expr PIPE infix_expr, RBRACKET / PIPE]
// [263, pipe_expr → • infix_expr, RBRACKET / PIPE]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → simple_expr LBRACKET option(expr) COLON • option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [504, option(expr) → •, RBRACKET]
// [505, option(expr) → • expr, RBRACKET]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_466(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    T_LIDENT => Shift(yy_state_311)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_323)
    NT_pipe_expr => Shift(yy_state_346)
    NT_match_expr => Shift(yy_state_349)
    NT_if_expr => Shift(yy_state_350)
    NT_try_expr => Shift(yy_state_351)
    NT_while_expr => Shift(yy_state_352)
    NT_foreach_expr => Shift(yy_state_353)
    NT_for_expr => Shift(yy_state_354)
    NT_loop_expr => Shift(yy_state_355)
    T_MATCH => Shift(yy_state_356)
    T_IF => Shift(yy_state_373)
    T_TRY => Shift(yy_state_379)
    NT_loop_label_colon => Shift(yy_state_396)
    T_POST_LABEL => Shift(yy_state_404)
    NT_expr => Shift(yy_state_467)
    NT_option_expr_ => Shift(yy_state_468)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_481)
    T_RBRACKET => Reduce(0, NT_option_expr_, yy_action_131)
    _ => Error
  }
}

// [505, option(expr) → expr •, SEMI / RBRACKET / RBRACE]
fn yy_state_467(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_option_expr_, yy_action_61)
}

// [314, simple_expr → simple_expr LBRACKET option(expr) COLON option(expr) • RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_468(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACKET => Shift(yy_state_469)
    _ => Error
  }
}

// [314, simple_expr → simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_469(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(6, NT_simple_expr, yy_action_707)
}

// [288, left_value → simple_expr LBRACKET expr • RBRACKET, AUGMENTED_ASSIGNMENT / EQUAL]
// [313, simple_expr → simple_expr LBRACKET expr • RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [505, option(expr) → expr •, COLON]
fn yy_state_470(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACKET => Shift(yy_state_471)
    T_COLON => Reduce(1, NT_option_expr_, yy_action_61)
    _ => Error
  }
}

// [288, left_value → simple_expr LBRACKET expr RBRACKET •, AUGMENTED_ASSIGNMENT / EQUAL]
// [313, simple_expr → simple_expr LBRACKET expr RBRACKET •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_471(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AUGMENTED_ASSIGNMENT | T_EQUAL => Reduce(4, NT_left_value, yy_action_143)
    T_INFIX1 | T_INFIX2 | T_INFIX3 | T_INFIX4 | T_LPAREN | T_MINUS | T_QUESTION | T_EXCLAMATION | T_DOT_LIDENT | T_DOT_INT | T_SEMI | T_LBRACKET | T_PLUS | T_BAR | T_RBRACE | T_AMPERAMPER | T_AMPER | T_CARET | T_BARBAR | T_AS | T_PIPE | T_DOTDOT | T_RANGE_INCLUSIVE | T_RANGE_EXCLUSIVE | T_IS => Reduce(4, NT_simple_expr, yy_action_117)
    _ => Error
  }
}

// [287, left_value → simple_expr DOT_INT •, AUGMENTED_ASSIGNMENT / EQUAL]
// [324, simple_expr → simple_expr DOT_INT •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_472(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AUGMENTED_ASSIGNMENT | T_EQUAL => Reduce(2, NT_left_value, yy_action_447)
    T_INFIX1 | T_INFIX2 | T_INFIX3 | T_INFIX4 | T_LPAREN | T_MINUS | T_QUESTION | T_EXCLAMATION | T_DOT_LIDENT | T_DOT_INT | T_SEMI | T_LBRACKET | T_PLUS | T_BAR | T_RBRACE | T_AMPERAMPER | T_AMPER | T_CARET | T_BARBAR | T_AS | T_PIPE | T_DOTDOT | T_RANGE_INCLUSIVE | T_RANGE_EXCLUSIVE | T_IS => Reduce(2, NT_simple_expr, yy_action_99)
    _ => Error
  }
}

// [286, left_value → simple_expr DOT_LIDENT •, AUGMENTED_ASSIGNMENT / EQUAL]
// [315, simple_expr → simple_expr DOT_LIDENT • LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → simple_expr DOT_LIDENT • EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → simple_expr DOT_LIDENT • EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → simple_expr DOT_LIDENT • QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → simple_expr DOT_LIDENT •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_473(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_QUESTION => Shift(yy_state_474)
    T_EXCLAMATION => Shift(yy_state_478)
    T_LPAREN => Shift(yy_state_486)
    T_AUGMENTED_ASSIGNMENT | T_EQUAL => Reduce(2, NT_left_value, yy_action_578)
    T_INFIX1 | T_INFIX2 | T_INFIX3 | T_INFIX4 | T_MINUS | T_DOT_LIDENT | T_DOT_INT | T_SEMI | T_LBRACKET | T_PLUS | T_BAR | T_RBRACE | T_AMPERAMPER | T_AMPER | T_CARET | T_BARBAR | T_AS | T_PIPE | T_DOTDOT | T_RANGE_INCLUSIVE | T_RANGE_EXCLUSIVE | T_IS => Reduce(2, NT_simple_expr, yy_action_528)
    _ => Error
  }
}

// [318, simple_expr → simple_expr DOT_LIDENT QUESTION • LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_474(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_475)
    _ => Error
  }
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [229, loop_label_colon → • POST_LABEL COLON, WHILE / LOOP / FOR]
// [230, loop_label_colon → •, WHILE / LOOP / FOR]
// [231, while_expr → • loop_label_colon WHILE infix_expr block_expr optional_else, RPAREN / COMMA]
// [238, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE, RPAREN / COMMA]
// [239, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE ELSE LBRACE single_pattern_cases RBRACE, RPAREN / COMMA]
// [240, if_expr → • IF infix_expr block_expr ELSE block_expr, RPAREN / COMMA]
// [241, if_expr → • IF infix_expr block_expr ELSE if_expr, RPAREN / COMMA]
// [242, if_expr → • IF infix_expr block_expr, RPAREN / COMMA]
// [243, match_expr → • MATCH infix_expr LBRACE non_empty_list_semis(single_pattern_case) RBRACE, RPAREN / COMMA]
// [244, match_expr → • MATCH infix_expr LBRACE RBRACE, RPAREN / COMMA]
// [245, loop_expr → • loop_label_colon LOOP non_empty_list_commas_no_trailing(expr) LBRACE list_semis(multi_pattern_case) RBRACE, RPAREN / COMMA]
// [249, for_expr → • loop_label_colon FOR for_binders SEMI option(infix_expr) SEMI list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) block_expr optional_else, RPAREN / COMMA]
// [250, for_expr → • loop_label_colon FOR for_binders block_expr optional_else, RPAREN / COMMA]
// [251, foreach_expr → • loop_label_colon FOR non_empty_list_commas(foreach_binder) IN expr block_expr optional_else, RPAREN / COMMA]
// [254, expr → • loop_expr, RPAREN / COMMA]
// [255, expr → • for_expr, RPAREN / COMMA]
// [256, expr → • foreach_expr, RPAREN / COMMA]
// [257, expr → • while_expr, RPAREN / COMMA]
// [258, expr → • try_expr, RPAREN / COMMA]
// [259, expr → • if_expr, RPAREN / COMMA]
// [260, expr → • match_expr, RPAREN / COMMA]
// [261, expr → • pipe_expr, RPAREN / COMMA]
// [262, pipe_expr → • pipe_expr PIPE infix_expr, RPAREN / COMMA / PIPE]
// [263, pipe_expr → • infix_expr, RPAREN / COMMA / PIPE]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → simple_expr DOT_LIDENT QUESTION LPAREN • list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [355, argument → • LIDENT optional_question EQUAL expr, RPAREN / COMMA]
// [356, argument → • expr, RPAREN / COMMA]
// [357, argument → • POST_LABEL, RPAREN / COMMA]
// [358, argument → • LIDENT QUESTION, RPAREN / COMMA]
// [493, list_commas(argument) → •, RPAREN]
// [494, list_commas(argument) → • non_empty_list_commas(argument), RPAREN]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [576, non_empty_list_commas(argument) → • non_empty_list_commas_rev(argument) option(COMMA), RPAREN]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [614, non_empty_list_commas_rev(argument) → • argument, RPAREN / COMMA]
// [615, non_empty_list_commas_rev(argument) → • non_empty_list_commas_rev(argument) COMMA argument, RPAREN / COMMA]
fn yy_state_475(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    NT_argument => Shift(yy_state_282)
    NT_non_empty_list_commas_rev_argument_ => Shift(yy_state_283)
    NT_expr => Shift(yy_state_287)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    NT_non_empty_list_commas_argument_ => Shift(yy_state_314)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_323)
    NT_pipe_expr => Shift(yy_state_346)
    NT_match_expr => Shift(yy_state_349)
    NT_if_expr => Shift(yy_state_350)
    NT_try_expr => Shift(yy_state_351)
    NT_while_expr => Shift(yy_state_352)
    NT_foreach_expr => Shift(yy_state_353)
    NT_for_expr => Shift(yy_state_354)
    NT_loop_expr => Shift(yy_state_355)
    T_MATCH => Shift(yy_state_356)
    T_IF => Shift(yy_state_373)
    T_TRY => Shift(yy_state_379)
    NT_loop_label_colon => Shift(yy_state_396)
    T_POST_LABEL => Shift(yy_state_447)
    T_LIDENT => Shift(yy_state_448)
    NT_list_commas_argument_ => Shift(yy_state_476)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_481)
    T_RPAREN => Reduce(0, NT_list_commas_argument_, yy_action_394)
    _ => Error
  }
}

// [318, simple_expr → simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) • RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_476(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RPAREN => Shift(yy_state_477)
    _ => Error
  }
}

// [318, simple_expr → simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_477(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(6, NT_simple_expr, yy_action_476)
}

// [316, simple_expr → simple_expr DOT_LIDENT EXCLAMATION • LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → simple_expr DOT_LIDENT EXCLAMATION • EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_478(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EXCLAMATION => Shift(yy_state_479)
    T_LPAREN => Shift(yy_state_483)
    _ => Error
  }
}

// [317, simple_expr → simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION • LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_479(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_480)
    _ => Error
  }
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [229, loop_label_colon → • POST_LABEL COLON, WHILE / LOOP / FOR]
// [230, loop_label_colon → •, WHILE / LOOP / FOR]
// [231, while_expr → • loop_label_colon WHILE infix_expr block_expr optional_else, RPAREN / COMMA]
// [238, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE, RPAREN / COMMA]
// [239, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE ELSE LBRACE single_pattern_cases RBRACE, RPAREN / COMMA]
// [240, if_expr → • IF infix_expr block_expr ELSE block_expr, RPAREN / COMMA]
// [241, if_expr → • IF infix_expr block_expr ELSE if_expr, RPAREN / COMMA]
// [242, if_expr → • IF infix_expr block_expr, RPAREN / COMMA]
// [243, match_expr → • MATCH infix_expr LBRACE non_empty_list_semis(single_pattern_case) RBRACE, RPAREN / COMMA]
// [244, match_expr → • MATCH infix_expr LBRACE RBRACE, RPAREN / COMMA]
// [245, loop_expr → • loop_label_colon LOOP non_empty_list_commas_no_trailing(expr) LBRACE list_semis(multi_pattern_case) RBRACE, RPAREN / COMMA]
// [249, for_expr → • loop_label_colon FOR for_binders SEMI option(infix_expr) SEMI list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) block_expr optional_else, RPAREN / COMMA]
// [250, for_expr → • loop_label_colon FOR for_binders block_expr optional_else, RPAREN / COMMA]
// [251, foreach_expr → • loop_label_colon FOR non_empty_list_commas(foreach_binder) IN expr block_expr optional_else, RPAREN / COMMA]
// [254, expr → • loop_expr, RPAREN / COMMA]
// [255, expr → • for_expr, RPAREN / COMMA]
// [256, expr → • foreach_expr, RPAREN / COMMA]
// [257, expr → • while_expr, RPAREN / COMMA]
// [258, expr → • try_expr, RPAREN / COMMA]
// [259, expr → • if_expr, RPAREN / COMMA]
// [260, expr → • match_expr, RPAREN / COMMA]
// [261, expr → • pipe_expr, RPAREN / COMMA]
// [262, pipe_expr → • pipe_expr PIPE infix_expr, RPAREN / COMMA / PIPE]
// [263, pipe_expr → • infix_expr, RPAREN / COMMA / PIPE]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN • list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [355, argument → • LIDENT optional_question EQUAL expr, RPAREN / COMMA]
// [356, argument → • expr, RPAREN / COMMA]
// [357, argument → • POST_LABEL, RPAREN / COMMA]
// [358, argument → • LIDENT QUESTION, RPAREN / COMMA]
// [493, list_commas(argument) → •, RPAREN]
// [494, list_commas(argument) → • non_empty_list_commas(argument), RPAREN]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [576, non_empty_list_commas(argument) → • non_empty_list_commas_rev(argument) option(COMMA), RPAREN]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [614, non_empty_list_commas_rev(argument) → • argument, RPAREN / COMMA]
// [615, non_empty_list_commas_rev(argument) → • non_empty_list_commas_rev(argument) COMMA argument, RPAREN / COMMA]
fn yy_state_480(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    NT_argument => Shift(yy_state_282)
    NT_non_empty_list_commas_rev_argument_ => Shift(yy_state_283)
    NT_expr => Shift(yy_state_287)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    NT_non_empty_list_commas_argument_ => Shift(yy_state_314)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_323)
    NT_pipe_expr => Shift(yy_state_346)
    NT_match_expr => Shift(yy_state_349)
    NT_if_expr => Shift(yy_state_350)
    NT_try_expr => Shift(yy_state_351)
    NT_while_expr => Shift(yy_state_352)
    NT_foreach_expr => Shift(yy_state_353)
    NT_for_expr => Shift(yy_state_354)
    NT_loop_expr => Shift(yy_state_355)
    T_MATCH => Shift(yy_state_356)
    T_IF => Shift(yy_state_373)
    T_TRY => Shift(yy_state_379)
    NT_loop_label_colon => Shift(yy_state_396)
    T_POST_LABEL => Shift(yy_state_447)
    T_LIDENT => Shift(yy_state_448)
    NT_list_commas_argument_ => Shift(yy_state_481)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_481)
    T_RPAREN => Reduce(0, NT_list_commas_argument_, yy_action_394)
    _ => Error
  }
}

// [317, simple_expr → simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) • RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_481(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RPAREN => Shift(yy_state_482)
    _ => Error
  }
}

// [317, simple_expr → simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_482(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(7, NT_simple_expr, yy_action_345)
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [229, loop_label_colon → • POST_LABEL COLON, WHILE / LOOP / FOR]
// [230, loop_label_colon → •, WHILE / LOOP / FOR]
// [231, while_expr → • loop_label_colon WHILE infix_expr block_expr optional_else, RPAREN / COMMA]
// [238, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE, RPAREN / COMMA]
// [239, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE ELSE LBRACE single_pattern_cases RBRACE, RPAREN / COMMA]
// [240, if_expr → • IF infix_expr block_expr ELSE block_expr, RPAREN / COMMA]
// [241, if_expr → • IF infix_expr block_expr ELSE if_expr, RPAREN / COMMA]
// [242, if_expr → • IF infix_expr block_expr, RPAREN / COMMA]
// [243, match_expr → • MATCH infix_expr LBRACE non_empty_list_semis(single_pattern_case) RBRACE, RPAREN / COMMA]
// [244, match_expr → • MATCH infix_expr LBRACE RBRACE, RPAREN / COMMA]
// [245, loop_expr → • loop_label_colon LOOP non_empty_list_commas_no_trailing(expr) LBRACE list_semis(multi_pattern_case) RBRACE, RPAREN / COMMA]
// [249, for_expr → • loop_label_colon FOR for_binders SEMI option(infix_expr) SEMI list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) block_expr optional_else, RPAREN / COMMA]
// [250, for_expr → • loop_label_colon FOR for_binders block_expr optional_else, RPAREN / COMMA]
// [251, foreach_expr → • loop_label_colon FOR non_empty_list_commas(foreach_binder) IN expr block_expr optional_else, RPAREN / COMMA]
// [254, expr → • loop_expr, RPAREN / COMMA]
// [255, expr → • for_expr, RPAREN / COMMA]
// [256, expr → • foreach_expr, RPAREN / COMMA]
// [257, expr → • while_expr, RPAREN / COMMA]
// [258, expr → • try_expr, RPAREN / COMMA]
// [259, expr → • if_expr, RPAREN / COMMA]
// [260, expr → • match_expr, RPAREN / COMMA]
// [261, expr → • pipe_expr, RPAREN / COMMA]
// [262, pipe_expr → • pipe_expr PIPE infix_expr, RPAREN / COMMA / PIPE]
// [263, pipe_expr → • infix_expr, RPAREN / COMMA / PIPE]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → simple_expr DOT_LIDENT EXCLAMATION LPAREN • list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [355, argument → • LIDENT optional_question EQUAL expr, RPAREN / COMMA]
// [356, argument → • expr, RPAREN / COMMA]
// [357, argument → • POST_LABEL, RPAREN / COMMA]
// [358, argument → • LIDENT QUESTION, RPAREN / COMMA]
// [493, list_commas(argument) → •, RPAREN]
// [494, list_commas(argument) → • non_empty_list_commas(argument), RPAREN]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [576, non_empty_list_commas(argument) → • non_empty_list_commas_rev(argument) option(COMMA), RPAREN]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [614, non_empty_list_commas_rev(argument) → • argument, RPAREN / COMMA]
// [615, non_empty_list_commas_rev(argument) → • non_empty_list_commas_rev(argument) COMMA argument, RPAREN / COMMA]
fn yy_state_483(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    NT_argument => Shift(yy_state_282)
    NT_non_empty_list_commas_rev_argument_ => Shift(yy_state_283)
    NT_expr => Shift(yy_state_287)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    NT_non_empty_list_commas_argument_ => Shift(yy_state_314)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_323)
    NT_pipe_expr => Shift(yy_state_346)
    NT_match_expr => Shift(yy_state_349)
    NT_if_expr => Shift(yy_state_350)
    NT_try_expr => Shift(yy_state_351)
    NT_while_expr => Shift(yy_state_352)
    NT_foreach_expr => Shift(yy_state_353)
    NT_for_expr => Shift(yy_state_354)
    NT_loop_expr => Shift(yy_state_355)
    T_MATCH => Shift(yy_state_356)
    T_IF => Shift(yy_state_373)
    T_TRY => Shift(yy_state_379)
    NT_loop_label_colon => Shift(yy_state_396)
    T_POST_LABEL => Shift(yy_state_447)
    T_LIDENT => Shift(yy_state_448)
    NT_list_commas_argument_ => Shift(yy_state_484)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_481)
    T_RPAREN => Reduce(0, NT_list_commas_argument_, yy_action_394)
    _ => Error
  }
}

// [316, simple_expr → simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) • RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_484(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RPAREN => Shift(yy_state_485)
    _ => Error
  }
}

// [316, simple_expr → simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_485(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(6, NT_simple_expr, yy_action_353)
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [229, loop_label_colon → • POST_LABEL COLON, WHILE / LOOP / FOR]
// [230, loop_label_colon → •, WHILE / LOOP / FOR]
// [231, while_expr → • loop_label_colon WHILE infix_expr block_expr optional_else, RPAREN / COMMA]
// [238, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE, RPAREN / COMMA]
// [239, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE ELSE LBRACE single_pattern_cases RBRACE, RPAREN / COMMA]
// [240, if_expr → • IF infix_expr block_expr ELSE block_expr, RPAREN / COMMA]
// [241, if_expr → • IF infix_expr block_expr ELSE if_expr, RPAREN / COMMA]
// [242, if_expr → • IF infix_expr block_expr, RPAREN / COMMA]
// [243, match_expr → • MATCH infix_expr LBRACE non_empty_list_semis(single_pattern_case) RBRACE, RPAREN / COMMA]
// [244, match_expr → • MATCH infix_expr LBRACE RBRACE, RPAREN / COMMA]
// [245, loop_expr → • loop_label_colon LOOP non_empty_list_commas_no_trailing(expr) LBRACE list_semis(multi_pattern_case) RBRACE, RPAREN / COMMA]
// [249, for_expr → • loop_label_colon FOR for_binders SEMI option(infix_expr) SEMI list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) block_expr optional_else, RPAREN / COMMA]
// [250, for_expr → • loop_label_colon FOR for_binders block_expr optional_else, RPAREN / COMMA]
// [251, foreach_expr → • loop_label_colon FOR non_empty_list_commas(foreach_binder) IN expr block_expr optional_else, RPAREN / COMMA]
// [254, expr → • loop_expr, RPAREN / COMMA]
// [255, expr → • for_expr, RPAREN / COMMA]
// [256, expr → • foreach_expr, RPAREN / COMMA]
// [257, expr → • while_expr, RPAREN / COMMA]
// [258, expr → • try_expr, RPAREN / COMMA]
// [259, expr → • if_expr, RPAREN / COMMA]
// [260, expr → • match_expr, RPAREN / COMMA]
// [261, expr → • pipe_expr, RPAREN / COMMA]
// [262, pipe_expr → • pipe_expr PIPE infix_expr, RPAREN / COMMA / PIPE]
// [263, pipe_expr → • infix_expr, RPAREN / COMMA / PIPE]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → simple_expr DOT_LIDENT LPAREN • list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [355, argument → • LIDENT optional_question EQUAL expr, RPAREN / COMMA]
// [356, argument → • expr, RPAREN / COMMA]
// [357, argument → • POST_LABEL, RPAREN / COMMA]
// [358, argument → • LIDENT QUESTION, RPAREN / COMMA]
// [493, list_commas(argument) → •, RPAREN]
// [494, list_commas(argument) → • non_empty_list_commas(argument), RPAREN]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [576, non_empty_list_commas(argument) → • non_empty_list_commas_rev(argument) option(COMMA), RPAREN]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [614, non_empty_list_commas_rev(argument) → • argument, RPAREN / COMMA]
// [615, non_empty_list_commas_rev(argument) → • non_empty_list_commas_rev(argument) COMMA argument, RPAREN / COMMA]
fn yy_state_486(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    NT_argument => Shift(yy_state_282)
    NT_non_empty_list_commas_rev_argument_ => Shift(yy_state_283)
    NT_expr => Shift(yy_state_287)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    NT_non_empty_list_commas_argument_ => Shift(yy_state_314)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_323)
    NT_pipe_expr => Shift(yy_state_346)
    NT_match_expr => Shift(yy_state_349)
    NT_if_expr => Shift(yy_state_350)
    NT_try_expr => Shift(yy_state_351)
    NT_while_expr => Shift(yy_state_352)
    NT_foreach_expr => Shift(yy_state_353)
    NT_for_expr => Shift(yy_state_354)
    NT_loop_expr => Shift(yy_state_355)
    T_MATCH => Shift(yy_state_356)
    T_IF => Shift(yy_state_373)
    T_TRY => Shift(yy_state_379)
    NT_loop_label_colon => Shift(yy_state_396)
    T_POST_LABEL => Shift(yy_state_447)
    T_LIDENT => Shift(yy_state_448)
    NT_list_commas_argument_ => Shift(yy_state_487)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_481)
    T_RPAREN => Reduce(0, NT_list_commas_argument_, yy_action_394)
    _ => Error
  }
}

// [315, simple_expr → simple_expr DOT_LIDENT LPAREN list_commas(argument) • RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_487(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RPAREN => Shift(yy_state_488)
    _ => Error
  }
}

// [315, simple_expr → simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_488(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_simple_expr, yy_action_501)
}

// [232, single_pattern_case → pattern option(preceded(IF,expr)) FAT_ARROW expr_statement •, SEMI / RBRACE]
fn yy_state_489(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_single_pattern_case, yy_action_138)
}

// [228, expr_statement → expr •, SEMI / RBRACE]
fn yy_state_490(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_expr_statement, yy_action_650)
}

// [226, expr_statement → left_value • AUGMENTED_ASSIGNMENT expr, SEMI / RBRACE]
// [227, expr_statement → left_value • EQUAL expr, SEMI / RBRACE]
fn yy_state_491(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EQUAL => Shift(yy_state_492)
    T_AUGMENTED_ASSIGNMENT => Shift(yy_state_494)
    _ => Error
  }
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [227, expr_statement → left_value EQUAL • expr, SEMI / RBRACE]
// [229, loop_label_colon → • POST_LABEL COLON, WHILE / LOOP / FOR]
// [230, loop_label_colon → •, WHILE / LOOP / FOR]
// [231, while_expr → • loop_label_colon WHILE infix_expr block_expr optional_else, SEMI / RBRACE]
// [238, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE, SEMI / RBRACE]
// [239, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE ELSE LBRACE single_pattern_cases RBRACE, SEMI / RBRACE]
// [240, if_expr → • IF infix_expr block_expr ELSE block_expr, SEMI / RBRACE]
// [241, if_expr → • IF infix_expr block_expr ELSE if_expr, SEMI / RBRACE]
// [242, if_expr → • IF infix_expr block_expr, SEMI / RBRACE]
// [243, match_expr → • MATCH infix_expr LBRACE non_empty_list_semis(single_pattern_case) RBRACE, SEMI / RBRACE]
// [244, match_expr → • MATCH infix_expr LBRACE RBRACE, SEMI / RBRACE]
// [245, loop_expr → • loop_label_colon LOOP non_empty_list_commas_no_trailing(expr) LBRACE list_semis(multi_pattern_case) RBRACE, SEMI / RBRACE]
// [249, for_expr → • loop_label_colon FOR for_binders SEMI option(infix_expr) SEMI list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) block_expr optional_else, SEMI / RBRACE]
// [250, for_expr → • loop_label_colon FOR for_binders block_expr optional_else, SEMI / RBRACE]
// [251, foreach_expr → • loop_label_colon FOR non_empty_list_commas(foreach_binder) IN expr block_expr optional_else, SEMI / RBRACE]
// [254, expr → • loop_expr, SEMI / RBRACE]
// [255, expr → • for_expr, SEMI / RBRACE]
// [256, expr → • foreach_expr, SEMI / RBRACE]
// [257, expr → • while_expr, SEMI / RBRACE]
// [258, expr → • try_expr, SEMI / RBRACE]
// [259, expr → • if_expr, SEMI / RBRACE]
// [260, expr → • match_expr, SEMI / RBRACE]
// [261, expr → • pipe_expr, SEMI / RBRACE]
// [262, pipe_expr → • pipe_expr PIPE infix_expr, SEMI / RBRACE / PIPE]
// [263, pipe_expr → • infix_expr, SEMI / RBRACE / PIPE]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_492(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    T_LIDENT => Shift(yy_state_311)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_323)
    NT_pipe_expr => Shift(yy_state_346)
    NT_match_expr => Shift(yy_state_349)
    NT_if_expr => Shift(yy_state_350)
    NT_try_expr => Shift(yy_state_351)
    NT_while_expr => Shift(yy_state_352)
    NT_foreach_expr => Shift(yy_state_353)
    NT_for_expr => Shift(yy_state_354)
    NT_loop_expr => Shift(yy_state_355)
    T_MATCH => Shift(yy_state_356)
    T_IF => Shift(yy_state_373)
    T_TRY => Shift(yy_state_379)
    NT_loop_label_colon => Shift(yy_state_396)
    T_POST_LABEL => Shift(yy_state_404)
    NT_expr => Shift(yy_state_493)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_481)
    _ => Error
  }
}

// [227, expr_statement → left_value EQUAL expr •, SEMI / RBRACE]
fn yy_state_493(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_expr_statement, yy_action_77)
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [226, expr_statement → left_value AUGMENTED_ASSIGNMENT • expr, SEMI / RBRACE]
// [229, loop_label_colon → • POST_LABEL COLON, WHILE / LOOP / FOR]
// [230, loop_label_colon → •, WHILE / LOOP / FOR]
// [231, while_expr → • loop_label_colon WHILE infix_expr block_expr optional_else, SEMI / RBRACE]
// [238, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE, SEMI / RBRACE]
// [239, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE ELSE LBRACE single_pattern_cases RBRACE, SEMI / RBRACE]
// [240, if_expr → • IF infix_expr block_expr ELSE block_expr, SEMI / RBRACE]
// [241, if_expr → • IF infix_expr block_expr ELSE if_expr, SEMI / RBRACE]
// [242, if_expr → • IF infix_expr block_expr, SEMI / RBRACE]
// [243, match_expr → • MATCH infix_expr LBRACE non_empty_list_semis(single_pattern_case) RBRACE, SEMI / RBRACE]
// [244, match_expr → • MATCH infix_expr LBRACE RBRACE, SEMI / RBRACE]
// [245, loop_expr → • loop_label_colon LOOP non_empty_list_commas_no_trailing(expr) LBRACE list_semis(multi_pattern_case) RBRACE, SEMI / RBRACE]
// [249, for_expr → • loop_label_colon FOR for_binders SEMI option(infix_expr) SEMI list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) block_expr optional_else, SEMI / RBRACE]
// [250, for_expr → • loop_label_colon FOR for_binders block_expr optional_else, SEMI / RBRACE]
// [251, foreach_expr → • loop_label_colon FOR non_empty_list_commas(foreach_binder) IN expr block_expr optional_else, SEMI / RBRACE]
// [254, expr → • loop_expr, SEMI / RBRACE]
// [255, expr → • for_expr, SEMI / RBRACE]
// [256, expr → • foreach_expr, SEMI / RBRACE]
// [257, expr → • while_expr, SEMI / RBRACE]
// [258, expr → • try_expr, SEMI / RBRACE]
// [259, expr → • if_expr, SEMI / RBRACE]
// [260, expr → • match_expr, SEMI / RBRACE]
// [261, expr → • pipe_expr, SEMI / RBRACE]
// [262, pipe_expr → • pipe_expr PIPE infix_expr, SEMI / RBRACE / PIPE]
// [263, pipe_expr → • infix_expr, SEMI / RBRACE / PIPE]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_494(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    T_LIDENT => Shift(yy_state_311)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_323)
    NT_pipe_expr => Shift(yy_state_346)
    NT_match_expr => Shift(yy_state_349)
    NT_if_expr => Shift(yy_state_350)
    NT_try_expr => Shift(yy_state_351)
    NT_while_expr => Shift(yy_state_352)
    NT_foreach_expr => Shift(yy_state_353)
    NT_for_expr => Shift(yy_state_354)
    NT_loop_expr => Shift(yy_state_355)
    T_MATCH => Shift(yy_state_356)
    T_IF => Shift(yy_state_373)
    T_TRY => Shift(yy_state_379)
    NT_loop_label_colon => Shift(yy_state_396)
    T_POST_LABEL => Shift(yy_state_404)
    NT_expr => Shift(yy_state_495)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_481)
    _ => Error
  }
}

// [226, expr_statement → left_value AUGMENTED_ASSIGNMENT expr •, SEMI / RBRACE]
fn yy_state_495(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_expr_statement, yy_action_92)
}

// [225, expr_statement → ELLIPSIS •, SEMI / RBRACE]
fn yy_state_496(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_expr_statement, yy_action_640)
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [224, expr_statement → RAISE • expr, SEMI / RBRACE]
// [229, loop_label_colon → • POST_LABEL COLON, WHILE / LOOP / FOR]
// [230, loop_label_colon → •, WHILE / LOOP / FOR]
// [231, while_expr → • loop_label_colon WHILE infix_expr block_expr optional_else, SEMI / RBRACE]
// [238, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE, SEMI / RBRACE]
// [239, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE ELSE LBRACE single_pattern_cases RBRACE, SEMI / RBRACE]
// [240, if_expr → • IF infix_expr block_expr ELSE block_expr, SEMI / RBRACE]
// [241, if_expr → • IF infix_expr block_expr ELSE if_expr, SEMI / RBRACE]
// [242, if_expr → • IF infix_expr block_expr, SEMI / RBRACE]
// [243, match_expr → • MATCH infix_expr LBRACE non_empty_list_semis(single_pattern_case) RBRACE, SEMI / RBRACE]
// [244, match_expr → • MATCH infix_expr LBRACE RBRACE, SEMI / RBRACE]
// [245, loop_expr → • loop_label_colon LOOP non_empty_list_commas_no_trailing(expr) LBRACE list_semis(multi_pattern_case) RBRACE, SEMI / RBRACE]
// [249, for_expr → • loop_label_colon FOR for_binders SEMI option(infix_expr) SEMI list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) block_expr optional_else, SEMI / RBRACE]
// [250, for_expr → • loop_label_colon FOR for_binders block_expr optional_else, SEMI / RBRACE]
// [251, foreach_expr → • loop_label_colon FOR non_empty_list_commas(foreach_binder) IN expr block_expr optional_else, SEMI / RBRACE]
// [254, expr → • loop_expr, SEMI / RBRACE]
// [255, expr → • for_expr, SEMI / RBRACE]
// [256, expr → • foreach_expr, SEMI / RBRACE]
// [257, expr → • while_expr, SEMI / RBRACE]
// [258, expr → • try_expr, SEMI / RBRACE]
// [259, expr → • if_expr, SEMI / RBRACE]
// [260, expr → • match_expr, SEMI / RBRACE]
// [261, expr → • pipe_expr, SEMI / RBRACE]
// [262, pipe_expr → • pipe_expr PIPE infix_expr, SEMI / RBRACE / PIPE]
// [263, pipe_expr → • infix_expr, SEMI / RBRACE / PIPE]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_497(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    T_LIDENT => Shift(yy_state_311)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_323)
    NT_pipe_expr => Shift(yy_state_346)
    NT_match_expr => Shift(yy_state_349)
    NT_if_expr => Shift(yy_state_350)
    NT_try_expr => Shift(yy_state_351)
    NT_while_expr => Shift(yy_state_352)
    NT_foreach_expr => Shift(yy_state_353)
    NT_for_expr => Shift(yy_state_354)
    NT_loop_expr => Shift(yy_state_355)
    T_MATCH => Shift(yy_state_356)
    T_IF => Shift(yy_state_373)
    T_TRY => Shift(yy_state_379)
    NT_loop_label_colon => Shift(yy_state_396)
    T_POST_LABEL => Shift(yy_state_404)
    NT_expr => Shift(yy_state_498)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_481)
    _ => Error
  }
}

// [224, expr_statement → RAISE expr •, SEMI / RBRACE]
fn yy_state_498(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_expr_statement, yy_action_284)
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [223, expr_statement → RETURN • option(expr), SEMI / RBRACE]
// [229, loop_label_colon → • POST_LABEL COLON, WHILE / LOOP / FOR]
// [230, loop_label_colon → •, WHILE / LOOP / FOR]
// [231, while_expr → • loop_label_colon WHILE infix_expr block_expr optional_else, SEMI / RBRACE]
// [238, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE, SEMI / RBRACE]
// [239, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE ELSE LBRACE single_pattern_cases RBRACE, SEMI / RBRACE]
// [240, if_expr → • IF infix_expr block_expr ELSE block_expr, SEMI / RBRACE]
// [241, if_expr → • IF infix_expr block_expr ELSE if_expr, SEMI / RBRACE]
// [242, if_expr → • IF infix_expr block_expr, SEMI / RBRACE]
// [243, match_expr → • MATCH infix_expr LBRACE non_empty_list_semis(single_pattern_case) RBRACE, SEMI / RBRACE]
// [244, match_expr → • MATCH infix_expr LBRACE RBRACE, SEMI / RBRACE]
// [245, loop_expr → • loop_label_colon LOOP non_empty_list_commas_no_trailing(expr) LBRACE list_semis(multi_pattern_case) RBRACE, SEMI / RBRACE]
// [249, for_expr → • loop_label_colon FOR for_binders SEMI option(infix_expr) SEMI list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) block_expr optional_else, SEMI / RBRACE]
// [250, for_expr → • loop_label_colon FOR for_binders block_expr optional_else, SEMI / RBRACE]
// [251, foreach_expr → • loop_label_colon FOR non_empty_list_commas(foreach_binder) IN expr block_expr optional_else, SEMI / RBRACE]
// [254, expr → • loop_expr, SEMI / RBRACE]
// [255, expr → • for_expr, SEMI / RBRACE]
// [256, expr → • foreach_expr, SEMI / RBRACE]
// [257, expr → • while_expr, SEMI / RBRACE]
// [258, expr → • try_expr, SEMI / RBRACE]
// [259, expr → • if_expr, SEMI / RBRACE]
// [260, expr → • match_expr, SEMI / RBRACE]
// [261, expr → • pipe_expr, SEMI / RBRACE]
// [262, pipe_expr → • pipe_expr PIPE infix_expr, SEMI / RBRACE / PIPE]
// [263, pipe_expr → • infix_expr, SEMI / RBRACE / PIPE]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [504, option(expr) → •, SEMI / RBRACE]
// [505, option(expr) → • expr, SEMI / RBRACE]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_499(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    T_LIDENT => Shift(yy_state_311)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_323)
    NT_pipe_expr => Shift(yy_state_346)
    NT_match_expr => Shift(yy_state_349)
    NT_if_expr => Shift(yy_state_350)
    NT_try_expr => Shift(yy_state_351)
    NT_while_expr => Shift(yy_state_352)
    NT_foreach_expr => Shift(yy_state_353)
    NT_for_expr => Shift(yy_state_354)
    NT_loop_expr => Shift(yy_state_355)
    T_MATCH => Shift(yy_state_356)
    T_IF => Shift(yy_state_373)
    T_TRY => Shift(yy_state_379)
    NT_loop_label_colon => Shift(yy_state_396)
    T_POST_LABEL => Shift(yy_state_404)
    NT_expr => Shift(yy_state_467)
    NT_option_expr_ => Shift(yy_state_500)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_481)
    T_SEMI | T_RBRACE => Reduce(0, NT_option_expr_, yy_action_131)
    _ => Error
  }
}

// [223, expr_statement → RETURN option(expr) •, SEMI / RBRACE]
fn yy_state_500(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_expr_statement, yy_action_469)
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [221, expr_statement → CONTINUE • POST_LABEL list_commas_no_trailing(expr), SEMI / RBRACE]
// [222, expr_statement → CONTINUE • list_commas_no_trailing(expr), SEMI / RBRACE]
// [229, loop_label_colon → • POST_LABEL COLON, WHILE / LOOP / FOR]
// [230, loop_label_colon → •, WHILE / LOOP / FOR]
// [231, while_expr → • loop_label_colon WHILE infix_expr block_expr optional_else, COMMA / SEMI / RBRACE]
// [238, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE, COMMA / SEMI / RBRACE]
// [239, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE ELSE LBRACE single_pattern_cases RBRACE, COMMA / SEMI / RBRACE]
// [240, if_expr → • IF infix_expr block_expr ELSE block_expr, COMMA / SEMI / RBRACE]
// [241, if_expr → • IF infix_expr block_expr ELSE if_expr, COMMA / SEMI / RBRACE]
// [242, if_expr → • IF infix_expr block_expr, COMMA / SEMI / RBRACE]
// [243, match_expr → • MATCH infix_expr LBRACE non_empty_list_semis(single_pattern_case) RBRACE, COMMA / SEMI / RBRACE]
// [244, match_expr → • MATCH infix_expr LBRACE RBRACE, COMMA / SEMI / RBRACE]
// [245, loop_expr → • loop_label_colon LOOP non_empty_list_commas_no_trailing(expr) LBRACE list_semis(multi_pattern_case) RBRACE, COMMA / SEMI / RBRACE]
// [249, for_expr → • loop_label_colon FOR for_binders SEMI option(infix_expr) SEMI list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) block_expr optional_else, COMMA / SEMI / RBRACE]
// [250, for_expr → • loop_label_colon FOR for_binders block_expr optional_else, COMMA / SEMI / RBRACE]
// [251, foreach_expr → • loop_label_colon FOR non_empty_list_commas(foreach_binder) IN expr block_expr optional_else, COMMA / SEMI / RBRACE]
// [254, expr → • loop_expr, COMMA / SEMI / RBRACE]
// [255, expr → • for_expr, COMMA / SEMI / RBRACE]
// [256, expr → • foreach_expr, COMMA / SEMI / RBRACE]
// [257, expr → • while_expr, COMMA / SEMI / RBRACE]
// [258, expr → • try_expr, COMMA / SEMI / RBRACE]
// [259, expr → • if_expr, COMMA / SEMI / RBRACE]
// [260, expr → • match_expr, COMMA / SEMI / RBRACE]
// [261, expr → • pipe_expr, COMMA / SEMI / RBRACE]
// [262, pipe_expr → • pipe_expr PIPE infix_expr, COMMA / SEMI / RBRACE / PIPE]
// [263, pipe_expr → • infix_expr, COMMA / SEMI / RBRACE / PIPE]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [506, list_commas_no_trailing(expr) → •, SEMI / RBRACE]
// [507, list_commas_no_trailing(expr) → • non_empty_list_commas_no_trailing(expr), SEMI / RBRACE]
// [514, non_empty_list_commas_no_trailing(expr) → • non_empty_list_commas_rev(expr), SEMI / RBRACE]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [587, non_empty_list_commas_rev(expr) → • expr, COMMA / SEMI / RBRACE]
// [588, non_empty_list_commas_rev(expr) → • non_empty_list_commas_rev(expr) COMMA expr, COMMA / SEMI / RBRACE]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_501(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    T_LIDENT => Shift(yy_state_311)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_323)
    NT_pipe_expr => Shift(yy_state_346)
    NT_match_expr => Shift(yy_state_349)
    NT_if_expr => Shift(yy_state_350)
    NT_try_expr => Shift(yy_state_351)
    NT_while_expr => Shift(yy_state_352)
    NT_foreach_expr => Shift(yy_state_353)
    NT_for_expr => Shift(yy_state_354)
    NT_loop_expr => Shift(yy_state_355)
    T_MATCH => Shift(yy_state_356)
    T_IF => Shift(yy_state_373)
    T_TRY => Shift(yy_state_379)
    NT_loop_label_colon => Shift(yy_state_396)
    NT_expr => Shift(yy_state_436)
    NT_non_empty_list_commas_rev_expr_ => Shift(yy_state_437)
    NT_non_empty_list_commas_no_trailing_expr_ => Shift(yy_state_502)
    NT_list_commas_no_trailing_expr_ => Shift(yy_state_503)
    T_POST_LABEL => Shift(yy_state_504)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_481)
    T_SEMI | T_RBRACE => Reduce(0, NT_list_commas_no_trailing_expr_, yy_action_212)
    _ => Error
  }
}

// [507, list_commas_no_trailing(expr) → non_empty_list_commas_no_trailing(expr) •, SEMI / RBRACE]
fn yy_state_502(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_list_commas_no_trailing_expr_, yy_action_142)
}

// [222, expr_statement → CONTINUE list_commas_no_trailing(expr) •, SEMI / RBRACE]
fn yy_state_503(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_expr_statement, yy_action_73)
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [221, expr_statement → CONTINUE POST_LABEL • list_commas_no_trailing(expr), SEMI / RBRACE]
// [229, loop_label_colon → • POST_LABEL COLON, WHILE / LOOP / FOR]
// [229, loop_label_colon → POST_LABEL • COLON, WHILE / LOOP / FOR]
// [230, loop_label_colon → •, WHILE / LOOP / FOR]
// [231, while_expr → • loop_label_colon WHILE infix_expr block_expr optional_else, COMMA / SEMI / RBRACE]
// [238, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE, COMMA / SEMI / RBRACE]
// [239, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE ELSE LBRACE single_pattern_cases RBRACE, COMMA / SEMI / RBRACE]
// [240, if_expr → • IF infix_expr block_expr ELSE block_expr, COMMA / SEMI / RBRACE]
// [241, if_expr → • IF infix_expr block_expr ELSE if_expr, COMMA / SEMI / RBRACE]
// [242, if_expr → • IF infix_expr block_expr, COMMA / SEMI / RBRACE]
// [243, match_expr → • MATCH infix_expr LBRACE non_empty_list_semis(single_pattern_case) RBRACE, COMMA / SEMI / RBRACE]
// [244, match_expr → • MATCH infix_expr LBRACE RBRACE, COMMA / SEMI / RBRACE]
// [245, loop_expr → • loop_label_colon LOOP non_empty_list_commas_no_trailing(expr) LBRACE list_semis(multi_pattern_case) RBRACE, COMMA / SEMI / RBRACE]
// [249, for_expr → • loop_label_colon FOR for_binders SEMI option(infix_expr) SEMI list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) block_expr optional_else, COMMA / SEMI / RBRACE]
// [250, for_expr → • loop_label_colon FOR for_binders block_expr optional_else, COMMA / SEMI / RBRACE]
// [251, foreach_expr → • loop_label_colon FOR non_empty_list_commas(foreach_binder) IN expr block_expr optional_else, COMMA / SEMI / RBRACE]
// [254, expr → • loop_expr, COMMA / SEMI / RBRACE]
// [255, expr → • for_expr, COMMA / SEMI / RBRACE]
// [256, expr → • foreach_expr, COMMA / SEMI / RBRACE]
// [257, expr → • while_expr, COMMA / SEMI / RBRACE]
// [258, expr → • try_expr, COMMA / SEMI / RBRACE]
// [259, expr → • if_expr, COMMA / SEMI / RBRACE]
// [260, expr → • match_expr, COMMA / SEMI / RBRACE]
// [261, expr → • pipe_expr, COMMA / SEMI / RBRACE]
// [262, pipe_expr → • pipe_expr PIPE infix_expr, COMMA / SEMI / RBRACE / PIPE]
// [263, pipe_expr → • infix_expr, COMMA / SEMI / RBRACE / PIPE]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [506, list_commas_no_trailing(expr) → •, SEMI / RBRACE]
// [507, list_commas_no_trailing(expr) → • non_empty_list_commas_no_trailing(expr), SEMI / RBRACE]
// [514, non_empty_list_commas_no_trailing(expr) → • non_empty_list_commas_rev(expr), SEMI / RBRACE]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [587, non_empty_list_commas_rev(expr) → • expr, COMMA / SEMI / RBRACE]
// [588, non_empty_list_commas_rev(expr) → • non_empty_list_commas_rev(expr) COMMA expr, COMMA / SEMI / RBRACE]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_504(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    T_LIDENT => Shift(yy_state_311)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_323)
    NT_pipe_expr => Shift(yy_state_346)
    NT_match_expr => Shift(yy_state_349)
    NT_if_expr => Shift(yy_state_350)
    NT_try_expr => Shift(yy_state_351)
    NT_while_expr => Shift(yy_state_352)
    NT_foreach_expr => Shift(yy_state_353)
    NT_for_expr => Shift(yy_state_354)
    NT_loop_expr => Shift(yy_state_355)
    T_MATCH => Shift(yy_state_356)
    T_IF => Shift(yy_state_373)
    T_TRY => Shift(yy_state_379)
    NT_loop_label_colon => Shift(yy_state_396)
    T_POST_LABEL => Shift(yy_state_404)
    T_COLON => Shift(yy_state_405)
    NT_expr => Shift(yy_state_436)
    NT_non_empty_list_commas_rev_expr_ => Shift(yy_state_437)
    NT_non_empty_list_commas_no_trailing_expr_ => Shift(yy_state_502)
    NT_list_commas_no_trailing_expr_ => Shift(yy_state_505)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_481)
    T_SEMI | T_RBRACE => Reduce(0, NT_list_commas_no_trailing_expr_, yy_action_212)
    _ => Error
  }
}

// [221, expr_statement → CONTINUE POST_LABEL list_commas_no_trailing(expr) •, SEMI / RBRACE]
fn yy_state_505(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_expr_statement, yy_action_146)
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [219, expr_statement → BREAK • POST_LABEL option(expr), SEMI / RBRACE]
// [220, expr_statement → BREAK • option(expr), SEMI / RBRACE]
// [229, loop_label_colon → • POST_LABEL COLON, WHILE / LOOP / FOR]
// [230, loop_label_colon → •, WHILE / LOOP / FOR]
// [231, while_expr → • loop_label_colon WHILE infix_expr block_expr optional_else, SEMI / RBRACE]
// [238, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE, SEMI / RBRACE]
// [239, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE ELSE LBRACE single_pattern_cases RBRACE, SEMI / RBRACE]
// [240, if_expr → • IF infix_expr block_expr ELSE block_expr, SEMI / RBRACE]
// [241, if_expr → • IF infix_expr block_expr ELSE if_expr, SEMI / RBRACE]
// [242, if_expr → • IF infix_expr block_expr, SEMI / RBRACE]
// [243, match_expr → • MATCH infix_expr LBRACE non_empty_list_semis(single_pattern_case) RBRACE, SEMI / RBRACE]
// [244, match_expr → • MATCH infix_expr LBRACE RBRACE, SEMI / RBRACE]
// [245, loop_expr → • loop_label_colon LOOP non_empty_list_commas_no_trailing(expr) LBRACE list_semis(multi_pattern_case) RBRACE, SEMI / RBRACE]
// [249, for_expr → • loop_label_colon FOR for_binders SEMI option(infix_expr) SEMI list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) block_expr optional_else, SEMI / RBRACE]
// [250, for_expr → • loop_label_colon FOR for_binders block_expr optional_else, SEMI / RBRACE]
// [251, foreach_expr → • loop_label_colon FOR non_empty_list_commas(foreach_binder) IN expr block_expr optional_else, SEMI / RBRACE]
// [254, expr → • loop_expr, SEMI / RBRACE]
// [255, expr → • for_expr, SEMI / RBRACE]
// [256, expr → • foreach_expr, SEMI / RBRACE]
// [257, expr → • while_expr, SEMI / RBRACE]
// [258, expr → • try_expr, SEMI / RBRACE]
// [259, expr → • if_expr, SEMI / RBRACE]
// [260, expr → • match_expr, SEMI / RBRACE]
// [261, expr → • pipe_expr, SEMI / RBRACE]
// [262, pipe_expr → • pipe_expr PIPE infix_expr, SEMI / RBRACE / PIPE]
// [263, pipe_expr → • infix_expr, SEMI / RBRACE / PIPE]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [504, option(expr) → •, SEMI / RBRACE]
// [505, option(expr) → • expr, SEMI / RBRACE]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_506(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    T_LIDENT => Shift(yy_state_311)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_323)
    NT_pipe_expr => Shift(yy_state_346)
    NT_match_expr => Shift(yy_state_349)
    NT_if_expr => Shift(yy_state_350)
    NT_try_expr => Shift(yy_state_351)
    NT_while_expr => Shift(yy_state_352)
    NT_foreach_expr => Shift(yy_state_353)
    NT_for_expr => Shift(yy_state_354)
    NT_loop_expr => Shift(yy_state_355)
    T_MATCH => Shift(yy_state_356)
    T_IF => Shift(yy_state_373)
    T_TRY => Shift(yy_state_379)
    NT_loop_label_colon => Shift(yy_state_396)
    NT_expr => Shift(yy_state_467)
    NT_option_expr_ => Shift(yy_state_507)
    T_POST_LABEL => Shift(yy_state_508)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_481)
    T_SEMI | T_RBRACE => Reduce(0, NT_option_expr_, yy_action_131)
    _ => Error
  }
}

// [220, expr_statement → BREAK option(expr) •, SEMI / RBRACE]
fn yy_state_507(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_expr_statement, yy_action_189)
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [219, expr_statement → BREAK POST_LABEL • option(expr), SEMI / RBRACE]
// [229, loop_label_colon → • POST_LABEL COLON, WHILE / LOOP / FOR]
// [229, loop_label_colon → POST_LABEL • COLON, WHILE / LOOP / FOR]
// [230, loop_label_colon → •, WHILE / LOOP / FOR]
// [231, while_expr → • loop_label_colon WHILE infix_expr block_expr optional_else, SEMI / RBRACE]
// [238, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE, SEMI / RBRACE]
// [239, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE ELSE LBRACE single_pattern_cases RBRACE, SEMI / RBRACE]
// [240, if_expr → • IF infix_expr block_expr ELSE block_expr, SEMI / RBRACE]
// [241, if_expr → • IF infix_expr block_expr ELSE if_expr, SEMI / RBRACE]
// [242, if_expr → • IF infix_expr block_expr, SEMI / RBRACE]
// [243, match_expr → • MATCH infix_expr LBRACE non_empty_list_semis(single_pattern_case) RBRACE, SEMI / RBRACE]
// [244, match_expr → • MATCH infix_expr LBRACE RBRACE, SEMI / RBRACE]
// [245, loop_expr → • loop_label_colon LOOP non_empty_list_commas_no_trailing(expr) LBRACE list_semis(multi_pattern_case) RBRACE, SEMI / RBRACE]
// [249, for_expr → • loop_label_colon FOR for_binders SEMI option(infix_expr) SEMI list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) block_expr optional_else, SEMI / RBRACE]
// [250, for_expr → • loop_label_colon FOR for_binders block_expr optional_else, SEMI / RBRACE]
// [251, foreach_expr → • loop_label_colon FOR non_empty_list_commas(foreach_binder) IN expr block_expr optional_else, SEMI / RBRACE]
// [254, expr → • loop_expr, SEMI / RBRACE]
// [255, expr → • for_expr, SEMI / RBRACE]
// [256, expr → • foreach_expr, SEMI / RBRACE]
// [257, expr → • while_expr, SEMI / RBRACE]
// [258, expr → • try_expr, SEMI / RBRACE]
// [259, expr → • if_expr, SEMI / RBRACE]
// [260, expr → • match_expr, SEMI / RBRACE]
// [261, expr → • pipe_expr, SEMI / RBRACE]
// [262, pipe_expr → • pipe_expr PIPE infix_expr, SEMI / RBRACE / PIPE]
// [263, pipe_expr → • infix_expr, SEMI / RBRACE / PIPE]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [504, option(expr) → •, SEMI / RBRACE]
// [505, option(expr) → • expr, SEMI / RBRACE]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_508(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    T_LIDENT => Shift(yy_state_311)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_323)
    NT_pipe_expr => Shift(yy_state_346)
    NT_match_expr => Shift(yy_state_349)
    NT_if_expr => Shift(yy_state_350)
    NT_try_expr => Shift(yy_state_351)
    NT_while_expr => Shift(yy_state_352)
    NT_foreach_expr => Shift(yy_state_353)
    NT_for_expr => Shift(yy_state_354)
    NT_loop_expr => Shift(yy_state_355)
    T_MATCH => Shift(yy_state_356)
    T_IF => Shift(yy_state_373)
    T_TRY => Shift(yy_state_379)
    NT_loop_label_colon => Shift(yy_state_396)
    T_POST_LABEL => Shift(yy_state_404)
    T_COLON => Shift(yy_state_405)
    NT_expr => Shift(yy_state_467)
    NT_option_expr_ => Shift(yy_state_509)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_481)
    T_SEMI | T_RBRACE => Reduce(0, NT_option_expr_, yy_action_131)
    _ => Error
  }
}

// [219, expr_statement → BREAK POST_LABEL option(expr) •, SEMI / RBRACE]
fn yy_state_509(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_expr_statement, yy_action_552)
}

// [195, qual_ident → PACKAGE_NAME • DOT_LIDENT, AUGMENTED_ASSIGNMENT / EQUAL]
// [197, qual_ident_simple_expr → PACKAGE_NAME • DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [199, qual_ident_ty → PACKAGE_NAME • DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → PACKAGE_NAME • DOT_UIDENT, COLONCOLON]
// [290, constr → PACKAGE_NAME • DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_510(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_DOT_UIDENT => Shift(yy_state_101)
    T_DOT_LIDENT => Shift(yy_state_511)
    _ => Error
  }
}

// [195, qual_ident → PACKAGE_NAME DOT_LIDENT •, AUGMENTED_ASSIGNMENT / EQUAL]
// [197, qual_ident_simple_expr → PACKAGE_NAME DOT_LIDENT •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [199, qual_ident_ty → PACKAGE_NAME DOT_LIDENT •, COLONCOLON]
fn yy_state_511(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AUGMENTED_ASSIGNMENT | T_EQUAL => Reduce(2, NT_qual_ident, yy_action_562)
    T_INFIX1 | T_INFIX2 | T_INFIX3 | T_INFIX4 | T_LPAREN | T_MINUS | T_QUESTION | T_EXCLAMATION | T_DOT_LIDENT | T_DOT_INT | T_SEMI | T_LBRACKET | T_PLUS | T_BAR | T_RBRACE | T_AMPERAMPER | T_AMPER | T_CARET | T_BARBAR | T_AS | T_PIPE | T_DOTDOT | T_RANGE_INCLUSIVE | T_RANGE_EXCLUSIVE | T_IS => Reduce(2, NT_qual_ident_simple_expr, yy_action_569)
    T_COLONCOLON => Reduce(2, NT_qual_ident_ty, yy_action_184)
    _ => Error
  }
}

// [192, luident → LIDENT •, COLONCOLON]
// [194, qual_ident → LIDENT •, AUGMENTED_ASSIGNMENT / EQUAL]
// [196, qual_ident_simple_expr → LIDENT •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → LIDENT • QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_512(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_QUESTION => Shift(yy_state_312)
    T_COLONCOLON => Reduce(1, NT_luident, yy_action_155)
    T_AUGMENTED_ASSIGNMENT | T_EQUAL => Reduce(1, NT_qual_ident, yy_action_347)
    T_INFIX1 | T_INFIX2 | T_INFIX3 | T_INFIX4 | T_LPAREN | T_MINUS | T_EXCLAMATION | T_DOT_LIDENT | T_DOT_INT | T_SEMI | T_LBRACKET | T_PLUS | T_BAR | T_RBRACE | T_AMPERAMPER | T_AMPER | T_CARET | T_BARBAR | T_AS | T_PIPE | T_DOTDOT | T_RANGE_INCLUSIVE | T_RANGE_EXCLUSIVE | T_IS => Reduce(1, NT_qual_ident_simple_expr, yy_action_653)
    _ => Error
  }
}

// [244, match_expr → MATCH infix_expr LBRACE RBRACE •, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
fn yy_state_513(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_match_expr, yy_action_645)
}

// [243, match_expr → MATCH infix_expr LBRACE non_empty_list_semis(single_pattern_case) • RBRACE, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
fn yy_state_514(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACE => Shift(yy_state_515)
    _ => Error
  }
}

// [243, match_expr → MATCH infix_expr LBRACE non_empty_list_semis(single_pattern_case) RBRACE •, EOF / CATCH / RPAREN / COMMA / COLON / SEMI / RBRACKET / LBRACE / RBRACE / FAT_ARROW]
fn yy_state_515(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_match_expr, yy_action_391)
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [279, range_expr → prefix_expr RANGE_EXCLUSIVE • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / IS]
fn yy_state_516(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    T_PACKAGE_NAME => Shift(yy_state_309)
    T_LIDENT => Shift(yy_state_311)
    NT_prefix_expr => Shift(yy_state_517)
    _ => Error
  }
}

// [279, range_expr → prefix_expr RANGE_EXCLUSIVE prefix_expr •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / RPAREN / COMMA / MINUS / COLON / SEMI / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / IS]
fn yy_state_517(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_range_expr, yy_action_619)
}

// [6, parameter → POST_LABEL EQUAL expr •, RPAREN / COMMA]
fn yy_state_518(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_parameter, yy_action_493)
}

// [5, parameter → POST_LABEL COLON • type_, RPAREN / COMMA]
// [7, parameter → POST_LABEL COLON • type_ EQUAL expr, RPAREN / COMMA]
// [192, luident → • LIDENT, EQUAL / RPAREN / COMMA / QUESTION / LBRACKET]
// [193, luident → • UIDENT, EQUAL / RPAREN / COMMA / QUESTION / LBRACKET]
// [198, qual_ident_ty → • luident, EQUAL / RPAREN / COMMA / QUESTION / LBRACKET]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, EQUAL / RPAREN / COMMA / QUESTION / LBRACKET]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, EQUAL / RPAREN / COMMA / QUESTION / LBRACKET]
// [410, type_ → • type_ QUESTION, EQUAL / RPAREN / COMMA / QUESTION]
// [411, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN, EQUAL / RPAREN / COMMA / QUESTION]
// [412, type_ → • ASYNC LPAREN type_ COMMA RPAREN THIN_ARROW return_type, EQUAL / RPAREN / COMMA / QUESTION]
// [413, type_ → • ASYNC LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, EQUAL / RPAREN / COMMA / QUESTION]
// [414, type_ → • LPAREN type_ COMMA RPAREN THIN_ARROW return_type, EQUAL / RPAREN / COMMA / QUESTION]
// [415, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, EQUAL / RPAREN / COMMA / QUESTION]
// [416, type_ → • ASYNC LPAREN RPAREN THIN_ARROW return_type, EQUAL / RPAREN / COMMA / QUESTION]
// [417, type_ → • LPAREN RPAREN THIN_ARROW return_type, EQUAL / RPAREN / COMMA / QUESTION]
// [418, type_ → • LPAREN type_ RPAREN, EQUAL / RPAREN / COMMA / QUESTION]
// [419, type_ → • ASYNC LPAREN type_ RPAREN THIN_ARROW return_type, EQUAL / RPAREN / COMMA / QUESTION]
// [420, type_ → • LPAREN type_ RPAREN THIN_ARROW return_type, EQUAL / RPAREN / COMMA / QUESTION]
// [421, type_ → • qual_ident_ty optional_type_arguments, EQUAL / RPAREN / COMMA / QUESTION]
// [422, type_ → • AMPER qual_ident_ty, EQUAL / RPAREN / COMMA / QUESTION]
// [423, type_ → • UNDERSCORE, EQUAL / RPAREN / COMMA / QUESTION]
fn yy_state_519(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    T_UNDERSCORE => Shift(yy_state_120)
    T_AMPER => Shift(yy_state_121)
    NT_qual_ident_ty => Shift(yy_state_123)
    T_ASYNC => Shift(yy_state_129)
    T_LPAREN => Shift(yy_state_134)
    NT_type_ => Shift(yy_state_520)
    _ => Error
  }
}

// [5, parameter → POST_LABEL COLON type_ •, RPAREN / COMMA]
// [7, parameter → POST_LABEL COLON type_ • EQUAL expr, RPAREN / COMMA]
// [410, type_ → type_ • QUESTION, EQUAL / RPAREN / COMMA / QUESTION]
fn yy_state_520(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_QUESTION => Shift(yy_state_139)
    T_EQUAL => Shift(yy_state_521)
    T_RPAREN | T_COMMA => Reduce(3, NT_parameter, yy_action_479)
    _ => Error
  }
}

// [7, parameter → POST_LABEL COLON type_ EQUAL • expr, RPAREN / COMMA]
// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [229, loop_label_colon → • POST_LABEL COLON, WHILE / LOOP / FOR]
// [230, loop_label_colon → •, WHILE / LOOP / FOR]
// [231, while_expr → • loop_label_colon WHILE infix_expr block_expr optional_else, RPAREN / COMMA]
// [238, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE, RPAREN / COMMA]
// [239, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE ELSE LBRACE single_pattern_cases RBRACE, RPAREN / COMMA]
// [240, if_expr → • IF infix_expr block_expr ELSE block_expr, RPAREN / COMMA]
// [241, if_expr → • IF infix_expr block_expr ELSE if_expr, RPAREN / COMMA]
// [242, if_expr → • IF infix_expr block_expr, RPAREN / COMMA]
// [243, match_expr → • MATCH infix_expr LBRACE non_empty_list_semis(single_pattern_case) RBRACE, RPAREN / COMMA]
// [244, match_expr → • MATCH infix_expr LBRACE RBRACE, RPAREN / COMMA]
// [245, loop_expr → • loop_label_colon LOOP non_empty_list_commas_no_trailing(expr) LBRACE list_semis(multi_pattern_case) RBRACE, RPAREN / COMMA]
// [249, for_expr → • loop_label_colon FOR for_binders SEMI option(infix_expr) SEMI list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) block_expr optional_else, RPAREN / COMMA]
// [250, for_expr → • loop_label_colon FOR for_binders block_expr optional_else, RPAREN / COMMA]
// [251, foreach_expr → • loop_label_colon FOR non_empty_list_commas(foreach_binder) IN expr block_expr optional_else, RPAREN / COMMA]
// [254, expr → • loop_expr, RPAREN / COMMA]
// [255, expr → • for_expr, RPAREN / COMMA]
// [256, expr → • foreach_expr, RPAREN / COMMA]
// [257, expr → • while_expr, RPAREN / COMMA]
// [258, expr → • try_expr, RPAREN / COMMA]
// [259, expr → • if_expr, RPAREN / COMMA]
// [260, expr → • match_expr, RPAREN / COMMA]
// [261, expr → • pipe_expr, RPAREN / COMMA]
// [262, pipe_expr → • pipe_expr PIPE infix_expr, RPAREN / COMMA / PIPE]
// [263, pipe_expr → • infix_expr, RPAREN / COMMA / PIPE]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_521(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    T_LIDENT => Shift(yy_state_311)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_323)
    NT_pipe_expr => Shift(yy_state_346)
    NT_match_expr => Shift(yy_state_349)
    NT_if_expr => Shift(yy_state_350)
    NT_try_expr => Shift(yy_state_351)
    NT_while_expr => Shift(yy_state_352)
    NT_foreach_expr => Shift(yy_state_353)
    NT_for_expr => Shift(yy_state_354)
    NT_loop_expr => Shift(yy_state_355)
    T_MATCH => Shift(yy_state_356)
    T_IF => Shift(yy_state_373)
    T_TRY => Shift(yy_state_379)
    NT_loop_label_colon => Shift(yy_state_396)
    T_POST_LABEL => Shift(yy_state_404)
    NT_expr => Shift(yy_state_522)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_481)
    _ => Error
  }
}

// [7, parameter → POST_LABEL COLON type_ EQUAL expr •, RPAREN / COMMA]
fn yy_state_522(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_parameter, yy_action_193)
}

// [2, parameter → LIDENT •, RPAREN / COMMA]
// [3, parameter → LIDENT • COLON type_, RPAREN / COMMA]
// [8, parameter → LIDENT • QUESTION, RPAREN / COMMA]
// [9, parameter → LIDENT • QUESTION COLON type_, RPAREN / COMMA]
fn yy_state_523(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_QUESTION => Shift(yy_state_524)
    T_COLON => Shift(yy_state_527)
    T_RPAREN | T_COMMA => Reduce(1, NT_parameter, yy_action_517)
    _ => Error
  }
}

// [8, parameter → LIDENT QUESTION •, RPAREN / COMMA]
// [9, parameter → LIDENT QUESTION • COLON type_, RPAREN / COMMA]
fn yy_state_524(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_525)
    T_RPAREN | T_COMMA => Reduce(2, NT_parameter, yy_action_598)
    _ => Error
  }
}

// [9, parameter → LIDENT QUESTION COLON • type_, RPAREN / COMMA]
// [192, luident → • LIDENT, RPAREN / COMMA / QUESTION / LBRACKET]
// [193, luident → • UIDENT, RPAREN / COMMA / QUESTION / LBRACKET]
// [198, qual_ident_ty → • luident, RPAREN / COMMA / QUESTION / LBRACKET]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, RPAREN / COMMA / QUESTION / LBRACKET]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, RPAREN / COMMA / QUESTION / LBRACKET]
// [410, type_ → • type_ QUESTION, RPAREN / COMMA / QUESTION]
// [411, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN, RPAREN / COMMA / QUESTION]
// [412, type_ → • ASYNC LPAREN type_ COMMA RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [413, type_ → • ASYNC LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [414, type_ → • LPAREN type_ COMMA RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [415, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [416, type_ → • ASYNC LPAREN RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [417, type_ → • LPAREN RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [418, type_ → • LPAREN type_ RPAREN, RPAREN / COMMA / QUESTION]
// [419, type_ → • ASYNC LPAREN type_ RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [420, type_ → • LPAREN type_ RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [421, type_ → • qual_ident_ty optional_type_arguments, RPAREN / COMMA / QUESTION]
// [422, type_ → • AMPER qual_ident_ty, RPAREN / COMMA / QUESTION]
// [423, type_ → • UNDERSCORE, RPAREN / COMMA / QUESTION]
fn yy_state_525(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    T_UNDERSCORE => Shift(yy_state_120)
    T_AMPER => Shift(yy_state_121)
    NT_qual_ident_ty => Shift(yy_state_123)
    T_ASYNC => Shift(yy_state_129)
    T_LPAREN => Shift(yy_state_134)
    NT_type_ => Shift(yy_state_526)
    _ => Error
  }
}

// [9, parameter → LIDENT QUESTION COLON type_ •, RPAREN / COMMA]
// [410, type_ → type_ • QUESTION, RPAREN / COMMA / QUESTION]
fn yy_state_526(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_QUESTION => Shift(yy_state_139)
    T_RPAREN | T_COMMA => Reduce(4, NT_parameter, yy_action_238)
    _ => Error
  }
}

// [3, parameter → LIDENT COLON • type_, RPAREN / COMMA]
// [192, luident → • LIDENT, RPAREN / COMMA / QUESTION / LBRACKET]
// [193, luident → • UIDENT, RPAREN / COMMA / QUESTION / LBRACKET]
// [198, qual_ident_ty → • luident, RPAREN / COMMA / QUESTION / LBRACKET]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, RPAREN / COMMA / QUESTION / LBRACKET]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, RPAREN / COMMA / QUESTION / LBRACKET]
// [410, type_ → • type_ QUESTION, RPAREN / COMMA / QUESTION]
// [411, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN, RPAREN / COMMA / QUESTION]
// [412, type_ → • ASYNC LPAREN type_ COMMA RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [413, type_ → • ASYNC LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [414, type_ → • LPAREN type_ COMMA RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [415, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [416, type_ → • ASYNC LPAREN RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [417, type_ → • LPAREN RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [418, type_ → • LPAREN type_ RPAREN, RPAREN / COMMA / QUESTION]
// [419, type_ → • ASYNC LPAREN type_ RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [420, type_ → • LPAREN type_ RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [421, type_ → • qual_ident_ty optional_type_arguments, RPAREN / COMMA / QUESTION]
// [422, type_ → • AMPER qual_ident_ty, RPAREN / COMMA / QUESTION]
// [423, type_ → • UNDERSCORE, RPAREN / COMMA / QUESTION]
fn yy_state_527(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    T_UNDERSCORE => Shift(yy_state_120)
    T_AMPER => Shift(yy_state_121)
    NT_qual_ident_ty => Shift(yy_state_123)
    T_ASYNC => Shift(yy_state_129)
    T_LPAREN => Shift(yy_state_134)
    NT_type_ => Shift(yy_state_528)
    _ => Error
  }
}

// [3, parameter → LIDENT COLON type_ •, RPAREN / COMMA]
// [410, type_ → type_ • QUESTION, RPAREN / COMMA / QUESTION]
fn yy_state_528(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_QUESTION => Shift(yy_state_139)
    T_RPAREN | T_COMMA => Reduce(3, NT_parameter, yy_action_177)
    _ => Error
  }
}

// [0, parameter → UNDERSCORE •, RPAREN / COMMA]
// [1, parameter → UNDERSCORE • COLON type_, RPAREN / COMMA]
fn yy_state_529(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_530)
    T_RPAREN | T_COMMA => Reduce(1, NT_parameter, yy_action_245)
    _ => Error
  }
}

// [1, parameter → UNDERSCORE COLON • type_, RPAREN / COMMA]
// [192, luident → • LIDENT, RPAREN / COMMA / QUESTION / LBRACKET]
// [193, luident → • UIDENT, RPAREN / COMMA / QUESTION / LBRACKET]
// [198, qual_ident_ty → • luident, RPAREN / COMMA / QUESTION / LBRACKET]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, RPAREN / COMMA / QUESTION / LBRACKET]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, RPAREN / COMMA / QUESTION / LBRACKET]
// [410, type_ → • type_ QUESTION, RPAREN / COMMA / QUESTION]
// [411, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN, RPAREN / COMMA / QUESTION]
// [412, type_ → • ASYNC LPAREN type_ COMMA RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [413, type_ → • ASYNC LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [414, type_ → • LPAREN type_ COMMA RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [415, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [416, type_ → • ASYNC LPAREN RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [417, type_ → • LPAREN RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [418, type_ → • LPAREN type_ RPAREN, RPAREN / COMMA / QUESTION]
// [419, type_ → • ASYNC LPAREN type_ RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [420, type_ → • LPAREN type_ RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [421, type_ → • qual_ident_ty optional_type_arguments, RPAREN / COMMA / QUESTION]
// [422, type_ → • AMPER qual_ident_ty, RPAREN / COMMA / QUESTION]
// [423, type_ → • UNDERSCORE, RPAREN / COMMA / QUESTION]
fn yy_state_530(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    T_UNDERSCORE => Shift(yy_state_120)
    T_AMPER => Shift(yy_state_121)
    NT_qual_ident_ty => Shift(yy_state_123)
    T_ASYNC => Shift(yy_state_129)
    T_LPAREN => Shift(yy_state_134)
    NT_type_ => Shift(yy_state_531)
    _ => Error
  }
}

// [1, parameter → UNDERSCORE COLON type_ •, RPAREN / COMMA]
// [410, type_ → type_ • QUESTION, RPAREN / COMMA / QUESTION]
fn yy_state_531(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_QUESTION => Shift(yy_state_139)
    T_RPAREN | T_COMMA => Reduce(3, NT_parameter, yy_action_384)
    _ => Error
  }
}

// [448, list_commas(parameter) → non_empty_list_commas(parameter) •, RPAREN]
fn yy_state_532(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_list_commas_parameter_, yy_action_437)
}

// [10, parameters → LPAREN list_commas(parameter) • RPAREN, EQUAL / LBRACE / THIN_ARROW]
fn yy_state_533(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RPAREN => Shift(yy_state_534)
    _ => Error
  }
}

// [10, parameters → LPAREN list_commas(parameter) RPAREN •, EQUAL / LBRACE / THIN_ARROW]
fn yy_state_534(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_parameters, yy_action_12)
}

// [201, optional_bang → EXCLAMATION •, EQUAL / LPAREN / LBRACKET / LBRACE / THIN_ARROW]
fn yy_state_535(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_optional_bang, yy_action_695)
}

// [322, simple_expr → simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) • RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_536(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RPAREN => Shift(yy_state_537)
    _ => Error
  }
}

// [322, simple_expr → simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_537(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(7, NT_simple_expr, yy_action_66)
}

// [320, simple_expr → simple_expr DOTDOT LIDENT EXCLAMATION • LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → simple_expr DOTDOT LIDENT EXCLAMATION • EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_538(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EXCLAMATION => Shift(yy_state_539)
    T_LPAREN => Shift(yy_state_543)
    _ => Error
  }
}

// [321, simple_expr → simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION • LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_539(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_540)
    _ => Error
  }
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [229, loop_label_colon → • POST_LABEL COLON, WHILE / LOOP / FOR]
// [230, loop_label_colon → •, WHILE / LOOP / FOR]
// [231, while_expr → • loop_label_colon WHILE infix_expr block_expr optional_else, RPAREN / COMMA]
// [238, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE, RPAREN / COMMA]
// [239, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE ELSE LBRACE single_pattern_cases RBRACE, RPAREN / COMMA]
// [240, if_expr → • IF infix_expr block_expr ELSE block_expr, RPAREN / COMMA]
// [241, if_expr → • IF infix_expr block_expr ELSE if_expr, RPAREN / COMMA]
// [242, if_expr → • IF infix_expr block_expr, RPAREN / COMMA]
// [243, match_expr → • MATCH infix_expr LBRACE non_empty_list_semis(single_pattern_case) RBRACE, RPAREN / COMMA]
// [244, match_expr → • MATCH infix_expr LBRACE RBRACE, RPAREN / COMMA]
// [245, loop_expr → • loop_label_colon LOOP non_empty_list_commas_no_trailing(expr) LBRACE list_semis(multi_pattern_case) RBRACE, RPAREN / COMMA]
// [249, for_expr → • loop_label_colon FOR for_binders SEMI option(infix_expr) SEMI list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) block_expr optional_else, RPAREN / COMMA]
// [250, for_expr → • loop_label_colon FOR for_binders block_expr optional_else, RPAREN / COMMA]
// [251, foreach_expr → • loop_label_colon FOR non_empty_list_commas(foreach_binder) IN expr block_expr optional_else, RPAREN / COMMA]
// [254, expr → • loop_expr, RPAREN / COMMA]
// [255, expr → • for_expr, RPAREN / COMMA]
// [256, expr → • foreach_expr, RPAREN / COMMA]
// [257, expr → • while_expr, RPAREN / COMMA]
// [258, expr → • try_expr, RPAREN / COMMA]
// [259, expr → • if_expr, RPAREN / COMMA]
// [260, expr → • match_expr, RPAREN / COMMA]
// [261, expr → • pipe_expr, RPAREN / COMMA]
// [262, pipe_expr → • pipe_expr PIPE infix_expr, RPAREN / COMMA / PIPE]
// [263, pipe_expr → • infix_expr, RPAREN / COMMA / PIPE]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN • list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [355, argument → • LIDENT optional_question EQUAL expr, RPAREN / COMMA]
// [356, argument → • expr, RPAREN / COMMA]
// [357, argument → • POST_LABEL, RPAREN / COMMA]
// [358, argument → • LIDENT QUESTION, RPAREN / COMMA]
// [493, list_commas(argument) → •, RPAREN]
// [494, list_commas(argument) → • non_empty_list_commas(argument), RPAREN]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [576, non_empty_list_commas(argument) → • non_empty_list_commas_rev(argument) option(COMMA), RPAREN]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [614, non_empty_list_commas_rev(argument) → • argument, RPAREN / COMMA]
// [615, non_empty_list_commas_rev(argument) → • non_empty_list_commas_rev(argument) COMMA argument, RPAREN / COMMA]
fn yy_state_540(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    NT_argument => Shift(yy_state_282)
    NT_non_empty_list_commas_rev_argument_ => Shift(yy_state_283)
    NT_expr => Shift(yy_state_287)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    NT_non_empty_list_commas_argument_ => Shift(yy_state_314)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_323)
    NT_pipe_expr => Shift(yy_state_346)
    NT_match_expr => Shift(yy_state_349)
    NT_if_expr => Shift(yy_state_350)
    NT_try_expr => Shift(yy_state_351)
    NT_while_expr => Shift(yy_state_352)
    NT_foreach_expr => Shift(yy_state_353)
    NT_for_expr => Shift(yy_state_354)
    NT_loop_expr => Shift(yy_state_355)
    T_MATCH => Shift(yy_state_356)
    T_IF => Shift(yy_state_373)
    T_TRY => Shift(yy_state_379)
    NT_loop_label_colon => Shift(yy_state_396)
    T_POST_LABEL => Shift(yy_state_447)
    T_LIDENT => Shift(yy_state_448)
    NT_list_commas_argument_ => Shift(yy_state_541)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_481)
    T_RPAREN => Reduce(0, NT_list_commas_argument_, yy_action_394)
    _ => Error
  }
}

// [321, simple_expr → simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) • RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_541(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RPAREN => Shift(yy_state_542)
    _ => Error
  }
}

// [321, simple_expr → simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_542(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(8, NT_simple_expr, yy_action_125)
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [229, loop_label_colon → • POST_LABEL COLON, WHILE / LOOP / FOR]
// [230, loop_label_colon → •, WHILE / LOOP / FOR]
// [231, while_expr → • loop_label_colon WHILE infix_expr block_expr optional_else, RPAREN / COMMA]
// [238, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE, RPAREN / COMMA]
// [239, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE ELSE LBRACE single_pattern_cases RBRACE, RPAREN / COMMA]
// [240, if_expr → • IF infix_expr block_expr ELSE block_expr, RPAREN / COMMA]
// [241, if_expr → • IF infix_expr block_expr ELSE if_expr, RPAREN / COMMA]
// [242, if_expr → • IF infix_expr block_expr, RPAREN / COMMA]
// [243, match_expr → • MATCH infix_expr LBRACE non_empty_list_semis(single_pattern_case) RBRACE, RPAREN / COMMA]
// [244, match_expr → • MATCH infix_expr LBRACE RBRACE, RPAREN / COMMA]
// [245, loop_expr → • loop_label_colon LOOP non_empty_list_commas_no_trailing(expr) LBRACE list_semis(multi_pattern_case) RBRACE, RPAREN / COMMA]
// [249, for_expr → • loop_label_colon FOR for_binders SEMI option(infix_expr) SEMI list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) block_expr optional_else, RPAREN / COMMA]
// [250, for_expr → • loop_label_colon FOR for_binders block_expr optional_else, RPAREN / COMMA]
// [251, foreach_expr → • loop_label_colon FOR non_empty_list_commas(foreach_binder) IN expr block_expr optional_else, RPAREN / COMMA]
// [254, expr → • loop_expr, RPAREN / COMMA]
// [255, expr → • for_expr, RPAREN / COMMA]
// [256, expr → • foreach_expr, RPAREN / COMMA]
// [257, expr → • while_expr, RPAREN / COMMA]
// [258, expr → • try_expr, RPAREN / COMMA]
// [259, expr → • if_expr, RPAREN / COMMA]
// [260, expr → • match_expr, RPAREN / COMMA]
// [261, expr → • pipe_expr, RPAREN / COMMA]
// [262, pipe_expr → • pipe_expr PIPE infix_expr, RPAREN / COMMA / PIPE]
// [263, pipe_expr → • infix_expr, RPAREN / COMMA / PIPE]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → simple_expr DOTDOT LIDENT EXCLAMATION LPAREN • list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [355, argument → • LIDENT optional_question EQUAL expr, RPAREN / COMMA]
// [356, argument → • expr, RPAREN / COMMA]
// [357, argument → • POST_LABEL, RPAREN / COMMA]
// [358, argument → • LIDENT QUESTION, RPAREN / COMMA]
// [493, list_commas(argument) → •, RPAREN]
// [494, list_commas(argument) → • non_empty_list_commas(argument), RPAREN]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [576, non_empty_list_commas(argument) → • non_empty_list_commas_rev(argument) option(COMMA), RPAREN]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [614, non_empty_list_commas_rev(argument) → • argument, RPAREN / COMMA]
// [615, non_empty_list_commas_rev(argument) → • non_empty_list_commas_rev(argument) COMMA argument, RPAREN / COMMA]
fn yy_state_543(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    NT_argument => Shift(yy_state_282)
    NT_non_empty_list_commas_rev_argument_ => Shift(yy_state_283)
    NT_expr => Shift(yy_state_287)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    NT_non_empty_list_commas_argument_ => Shift(yy_state_314)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_323)
    NT_pipe_expr => Shift(yy_state_346)
    NT_match_expr => Shift(yy_state_349)
    NT_if_expr => Shift(yy_state_350)
    NT_try_expr => Shift(yy_state_351)
    NT_while_expr => Shift(yy_state_352)
    NT_foreach_expr => Shift(yy_state_353)
    NT_for_expr => Shift(yy_state_354)
    NT_loop_expr => Shift(yy_state_355)
    T_MATCH => Shift(yy_state_356)
    T_IF => Shift(yy_state_373)
    T_TRY => Shift(yy_state_379)
    NT_loop_label_colon => Shift(yy_state_396)
    T_POST_LABEL => Shift(yy_state_447)
    T_LIDENT => Shift(yy_state_448)
    NT_list_commas_argument_ => Shift(yy_state_544)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_481)
    T_RPAREN => Reduce(0, NT_list_commas_argument_, yy_action_394)
    _ => Error
  }
}

// [320, simple_expr → simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) • RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_544(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RPAREN => Shift(yy_state_545)
    _ => Error
  }
}

// [320, simple_expr → simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_545(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(7, NT_simple_expr, yy_action_675)
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [229, loop_label_colon → • POST_LABEL COLON, WHILE / LOOP / FOR]
// [230, loop_label_colon → •, WHILE / LOOP / FOR]
// [231, while_expr → • loop_label_colon WHILE infix_expr block_expr optional_else, RPAREN / COMMA]
// [238, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE, RPAREN / COMMA]
// [239, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE ELSE LBRACE single_pattern_cases RBRACE, RPAREN / COMMA]
// [240, if_expr → • IF infix_expr block_expr ELSE block_expr, RPAREN / COMMA]
// [241, if_expr → • IF infix_expr block_expr ELSE if_expr, RPAREN / COMMA]
// [242, if_expr → • IF infix_expr block_expr, RPAREN / COMMA]
// [243, match_expr → • MATCH infix_expr LBRACE non_empty_list_semis(single_pattern_case) RBRACE, RPAREN / COMMA]
// [244, match_expr → • MATCH infix_expr LBRACE RBRACE, RPAREN / COMMA]
// [245, loop_expr → • loop_label_colon LOOP non_empty_list_commas_no_trailing(expr) LBRACE list_semis(multi_pattern_case) RBRACE, RPAREN / COMMA]
// [249, for_expr → • loop_label_colon FOR for_binders SEMI option(infix_expr) SEMI list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) block_expr optional_else, RPAREN / COMMA]
// [250, for_expr → • loop_label_colon FOR for_binders block_expr optional_else, RPAREN / COMMA]
// [251, foreach_expr → • loop_label_colon FOR non_empty_list_commas(foreach_binder) IN expr block_expr optional_else, RPAREN / COMMA]
// [254, expr → • loop_expr, RPAREN / COMMA]
// [255, expr → • for_expr, RPAREN / COMMA]
// [256, expr → • foreach_expr, RPAREN / COMMA]
// [257, expr → • while_expr, RPAREN / COMMA]
// [258, expr → • try_expr, RPAREN / COMMA]
// [259, expr → • if_expr, RPAREN / COMMA]
// [260, expr → • match_expr, RPAREN / COMMA]
// [261, expr → • pipe_expr, RPAREN / COMMA]
// [262, pipe_expr → • pipe_expr PIPE infix_expr, RPAREN / COMMA / PIPE]
// [263, pipe_expr → • infix_expr, RPAREN / COMMA / PIPE]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → simple_expr DOTDOT LIDENT LPAREN • list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [355, argument → • LIDENT optional_question EQUAL expr, RPAREN / COMMA]
// [356, argument → • expr, RPAREN / COMMA]
// [357, argument → • POST_LABEL, RPAREN / COMMA]
// [358, argument → • LIDENT QUESTION, RPAREN / COMMA]
// [493, list_commas(argument) → •, RPAREN]
// [494, list_commas(argument) → • non_empty_list_commas(argument), RPAREN]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [576, non_empty_list_commas(argument) → • non_empty_list_commas_rev(argument) option(COMMA), RPAREN]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [614, non_empty_list_commas_rev(argument) → • argument, RPAREN / COMMA]
// [615, non_empty_list_commas_rev(argument) → • non_empty_list_commas_rev(argument) COMMA argument, RPAREN / COMMA]
fn yy_state_546(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    NT_argument => Shift(yy_state_282)
    NT_non_empty_list_commas_rev_argument_ => Shift(yy_state_283)
    NT_expr => Shift(yy_state_287)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    NT_non_empty_list_commas_argument_ => Shift(yy_state_314)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_323)
    NT_pipe_expr => Shift(yy_state_346)
    NT_match_expr => Shift(yy_state_349)
    NT_if_expr => Shift(yy_state_350)
    NT_try_expr => Shift(yy_state_351)
    NT_while_expr => Shift(yy_state_352)
    NT_foreach_expr => Shift(yy_state_353)
    NT_for_expr => Shift(yy_state_354)
    NT_loop_expr => Shift(yy_state_355)
    T_MATCH => Shift(yy_state_356)
    T_IF => Shift(yy_state_373)
    T_TRY => Shift(yy_state_379)
    NT_loop_label_colon => Shift(yy_state_396)
    T_POST_LABEL => Shift(yy_state_447)
    T_LIDENT => Shift(yy_state_448)
    NT_list_commas_argument_ => Shift(yy_state_547)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_481)
    T_RPAREN => Reduce(0, NT_list_commas_argument_, yy_action_394)
    _ => Error
  }
}

// [319, simple_expr → simple_expr DOTDOT LIDENT LPAREN list_commas(argument) • RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_547(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RPAREN => Shift(yy_state_548)
    _ => Error
  }
}

// [319, simple_expr → simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_548(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(6, NT_simple_expr, yy_action_582)
}

// [315, simple_expr → simple_expr DOT_LIDENT • LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → simple_expr DOT_LIDENT • EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → simple_expr DOT_LIDENT • EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → simple_expr DOT_LIDENT • QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → simple_expr DOT_LIDENT •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_549(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_QUESTION => Shift(yy_state_474)
    T_EXCLAMATION => Shift(yy_state_478)
    T_LPAREN => Shift(yy_state_486)
    T_INFIX1 | T_INFIX2 | T_INFIX3 | T_INFIX4 | T_EOF | T_CATCH | T_RPAREN | T_COMMA | T_MINUS | T_DOT_LIDENT | T_DOT_INT | T_COLON | T_SEMI | T_LBRACKET | T_PLUS | T_RBRACKET | T_BAR | T_LBRACE | T_RBRACE | T_AMPERAMPER | T_AMPER | T_CARET | T_BARBAR | T_AS | T_PIPE | T_ELSE | T_FAT_ARROW | T_DOTDOT | T_RANGE_INCLUSIVE | T_RANGE_EXCLUSIVE | T_IS => Reduce(2, NT_simple_expr, yy_action_528)
    _ => Error
  }
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [229, loop_label_colon → • POST_LABEL COLON, WHILE / LOOP / FOR]
// [230, loop_label_colon → •, WHILE / LOOP / FOR]
// [231, while_expr → • loop_label_colon WHILE infix_expr block_expr optional_else, COLON / RBRACKET]
// [238, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE, COLON / RBRACKET]
// [239, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE ELSE LBRACE single_pattern_cases RBRACE, COLON / RBRACKET]
// [240, if_expr → • IF infix_expr block_expr ELSE block_expr, COLON / RBRACKET]
// [241, if_expr → • IF infix_expr block_expr ELSE if_expr, COLON / RBRACKET]
// [242, if_expr → • IF infix_expr block_expr, COLON / RBRACKET]
// [243, match_expr → • MATCH infix_expr LBRACE non_empty_list_semis(single_pattern_case) RBRACE, COLON / RBRACKET]
// [244, match_expr → • MATCH infix_expr LBRACE RBRACE, COLON / RBRACKET]
// [245, loop_expr → • loop_label_colon LOOP non_empty_list_commas_no_trailing(expr) LBRACE list_semis(multi_pattern_case) RBRACE, COLON / RBRACKET]
// [249, for_expr → • loop_label_colon FOR for_binders SEMI option(infix_expr) SEMI list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) block_expr optional_else, COLON / RBRACKET]
// [250, for_expr → • loop_label_colon FOR for_binders block_expr optional_else, COLON / RBRACKET]
// [251, foreach_expr → • loop_label_colon FOR non_empty_list_commas(foreach_binder) IN expr block_expr optional_else, COLON / RBRACKET]
// [254, expr → • loop_expr, COLON / RBRACKET]
// [255, expr → • for_expr, COLON / RBRACKET]
// [256, expr → • foreach_expr, COLON / RBRACKET]
// [257, expr → • while_expr, COLON / RBRACKET]
// [258, expr → • try_expr, COLON / RBRACKET]
// [259, expr → • if_expr, COLON / RBRACKET]
// [260, expr → • match_expr, COLON / RBRACKET]
// [261, expr → • pipe_expr, COLON / RBRACKET]
// [262, pipe_expr → • pipe_expr PIPE infix_expr, COLON / RBRACKET / PIPE]
// [263, pipe_expr → • infix_expr, COLON / RBRACKET / PIPE]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / COLON / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / COLON / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / COLON / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / COLON / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / COLON / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / COLON / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / COLON / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / COLON / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / COLON / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / COLON / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / COLON / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / COLON / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / COLON / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / COLON / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / COLON / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / COLON / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / COLON / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / COLON / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / COLON / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / COLON / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / COLON / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → simple_expr LBRACKET • expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → simple_expr LBRACKET • option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [504, option(expr) → •, COLON]
// [505, option(expr) → • expr, COLON]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / LBRACKET / PLUS / RBRACKET / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_550(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    T_LIDENT => Shift(yy_state_311)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_323)
    NT_pipe_expr => Shift(yy_state_346)
    NT_match_expr => Shift(yy_state_349)
    NT_if_expr => Shift(yy_state_350)
    NT_try_expr => Shift(yy_state_351)
    NT_while_expr => Shift(yy_state_352)
    NT_foreach_expr => Shift(yy_state_353)
    NT_for_expr => Shift(yy_state_354)
    NT_loop_expr => Shift(yy_state_355)
    T_MATCH => Shift(yy_state_356)
    T_IF => Shift(yy_state_373)
    T_TRY => Shift(yy_state_379)
    NT_loop_label_colon => Shift(yy_state_396)
    T_POST_LABEL => Shift(yy_state_404)
    NT_option_expr_ => Shift(yy_state_465)
    NT_expr => Shift(yy_state_551)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_481)
    T_COLON => Reduce(0, NT_option_expr_, yy_action_131)
    _ => Error
  }
}

// [313, simple_expr → simple_expr LBRACKET expr • RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [505, option(expr) → expr •, COLON]
fn yy_state_551(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACKET => Shift(yy_state_552)
    T_COLON => Reduce(1, NT_option_expr_, yy_action_61)
    _ => Error
  }
}

// [313, simple_expr → simple_expr LBRACKET expr RBRACKET •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_552(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_simple_expr, yy_action_117)
}

// [521, list_commas_with_trailing_info(record_defn_single) → non_empty_list_commas_with_trailing_info(record_defn_single) •, RBRACE]
fn yy_state_553(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_list_commas_with_trailing_info_record_defn_single_, yy_action_315)
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [229, loop_label_colon → • POST_LABEL COLON, WHILE / LOOP / FOR]
// [230, loop_label_colon → •, WHILE / LOOP / FOR]
// [231, while_expr → • loop_label_colon WHILE infix_expr block_expr optional_else, COMMA / RBRACE]
// [238, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE, COMMA / RBRACE]
// [239, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE ELSE LBRACE single_pattern_cases RBRACE, COMMA / RBRACE]
// [240, if_expr → • IF infix_expr block_expr ELSE block_expr, COMMA / RBRACE]
// [241, if_expr → • IF infix_expr block_expr ELSE if_expr, COMMA / RBRACE]
// [242, if_expr → • IF infix_expr block_expr, COMMA / RBRACE]
// [243, match_expr → • MATCH infix_expr LBRACE non_empty_list_semis(single_pattern_case) RBRACE, COMMA / RBRACE]
// [244, match_expr → • MATCH infix_expr LBRACE RBRACE, COMMA / RBRACE]
// [245, loop_expr → • loop_label_colon LOOP non_empty_list_commas_no_trailing(expr) LBRACE list_semis(multi_pattern_case) RBRACE, COMMA / RBRACE]
// [249, for_expr → • loop_label_colon FOR for_binders SEMI option(infix_expr) SEMI list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) block_expr optional_else, COMMA / RBRACE]
// [250, for_expr → • loop_label_colon FOR for_binders block_expr optional_else, COMMA / RBRACE]
// [251, foreach_expr → • loop_label_colon FOR non_empty_list_commas(foreach_binder) IN expr block_expr optional_else, COMMA / RBRACE]
// [254, expr → • loop_expr, COMMA / RBRACE]
// [255, expr → • for_expr, COMMA / RBRACE]
// [256, expr → • foreach_expr, COMMA / RBRACE]
// [257, expr → • while_expr, COMMA / RBRACE]
// [258, expr → • try_expr, COMMA / RBRACE]
// [259, expr → • if_expr, COMMA / RBRACE]
// [260, expr → • match_expr, COMMA / RBRACE]
// [261, expr → • pipe_expr, COMMA / RBRACE]
// [262, pipe_expr → • pipe_expr PIPE infix_expr, COMMA / RBRACE / PIPE]
// [263, pipe_expr → • infix_expr, COMMA / RBRACE / PIPE]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → type_name COLONCOLON LBRACE DOTDOT • expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → type_name COLONCOLON LBRACE DOTDOT • expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_554(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    T_LIDENT => Shift(yy_state_311)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_323)
    NT_pipe_expr => Shift(yy_state_346)
    NT_match_expr => Shift(yy_state_349)
    NT_if_expr => Shift(yy_state_350)
    NT_try_expr => Shift(yy_state_351)
    NT_while_expr => Shift(yy_state_352)
    NT_foreach_expr => Shift(yy_state_353)
    NT_for_expr => Shift(yy_state_354)
    NT_loop_expr => Shift(yy_state_355)
    T_MATCH => Shift(yy_state_356)
    T_IF => Shift(yy_state_373)
    T_TRY => Shift(yy_state_379)
    NT_loop_label_colon => Shift(yy_state_396)
    T_POST_LABEL => Shift(yy_state_404)
    NT_expr => Shift(yy_state_555)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_481)
    _ => Error
  }
}

// [295, simple_expr → type_name COLONCOLON LBRACE DOTDOT expr • RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → type_name COLONCOLON LBRACE DOTDOT expr • COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_555(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COMMA => Shift(yy_state_556)
    T_RBRACE => Shift(yy_state_562)
    _ => Error
  }
}

// [297, simple_expr → type_name COLONCOLON LBRACE DOTDOT expr COMMA • list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [433, record_defn_single → • LIDENT COLON expr, COMMA / RBRACE]
// [434, record_defn_single → • LIDENT, COMMA / RBRACE]
// [522, list_commas(record_defn_single) → •, RBRACE]
// [523, list_commas(record_defn_single) → • non_empty_list_commas(record_defn_single), RBRACE]
// [592, non_empty_list_commas(record_defn_single) → • non_empty_list_commas_rev(record_defn_single) option(COMMA), RBRACE]
// [602, non_empty_list_commas_rev(record_defn_single) → • record_defn_single, COMMA / RBRACE]
// [603, non_empty_list_commas_rev(record_defn_single) → • non_empty_list_commas_rev(record_defn_single) COMMA record_defn_single, COMMA / RBRACE]
fn yy_state_556(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_record_defn_single => Shift(yy_state_268)
    T_LIDENT => Shift(yy_state_273)
    NT_non_empty_list_commas_rev_record_defn_single_ => Shift(yy_state_557)
    NT_non_empty_list_commas_record_defn_single_ => Shift(yy_state_559)
    NT_list_commas_record_defn_single_ => Shift(yy_state_560)
    T_RBRACE => Reduce(0, NT_list_commas_record_defn_single_, yy_action_683)
    _ => Error
  }
}

// [533, option(COMMA) → •, RBRACE]
// [534, option(COMMA) → • COMMA, RBRACE]
// [592, non_empty_list_commas(record_defn_single) → non_empty_list_commas_rev(record_defn_single) • option(COMMA), RBRACE]
// [603, non_empty_list_commas_rev(record_defn_single) → non_empty_list_commas_rev(record_defn_single) • COMMA record_defn_single, COMMA / RBRACE]
fn yy_state_557(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COMMA => Shift(yy_state_271)
    NT_option_COMMA_ => Shift(yy_state_558)
    T_RBRACE => Reduce(0, NT_option_COMMA_, yy_action_181)
    _ => Error
  }
}

// [592, non_empty_list_commas(record_defn_single) → non_empty_list_commas_rev(record_defn_single) option(COMMA) •, RBRACE]
fn yy_state_558(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_non_empty_list_commas_record_defn_single_, yy_action_505)
}

// [523, list_commas(record_defn_single) → non_empty_list_commas(record_defn_single) •, RBRACE]
fn yy_state_559(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_list_commas_record_defn_single_, yy_action_426)
}

// [297, simple_expr → type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) • RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_560(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACE => Shift(yy_state_561)
    _ => Error
  }
}

// [297, simple_expr → type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_561(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(8, NT_simple_expr, yy_action_48)
}

// [295, simple_expr → type_name COLONCOLON LBRACE DOTDOT expr RBRACE •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_562(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(6, NT_simple_expr, yy_action_94)
}

// [293, simple_expr → type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) • RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_563(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACE => Shift(yy_state_564)
    _ => Error
  }
}

// [293, simple_expr → type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_564(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_simple_expr, yy_action_485)
}

// [525, list_commas(map_expr_elem) → non_empty_list_commas(map_expr_elem) •, RBRACE]
fn yy_state_565(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_list_commas_map_expr_elem_, yy_action_176)
}

// [501, none_empty_list_semis_rev_with_trailing_info(statement) → non_empty_list_semi_rev_aux(statement) • option(SEMI), RBRACE]
// [580, non_empty_list_semi_rev_aux(statement) → non_empty_list_semi_rev_aux(statement) • SEMI statement, SEMI / RBRACE]
// [581, option(SEMI) → •, RBRACE]
// [582, option(SEMI) → • SEMI, RBRACE]
fn yy_state_566(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_SEMI => Shift(yy_state_253)
    NT_option_SEMI_ => Shift(yy_state_567)
    T_RBRACE => Reduce(0, NT_option_SEMI_, yy_action_539)
    _ => Error
  }
}

// [501, none_empty_list_semis_rev_with_trailing_info(statement) → non_empty_list_semi_rev_aux(statement) option(SEMI) •, RBRACE]
fn yy_state_567(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_none_empty_list_semis_rev_with_trailing_info_statement_, yy_action_621)
}

// [339, atomic_expr → simple_constant •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [350, map_syntax_key → simple_constant •, COLON]
fn yy_state_568(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_INFIX1 | T_INFIX2 | T_INFIX3 | T_INFIX4 | T_LPAREN | T_MINUS | T_QUESTION | T_EXCLAMATION | T_DOT_LIDENT | T_DOT_INT | T_SEMI | T_LBRACKET | T_PLUS | T_BAR | T_RBRACE | T_AMPERAMPER | T_AMPER | T_CARET | T_BARBAR | T_AS | T_PIPE | T_DOTDOT | T_RANGE_INCLUSIVE | T_RANGE_EXCLUSIVE | T_IS => Reduce(1, NT_atomic_expr, yy_action_398)
    T_COLON => Reduce(1, NT_map_syntax_key, yy_action_0)
    _ => Error
  }
}

// [299, simple_expr → LBRACE list_commas(map_expr_elem) • RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_569(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACE => Shift(yy_state_570)
    _ => Error
  }
}

// [299, simple_expr → LBRACE list_commas(map_expr_elem) RBRACE •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_570(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_simple_expr, yy_action_42)
}

// [298, simple_expr → LBRACE none_empty_list_semis_rev_with_trailing_info(statement) • RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_571(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACE => Shift(yy_state_572)
    _ => Error
  }
}

// [298, simple_expr → LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_572(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_simple_expr, yy_action_86)
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [229, loop_label_colon → • POST_LABEL COLON, WHILE / LOOP / FOR]
// [230, loop_label_colon → •, WHILE / LOOP / FOR]
// [231, while_expr → • loop_label_colon WHILE infix_expr block_expr optional_else, COMMA / RBRACE]
// [238, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE, COMMA / RBRACE]
// [239, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE ELSE LBRACE single_pattern_cases RBRACE, COMMA / RBRACE]
// [240, if_expr → • IF infix_expr block_expr ELSE block_expr, COMMA / RBRACE]
// [241, if_expr → • IF infix_expr block_expr ELSE if_expr, COMMA / RBRACE]
// [242, if_expr → • IF infix_expr block_expr, COMMA / RBRACE]
// [243, match_expr → • MATCH infix_expr LBRACE non_empty_list_semis(single_pattern_case) RBRACE, COMMA / RBRACE]
// [244, match_expr → • MATCH infix_expr LBRACE RBRACE, COMMA / RBRACE]
// [245, loop_expr → • loop_label_colon LOOP non_empty_list_commas_no_trailing(expr) LBRACE list_semis(multi_pattern_case) RBRACE, COMMA / RBRACE]
// [249, for_expr → • loop_label_colon FOR for_binders SEMI option(infix_expr) SEMI list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) block_expr optional_else, COMMA / RBRACE]
// [250, for_expr → • loop_label_colon FOR for_binders block_expr optional_else, COMMA / RBRACE]
// [251, foreach_expr → • loop_label_colon FOR non_empty_list_commas(foreach_binder) IN expr block_expr optional_else, COMMA / RBRACE]
// [254, expr → • loop_expr, COMMA / RBRACE]
// [255, expr → • for_expr, COMMA / RBRACE]
// [256, expr → • foreach_expr, COMMA / RBRACE]
// [257, expr → • while_expr, COMMA / RBRACE]
// [258, expr → • try_expr, COMMA / RBRACE]
// [259, expr → • if_expr, COMMA / RBRACE]
// [260, expr → • match_expr, COMMA / RBRACE]
// [261, expr → • pipe_expr, COMMA / RBRACE]
// [262, pipe_expr → • pipe_expr PIPE infix_expr, COMMA / RBRACE / PIPE]
// [263, pipe_expr → • infix_expr, COMMA / RBRACE / PIPE]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → LBRACE DOTDOT • expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → LBRACE DOTDOT • expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_573(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    T_LIDENT => Shift(yy_state_311)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_323)
    NT_pipe_expr => Shift(yy_state_346)
    NT_match_expr => Shift(yy_state_349)
    NT_if_expr => Shift(yy_state_350)
    NT_try_expr => Shift(yy_state_351)
    NT_while_expr => Shift(yy_state_352)
    NT_foreach_expr => Shift(yy_state_353)
    NT_for_expr => Shift(yy_state_354)
    NT_loop_expr => Shift(yy_state_355)
    T_MATCH => Shift(yy_state_356)
    T_IF => Shift(yy_state_373)
    T_TRY => Shift(yy_state_379)
    NT_loop_label_colon => Shift(yy_state_396)
    T_POST_LABEL => Shift(yy_state_404)
    NT_expr => Shift(yy_state_574)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_481)
    _ => Error
  }
}

// [294, simple_expr → LBRACE DOTDOT expr • RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → LBRACE DOTDOT expr • COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_574(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COMMA => Shift(yy_state_575)
    T_RBRACE => Shift(yy_state_578)
    _ => Error
  }
}

// [296, simple_expr → LBRACE DOTDOT expr COMMA • list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [433, record_defn_single → • LIDENT COLON expr, COMMA / RBRACE]
// [434, record_defn_single → • LIDENT, COMMA / RBRACE]
// [522, list_commas(record_defn_single) → •, RBRACE]
// [523, list_commas(record_defn_single) → • non_empty_list_commas(record_defn_single), RBRACE]
// [592, non_empty_list_commas(record_defn_single) → • non_empty_list_commas_rev(record_defn_single) option(COMMA), RBRACE]
// [602, non_empty_list_commas_rev(record_defn_single) → • record_defn_single, COMMA / RBRACE]
// [603, non_empty_list_commas_rev(record_defn_single) → • non_empty_list_commas_rev(record_defn_single) COMMA record_defn_single, COMMA / RBRACE]
fn yy_state_575(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_record_defn_single => Shift(yy_state_268)
    T_LIDENT => Shift(yy_state_273)
    NT_non_empty_list_commas_rev_record_defn_single_ => Shift(yy_state_557)
    NT_non_empty_list_commas_record_defn_single_ => Shift(yy_state_559)
    NT_list_commas_record_defn_single_ => Shift(yy_state_576)
    T_RBRACE => Reduce(0, NT_list_commas_record_defn_single_, yy_action_683)
    _ => Error
  }
}

// [296, simple_expr → LBRACE DOTDOT expr COMMA list_commas(record_defn_single) • RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_576(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACE => Shift(yy_state_577)
    _ => Error
  }
}

// [296, simple_expr → LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_577(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(6, NT_simple_expr, yy_action_532)
}

// [294, simple_expr → LBRACE DOTDOT expr RBRACE •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_578(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_simple_expr, yy_action_355)
}

// [292, simple_expr → LBRACE record_defn • RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_579(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACE => Shift(yy_state_580)
    _ => Error
  }
}

// [292, simple_expr → LBRACE record_defn RBRACE •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_580(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_simple_expr, yy_action_119)
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → MINUS • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [351, map_syntax_key → MINUS • INT, COLON]
// [352, map_syntax_key → MINUS • FLOAT, COLON]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_581(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    T_MINUS => Shift(yy_state_288)
    NT_prefix_expr => Shift(yy_state_289)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    T_PACKAGE_NAME => Shift(yy_state_309)
    T_LIDENT => Shift(yy_state_311)
    T_FLOAT => Shift(yy_state_582)
    T_INT => Shift(yy_state_583)
    _ => Error
  }
}

// [348, simple_constant → FLOAT •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [352, map_syntax_key → MINUS FLOAT •, COLON]
fn yy_state_582(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_INFIX1 | T_INFIX2 | T_INFIX3 | T_INFIX4 | T_LPAREN | T_MINUS | T_QUESTION | T_EXCLAMATION | T_DOT_LIDENT | T_DOT_INT | T_SEMI | T_LBRACKET | T_PLUS | T_BAR | T_RBRACE | T_AMPERAMPER | T_AMPER | T_CARET | T_BARBAR | T_AS | T_PIPE | T_DOTDOT | T_RANGE_INCLUSIVE | T_RANGE_EXCLUSIVE | T_IS => Reduce(1, NT_simple_constant, yy_action_566)
    T_COLON => Reduce(2, NT_map_syntax_key, yy_action_122)
    _ => Error
  }
}

// [347, simple_constant → INT •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [351, map_syntax_key → MINUS INT •, COLON]
fn yy_state_583(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_INFIX1 | T_INFIX2 | T_INFIX3 | T_INFIX4 | T_LPAREN | T_MINUS | T_QUESTION | T_EXCLAMATION | T_DOT_LIDENT | T_DOT_INT | T_SEMI | T_LBRACKET | T_PLUS | T_BAR | T_RBRACE | T_AMPERAMPER | T_AMPER | T_CARET | T_BARBAR | T_AS | T_PIPE | T_DOTDOT | T_RANGE_INCLUSIVE | T_RANGE_EXCLUSIVE | T_IS => Reduce(1, NT_simple_constant, yy_action_202)
    T_COLON => Reduce(2, NT_map_syntax_key, yy_action_154)
    _ => Error
  }
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [215, guard_statement → GUARD • infix_expr, SEMI / RBRACE]
// [216, guard_statement → GUARD • infix_expr ELSE block_expr, SEMI / RBRACE]
// [217, guard_statement → GUARD • LET pattern EQUAL infix_expr, SEMI / RBRACE]
// [218, guard_statement → GUARD • LET pattern EQUAL infix_expr ELSE LBRACE single_pattern_cases RBRACE, SEMI / RBRACE]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / ELSE]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / ELSE]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / ELSE]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / ELSE]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / ELSE]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / ELSE]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / ELSE]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / ELSE]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / ELSE]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / ELSE]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / ELSE]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / ELSE]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / ELSE]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / ELSE]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / ELSE]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_584(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    T_LIDENT => Shift(yy_state_311)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    T_LET => Shift(yy_state_585)
    NT_infix_expr => Shift(yy_state_593)
    _ => Error
  }
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [217, guard_statement → GUARD LET • pattern EQUAL infix_expr, SEMI / RBRACE]
// [218, guard_statement → GUARD LET • pattern EQUAL infix_expr ELSE LBRACE single_pattern_cases RBRACE, SEMI / RBRACE]
// [289, constr → • UIDENT, EQUAL / LPAREN / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, EQUAL / LPAREN / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [291, constr → • type_name COLONCOLON UIDENT, EQUAL / LPAREN / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [362, pattern → • pattern AS LIDENT, EQUAL / AS]
// [363, pattern → • or_pattern, EQUAL / AS]
// [364, or_pattern → • range_pattern BAR or_pattern, EQUAL / AS]
// [365, or_pattern → • range_pattern, EQUAL / AS]
// [366, range_pattern → • simple_pattern RANGE_EXCLUSIVE simple_pattern, EQUAL / BAR / AS]
// [367, range_pattern → • simple_pattern RANGE_INCLUSIVE simple_pattern, EQUAL / BAR / AS]
// [368, range_pattern → • simple_pattern, EQUAL / BAR / AS]
// [369, simple_pattern → • TRUE, EQUAL / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [370, simple_pattern → • FALSE, EQUAL / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [371, simple_pattern → • CHAR, EQUAL / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [372, simple_pattern → • INT, EQUAL / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [373, simple_pattern → • BYTE, EQUAL / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [374, simple_pattern → • FLOAT, EQUAL / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [375, simple_pattern → • MINUS INT, EQUAL / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [376, simple_pattern → • MINUS FLOAT, EQUAL / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [377, simple_pattern → • STRING, EQUAL / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [378, simple_pattern → • BYTES, EQUAL / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [379, simple_pattern → • UNDERSCORE, EQUAL / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [380, simple_pattern → • LIDENT, EQUAL / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [381, simple_pattern → • constr option(delimited(LPAREN,constr_pat_arguments,RPAREN)), EQUAL / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [382, simple_pattern → • LPAREN pattern RPAREN, EQUAL / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [383, simple_pattern → • LPAREN pattern COMMA non_empty_list_commas(pattern) RPAREN, EQUAL / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [384, simple_pattern → • LPAREN pattern COLON type_ RPAREN, EQUAL / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [385, simple_pattern → • LBRACKET array_sub_patterns RBRACKET, EQUAL / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [386, simple_pattern → • LBRACE RBRACE, EQUAL / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [387, simple_pattern → • LBRACE DOTDOT option(COMMA) RBRACE, EQUAL / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [388, simple_pattern → • LBRACE non_empty_fields_pat RBRACE, EQUAL / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [389, simple_pattern → • LBRACE non_empty_map_elems_pat RBRACE, EQUAL / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
fn yy_state_585(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACE => Shift(yy_state_52)
    T_LBRACKET => Shift(yy_state_56)
    T_LPAREN => Shift(yy_state_70)
    NT_constr => Shift(yy_state_71)
    T_UNDERSCORE => Shift(yy_state_82)
    T_BYTES => Shift(yy_state_83)
    T_STRING => Shift(yy_state_84)
    T_MINUS => Shift(yy_state_85)
    T_FLOAT => Shift(yy_state_88)
    T_BYTE => Shift(yy_state_89)
    T_INT => Shift(yy_state_90)
    T_CHAR => Shift(yy_state_91)
    T_FALSE => Shift(yy_state_92)
    T_TRUE => Shift(yy_state_93)
    NT_simple_pattern => Shift(yy_state_94)
    NT_type_name => Shift(yy_state_97)
    T_PACKAGE_NAME => Shift(yy_state_100)
    T_UIDENT => Shift(yy_state_102)
    T_LIDENT => Shift(yy_state_103)
    NT_range_pattern => Shift(yy_state_106)
    NT_or_pattern => Shift(yy_state_109)
    NT_pattern => Shift(yy_state_586)
    _ => Error
  }
}

// [217, guard_statement → GUARD LET pattern • EQUAL infix_expr, SEMI / RBRACE]
// [218, guard_statement → GUARD LET pattern • EQUAL infix_expr ELSE LBRACE single_pattern_cases RBRACE, SEMI / RBRACE]
// [362, pattern → pattern • AS LIDENT, EQUAL / AS]
fn yy_state_586(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AS => Shift(yy_state_111)
    T_EQUAL => Shift(yy_state_587)
    _ => Error
  }
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [217, guard_statement → GUARD LET pattern EQUAL • infix_expr, SEMI / RBRACE]
// [218, guard_statement → GUARD LET pattern EQUAL • infix_expr ELSE LBRACE single_pattern_cases RBRACE, SEMI / RBRACE]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / ELSE]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / ELSE]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / ELSE]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / ELSE]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / ELSE]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / ELSE]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / ELSE]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / ELSE]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / ELSE]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / ELSE]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / ELSE]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / ELSE]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / ELSE]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / ELSE]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / ELSE]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / ELSE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_587(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    T_LIDENT => Shift(yy_state_311)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_588)
    _ => Error
  }
}

// [217, guard_statement → GUARD LET pattern EQUAL infix_expr •, SEMI / RBRACE]
// [218, guard_statement → GUARD LET pattern EQUAL infix_expr • ELSE LBRACE single_pattern_cases RBRACE, SEMI / RBRACE]
// [264, infix_expr → infix_expr • INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / ELSE]
// [265, infix_expr → infix_expr • INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / ELSE]
// [266, infix_expr → infix_expr • INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / ELSE]
// [267, infix_expr → infix_expr • INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / ELSE]
// [268, infix_expr → infix_expr • PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / ELSE]
// [269, infix_expr → infix_expr • MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / ELSE]
// [270, infix_expr → infix_expr • AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / ELSE]
// [271, infix_expr → infix_expr • CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / ELSE]
// [272, infix_expr → infix_expr • BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / ELSE]
// [273, infix_expr → infix_expr • AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / ELSE]
// [274, infix_expr → infix_expr • BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / ELSE]
fn yy_state_588(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_BARBAR => Shift(yy_state_324)
    T_AMPERAMPER => Shift(yy_state_326)
    T_BAR => Shift(yy_state_328)
    T_CARET => Shift(yy_state_330)
    T_AMPER => Shift(yy_state_332)
    T_MINUS => Shift(yy_state_334)
    T_PLUS => Shift(yy_state_336)
    T_INFIX1 => Shift(yy_state_338)
    T_INFIX2 => Shift(yy_state_340)
    T_INFIX3 => Shift(yy_state_342)
    T_INFIX4 => Shift(yy_state_344)
    T_ELSE => Shift(yy_state_589)
    T_SEMI | T_RBRACE => Reduce(5, NT_guard_statement, yy_action_8)
    _ => Error
  }
}

// [218, guard_statement → GUARD LET pattern EQUAL infix_expr ELSE • LBRACE single_pattern_cases RBRACE, SEMI / RBRACE]
fn yy_state_589(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACE => Shift(yy_state_590)
    _ => Error
  }
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [218, guard_statement → GUARD LET pattern EQUAL infix_expr ELSE LBRACE • single_pattern_cases RBRACE, SEMI / RBRACE]
// [232, single_pattern_case → • pattern option(preceded(IF,expr)) FAT_ARROW expr_statement, SEMI / RBRACE]
// [233, single_pattern_cases → • list_semis(single_pattern_case), RBRACE]
// [289, constr → • UIDENT, LPAREN / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, LPAREN / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [291, constr → • type_name COLONCOLON UIDENT, LPAREN / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [362, pattern → • pattern AS LIDENT, AS / IF / FAT_ARROW]
// [363, pattern → • or_pattern, AS / IF / FAT_ARROW]
// [364, or_pattern → • range_pattern BAR or_pattern, AS / IF / FAT_ARROW]
// [365, or_pattern → • range_pattern, AS / IF / FAT_ARROW]
// [366, range_pattern → • simple_pattern RANGE_EXCLUSIVE simple_pattern, BAR / AS / IF / FAT_ARROW]
// [367, range_pattern → • simple_pattern RANGE_INCLUSIVE simple_pattern, BAR / AS / IF / FAT_ARROW]
// [368, range_pattern → • simple_pattern, BAR / AS / IF / FAT_ARROW]
// [369, simple_pattern → • TRUE, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [370, simple_pattern → • FALSE, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [371, simple_pattern → • CHAR, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [372, simple_pattern → • INT, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [373, simple_pattern → • BYTE, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [374, simple_pattern → • FLOAT, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [375, simple_pattern → • MINUS INT, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [376, simple_pattern → • MINUS FLOAT, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [377, simple_pattern → • STRING, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [378, simple_pattern → • BYTES, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [379, simple_pattern → • UNDERSCORE, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [380, simple_pattern → • LIDENT, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [381, simple_pattern → • constr option(delimited(LPAREN,constr_pat_arguments,RPAREN)), BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [382, simple_pattern → • LPAREN pattern RPAREN, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [383, simple_pattern → • LPAREN pattern COMMA non_empty_list_commas(pattern) RPAREN, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [384, simple_pattern → • LPAREN pattern COLON type_ RPAREN, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [385, simple_pattern → • LBRACKET array_sub_patterns RBRACKET, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [386, simple_pattern → • LBRACE RBRACE, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [387, simple_pattern → • LBRACE DOTDOT option(COMMA) RBRACE, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [388, simple_pattern → • LBRACE non_empty_fields_pat RBRACE, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [389, simple_pattern → • LBRACE non_empty_map_elems_pat RBRACE, BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [510, list_semis(single_pattern_case) → •, RBRACE]
// [511, list_semis(single_pattern_case) → • non_empty_list_semis(single_pattern_case), RBRACE]
// [513, non_empty_list_semis(single_pattern_case) → • non_empty_list_semis_rev(single_pattern_case), RBRACE]
// [586, non_empty_list_semis_rev(single_pattern_case) → • non_empty_list_semi_rev_aux(single_pattern_case) option(SEMI), RBRACE]
// [621, non_empty_list_semi_rev_aux(single_pattern_case) → • single_pattern_case, SEMI / RBRACE]
// [622, non_empty_list_semi_rev_aux(single_pattern_case) → • non_empty_list_semi_rev_aux(single_pattern_case) SEMI single_pattern_case, SEMI / RBRACE]
fn yy_state_590(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACE => Shift(yy_state_52)
    T_LBRACKET => Shift(yy_state_56)
    T_LPAREN => Shift(yy_state_70)
    NT_constr => Shift(yy_state_71)
    T_UNDERSCORE => Shift(yy_state_82)
    T_BYTES => Shift(yy_state_83)
    T_STRING => Shift(yy_state_84)
    T_MINUS => Shift(yy_state_85)
    T_FLOAT => Shift(yy_state_88)
    T_BYTE => Shift(yy_state_89)
    T_INT => Shift(yy_state_90)
    T_CHAR => Shift(yy_state_91)
    T_FALSE => Shift(yy_state_92)
    T_TRUE => Shift(yy_state_93)
    NT_simple_pattern => Shift(yy_state_94)
    NT_type_name => Shift(yy_state_97)
    T_PACKAGE_NAME => Shift(yy_state_100)
    T_UIDENT => Shift(yy_state_102)
    T_LIDENT => Shift(yy_state_103)
    NT_range_pattern => Shift(yy_state_106)
    NT_or_pattern => Shift(yy_state_109)
    NT_single_pattern_case => Shift(yy_state_359)
    NT_non_empty_list_semi_rev_aux_single_pattern_case_ => Shift(yy_state_360)
    NT_pattern => Shift(yy_state_364)
    NT_non_empty_list_semis_rev_single_pattern_case_ => Shift(yy_state_382)
    NT_non_empty_list_semis_single_pattern_case_ => Shift(yy_state_383)
    NT_list_semis_single_pattern_case_ => Shift(yy_state_390)
    NT_single_pattern_cases => Shift(yy_state_591)
    T_RBRACE => Reduce(0, NT_list_semis_single_pattern_case_, yy_action_4)
    _ => Error
  }
}

// [218, guard_statement → GUARD LET pattern EQUAL infix_expr ELSE LBRACE single_pattern_cases • RBRACE, SEMI / RBRACE]
fn yy_state_591(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACE => Shift(yy_state_592)
    _ => Error
  }
}

// [218, guard_statement → GUARD LET pattern EQUAL infix_expr ELSE LBRACE single_pattern_cases RBRACE •, SEMI / RBRACE]
fn yy_state_592(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(9, NT_guard_statement, yy_action_220)
}

// [215, guard_statement → GUARD infix_expr •, SEMI / RBRACE]
// [216, guard_statement → GUARD infix_expr • ELSE block_expr, SEMI / RBRACE]
// [264, infix_expr → infix_expr • INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / ELSE]
// [265, infix_expr → infix_expr • INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / ELSE]
// [266, infix_expr → infix_expr • INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / ELSE]
// [267, infix_expr → infix_expr • INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / ELSE]
// [268, infix_expr → infix_expr • PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / ELSE]
// [269, infix_expr → infix_expr • MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / ELSE]
// [270, infix_expr → infix_expr • AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / ELSE]
// [271, infix_expr → infix_expr • CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / ELSE]
// [272, infix_expr → infix_expr • BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / ELSE]
// [273, infix_expr → infix_expr • AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / ELSE]
// [274, infix_expr → infix_expr • BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / ELSE]
fn yy_state_593(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_BARBAR => Shift(yy_state_324)
    T_AMPERAMPER => Shift(yy_state_326)
    T_BAR => Shift(yy_state_328)
    T_CARET => Shift(yy_state_330)
    T_AMPER => Shift(yy_state_332)
    T_MINUS => Shift(yy_state_334)
    T_PLUS => Shift(yy_state_336)
    T_INFIX1 => Shift(yy_state_338)
    T_INFIX2 => Shift(yy_state_340)
    T_INFIX3 => Shift(yy_state_342)
    T_INFIX4 => Shift(yy_state_344)
    T_ELSE => Shift(yy_state_594)
    T_SEMI | T_RBRACE => Reduce(2, NT_guard_statement, yy_action_530)
    _ => Error
  }
}

// [38, block_expr → • LBRACE list_semis_rev(statement) RBRACE, SEMI / RBRACE]
// [216, guard_statement → GUARD infix_expr ELSE • block_expr, SEMI / RBRACE]
fn yy_state_594(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACE => Shift(yy_state_250)
    NT_block_expr => Shift(yy_state_595)
    _ => Error
  }
}

// [216, guard_statement → GUARD infix_expr ELSE block_expr •, SEMI / RBRACE]
fn yy_state_595(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_guard_statement, yy_action_133)
}

// [214, statement → expr_statement •, SEMI / RBRACE]
fn yy_state_596(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_statement, yy_action_647)
}

// [213, statement → guard_statement •, SEMI / RBRACE]
fn yy_state_597(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_statement, yy_action_321)
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [212, statement → fn_header • list_semis(multi_pattern_case) RBRACE, SEMI / RBRACE]
// [234, multi_pattern_case → • non_empty_list_commas(pattern) option(preceded(IF,expr)) FAT_ARROW expr_statement, SEMI / RBRACE]
// [289, constr → • UIDENT, LPAREN / COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, LPAREN / COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [291, constr → • type_name COLONCOLON UIDENT, LPAREN / COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [362, pattern → • pattern AS LIDENT, COMMA / AS / IF / FAT_ARROW]
// [363, pattern → • or_pattern, COMMA / AS / IF / FAT_ARROW]
// [364, or_pattern → • range_pattern BAR or_pattern, COMMA / AS / IF / FAT_ARROW]
// [365, or_pattern → • range_pattern, COMMA / AS / IF / FAT_ARROW]
// [366, range_pattern → • simple_pattern RANGE_EXCLUSIVE simple_pattern, COMMA / BAR / AS / IF / FAT_ARROW]
// [367, range_pattern → • simple_pattern RANGE_INCLUSIVE simple_pattern, COMMA / BAR / AS / IF / FAT_ARROW]
// [368, range_pattern → • simple_pattern, COMMA / BAR / AS / IF / FAT_ARROW]
// [369, simple_pattern → • TRUE, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [370, simple_pattern → • FALSE, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [371, simple_pattern → • CHAR, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [372, simple_pattern → • INT, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [373, simple_pattern → • BYTE, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [374, simple_pattern → • FLOAT, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [375, simple_pattern → • MINUS INT, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [376, simple_pattern → • MINUS FLOAT, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [377, simple_pattern → • STRING, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [378, simple_pattern → • BYTES, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [379, simple_pattern → • UNDERSCORE, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [380, simple_pattern → • LIDENT, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [381, simple_pattern → • constr option(delimited(LPAREN,constr_pat_arguments,RPAREN)), COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [382, simple_pattern → • LPAREN pattern RPAREN, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [383, simple_pattern → • LPAREN pattern COMMA non_empty_list_commas(pattern) RPAREN, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [384, simple_pattern → • LPAREN pattern COLON type_ RPAREN, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [385, simple_pattern → • LBRACKET array_sub_patterns RBRACKET, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [386, simple_pattern → • LBRACE RBRACE, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [387, simple_pattern → • LBRACE DOTDOT option(COMMA) RBRACE, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [388, simple_pattern → • LBRACE non_empty_fields_pat RBRACE, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [389, simple_pattern → • LBRACE non_empty_map_elems_pat RBRACE, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [502, list_semis(multi_pattern_case) → •, RBRACE]
// [503, list_semis(multi_pattern_case) → • non_empty_list_semis(multi_pattern_case), RBRACE]
// [512, non_empty_list_commas(pattern) → • non_empty_list_commas_rev(pattern) option(COMMA), IF / FAT_ARROW]
// [583, non_empty_list_semis(multi_pattern_case) → • non_empty_list_semis_rev(multi_pattern_case), RBRACE]
// [584, non_empty_list_commas_rev(pattern) → • pattern, COMMA / IF / FAT_ARROW]
// [585, non_empty_list_commas_rev(pattern) → • non_empty_list_commas_rev(pattern) COMMA pattern, COMMA / IF / FAT_ARROW]
// [620, non_empty_list_semis_rev(multi_pattern_case) → • non_empty_list_semi_rev_aux(multi_pattern_case) option(SEMI), RBRACE]
// [637, non_empty_list_semi_rev_aux(multi_pattern_case) → • multi_pattern_case, SEMI / RBRACE]
// [638, non_empty_list_semi_rev_aux(multi_pattern_case) → • non_empty_list_semi_rev_aux(multi_pattern_case) SEMI multi_pattern_case, SEMI / RBRACE]
fn yy_state_598(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    NT_multi_pattern_case => Shift(yy_state_45)
    NT_non_empty_list_semi_rev_aux_multi_pattern_case_ => Shift(yy_state_46)
    NT_non_empty_list_commas_rev_pattern_ => Shift(yy_state_50)
    T_LBRACE => Shift(yy_state_52)
    T_LBRACKET => Shift(yy_state_56)
    T_LPAREN => Shift(yy_state_70)
    NT_constr => Shift(yy_state_71)
    T_UNDERSCORE => Shift(yy_state_82)
    T_BYTES => Shift(yy_state_83)
    T_STRING => Shift(yy_state_84)
    T_MINUS => Shift(yy_state_85)
    T_FLOAT => Shift(yy_state_88)
    T_BYTE => Shift(yy_state_89)
    T_INT => Shift(yy_state_90)
    T_CHAR => Shift(yy_state_91)
    T_FALSE => Shift(yy_state_92)
    T_TRUE => Shift(yy_state_93)
    NT_simple_pattern => Shift(yy_state_94)
    NT_type_name => Shift(yy_state_97)
    T_PACKAGE_NAME => Shift(yy_state_100)
    T_UIDENT => Shift(yy_state_102)
    T_LIDENT => Shift(yy_state_103)
    NT_range_pattern => Shift(yy_state_106)
    NT_or_pattern => Shift(yy_state_109)
    NT_pattern => Shift(yy_state_181)
    NT_non_empty_list_commas_pattern_ => Shift(yy_state_234)
    NT_non_empty_list_semis_rev_multi_pattern_case_ => Shift(yy_state_239)
    NT_non_empty_list_semis_multi_pattern_case_ => Shift(yy_state_240)
    NT_list_semis_multi_pattern_case_ => Shift(yy_state_599)
    T_RBRACE => Reduce(0, NT_list_semis_multi_pattern_case_, yy_action_98)
    _ => Error
  }
}

// [212, statement → fn_header list_semis(multi_pattern_case) • RBRACE, SEMI / RBRACE]
fn yy_state_599(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACE => Shift(yy_state_600)
    _ => Error
  }
}

// [212, statement → fn_header list_semis(multi_pattern_case) RBRACE •, SEMI / RBRACE]
fn yy_state_600(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_statement, yy_action_186)
}

// [203, fn_header → • FN LIDENT optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [209, statement → ASYNC • FN LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, SEMI / RBRACE]
// [211, statement → ASYNC • fn_header list_semis(multi_pattern_case) RBRACE, SEMI / RBRACE]
// [300, simple_expr → ASYNC • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → ASYNC • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_601(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_fn_header_no_binder => Shift(yy_state_238)
    NT_fn_header => Shift(yy_state_602)
    T_FN => Shift(yy_state_605)
    _ => Error
  }
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [211, statement → ASYNC fn_header • list_semis(multi_pattern_case) RBRACE, SEMI / RBRACE]
// [234, multi_pattern_case → • non_empty_list_commas(pattern) option(preceded(IF,expr)) FAT_ARROW expr_statement, SEMI / RBRACE]
// [289, constr → • UIDENT, LPAREN / COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, LPAREN / COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [291, constr → • type_name COLONCOLON UIDENT, LPAREN / COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [362, pattern → • pattern AS LIDENT, COMMA / AS / IF / FAT_ARROW]
// [363, pattern → • or_pattern, COMMA / AS / IF / FAT_ARROW]
// [364, or_pattern → • range_pattern BAR or_pattern, COMMA / AS / IF / FAT_ARROW]
// [365, or_pattern → • range_pattern, COMMA / AS / IF / FAT_ARROW]
// [366, range_pattern → • simple_pattern RANGE_EXCLUSIVE simple_pattern, COMMA / BAR / AS / IF / FAT_ARROW]
// [367, range_pattern → • simple_pattern RANGE_INCLUSIVE simple_pattern, COMMA / BAR / AS / IF / FAT_ARROW]
// [368, range_pattern → • simple_pattern, COMMA / BAR / AS / IF / FAT_ARROW]
// [369, simple_pattern → • TRUE, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [370, simple_pattern → • FALSE, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [371, simple_pattern → • CHAR, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [372, simple_pattern → • INT, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [373, simple_pattern → • BYTE, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [374, simple_pattern → • FLOAT, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [375, simple_pattern → • MINUS INT, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [376, simple_pattern → • MINUS FLOAT, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [377, simple_pattern → • STRING, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [378, simple_pattern → • BYTES, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [379, simple_pattern → • UNDERSCORE, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [380, simple_pattern → • LIDENT, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [381, simple_pattern → • constr option(delimited(LPAREN,constr_pat_arguments,RPAREN)), COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [382, simple_pattern → • LPAREN pattern RPAREN, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [383, simple_pattern → • LPAREN pattern COMMA non_empty_list_commas(pattern) RPAREN, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [384, simple_pattern → • LPAREN pattern COLON type_ RPAREN, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [385, simple_pattern → • LBRACKET array_sub_patterns RBRACKET, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [386, simple_pattern → • LBRACE RBRACE, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [387, simple_pattern → • LBRACE DOTDOT option(COMMA) RBRACE, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [388, simple_pattern → • LBRACE non_empty_fields_pat RBRACE, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [389, simple_pattern → • LBRACE non_empty_map_elems_pat RBRACE, COMMA / BAR / AS / IF / FAT_ARROW / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [502, list_semis(multi_pattern_case) → •, RBRACE]
// [503, list_semis(multi_pattern_case) → • non_empty_list_semis(multi_pattern_case), RBRACE]
// [512, non_empty_list_commas(pattern) → • non_empty_list_commas_rev(pattern) option(COMMA), IF / FAT_ARROW]
// [583, non_empty_list_semis(multi_pattern_case) → • non_empty_list_semis_rev(multi_pattern_case), RBRACE]
// [584, non_empty_list_commas_rev(pattern) → • pattern, COMMA / IF / FAT_ARROW]
// [585, non_empty_list_commas_rev(pattern) → • non_empty_list_commas_rev(pattern) COMMA pattern, COMMA / IF / FAT_ARROW]
// [620, non_empty_list_semis_rev(multi_pattern_case) → • non_empty_list_semi_rev_aux(multi_pattern_case) option(SEMI), RBRACE]
// [637, non_empty_list_semi_rev_aux(multi_pattern_case) → • multi_pattern_case, SEMI / RBRACE]
// [638, non_empty_list_semi_rev_aux(multi_pattern_case) → • non_empty_list_semi_rev_aux(multi_pattern_case) SEMI multi_pattern_case, SEMI / RBRACE]
fn yy_state_602(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    NT_multi_pattern_case => Shift(yy_state_45)
    NT_non_empty_list_semi_rev_aux_multi_pattern_case_ => Shift(yy_state_46)
    NT_non_empty_list_commas_rev_pattern_ => Shift(yy_state_50)
    T_LBRACE => Shift(yy_state_52)
    T_LBRACKET => Shift(yy_state_56)
    T_LPAREN => Shift(yy_state_70)
    NT_constr => Shift(yy_state_71)
    T_UNDERSCORE => Shift(yy_state_82)
    T_BYTES => Shift(yy_state_83)
    T_STRING => Shift(yy_state_84)
    T_MINUS => Shift(yy_state_85)
    T_FLOAT => Shift(yy_state_88)
    T_BYTE => Shift(yy_state_89)
    T_INT => Shift(yy_state_90)
    T_CHAR => Shift(yy_state_91)
    T_FALSE => Shift(yy_state_92)
    T_TRUE => Shift(yy_state_93)
    NT_simple_pattern => Shift(yy_state_94)
    NT_type_name => Shift(yy_state_97)
    T_PACKAGE_NAME => Shift(yy_state_100)
    T_UIDENT => Shift(yy_state_102)
    T_LIDENT => Shift(yy_state_103)
    NT_range_pattern => Shift(yy_state_106)
    NT_or_pattern => Shift(yy_state_109)
    NT_pattern => Shift(yy_state_181)
    NT_non_empty_list_commas_pattern_ => Shift(yy_state_234)
    NT_non_empty_list_semis_rev_multi_pattern_case_ => Shift(yy_state_239)
    NT_non_empty_list_semis_multi_pattern_case_ => Shift(yy_state_240)
    NT_list_semis_multi_pattern_case_ => Shift(yy_state_603)
    T_RBRACE => Reduce(0, NT_list_semis_multi_pattern_case_, yy_action_98)
    _ => Error
  }
}

// [211, statement → ASYNC fn_header list_semis(multi_pattern_case) • RBRACE, SEMI / RBRACE]
fn yy_state_603(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACE => Shift(yy_state_604)
    _ => Error
  }
}

// [211, statement → ASYNC fn_header list_semis(multi_pattern_case) RBRACE •, SEMI / RBRACE]
fn yy_state_604(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_statement, yy_action_53)
}

// [201, optional_bang → • EXCLAMATION, LPAREN / LBRACE]
// [202, optional_bang → •, LPAREN / LBRACE]
// [203, fn_header → FN • LIDENT optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [204, fn_header_no_binder → FN • optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [209, statement → ASYNC FN • LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, SEMI / RBRACE]
// [300, simple_expr → ASYNC FN • optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_605(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_optional_bang => Shift(yy_state_244)
    T_EXCLAMATION => Shift(yy_state_535)
    T_LIDENT => Shift(yy_state_606)
    T_LPAREN | T_LBRACE => Reduce(0, NT_optional_bang, yy_action_662)
    _ => Error
  }
}

// [201, optional_bang → • EXCLAMATION, LPAREN / LBRACE]
// [202, optional_bang → •, LPAREN / LBRACE]
// [203, fn_header → FN LIDENT • optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [209, statement → ASYNC FN LIDENT • optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, SEMI / RBRACE]
fn yy_state_606(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EXCLAMATION => Shift(yy_state_535)
    NT_optional_bang => Shift(yy_state_607)
    T_LPAREN | T_LBRACE => Reduce(0, NT_optional_bang, yy_action_662)
    _ => Error
  }
}

// [10, parameters → • LPAREN list_commas(parameter) RPAREN, LBRACE / THIN_ARROW]
// [203, fn_header → FN LIDENT optional_bang • LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [209, statement → ASYNC FN LIDENT optional_bang • parameters option(preceded(THIN_ARROW,return_type)) block_expr, SEMI / RBRACE]
fn yy_state_607(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_298)
    NT_parameters => Shift(yy_state_608)
    T_LBRACE => Shift(yy_state_611)
    _ => Error
  }
}

// [209, statement → ASYNC FN LIDENT optional_bang parameters • option(preceded(THIN_ARROW,return_type)) block_expr, SEMI / RBRACE]
// [460, option(preceded(THIN_ARROW,return_type)) → •, LBRACE]
// [461, option(preceded(THIN_ARROW,return_type)) → • THIN_ARROW return_type, LBRACE]
fn yy_state_608(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_THIN_ARROW => Shift(yy_state_246)
    NT_option_preceded_THIN_ARROW_return_type__ => Shift(yy_state_609)
    T_LBRACE => Reduce(0, NT_option_preceded_THIN_ARROW_return_type__, yy_action_161)
    _ => Error
  }
}

// [38, block_expr → • LBRACE list_semis_rev(statement) RBRACE, SEMI / RBRACE]
// [209, statement → ASYNC FN LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) • block_expr, SEMI / RBRACE]
fn yy_state_609(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACE => Shift(yy_state_250)
    NT_block_expr => Shift(yy_state_610)
    _ => Error
  }
}

// [209, statement → ASYNC FN LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr •, SEMI / RBRACE]
fn yy_state_610(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(7, NT_statement, yy_action_411)
}

// [203, fn_header → FN LIDENT optional_bang LBRACE •, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
fn yy_state_611(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_fn_header, yy_action_323)
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [205, statement → LET • pattern EQUAL expr, SEMI / RBRACE]
// [206, statement → LET • pattern COLON type_ EQUAL expr, SEMI / RBRACE]
// [207, statement → LET • MUTABLE LIDENT EQUAL expr, SEMI / RBRACE]
// [208, statement → LET • MUTABLE LIDENT COLON type_ EQUAL expr, SEMI / RBRACE]
// [289, constr → • UIDENT, EQUAL / LPAREN / COLON / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, EQUAL / LPAREN / COLON / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [291, constr → • type_name COLONCOLON UIDENT, EQUAL / LPAREN / COLON / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [362, pattern → • pattern AS LIDENT, EQUAL / COLON / AS]
// [363, pattern → • or_pattern, EQUAL / COLON / AS]
// [364, or_pattern → • range_pattern BAR or_pattern, EQUAL / COLON / AS]
// [365, or_pattern → • range_pattern, EQUAL / COLON / AS]
// [366, range_pattern → • simple_pattern RANGE_EXCLUSIVE simple_pattern, EQUAL / COLON / BAR / AS]
// [367, range_pattern → • simple_pattern RANGE_INCLUSIVE simple_pattern, EQUAL / COLON / BAR / AS]
// [368, range_pattern → • simple_pattern, EQUAL / COLON / BAR / AS]
// [369, simple_pattern → • TRUE, EQUAL / COLON / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [370, simple_pattern → • FALSE, EQUAL / COLON / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [371, simple_pattern → • CHAR, EQUAL / COLON / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [372, simple_pattern → • INT, EQUAL / COLON / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [373, simple_pattern → • BYTE, EQUAL / COLON / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [374, simple_pattern → • FLOAT, EQUAL / COLON / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [375, simple_pattern → • MINUS INT, EQUAL / COLON / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [376, simple_pattern → • MINUS FLOAT, EQUAL / COLON / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [377, simple_pattern → • STRING, EQUAL / COLON / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [378, simple_pattern → • BYTES, EQUAL / COLON / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [379, simple_pattern → • UNDERSCORE, EQUAL / COLON / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [380, simple_pattern → • LIDENT, EQUAL / COLON / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [381, simple_pattern → • constr option(delimited(LPAREN,constr_pat_arguments,RPAREN)), EQUAL / COLON / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [382, simple_pattern → • LPAREN pattern RPAREN, EQUAL / COLON / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [383, simple_pattern → • LPAREN pattern COMMA non_empty_list_commas(pattern) RPAREN, EQUAL / COLON / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [384, simple_pattern → • LPAREN pattern COLON type_ RPAREN, EQUAL / COLON / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [385, simple_pattern → • LBRACKET array_sub_patterns RBRACKET, EQUAL / COLON / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [386, simple_pattern → • LBRACE RBRACE, EQUAL / COLON / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [387, simple_pattern → • LBRACE DOTDOT option(COMMA) RBRACE, EQUAL / COLON / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [388, simple_pattern → • LBRACE non_empty_fields_pat RBRACE, EQUAL / COLON / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
// [389, simple_pattern → • LBRACE non_empty_map_elems_pat RBRACE, EQUAL / COLON / BAR / AS / RANGE_INCLUSIVE / RANGE_EXCLUSIVE]
fn yy_state_612(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACE => Shift(yy_state_52)
    T_LBRACKET => Shift(yy_state_56)
    T_LPAREN => Shift(yy_state_70)
    NT_constr => Shift(yy_state_71)
    T_UNDERSCORE => Shift(yy_state_82)
    T_BYTES => Shift(yy_state_83)
    T_STRING => Shift(yy_state_84)
    T_MINUS => Shift(yy_state_85)
    T_FLOAT => Shift(yy_state_88)
    T_BYTE => Shift(yy_state_89)
    T_INT => Shift(yy_state_90)
    T_CHAR => Shift(yy_state_91)
    T_FALSE => Shift(yy_state_92)
    T_TRUE => Shift(yy_state_93)
    NT_simple_pattern => Shift(yy_state_94)
    NT_type_name => Shift(yy_state_97)
    T_PACKAGE_NAME => Shift(yy_state_100)
    T_UIDENT => Shift(yy_state_102)
    T_LIDENT => Shift(yy_state_103)
    NT_range_pattern => Shift(yy_state_106)
    NT_or_pattern => Shift(yy_state_109)
    T_MUTABLE => Shift(yy_state_613)
    NT_pattern => Shift(yy_state_621)
    _ => Error
  }
}

// [207, statement → LET MUTABLE • LIDENT EQUAL expr, SEMI / RBRACE]
// [208, statement → LET MUTABLE • LIDENT COLON type_ EQUAL expr, SEMI / RBRACE]
fn yy_state_613(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_614)
    _ => Error
  }
}

// [207, statement → LET MUTABLE LIDENT • EQUAL expr, SEMI / RBRACE]
// [208, statement → LET MUTABLE LIDENT • COLON type_ EQUAL expr, SEMI / RBRACE]
fn yy_state_614(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_615)
    T_EQUAL => Shift(yy_state_619)
    _ => Error
  }
}

// [192, luident → • LIDENT, EQUAL / QUESTION / LBRACKET]
// [193, luident → • UIDENT, EQUAL / QUESTION / LBRACKET]
// [198, qual_ident_ty → • luident, EQUAL / QUESTION / LBRACKET]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, EQUAL / QUESTION / LBRACKET]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, EQUAL / QUESTION / LBRACKET]
// [208, statement → LET MUTABLE LIDENT COLON • type_ EQUAL expr, SEMI / RBRACE]
// [410, type_ → • type_ QUESTION, EQUAL / QUESTION]
// [411, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN, EQUAL / QUESTION]
// [412, type_ → • ASYNC LPAREN type_ COMMA RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [413, type_ → • ASYNC LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [414, type_ → • LPAREN type_ COMMA RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [415, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [416, type_ → • ASYNC LPAREN RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [417, type_ → • LPAREN RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [418, type_ → • LPAREN type_ RPAREN, EQUAL / QUESTION]
// [419, type_ → • ASYNC LPAREN type_ RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [420, type_ → • LPAREN type_ RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [421, type_ → • qual_ident_ty optional_type_arguments, EQUAL / QUESTION]
// [422, type_ → • AMPER qual_ident_ty, EQUAL / QUESTION]
// [423, type_ → • UNDERSCORE, EQUAL / QUESTION]
fn yy_state_615(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    T_UNDERSCORE => Shift(yy_state_120)
    T_AMPER => Shift(yy_state_121)
    NT_qual_ident_ty => Shift(yy_state_123)
    T_ASYNC => Shift(yy_state_129)
    T_LPAREN => Shift(yy_state_134)
    NT_type_ => Shift(yy_state_616)
    _ => Error
  }
}

// [208, statement → LET MUTABLE LIDENT COLON type_ • EQUAL expr, SEMI / RBRACE]
// [410, type_ → type_ • QUESTION, EQUAL / QUESTION]
fn yy_state_616(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_QUESTION => Shift(yy_state_139)
    T_EQUAL => Shift(yy_state_617)
    _ => Error
  }
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [208, statement → LET MUTABLE LIDENT COLON type_ EQUAL • expr, SEMI / RBRACE]
// [229, loop_label_colon → • POST_LABEL COLON, WHILE / LOOP / FOR]
// [230, loop_label_colon → •, WHILE / LOOP / FOR]
// [231, while_expr → • loop_label_colon WHILE infix_expr block_expr optional_else, SEMI / RBRACE]
// [238, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE, SEMI / RBRACE]
// [239, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE ELSE LBRACE single_pattern_cases RBRACE, SEMI / RBRACE]
// [240, if_expr → • IF infix_expr block_expr ELSE block_expr, SEMI / RBRACE]
// [241, if_expr → • IF infix_expr block_expr ELSE if_expr, SEMI / RBRACE]
// [242, if_expr → • IF infix_expr block_expr, SEMI / RBRACE]
// [243, match_expr → • MATCH infix_expr LBRACE non_empty_list_semis(single_pattern_case) RBRACE, SEMI / RBRACE]
// [244, match_expr → • MATCH infix_expr LBRACE RBRACE, SEMI / RBRACE]
// [245, loop_expr → • loop_label_colon LOOP non_empty_list_commas_no_trailing(expr) LBRACE list_semis(multi_pattern_case) RBRACE, SEMI / RBRACE]
// [249, for_expr → • loop_label_colon FOR for_binders SEMI option(infix_expr) SEMI list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) block_expr optional_else, SEMI / RBRACE]
// [250, for_expr → • loop_label_colon FOR for_binders block_expr optional_else, SEMI / RBRACE]
// [251, foreach_expr → • loop_label_colon FOR non_empty_list_commas(foreach_binder) IN expr block_expr optional_else, SEMI / RBRACE]
// [254, expr → • loop_expr, SEMI / RBRACE]
// [255, expr → • for_expr, SEMI / RBRACE]
// [256, expr → • foreach_expr, SEMI / RBRACE]
// [257, expr → • while_expr, SEMI / RBRACE]
// [258, expr → • try_expr, SEMI / RBRACE]
// [259, expr → • if_expr, SEMI / RBRACE]
// [260, expr → • match_expr, SEMI / RBRACE]
// [261, expr → • pipe_expr, SEMI / RBRACE]
// [262, pipe_expr → • pipe_expr PIPE infix_expr, SEMI / RBRACE / PIPE]
// [263, pipe_expr → • infix_expr, SEMI / RBRACE / PIPE]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_617(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    T_LIDENT => Shift(yy_state_311)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_323)
    NT_pipe_expr => Shift(yy_state_346)
    NT_match_expr => Shift(yy_state_349)
    NT_if_expr => Shift(yy_state_350)
    NT_try_expr => Shift(yy_state_351)
    NT_while_expr => Shift(yy_state_352)
    NT_foreach_expr => Shift(yy_state_353)
    NT_for_expr => Shift(yy_state_354)
    NT_loop_expr => Shift(yy_state_355)
    T_MATCH => Shift(yy_state_356)
    T_IF => Shift(yy_state_373)
    T_TRY => Shift(yy_state_379)
    NT_loop_label_colon => Shift(yy_state_396)
    T_POST_LABEL => Shift(yy_state_404)
    NT_expr => Shift(yy_state_618)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_481)
    _ => Error
  }
}

// [208, statement → LET MUTABLE LIDENT COLON type_ EQUAL expr •, SEMI / RBRACE]
fn yy_state_618(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(7, NT_statement, yy_action_150)
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [207, statement → LET MUTABLE LIDENT EQUAL • expr, SEMI / RBRACE]
// [229, loop_label_colon → • POST_LABEL COLON, WHILE / LOOP / FOR]
// [230, loop_label_colon → •, WHILE / LOOP / FOR]
// [231, while_expr → • loop_label_colon WHILE infix_expr block_expr optional_else, SEMI / RBRACE]
// [238, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE, SEMI / RBRACE]
// [239, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE ELSE LBRACE single_pattern_cases RBRACE, SEMI / RBRACE]
// [240, if_expr → • IF infix_expr block_expr ELSE block_expr, SEMI / RBRACE]
// [241, if_expr → • IF infix_expr block_expr ELSE if_expr, SEMI / RBRACE]
// [242, if_expr → • IF infix_expr block_expr, SEMI / RBRACE]
// [243, match_expr → • MATCH infix_expr LBRACE non_empty_list_semis(single_pattern_case) RBRACE, SEMI / RBRACE]
// [244, match_expr → • MATCH infix_expr LBRACE RBRACE, SEMI / RBRACE]
// [245, loop_expr → • loop_label_colon LOOP non_empty_list_commas_no_trailing(expr) LBRACE list_semis(multi_pattern_case) RBRACE, SEMI / RBRACE]
// [249, for_expr → • loop_label_colon FOR for_binders SEMI option(infix_expr) SEMI list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) block_expr optional_else, SEMI / RBRACE]
// [250, for_expr → • loop_label_colon FOR for_binders block_expr optional_else, SEMI / RBRACE]
// [251, foreach_expr → • loop_label_colon FOR non_empty_list_commas(foreach_binder) IN expr block_expr optional_else, SEMI / RBRACE]
// [254, expr → • loop_expr, SEMI / RBRACE]
// [255, expr → • for_expr, SEMI / RBRACE]
// [256, expr → • foreach_expr, SEMI / RBRACE]
// [257, expr → • while_expr, SEMI / RBRACE]
// [258, expr → • try_expr, SEMI / RBRACE]
// [259, expr → • if_expr, SEMI / RBRACE]
// [260, expr → • match_expr, SEMI / RBRACE]
// [261, expr → • pipe_expr, SEMI / RBRACE]
// [262, pipe_expr → • pipe_expr PIPE infix_expr, SEMI / RBRACE / PIPE]
// [263, pipe_expr → • infix_expr, SEMI / RBRACE / PIPE]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_619(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    T_LIDENT => Shift(yy_state_311)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_323)
    NT_pipe_expr => Shift(yy_state_346)
    NT_match_expr => Shift(yy_state_349)
    NT_if_expr => Shift(yy_state_350)
    NT_try_expr => Shift(yy_state_351)
    NT_while_expr => Shift(yy_state_352)
    NT_foreach_expr => Shift(yy_state_353)
    NT_for_expr => Shift(yy_state_354)
    NT_loop_expr => Shift(yy_state_355)
    T_MATCH => Shift(yy_state_356)
    T_IF => Shift(yy_state_373)
    T_TRY => Shift(yy_state_379)
    NT_loop_label_colon => Shift(yy_state_396)
    T_POST_LABEL => Shift(yy_state_404)
    NT_expr => Shift(yy_state_620)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_481)
    _ => Error
  }
}

// [207, statement → LET MUTABLE LIDENT EQUAL expr •, SEMI / RBRACE]
fn yy_state_620(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_statement, yy_action_684)
}

// [205, statement → LET pattern • EQUAL expr, SEMI / RBRACE]
// [206, statement → LET pattern • COLON type_ EQUAL expr, SEMI / RBRACE]
// [362, pattern → pattern • AS LIDENT, EQUAL / COLON / AS]
fn yy_state_621(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AS => Shift(yy_state_111)
    T_COLON => Shift(yy_state_622)
    T_EQUAL => Shift(yy_state_626)
    _ => Error
  }
}

// [192, luident → • LIDENT, EQUAL / QUESTION / LBRACKET]
// [193, luident → • UIDENT, EQUAL / QUESTION / LBRACKET]
// [198, qual_ident_ty → • luident, EQUAL / QUESTION / LBRACKET]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, EQUAL / QUESTION / LBRACKET]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, EQUAL / QUESTION / LBRACKET]
// [206, statement → LET pattern COLON • type_ EQUAL expr, SEMI / RBRACE]
// [410, type_ → • type_ QUESTION, EQUAL / QUESTION]
// [411, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN, EQUAL / QUESTION]
// [412, type_ → • ASYNC LPAREN type_ COMMA RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [413, type_ → • ASYNC LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [414, type_ → • LPAREN type_ COMMA RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [415, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [416, type_ → • ASYNC LPAREN RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [417, type_ → • LPAREN RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [418, type_ → • LPAREN type_ RPAREN, EQUAL / QUESTION]
// [419, type_ → • ASYNC LPAREN type_ RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [420, type_ → • LPAREN type_ RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [421, type_ → • qual_ident_ty optional_type_arguments, EQUAL / QUESTION]
// [422, type_ → • AMPER qual_ident_ty, EQUAL / QUESTION]
// [423, type_ → • UNDERSCORE, EQUAL / QUESTION]
fn yy_state_622(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    T_UNDERSCORE => Shift(yy_state_120)
    T_AMPER => Shift(yy_state_121)
    NT_qual_ident_ty => Shift(yy_state_123)
    T_ASYNC => Shift(yy_state_129)
    T_LPAREN => Shift(yy_state_134)
    NT_type_ => Shift(yy_state_623)
    _ => Error
  }
}

// [206, statement → LET pattern COLON type_ • EQUAL expr, SEMI / RBRACE]
// [410, type_ → type_ • QUESTION, EQUAL / QUESTION]
fn yy_state_623(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_QUESTION => Shift(yy_state_139)
    T_EQUAL => Shift(yy_state_624)
    _ => Error
  }
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [206, statement → LET pattern COLON type_ EQUAL • expr, SEMI / RBRACE]
// [229, loop_label_colon → • POST_LABEL COLON, WHILE / LOOP / FOR]
// [230, loop_label_colon → •, WHILE / LOOP / FOR]
// [231, while_expr → • loop_label_colon WHILE infix_expr block_expr optional_else, SEMI / RBRACE]
// [238, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE, SEMI / RBRACE]
// [239, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE ELSE LBRACE single_pattern_cases RBRACE, SEMI / RBRACE]
// [240, if_expr → • IF infix_expr block_expr ELSE block_expr, SEMI / RBRACE]
// [241, if_expr → • IF infix_expr block_expr ELSE if_expr, SEMI / RBRACE]
// [242, if_expr → • IF infix_expr block_expr, SEMI / RBRACE]
// [243, match_expr → • MATCH infix_expr LBRACE non_empty_list_semis(single_pattern_case) RBRACE, SEMI / RBRACE]
// [244, match_expr → • MATCH infix_expr LBRACE RBRACE, SEMI / RBRACE]
// [245, loop_expr → • loop_label_colon LOOP non_empty_list_commas_no_trailing(expr) LBRACE list_semis(multi_pattern_case) RBRACE, SEMI / RBRACE]
// [249, for_expr → • loop_label_colon FOR for_binders SEMI option(infix_expr) SEMI list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) block_expr optional_else, SEMI / RBRACE]
// [250, for_expr → • loop_label_colon FOR for_binders block_expr optional_else, SEMI / RBRACE]
// [251, foreach_expr → • loop_label_colon FOR non_empty_list_commas(foreach_binder) IN expr block_expr optional_else, SEMI / RBRACE]
// [254, expr → • loop_expr, SEMI / RBRACE]
// [255, expr → • for_expr, SEMI / RBRACE]
// [256, expr → • foreach_expr, SEMI / RBRACE]
// [257, expr → • while_expr, SEMI / RBRACE]
// [258, expr → • try_expr, SEMI / RBRACE]
// [259, expr → • if_expr, SEMI / RBRACE]
// [260, expr → • match_expr, SEMI / RBRACE]
// [261, expr → • pipe_expr, SEMI / RBRACE]
// [262, pipe_expr → • pipe_expr PIPE infix_expr, SEMI / RBRACE / PIPE]
// [263, pipe_expr → • infix_expr, SEMI / RBRACE / PIPE]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_624(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    T_LIDENT => Shift(yy_state_311)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_323)
    NT_pipe_expr => Shift(yy_state_346)
    NT_match_expr => Shift(yy_state_349)
    NT_if_expr => Shift(yy_state_350)
    NT_try_expr => Shift(yy_state_351)
    NT_while_expr => Shift(yy_state_352)
    NT_foreach_expr => Shift(yy_state_353)
    NT_for_expr => Shift(yy_state_354)
    NT_loop_expr => Shift(yy_state_355)
    T_MATCH => Shift(yy_state_356)
    T_IF => Shift(yy_state_373)
    T_TRY => Shift(yy_state_379)
    NT_loop_label_colon => Shift(yy_state_396)
    T_POST_LABEL => Shift(yy_state_404)
    NT_expr => Shift(yy_state_625)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_481)
    _ => Error
  }
}

// [206, statement → LET pattern COLON type_ EQUAL expr •, SEMI / RBRACE]
fn yy_state_625(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(6, NT_statement, yy_action_41)
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [205, statement → LET pattern EQUAL • expr, SEMI / RBRACE]
// [229, loop_label_colon → • POST_LABEL COLON, WHILE / LOOP / FOR]
// [230, loop_label_colon → •, WHILE / LOOP / FOR]
// [231, while_expr → • loop_label_colon WHILE infix_expr block_expr optional_else, SEMI / RBRACE]
// [238, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE, SEMI / RBRACE]
// [239, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE ELSE LBRACE single_pattern_cases RBRACE, SEMI / RBRACE]
// [240, if_expr → • IF infix_expr block_expr ELSE block_expr, SEMI / RBRACE]
// [241, if_expr → • IF infix_expr block_expr ELSE if_expr, SEMI / RBRACE]
// [242, if_expr → • IF infix_expr block_expr, SEMI / RBRACE]
// [243, match_expr → • MATCH infix_expr LBRACE non_empty_list_semis(single_pattern_case) RBRACE, SEMI / RBRACE]
// [244, match_expr → • MATCH infix_expr LBRACE RBRACE, SEMI / RBRACE]
// [245, loop_expr → • loop_label_colon LOOP non_empty_list_commas_no_trailing(expr) LBRACE list_semis(multi_pattern_case) RBRACE, SEMI / RBRACE]
// [249, for_expr → • loop_label_colon FOR for_binders SEMI option(infix_expr) SEMI list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) block_expr optional_else, SEMI / RBRACE]
// [250, for_expr → • loop_label_colon FOR for_binders block_expr optional_else, SEMI / RBRACE]
// [251, foreach_expr → • loop_label_colon FOR non_empty_list_commas(foreach_binder) IN expr block_expr optional_else, SEMI / RBRACE]
// [254, expr → • loop_expr, SEMI / RBRACE]
// [255, expr → • for_expr, SEMI / RBRACE]
// [256, expr → • foreach_expr, SEMI / RBRACE]
// [257, expr → • while_expr, SEMI / RBRACE]
// [258, expr → • try_expr, SEMI / RBRACE]
// [259, expr → • if_expr, SEMI / RBRACE]
// [260, expr → • match_expr, SEMI / RBRACE]
// [261, expr → • pipe_expr, SEMI / RBRACE]
// [262, pipe_expr → • pipe_expr PIPE infix_expr, SEMI / RBRACE / PIPE]
// [263, pipe_expr → • infix_expr, SEMI / RBRACE / PIPE]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_626(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    T_LIDENT => Shift(yy_state_311)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_323)
    NT_pipe_expr => Shift(yy_state_346)
    NT_match_expr => Shift(yy_state_349)
    NT_if_expr => Shift(yy_state_350)
    NT_try_expr => Shift(yy_state_351)
    NT_while_expr => Shift(yy_state_352)
    NT_foreach_expr => Shift(yy_state_353)
    NT_for_expr => Shift(yy_state_354)
    NT_loop_expr => Shift(yy_state_355)
    T_MATCH => Shift(yy_state_356)
    T_IF => Shift(yy_state_373)
    T_TRY => Shift(yy_state_379)
    NT_loop_label_colon => Shift(yy_state_396)
    T_POST_LABEL => Shift(yy_state_404)
    NT_expr => Shift(yy_state_627)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_481)
    _ => Error
  }
}

// [205, statement → LET pattern EQUAL expr •, SEMI / RBRACE]
fn yy_state_627(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_statement, yy_action_463)
}

// [201, optional_bang → • EXCLAMATION, LPAREN / LBRACE]
// [202, optional_bang → •, LPAREN / LBRACE]
// [203, fn_header → FN • LIDENT optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [204, fn_header_no_binder → FN • optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [210, statement → FN • LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, SEMI / RBRACE]
// [301, simple_expr → FN • optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_628(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_optional_bang => Shift(yy_state_293)
    T_EXCLAMATION => Shift(yy_state_535)
    T_LIDENT => Shift(yy_state_629)
    T_LPAREN | T_LBRACE => Reduce(0, NT_optional_bang, yy_action_662)
    _ => Error
  }
}

// [201, optional_bang → • EXCLAMATION, LPAREN / LBRACE]
// [202, optional_bang → •, LPAREN / LBRACE]
// [203, fn_header → FN LIDENT • optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [210, statement → FN LIDENT • optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, SEMI / RBRACE]
fn yy_state_629(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EXCLAMATION => Shift(yy_state_535)
    NT_optional_bang => Shift(yy_state_630)
    T_LPAREN | T_LBRACE => Reduce(0, NT_optional_bang, yy_action_662)
    _ => Error
  }
}

// [10, parameters → • LPAREN list_commas(parameter) RPAREN, LBRACE / THIN_ARROW]
// [203, fn_header → FN LIDENT optional_bang • LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [210, statement → FN LIDENT optional_bang • parameters option(preceded(THIN_ARROW,return_type)) block_expr, SEMI / RBRACE]
fn yy_state_630(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_298)
    T_LBRACE => Shift(yy_state_611)
    NT_parameters => Shift(yy_state_631)
    _ => Error
  }
}

// [210, statement → FN LIDENT optional_bang parameters • option(preceded(THIN_ARROW,return_type)) block_expr, SEMI / RBRACE]
// [460, option(preceded(THIN_ARROW,return_type)) → •, LBRACE]
// [461, option(preceded(THIN_ARROW,return_type)) → • THIN_ARROW return_type, LBRACE]
fn yy_state_631(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_THIN_ARROW => Shift(yy_state_246)
    NT_option_preceded_THIN_ARROW_return_type__ => Shift(yy_state_632)
    T_LBRACE => Reduce(0, NT_option_preceded_THIN_ARROW_return_type__, yy_action_161)
    _ => Error
  }
}

// [38, block_expr → • LBRACE list_semis_rev(statement) RBRACE, SEMI / RBRACE]
// [210, statement → FN LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) • block_expr, SEMI / RBRACE]
fn yy_state_632(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACE => Shift(yy_state_250)
    NT_block_expr => Shift(yy_state_633)
    _ => Error
  }
}

// [210, statement → FN LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr •, SEMI / RBRACE]
fn yy_state_633(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(6, NT_statement, yy_action_367)
}

// [192, luident → LIDENT •, COLONCOLON]
// [194, qual_ident → LIDENT •, AUGMENTED_ASSIGNMENT / EQUAL]
// [196, qual_ident_simple_expr → LIDENT •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → LIDENT • QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [430, record_defn → LIDENT • COMMA list_commas_with_trailing_info(record_defn_single), RBRACE]
// [431, record_defn → LIDENT • COLON expr option(COMMA), RBRACE]
// [432, record_defn → LIDENT • COLON expr COMMA non_empty_list_commas_with_trailing_info(record_defn_single), RBRACE]
fn yy_state_634(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_QUESTION => Shift(yy_state_312)
    T_COLON => Shift(yy_state_635)
    T_COMMA => Shift(yy_state_640)
    T_COLONCOLON => Reduce(1, NT_luident, yy_action_155)
    T_AUGMENTED_ASSIGNMENT | T_EQUAL => Reduce(1, NT_qual_ident, yy_action_347)
    T_INFIX1 | T_INFIX2 | T_INFIX3 | T_INFIX4 | T_LPAREN | T_MINUS | T_EXCLAMATION | T_DOT_LIDENT | T_DOT_INT | T_SEMI | T_LBRACKET | T_PLUS | T_BAR | T_RBRACE | T_AMPERAMPER | T_AMPER | T_CARET | T_BARBAR | T_AS | T_PIPE | T_DOTDOT | T_RANGE_INCLUSIVE | T_RANGE_EXCLUSIVE | T_IS => Reduce(1, NT_qual_ident_simple_expr, yy_action_653)
    _ => Error
  }
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [229, loop_label_colon → • POST_LABEL COLON, WHILE / LOOP / FOR]
// [230, loop_label_colon → •, WHILE / LOOP / FOR]
// [231, while_expr → • loop_label_colon WHILE infix_expr block_expr optional_else, COMMA / RBRACE]
// [238, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE, COMMA / RBRACE]
// [239, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE ELSE LBRACE single_pattern_cases RBRACE, COMMA / RBRACE]
// [240, if_expr → • IF infix_expr block_expr ELSE block_expr, COMMA / RBRACE]
// [241, if_expr → • IF infix_expr block_expr ELSE if_expr, COMMA / RBRACE]
// [242, if_expr → • IF infix_expr block_expr, COMMA / RBRACE]
// [243, match_expr → • MATCH infix_expr LBRACE non_empty_list_semis(single_pattern_case) RBRACE, COMMA / RBRACE]
// [244, match_expr → • MATCH infix_expr LBRACE RBRACE, COMMA / RBRACE]
// [245, loop_expr → • loop_label_colon LOOP non_empty_list_commas_no_trailing(expr) LBRACE list_semis(multi_pattern_case) RBRACE, COMMA / RBRACE]
// [249, for_expr → • loop_label_colon FOR for_binders SEMI option(infix_expr) SEMI list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) block_expr optional_else, COMMA / RBRACE]
// [250, for_expr → • loop_label_colon FOR for_binders block_expr optional_else, COMMA / RBRACE]
// [251, foreach_expr → • loop_label_colon FOR non_empty_list_commas(foreach_binder) IN expr block_expr optional_else, COMMA / RBRACE]
// [254, expr → • loop_expr, COMMA / RBRACE]
// [255, expr → • for_expr, COMMA / RBRACE]
// [256, expr → • foreach_expr, COMMA / RBRACE]
// [257, expr → • while_expr, COMMA / RBRACE]
// [258, expr → • try_expr, COMMA / RBRACE]
// [259, expr → • if_expr, COMMA / RBRACE]
// [260, expr → • match_expr, COMMA / RBRACE]
// [261, expr → • pipe_expr, COMMA / RBRACE]
// [262, pipe_expr → • pipe_expr PIPE infix_expr, COMMA / RBRACE / PIPE]
// [263, pipe_expr → • infix_expr, COMMA / RBRACE / PIPE]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / COMMA / MINUS / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [431, record_defn → LIDENT COLON • expr option(COMMA), RBRACE]
// [432, record_defn → LIDENT COLON • expr COMMA non_empty_list_commas_with_trailing_info(record_defn_single), RBRACE]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_635(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    T_LIDENT => Shift(yy_state_311)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_323)
    NT_pipe_expr => Shift(yy_state_346)
    NT_match_expr => Shift(yy_state_349)
    NT_if_expr => Shift(yy_state_350)
    NT_try_expr => Shift(yy_state_351)
    NT_while_expr => Shift(yy_state_352)
    NT_foreach_expr => Shift(yy_state_353)
    NT_for_expr => Shift(yy_state_354)
    NT_loop_expr => Shift(yy_state_355)
    T_MATCH => Shift(yy_state_356)
    T_IF => Shift(yy_state_373)
    T_TRY => Shift(yy_state_379)
    NT_loop_label_colon => Shift(yy_state_396)
    T_POST_LABEL => Shift(yy_state_404)
    NT_expr => Shift(yy_state_636)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_481)
    _ => Error
  }
}

// [431, record_defn → LIDENT COLON expr • option(COMMA), RBRACE]
// [432, record_defn → LIDENT COLON expr • COMMA non_empty_list_commas_with_trailing_info(record_defn_single), RBRACE]
// [533, option(COMMA) → •, RBRACE]
// [534, option(COMMA) → • COMMA, RBRACE]
fn yy_state_636(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COMMA => Shift(yy_state_637)
    NT_option_COMMA_ => Shift(yy_state_639)
    T_RBRACE => Reduce(0, NT_option_COMMA_, yy_action_181)
    _ => Error
  }
}

// [432, record_defn → LIDENT COLON expr COMMA • non_empty_list_commas_with_trailing_info(record_defn_single), RBRACE]
// [433, record_defn_single → • LIDENT COLON expr, COMMA / RBRACE]
// [434, record_defn_single → • LIDENT, COMMA / RBRACE]
// [534, option(COMMA) → COMMA •, RBRACE]
// [545, non_empty_list_commas_with_trailing_info(record_defn_single) → • non_empty_list_commas_rev(record_defn_single) option(COMMA), RBRACE]
// [602, non_empty_list_commas_rev(record_defn_single) → • record_defn_single, COMMA / RBRACE]
// [603, non_empty_list_commas_rev(record_defn_single) → • non_empty_list_commas_rev(record_defn_single) COMMA record_defn_single, COMMA / RBRACE]
fn yy_state_637(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_record_defn_single => Shift(yy_state_268)
    NT_non_empty_list_commas_rev_record_defn_single_ => Shift(yy_state_269)
    T_LIDENT => Shift(yy_state_273)
    NT_non_empty_list_commas_with_trailing_info_record_defn_single_ => Shift(yy_state_638)
    T_RBRACE => Reduce(1, NT_option_COMMA_, yy_action_56)
    _ => Error
  }
}

// [432, record_defn → LIDENT COLON expr COMMA non_empty_list_commas_with_trailing_info(record_defn_single) •, RBRACE]
fn yy_state_638(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_record_defn, yy_action_625)
}

// [431, record_defn → LIDENT COLON expr option(COMMA) •, RBRACE]
fn yy_state_639(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_record_defn, yy_action_583)
}

// [430, record_defn → LIDENT COMMA • list_commas_with_trailing_info(record_defn_single), RBRACE]
// [433, record_defn_single → • LIDENT COLON expr, COMMA / RBRACE]
// [434, record_defn_single → • LIDENT, COMMA / RBRACE]
// [520, list_commas_with_trailing_info(record_defn_single) → •, RBRACE]
// [521, list_commas_with_trailing_info(record_defn_single) → • non_empty_list_commas_with_trailing_info(record_defn_single), RBRACE]
// [545, non_empty_list_commas_with_trailing_info(record_defn_single) → • non_empty_list_commas_rev(record_defn_single) option(COMMA), RBRACE]
// [602, non_empty_list_commas_rev(record_defn_single) → • record_defn_single, COMMA / RBRACE]
// [603, non_empty_list_commas_rev(record_defn_single) → • non_empty_list_commas_rev(record_defn_single) COMMA record_defn_single, COMMA / RBRACE]
fn yy_state_640(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_record_defn_single => Shift(yy_state_268)
    NT_non_empty_list_commas_rev_record_defn_single_ => Shift(yy_state_269)
    T_LIDENT => Shift(yy_state_273)
    NT_non_empty_list_commas_with_trailing_info_record_defn_single_ => Shift(yy_state_553)
    NT_list_commas_with_trailing_info_record_defn_single_ => Shift(yy_state_641)
    T_RBRACE => Reduce(0, NT_list_commas_with_trailing_info_record_defn_single_, yy_action_278)
    _ => Error
  }
}

// [430, record_defn → LIDENT COMMA list_commas_with_trailing_info(record_defn_single) •, RBRACE]
fn yy_state_641(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_record_defn, yy_action_169)
}

// [561, non_empty_list_semis_rev(statement) → non_empty_list_semi_rev_aux(statement) option(SEMI) •, RBRACE]
fn yy_state_642(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_non_empty_list_semis_rev_statement_, yy_action_438)
}

// [467, list_semis_rev(statement) → non_empty_list_semis_rev(statement) •, RBRACE]
fn yy_state_643(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_list_semis_rev_statement_, yy_action_216)
}

// [38, block_expr → LBRACE list_semis_rev(statement) • RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_644(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACE => Shift(yy_state_645)
    _ => Error
  }
}

// [38, block_expr → LBRACE list_semis_rev(statement) RBRACE •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_645(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_block_expr, yy_action_498)
}

// [234, multi_pattern_case → non_empty_list_commas(pattern) option(preceded(IF,expr)) • FAT_ARROW expr_statement, SEMI / RBRACE]
fn yy_state_646(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_FAT_ARROW => Shift(yy_state_647)
    _ => Error
  }
}

// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [194, qual_ident → • LIDENT, AUGMENTED_ASSIGNMENT / EQUAL]
// [195, qual_ident → • PACKAGE_NAME DOT_LIDENT, AUGMENTED_ASSIGNMENT / EQUAL]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [219, expr_statement → • BREAK POST_LABEL option(expr), SEMI / RBRACE]
// [220, expr_statement → • BREAK option(expr), SEMI / RBRACE]
// [221, expr_statement → • CONTINUE POST_LABEL list_commas_no_trailing(expr), SEMI / RBRACE]
// [222, expr_statement → • CONTINUE list_commas_no_trailing(expr), SEMI / RBRACE]
// [223, expr_statement → • RETURN option(expr), SEMI / RBRACE]
// [224, expr_statement → • RAISE expr, SEMI / RBRACE]
// [225, expr_statement → • ELLIPSIS, SEMI / RBRACE]
// [226, expr_statement → • left_value AUGMENTED_ASSIGNMENT expr, SEMI / RBRACE]
// [227, expr_statement → • left_value EQUAL expr, SEMI / RBRACE]
// [228, expr_statement → • expr, SEMI / RBRACE]
// [229, loop_label_colon → • POST_LABEL COLON, WHILE / LOOP / FOR]
// [230, loop_label_colon → •, WHILE / LOOP / FOR]
// [231, while_expr → • loop_label_colon WHILE infix_expr block_expr optional_else, SEMI / RBRACE]
// [234, multi_pattern_case → non_empty_list_commas(pattern) option(preceded(IF,expr)) FAT_ARROW • expr_statement, SEMI / RBRACE]
// [238, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE, SEMI / RBRACE]
// [239, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE ELSE LBRACE single_pattern_cases RBRACE, SEMI / RBRACE]
// [240, if_expr → • IF infix_expr block_expr ELSE block_expr, SEMI / RBRACE]
// [241, if_expr → • IF infix_expr block_expr ELSE if_expr, SEMI / RBRACE]
// [242, if_expr → • IF infix_expr block_expr, SEMI / RBRACE]
// [243, match_expr → • MATCH infix_expr LBRACE non_empty_list_semis(single_pattern_case) RBRACE, SEMI / RBRACE]
// [244, match_expr → • MATCH infix_expr LBRACE RBRACE, SEMI / RBRACE]
// [245, loop_expr → • loop_label_colon LOOP non_empty_list_commas_no_trailing(expr) LBRACE list_semis(multi_pattern_case) RBRACE, SEMI / RBRACE]
// [249, for_expr → • loop_label_colon FOR for_binders SEMI option(infix_expr) SEMI list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) block_expr optional_else, SEMI / RBRACE]
// [250, for_expr → • loop_label_colon FOR for_binders block_expr optional_else, SEMI / RBRACE]
// [251, foreach_expr → • loop_label_colon FOR non_empty_list_commas(foreach_binder) IN expr block_expr optional_else, SEMI / RBRACE]
// [254, expr → • loop_expr, SEMI / RBRACE]
// [255, expr → • for_expr, SEMI / RBRACE]
// [256, expr → • foreach_expr, SEMI / RBRACE]
// [257, expr → • while_expr, SEMI / RBRACE]
// [258, expr → • try_expr, SEMI / RBRACE]
// [259, expr → • if_expr, SEMI / RBRACE]
// [260, expr → • match_expr, SEMI / RBRACE]
// [261, expr → • pipe_expr, SEMI / RBRACE]
// [262, pipe_expr → • pipe_expr PIPE infix_expr, SEMI / RBRACE / PIPE]
// [263, pipe_expr → • infix_expr, SEMI / RBRACE / PIPE]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [285, left_value → • qual_ident, AUGMENTED_ASSIGNMENT / EQUAL]
// [286, left_value → • simple_expr DOT_LIDENT, AUGMENTED_ASSIGNMENT / EQUAL]
// [287, left_value → • simple_expr DOT_INT, AUGMENTED_ASSIGNMENT / EQUAL]
// [288, left_value → • simple_expr LBRACKET expr RBRACKET, AUGMENTED_ASSIGNMENT / EQUAL]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_647(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_323)
    NT_pipe_expr => Shift(yy_state_346)
    NT_match_expr => Shift(yy_state_349)
    NT_if_expr => Shift(yy_state_350)
    NT_try_expr => Shift(yy_state_351)
    NT_while_expr => Shift(yy_state_352)
    NT_foreach_expr => Shift(yy_state_353)
    NT_for_expr => Shift(yy_state_354)
    NT_loop_expr => Shift(yy_state_355)
    T_MATCH => Shift(yy_state_356)
    NT_qual_ident => Shift(yy_state_367)
    NT_simple_expr => Shift(yy_state_368)
    T_IF => Shift(yy_state_373)
    T_TRY => Shift(yy_state_379)
    NT_loop_label_colon => Shift(yy_state_396)
    T_POST_LABEL => Shift(yy_state_404)
    NT_expr => Shift(yy_state_490)
    NT_left_value => Shift(yy_state_491)
    T_ELLIPSIS => Shift(yy_state_496)
    T_RAISE => Shift(yy_state_497)
    T_RETURN => Shift(yy_state_499)
    T_CONTINUE => Shift(yy_state_501)
    T_BREAK => Shift(yy_state_506)
    T_PACKAGE_NAME => Shift(yy_state_510)
    T_LIDENT => Shift(yy_state_512)
    NT_expr_statement => Shift(yy_state_648)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_481)
    _ => Error
  }
}

// [234, multi_pattern_case → non_empty_list_commas(pattern) option(preceded(IF,expr)) FAT_ARROW expr_statement •, SEMI / RBRACE]
fn yy_state_648(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_multi_pattern_case, yy_action_536)
}

// [303, simple_expr → fn_header_no_binder list_semis(multi_pattern_case) • RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_649(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACE => Shift(yy_state_650)
    _ => Error
  }
}

// [303, simple_expr → fn_header_no_binder list_semis(multi_pattern_case) RBRACE •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_650(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_simple_expr, yy_action_439)
}

// [527, list_commas(expr) → non_empty_list_commas(expr) •, RPAREN]
fn yy_state_651(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_list_commas_expr_, yy_action_306)
}

// [327, simple_expr → LPAREN expr • COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [587, non_empty_list_commas_rev(expr) → expr •, RPAREN / COMMA]
fn yy_state_652(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_653)
    T_RPAREN | T_COMMA => Reduce(1, NT_non_empty_list_commas_rev_expr_, yy_action_40)
    _ => Error
  }
}

// [192, luident → • LIDENT, RPAREN / QUESTION / LBRACKET]
// [193, luident → • UIDENT, RPAREN / QUESTION / LBRACKET]
// [198, qual_ident_ty → • luident, RPAREN / QUESTION / LBRACKET]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, RPAREN / QUESTION / LBRACKET]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, RPAREN / QUESTION / LBRACKET]
// [327, simple_expr → LPAREN expr COLON • type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [410, type_ → • type_ QUESTION, RPAREN / QUESTION]
// [411, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN, RPAREN / QUESTION]
// [412, type_ → • ASYNC LPAREN type_ COMMA RPAREN THIN_ARROW return_type, RPAREN / QUESTION]
// [413, type_ → • ASYNC LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, RPAREN / QUESTION]
// [414, type_ → • LPAREN type_ COMMA RPAREN THIN_ARROW return_type, RPAREN / QUESTION]
// [415, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, RPAREN / QUESTION]
// [416, type_ → • ASYNC LPAREN RPAREN THIN_ARROW return_type, RPAREN / QUESTION]
// [417, type_ → • LPAREN RPAREN THIN_ARROW return_type, RPAREN / QUESTION]
// [418, type_ → • LPAREN type_ RPAREN, RPAREN / QUESTION]
// [419, type_ → • ASYNC LPAREN type_ RPAREN THIN_ARROW return_type, RPAREN / QUESTION]
// [420, type_ → • LPAREN type_ RPAREN THIN_ARROW return_type, RPAREN / QUESTION]
// [421, type_ → • qual_ident_ty optional_type_arguments, RPAREN / QUESTION]
// [422, type_ → • AMPER qual_ident_ty, RPAREN / QUESTION]
// [423, type_ → • UNDERSCORE, RPAREN / QUESTION]
fn yy_state_653(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    T_UNDERSCORE => Shift(yy_state_120)
    T_AMPER => Shift(yy_state_121)
    NT_qual_ident_ty => Shift(yy_state_123)
    T_ASYNC => Shift(yy_state_129)
    T_LPAREN => Shift(yy_state_134)
    NT_type_ => Shift(yy_state_654)
    _ => Error
  }
}

// [327, simple_expr → LPAREN expr COLON type_ • RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [410, type_ → type_ • QUESTION, RPAREN / QUESTION]
fn yy_state_654(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_QUESTION => Shift(yy_state_139)
    T_RPAREN => Shift(yy_state_655)
    _ => Error
  }
}

// [327, simple_expr → LPAREN expr COLON type_ RPAREN •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_655(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_simple_expr, yy_action_203)
}

// [326, simple_expr → LPAREN list_commas(expr) • RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_656(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RPAREN => Shift(yy_state_657)
    _ => Error
  }
}

// [326, simple_expr → LPAREN list_commas(expr) RPAREN •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_657(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_simple_expr, yy_action_357)
}

// [359, spreadable_elem → expr •, COMMA / RBRACKET]
fn yy_state_658(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_spreadable_elem, yy_action_567)
}

// [529, list_commas(spreadable_elem) → non_empty_list_commas(spreadable_elem) •, RBRACKET]
fn yy_state_659(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_list_commas_spreadable_elem_, yy_action_257)
}

// [328, simple_expr → LBRACKET list_commas(spreadable_elem) • RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_660(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACKET => Shift(yy_state_661)
    _ => Error
  }
}

// [328, simple_expr → LBRACKET list_commas(spreadable_elem) RBRACKET •, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / CATCH / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / COLON / SEMI / LBRACKET / PLUS / RBRACKET / BAR / LBRACE / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / ELSE / FAT_ARROW / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_661(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_simple_expr, yy_action_464)
}

// [45, expression → expr • EOF, $]
fn yy_state_662(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EOF => Shift(yy_state_663)
    _ => Error
  }
}

// [45, expression → expr EOF •, $]
fn yy_state_663(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_expression, yy_action_144)
}

// [17, fun_header → • ASYNC FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [18, fun_header → • FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [19, fun_header → • PRIV ASYNC FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [20, fun_header → • PRIV FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [21, fun_header → • PUB pub_attr ASYNC FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [22, fun_header → • PUB pub_attr FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [23, fun_header → • non_empty_list(attribute) ASYNC FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [24, fun_header → • non_empty_list(attribute) FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [25, fun_header → • non_empty_list(attribute) PRIV ASYNC FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [26, fun_header → • non_empty_list(attribute) PRIV FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [27, fun_header → • non_empty_list(attribute) PUB pub_attr ASYNC FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [28, fun_header → • non_empty_list(attribute) PUB pub_attr FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [32, extern_fun_header → • EXTERN STRING FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL]
// [33, extern_fun_header → • PRIV EXTERN STRING FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL]
// [34, extern_fun_header → • PUB pub_attr EXTERN STRING FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL]
// [35, extern_fun_header → • non_empty_list(attribute) EXTERN STRING FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL]
// [36, extern_fun_header → • non_empty_list(attribute) PRIV EXTERN STRING FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL]
// [37, extern_fun_header → • non_empty_list(attribute) PUB pub_attr EXTERN STRING FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL]
// [46, val_header → • LET LIDENT, EQUAL]
// [47, val_header → • LET LIDENT COLON type_, EQUAL]
// [48, val_header → • PRIV LET LIDENT, EQUAL]
// [49, val_header → • PRIV LET LIDENT COLON type_, EQUAL]
// [50, val_header → • PUB pub_attr LET LIDENT, EQUAL]
// [51, val_header → • PUB pub_attr LET LIDENT COLON type_, EQUAL]
// [52, val_header → • non_empty_list(attribute) LET LIDENT, EQUAL]
// [53, val_header → • non_empty_list(attribute) LET LIDENT COLON type_, EQUAL]
// [54, val_header → • non_empty_list(attribute) PRIV LET LIDENT, EQUAL]
// [55, val_header → • non_empty_list(attribute) PRIV LET LIDENT COLON type_, EQUAL]
// [56, val_header → • non_empty_list(attribute) PUB pub_attr LET LIDENT, EQUAL]
// [57, val_header → • non_empty_list(attribute) PUB pub_attr LET LIDENT COLON type_, EQUAL]
// [58, val_header → • CONST UIDENT, EQUAL]
// [59, val_header → • CONST UIDENT COLON type_, EQUAL]
// [60, val_header → • PRIV CONST UIDENT, EQUAL]
// [61, val_header → • PRIV CONST UIDENT COLON type_, EQUAL]
// [62, val_header → • PUB pub_attr CONST UIDENT, EQUAL]
// [63, val_header → • PUB pub_attr CONST UIDENT COLON type_, EQUAL]
// [64, val_header → • non_empty_list(attribute) CONST UIDENT, EQUAL]
// [65, val_header → • non_empty_list(attribute) CONST UIDENT COLON type_, EQUAL]
// [66, val_header → • non_empty_list(attribute) PRIV CONST UIDENT, EQUAL]
// [67, val_header → • non_empty_list(attribute) PRIV CONST UIDENT COLON type_, EQUAL]
// [68, val_header → • non_empty_list(attribute) PUB pub_attr CONST UIDENT, EQUAL]
// [69, val_header → • non_empty_list(attribute) PUB pub_attr CONST UIDENT COLON type_, EQUAL]
// [70, structure → • list_semis(structure_item) EOF, $]
// [71, structure_item → • type_header deriving_directive_list, EOF / SEMI]
// [72, structure_item → • EXTERN TYPE luident optional_type_parameters_no_constraints deriving_directive_list, EOF / SEMI]
// [73, structure_item → • PRIV EXTERN TYPE luident optional_type_parameters_no_constraints deriving_directive_list, EOF / SEMI]
// [74, structure_item → • PUB pub_attr EXTERN TYPE luident optional_type_parameters_no_constraints deriving_directive_list, EOF / SEMI]
// [75, structure_item → • non_empty_list(attribute) EXTERN TYPE luident optional_type_parameters_no_constraints deriving_directive_list, EOF / SEMI]
// [76, structure_item → • non_empty_list(attribute) PRIV EXTERN TYPE luident optional_type_parameters_no_constraints deriving_directive_list, EOF / SEMI]
// [77, structure_item → • non_empty_list(attribute) PUB pub_attr EXTERN TYPE luident optional_type_parameters_no_constraints deriving_directive_list, EOF / SEMI]
// [78, structure_item → • type_header type_ deriving_directive_list, EOF / SEMI]
// [79, structure_item → • type_header_bang option(type_) deriving_directive_list, EOF / SEMI]
// [80, structure_item → • type_header_bang LBRACE list_semis(enum_constructor) RBRACE deriving_directive_list, EOF / SEMI]
// [81, structure_item → • type_alias_header EQUAL type_ deriving_directive_list, EOF / SEMI]
// [82, structure_item → • struct_header LBRACE list_semis(record_decl_field) RBRACE deriving_directive_list, EOF / SEMI]
// [83, structure_item → • enum_header LBRACE list_semis(enum_constructor) RBRACE deriving_directive_list, EOF / SEMI]
// [84, structure_item → • val_header EQUAL expr, EOF / SEMI]
// [85, structure_item → • fun_header EQUAL STRING STRING, EOF / SEMI]
// [86, structure_item → • fun_header EQUAL STRING, EOF / SEMI]
// [87, structure_item → • fun_header EQUAL non_empty_list(MULTILINE_STRING), EOF / SEMI]
// [88, structure_item → • extern_fun_header EQUAL STRING, EOF / SEMI]
// [89, structure_item → • extern_fun_header EQUAL non_empty_list(MULTILINE_STRING), EOF / SEMI]
// [90, structure_item → • fun_header block_expr_with_local_types, EOF / SEMI]
// [91, structure_item → • FNALIAS func_alias_targets, EOF / SEMI]
// [92, structure_item → • PRIV FNALIAS func_alias_targets, EOF / SEMI]
// [93, structure_item → • PUB pub_attr FNALIAS func_alias_targets, EOF / SEMI]
// [94, structure_item → • non_empty_list(attribute) FNALIAS func_alias_targets, EOF / SEMI]
// [95, structure_item → • non_empty_list(attribute) PRIV FNALIAS func_alias_targets, EOF / SEMI]
// [96, structure_item → • non_empty_list(attribute) PUB pub_attr FNALIAS func_alias_targets, EOF / SEMI]
// [97, structure_item → • TRAIT luident option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) LBRACE list_semis(trait_method_decl) RBRACE, EOF / SEMI]
// [98, structure_item → • PRIV TRAIT luident option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) LBRACE list_semis(trait_method_decl) RBRACE, EOF / SEMI]
// [99, structure_item → • PUB pub_attr TRAIT luident option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) LBRACE list_semis(trait_method_decl) RBRACE, EOF / SEMI]
// [100, structure_item → • non_empty_list(attribute) TRAIT luident option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) LBRACE list_semis(trait_method_decl) RBRACE, EOF / SEMI]
// [101, structure_item → • non_empty_list(attribute) PRIV TRAIT luident option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) LBRACE list_semis(trait_method_decl) RBRACE, EOF / SEMI]
// [102, structure_item → • non_empty_list(attribute) PUB pub_attr TRAIT luident option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) LBRACE list_semis(trait_method_decl) RBRACE, EOF / SEMI]
// [103, structure_item → • TRAITALIAS luident EQUAL type_name, EOF / SEMI]
// [104, structure_item → • PRIV TRAITALIAS luident EQUAL type_name, EOF / SEMI]
// [105, structure_item → • PUB pub_attr TRAITALIAS luident EQUAL type_name, EOF / SEMI]
// [106, structure_item → • non_empty_list(attribute) TRAITALIAS luident EQUAL type_name, EOF / SEMI]
// [107, structure_item → • non_empty_list(attribute) PRIV TRAITALIAS luident EQUAL type_name, EOF / SEMI]
// [108, structure_item → • non_empty_list(attribute) PUB pub_attr TRAITALIAS luident EQUAL type_name, EOF / SEMI]
// [109, structure_item → • TYPEALIAS PACKAGE_NAME batch_type_alias_targets, EOF / SEMI]
// [110, structure_item → • PRIV TYPEALIAS PACKAGE_NAME batch_type_alias_targets, EOF / SEMI]
// [111, structure_item → • PUB pub_attr TYPEALIAS PACKAGE_NAME batch_type_alias_targets, EOF / SEMI]
// [112, structure_item → • non_empty_list(attribute) TYPEALIAS PACKAGE_NAME batch_type_alias_targets, EOF / SEMI]
// [113, structure_item → • non_empty_list(attribute) PRIV TYPEALIAS PACKAGE_NAME batch_type_alias_targets, EOF / SEMI]
// [114, structure_item → • non_empty_list(attribute) PUB pub_attr TYPEALIAS PACKAGE_NAME batch_type_alias_targets, EOF / SEMI]
// [115, structure_item → • TRAITALIAS PACKAGE_NAME batch_trait_alias_targets, EOF / SEMI]
// [116, structure_item → • PRIV TRAITALIAS PACKAGE_NAME batch_trait_alias_targets, EOF / SEMI]
// [117, structure_item → • PUB pub_attr TRAITALIAS PACKAGE_NAME batch_trait_alias_targets, EOF / SEMI]
// [118, structure_item → • non_empty_list(attribute) TRAITALIAS PACKAGE_NAME batch_trait_alias_targets, EOF / SEMI]
// [119, structure_item → • non_empty_list(attribute) PRIV TRAITALIAS PACKAGE_NAME batch_trait_alias_targets, EOF / SEMI]
// [120, structure_item → • non_empty_list(attribute) PUB pub_attr TRAITALIAS PACKAGE_NAME batch_trait_alias_targets, EOF / SEMI]
// [121, structure_item → • TEST option(loced_string) option(parameters) block_expr_with_local_types, EOF / SEMI]
// [122, structure_item → • non_empty_list(attribute) TEST option(loced_string) option(parameters) block_expr_with_local_types, EOF / SEMI]
// [123, structure_item → • IMPL optional_type_parameters type_name FOR type_ WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [124, structure_item → • PRIV IMPL optional_type_parameters type_name FOR type_ WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [125, structure_item → • PUB pub_attr IMPL optional_type_parameters type_name FOR type_ WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [126, structure_item → • non_empty_list(attribute) IMPL optional_type_parameters type_name FOR type_ WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [127, structure_item → • non_empty_list(attribute) PRIV IMPL optional_type_parameters type_name FOR type_ WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [128, structure_item → • non_empty_list(attribute) PUB pub_attr IMPL optional_type_parameters type_name FOR type_ WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [129, structure_item → • IMPL optional_type_parameters type_name WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [130, structure_item → • PRIV IMPL optional_type_parameters type_name WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [131, structure_item → • PUB pub_attr IMPL optional_type_parameters type_name WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [132, structure_item → • non_empty_list(attribute) IMPL optional_type_parameters type_name WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [133, structure_item → • non_empty_list(attribute) PRIV IMPL optional_type_parameters type_name WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [134, structure_item → • non_empty_list(attribute) PUB pub_attr IMPL optional_type_parameters type_name WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [138, type_header → • TYPE luident optional_type_parameters_no_constraints, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / AMPER / PACKAGE_NAME]
// [139, type_header → • PRIV TYPE luident optional_type_parameters_no_constraints, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / AMPER / PACKAGE_NAME]
// [140, type_header → • PUB pub_attr TYPE luident optional_type_parameters_no_constraints, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / AMPER / PACKAGE_NAME]
// [141, type_header → • non_empty_list(attribute) TYPE luident optional_type_parameters_no_constraints, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / AMPER / PACKAGE_NAME]
// [142, type_header → • non_empty_list(attribute) PRIV TYPE luident optional_type_parameters_no_constraints, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / AMPER / PACKAGE_NAME]
// [143, type_header → • non_empty_list(attribute) PUB pub_attr TYPE luident optional_type_parameters_no_constraints, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / AMPER / PACKAGE_NAME]
// [144, type_header_bang → • TYPE EXCLAMATION luident, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / LBRACE / AMPER / PACKAGE_NAME]
// [145, type_header_bang → • PRIV TYPE EXCLAMATION luident, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / LBRACE / AMPER / PACKAGE_NAME]
// [146, type_header_bang → • PUB pub_attr TYPE EXCLAMATION luident, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / LBRACE / AMPER / PACKAGE_NAME]
// [147, type_header_bang → • non_empty_list(attribute) TYPE EXCLAMATION luident, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / LBRACE / AMPER / PACKAGE_NAME]
// [148, type_header_bang → • non_empty_list(attribute) PRIV TYPE EXCLAMATION luident, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / LBRACE / AMPER / PACKAGE_NAME]
// [149, type_header_bang → • non_empty_list(attribute) PUB pub_attr TYPE EXCLAMATION luident, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / LBRACE / AMPER / PACKAGE_NAME]
// [150, type_alias_header → • TYPEALIAS luident optional_type_parameters_no_constraints, EQUAL]
// [151, type_alias_header → • PRIV TYPEALIAS luident optional_type_parameters_no_constraints, EQUAL]
// [152, type_alias_header → • PUB pub_attr TYPEALIAS luident optional_type_parameters_no_constraints, EQUAL]
// [153, type_alias_header → • non_empty_list(attribute) TYPEALIAS luident optional_type_parameters_no_constraints, EQUAL]
// [154, type_alias_header → • non_empty_list(attribute) PRIV TYPEALIAS luident optional_type_parameters_no_constraints, EQUAL]
// [155, type_alias_header → • non_empty_list(attribute) PUB pub_attr TYPEALIAS luident optional_type_parameters_no_constraints, EQUAL]
// [156, struct_header → • STRUCT luident optional_type_parameters_no_constraints, LBRACE]
// [157, struct_header → • PRIV STRUCT luident optional_type_parameters_no_constraints, LBRACE]
// [158, struct_header → • PUB pub_attr STRUCT luident optional_type_parameters_no_constraints, LBRACE]
// [159, struct_header → • non_empty_list(attribute) STRUCT luident optional_type_parameters_no_constraints, LBRACE]
// [160, struct_header → • non_empty_list(attribute) PRIV STRUCT luident optional_type_parameters_no_constraints, LBRACE]
// [161, struct_header → • non_empty_list(attribute) PUB pub_attr STRUCT luident optional_type_parameters_no_constraints, LBRACE]
// [162, enum_header → • ENUM luident optional_type_parameters_no_constraints, LBRACE]
// [163, enum_header → • PRIV ENUM luident optional_type_parameters_no_constraints, LBRACE]
// [164, enum_header → • PUB pub_attr ENUM luident optional_type_parameters_no_constraints, LBRACE]
// [165, enum_header → • non_empty_list(attribute) ENUM luident optional_type_parameters_no_constraints, LBRACE]
// [166, enum_header → • non_empty_list(attribute) PRIV ENUM luident optional_type_parameters_no_constraints, LBRACE]
// [167, enum_header → • non_empty_list(attribute) PUB pub_attr ENUM luident optional_type_parameters_no_constraints, LBRACE]
// [468, list_semis(structure_item) → •, EOF]
// [469, list_semis(structure_item) → • non_empty_list_semis(structure_item), EOF]
// [481, non_empty_list(attribute) → • non_empty_list_rev(attribute), PUB / PRIV / EXTERN / STRUCT / ENUM / TRAIT / IMPL / ASYNC / TYPEALIAS / TRAITALIAS / FNALIAS / FN / LET / CONST / TYPE / TEST]
// [562, non_empty_list_semis(structure_item) → • non_empty_list_semis_rev(structure_item), EOF]
// [566, non_empty_list_rev(attribute) → • ATTRIBUTE, ATTRIBUTE / PUB / PRIV / EXTERN / STRUCT / ENUM / TRAIT / IMPL / ASYNC / TYPEALIAS / TRAITALIAS / FNALIAS / FN / LET / CONST / TYPE / TEST]
// [567, non_empty_list_rev(attribute) → • non_empty_list_rev(attribute) ATTRIBUTE, ATTRIBUTE / PUB / PRIV / EXTERN / STRUCT / ENUM / TRAIT / IMPL / ASYNC / TYPEALIAS / TRAITALIAS / FNALIAS / FN / LET / CONST / TYPE / TEST]
// [612, non_empty_list_semis_rev(structure_item) → • non_empty_list_semi_rev_aux(structure_item) option(SEMI), EOF]
// [633, non_empty_list_semi_rev_aux(structure_item) → • structure_item, EOF / SEMI]
// [634, non_empty_list_semi_rev_aux(structure_item) → • non_empty_list_semi_rev_aux(structure_item) SEMI structure_item, EOF / SEMI]
// [639, structure_prime → • structure, $]
fn yy_state_664(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_structure => Shift(yy_state_665)
    NT_structure_item => Shift(yy_state_666)
    NT_non_empty_list_semi_rev_aux_structure_item_ => Shift(yy_state_667)
    T_ATTRIBUTE => Shift(yy_state_671)
    NT_non_empty_list_rev_attribute_ => Shift(yy_state_672)
    T_ENUM => Shift(yy_state_674)
    T_STRUCT => Shift(yy_state_688)
    T_TYPE => Shift(yy_state_691)
    T_IMPL => Shift(yy_state_696)
    T_TEST => Shift(yy_state_825)
    T_TYPEALIAS => Shift(yy_state_831)
    T_TRAITALIAS => Shift(yy_state_850)
    T_TRAIT => Shift(yy_state_867)
    T_FNALIAS => Shift(yy_state_906)
    NT_extern_fun_header => Shift(yy_state_943)
    NT_fun_header => Shift(yy_state_950)
    NT_val_header => Shift(yy_state_956)
    NT_enum_header => Shift(yy_state_959)
    NT_struct_header => Shift(yy_state_964)
    NT_type_alias_header => Shift(yy_state_969)
    NT_type_header_bang => Shift(yy_state_973)
    NT_type_header => Shift(yy_state_981)
    T_CONST => Shift(yy_state_985)
    T_LET => Shift(yy_state_989)
    T_EXTERN => Shift(yy_state_993)
    NT_non_empty_list_attribute_ => Shift(yy_state_1009)
    T_PUB => Shift(yy_state_1257)
    T_PRIV => Shift(yy_state_1339)
    T_FN => Shift(yy_state_1420)
    T_ASYNC => Shift(yy_state_1426)
    NT_non_empty_list_semis_rev_structure_item_ => Shift(yy_state_1433)
    NT_non_empty_list_semis_structure_item_ => Shift(yy_state_1434)
    NT_list_semis_structure_item_ => Shift(yy_state_1435)
    T_EOF => Reduce(0, NT_list_semis_structure_item_, yy_action_376)
    _ => Error
  }
}

// [639, structure_prime → structure •, $]
fn yy_state_665(_lookahead : YYSymbol) -> YYDecision {
  Accept
}

// [633, non_empty_list_semi_rev_aux(structure_item) → structure_item •, EOF / SEMI]
fn yy_state_666(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_non_empty_list_semi_rev_aux_structure_item_, yy_action_705)
}

// [581, option(SEMI) → •, EOF]
// [582, option(SEMI) → • SEMI, EOF]
// [612, non_empty_list_semis_rev(structure_item) → non_empty_list_semi_rev_aux(structure_item) • option(SEMI), EOF]
// [634, non_empty_list_semi_rev_aux(structure_item) → non_empty_list_semi_rev_aux(structure_item) • SEMI structure_item, EOF / SEMI]
fn yy_state_667(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_option_SEMI_ => Shift(yy_state_668)
    T_SEMI => Shift(yy_state_669)
    T_EOF => Reduce(0, NT_option_SEMI_, yy_action_539)
    _ => Error
  }
}

// [612, non_empty_list_semis_rev(structure_item) → non_empty_list_semi_rev_aux(structure_item) option(SEMI) •, EOF]
fn yy_state_668(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_non_empty_list_semis_rev_structure_item_, yy_action_320)
}

// [17, fun_header → • ASYNC FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [18, fun_header → • FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [19, fun_header → • PRIV ASYNC FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [20, fun_header → • PRIV FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [21, fun_header → • PUB pub_attr ASYNC FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [22, fun_header → • PUB pub_attr FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [23, fun_header → • non_empty_list(attribute) ASYNC FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [24, fun_header → • non_empty_list(attribute) FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [25, fun_header → • non_empty_list(attribute) PRIV ASYNC FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [26, fun_header → • non_empty_list(attribute) PRIV FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [27, fun_header → • non_empty_list(attribute) PUB pub_attr ASYNC FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [28, fun_header → • non_empty_list(attribute) PUB pub_attr FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [32, extern_fun_header → • EXTERN STRING FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL]
// [33, extern_fun_header → • PRIV EXTERN STRING FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL]
// [34, extern_fun_header → • PUB pub_attr EXTERN STRING FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL]
// [35, extern_fun_header → • non_empty_list(attribute) EXTERN STRING FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL]
// [36, extern_fun_header → • non_empty_list(attribute) PRIV EXTERN STRING FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL]
// [37, extern_fun_header → • non_empty_list(attribute) PUB pub_attr EXTERN STRING FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL]
// [46, val_header → • LET LIDENT, EQUAL]
// [47, val_header → • LET LIDENT COLON type_, EQUAL]
// [48, val_header → • PRIV LET LIDENT, EQUAL]
// [49, val_header → • PRIV LET LIDENT COLON type_, EQUAL]
// [50, val_header → • PUB pub_attr LET LIDENT, EQUAL]
// [51, val_header → • PUB pub_attr LET LIDENT COLON type_, EQUAL]
// [52, val_header → • non_empty_list(attribute) LET LIDENT, EQUAL]
// [53, val_header → • non_empty_list(attribute) LET LIDENT COLON type_, EQUAL]
// [54, val_header → • non_empty_list(attribute) PRIV LET LIDENT, EQUAL]
// [55, val_header → • non_empty_list(attribute) PRIV LET LIDENT COLON type_, EQUAL]
// [56, val_header → • non_empty_list(attribute) PUB pub_attr LET LIDENT, EQUAL]
// [57, val_header → • non_empty_list(attribute) PUB pub_attr LET LIDENT COLON type_, EQUAL]
// [58, val_header → • CONST UIDENT, EQUAL]
// [59, val_header → • CONST UIDENT COLON type_, EQUAL]
// [60, val_header → • PRIV CONST UIDENT, EQUAL]
// [61, val_header → • PRIV CONST UIDENT COLON type_, EQUAL]
// [62, val_header → • PUB pub_attr CONST UIDENT, EQUAL]
// [63, val_header → • PUB pub_attr CONST UIDENT COLON type_, EQUAL]
// [64, val_header → • non_empty_list(attribute) CONST UIDENT, EQUAL]
// [65, val_header → • non_empty_list(attribute) CONST UIDENT COLON type_, EQUAL]
// [66, val_header → • non_empty_list(attribute) PRIV CONST UIDENT, EQUAL]
// [67, val_header → • non_empty_list(attribute) PRIV CONST UIDENT COLON type_, EQUAL]
// [68, val_header → • non_empty_list(attribute) PUB pub_attr CONST UIDENT, EQUAL]
// [69, val_header → • non_empty_list(attribute) PUB pub_attr CONST UIDENT COLON type_, EQUAL]
// [71, structure_item → • type_header deriving_directive_list, EOF / SEMI]
// [72, structure_item → • EXTERN TYPE luident optional_type_parameters_no_constraints deriving_directive_list, EOF / SEMI]
// [73, structure_item → • PRIV EXTERN TYPE luident optional_type_parameters_no_constraints deriving_directive_list, EOF / SEMI]
// [74, structure_item → • PUB pub_attr EXTERN TYPE luident optional_type_parameters_no_constraints deriving_directive_list, EOF / SEMI]
// [75, structure_item → • non_empty_list(attribute) EXTERN TYPE luident optional_type_parameters_no_constraints deriving_directive_list, EOF / SEMI]
// [76, structure_item → • non_empty_list(attribute) PRIV EXTERN TYPE luident optional_type_parameters_no_constraints deriving_directive_list, EOF / SEMI]
// [77, structure_item → • non_empty_list(attribute) PUB pub_attr EXTERN TYPE luident optional_type_parameters_no_constraints deriving_directive_list, EOF / SEMI]
// [78, structure_item → • type_header type_ deriving_directive_list, EOF / SEMI]
// [79, structure_item → • type_header_bang option(type_) deriving_directive_list, EOF / SEMI]
// [80, structure_item → • type_header_bang LBRACE list_semis(enum_constructor) RBRACE deriving_directive_list, EOF / SEMI]
// [81, structure_item → • type_alias_header EQUAL type_ deriving_directive_list, EOF / SEMI]
// [82, structure_item → • struct_header LBRACE list_semis(record_decl_field) RBRACE deriving_directive_list, EOF / SEMI]
// [83, structure_item → • enum_header LBRACE list_semis(enum_constructor) RBRACE deriving_directive_list, EOF / SEMI]
// [84, structure_item → • val_header EQUAL expr, EOF / SEMI]
// [85, structure_item → • fun_header EQUAL STRING STRING, EOF / SEMI]
// [86, structure_item → • fun_header EQUAL STRING, EOF / SEMI]
// [87, structure_item → • fun_header EQUAL non_empty_list(MULTILINE_STRING), EOF / SEMI]
// [88, structure_item → • extern_fun_header EQUAL STRING, EOF / SEMI]
// [89, structure_item → • extern_fun_header EQUAL non_empty_list(MULTILINE_STRING), EOF / SEMI]
// [90, structure_item → • fun_header block_expr_with_local_types, EOF / SEMI]
// [91, structure_item → • FNALIAS func_alias_targets, EOF / SEMI]
// [92, structure_item → • PRIV FNALIAS func_alias_targets, EOF / SEMI]
// [93, structure_item → • PUB pub_attr FNALIAS func_alias_targets, EOF / SEMI]
// [94, structure_item → • non_empty_list(attribute) FNALIAS func_alias_targets, EOF / SEMI]
// [95, structure_item → • non_empty_list(attribute) PRIV FNALIAS func_alias_targets, EOF / SEMI]
// [96, structure_item → • non_empty_list(attribute) PUB pub_attr FNALIAS func_alias_targets, EOF / SEMI]
// [97, structure_item → • TRAIT luident option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) LBRACE list_semis(trait_method_decl) RBRACE, EOF / SEMI]
// [98, structure_item → • PRIV TRAIT luident option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) LBRACE list_semis(trait_method_decl) RBRACE, EOF / SEMI]
// [99, structure_item → • PUB pub_attr TRAIT luident option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) LBRACE list_semis(trait_method_decl) RBRACE, EOF / SEMI]
// [100, structure_item → • non_empty_list(attribute) TRAIT luident option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) LBRACE list_semis(trait_method_decl) RBRACE, EOF / SEMI]
// [101, structure_item → • non_empty_list(attribute) PRIV TRAIT luident option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) LBRACE list_semis(trait_method_decl) RBRACE, EOF / SEMI]
// [102, structure_item → • non_empty_list(attribute) PUB pub_attr TRAIT luident option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) LBRACE list_semis(trait_method_decl) RBRACE, EOF / SEMI]
// [103, structure_item → • TRAITALIAS luident EQUAL type_name, EOF / SEMI]
// [104, structure_item → • PRIV TRAITALIAS luident EQUAL type_name, EOF / SEMI]
// [105, structure_item → • PUB pub_attr TRAITALIAS luident EQUAL type_name, EOF / SEMI]
// [106, structure_item → • non_empty_list(attribute) TRAITALIAS luident EQUAL type_name, EOF / SEMI]
// [107, structure_item → • non_empty_list(attribute) PRIV TRAITALIAS luident EQUAL type_name, EOF / SEMI]
// [108, structure_item → • non_empty_list(attribute) PUB pub_attr TRAITALIAS luident EQUAL type_name, EOF / SEMI]
// [109, structure_item → • TYPEALIAS PACKAGE_NAME batch_type_alias_targets, EOF / SEMI]
// [110, structure_item → • PRIV TYPEALIAS PACKAGE_NAME batch_type_alias_targets, EOF / SEMI]
// [111, structure_item → • PUB pub_attr TYPEALIAS PACKAGE_NAME batch_type_alias_targets, EOF / SEMI]
// [112, structure_item → • non_empty_list(attribute) TYPEALIAS PACKAGE_NAME batch_type_alias_targets, EOF / SEMI]
// [113, structure_item → • non_empty_list(attribute) PRIV TYPEALIAS PACKAGE_NAME batch_type_alias_targets, EOF / SEMI]
// [114, structure_item → • non_empty_list(attribute) PUB pub_attr TYPEALIAS PACKAGE_NAME batch_type_alias_targets, EOF / SEMI]
// [115, structure_item → • TRAITALIAS PACKAGE_NAME batch_trait_alias_targets, EOF / SEMI]
// [116, structure_item → • PRIV TRAITALIAS PACKAGE_NAME batch_trait_alias_targets, EOF / SEMI]
// [117, structure_item → • PUB pub_attr TRAITALIAS PACKAGE_NAME batch_trait_alias_targets, EOF / SEMI]
// [118, structure_item → • non_empty_list(attribute) TRAITALIAS PACKAGE_NAME batch_trait_alias_targets, EOF / SEMI]
// [119, structure_item → • non_empty_list(attribute) PRIV TRAITALIAS PACKAGE_NAME batch_trait_alias_targets, EOF / SEMI]
// [120, structure_item → • non_empty_list(attribute) PUB pub_attr TRAITALIAS PACKAGE_NAME batch_trait_alias_targets, EOF / SEMI]
// [121, structure_item → • TEST option(loced_string) option(parameters) block_expr_with_local_types, EOF / SEMI]
// [122, structure_item → • non_empty_list(attribute) TEST option(loced_string) option(parameters) block_expr_with_local_types, EOF / SEMI]
// [123, structure_item → • IMPL optional_type_parameters type_name FOR type_ WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [124, structure_item → • PRIV IMPL optional_type_parameters type_name FOR type_ WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [125, structure_item → • PUB pub_attr IMPL optional_type_parameters type_name FOR type_ WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [126, structure_item → • non_empty_list(attribute) IMPL optional_type_parameters type_name FOR type_ WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [127, structure_item → • non_empty_list(attribute) PRIV IMPL optional_type_parameters type_name FOR type_ WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [128, structure_item → • non_empty_list(attribute) PUB pub_attr IMPL optional_type_parameters type_name FOR type_ WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [129, structure_item → • IMPL optional_type_parameters type_name WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [130, structure_item → • PRIV IMPL optional_type_parameters type_name WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [131, structure_item → • PUB pub_attr IMPL optional_type_parameters type_name WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [132, structure_item → • non_empty_list(attribute) IMPL optional_type_parameters type_name WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [133, structure_item → • non_empty_list(attribute) PRIV IMPL optional_type_parameters type_name WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [134, structure_item → • non_empty_list(attribute) PUB pub_attr IMPL optional_type_parameters type_name WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [138, type_header → • TYPE luident optional_type_parameters_no_constraints, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / AMPER / PACKAGE_NAME]
// [139, type_header → • PRIV TYPE luident optional_type_parameters_no_constraints, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / AMPER / PACKAGE_NAME]
// [140, type_header → • PUB pub_attr TYPE luident optional_type_parameters_no_constraints, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / AMPER / PACKAGE_NAME]
// [141, type_header → • non_empty_list(attribute) TYPE luident optional_type_parameters_no_constraints, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / AMPER / PACKAGE_NAME]
// [142, type_header → • non_empty_list(attribute) PRIV TYPE luident optional_type_parameters_no_constraints, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / AMPER / PACKAGE_NAME]
// [143, type_header → • non_empty_list(attribute) PUB pub_attr TYPE luident optional_type_parameters_no_constraints, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / AMPER / PACKAGE_NAME]
// [144, type_header_bang → • TYPE EXCLAMATION luident, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / LBRACE / AMPER / PACKAGE_NAME]
// [145, type_header_bang → • PRIV TYPE EXCLAMATION luident, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / LBRACE / AMPER / PACKAGE_NAME]
// [146, type_header_bang → • PUB pub_attr TYPE EXCLAMATION luident, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / LBRACE / AMPER / PACKAGE_NAME]
// [147, type_header_bang → • non_empty_list(attribute) TYPE EXCLAMATION luident, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / LBRACE / AMPER / PACKAGE_NAME]
// [148, type_header_bang → • non_empty_list(attribute) PRIV TYPE EXCLAMATION luident, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / LBRACE / AMPER / PACKAGE_NAME]
// [149, type_header_bang → • non_empty_list(attribute) PUB pub_attr TYPE EXCLAMATION luident, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / LBRACE / AMPER / PACKAGE_NAME]
// [150, type_alias_header → • TYPEALIAS luident optional_type_parameters_no_constraints, EQUAL]
// [151, type_alias_header → • PRIV TYPEALIAS luident optional_type_parameters_no_constraints, EQUAL]
// [152, type_alias_header → • PUB pub_attr TYPEALIAS luident optional_type_parameters_no_constraints, EQUAL]
// [153, type_alias_header → • non_empty_list(attribute) TYPEALIAS luident optional_type_parameters_no_constraints, EQUAL]
// [154, type_alias_header → • non_empty_list(attribute) PRIV TYPEALIAS luident optional_type_parameters_no_constraints, EQUAL]
// [155, type_alias_header → • non_empty_list(attribute) PUB pub_attr TYPEALIAS luident optional_type_parameters_no_constraints, EQUAL]
// [156, struct_header → • STRUCT luident optional_type_parameters_no_constraints, LBRACE]
// [157, struct_header → • PRIV STRUCT luident optional_type_parameters_no_constraints, LBRACE]
// [158, struct_header → • PUB pub_attr STRUCT luident optional_type_parameters_no_constraints, LBRACE]
// [159, struct_header → • non_empty_list(attribute) STRUCT luident optional_type_parameters_no_constraints, LBRACE]
// [160, struct_header → • non_empty_list(attribute) PRIV STRUCT luident optional_type_parameters_no_constraints, LBRACE]
// [161, struct_header → • non_empty_list(attribute) PUB pub_attr STRUCT luident optional_type_parameters_no_constraints, LBRACE]
// [162, enum_header → • ENUM luident optional_type_parameters_no_constraints, LBRACE]
// [163, enum_header → • PRIV ENUM luident optional_type_parameters_no_constraints, LBRACE]
// [164, enum_header → • PUB pub_attr ENUM luident optional_type_parameters_no_constraints, LBRACE]
// [165, enum_header → • non_empty_list(attribute) ENUM luident optional_type_parameters_no_constraints, LBRACE]
// [166, enum_header → • non_empty_list(attribute) PRIV ENUM luident optional_type_parameters_no_constraints, LBRACE]
// [167, enum_header → • non_empty_list(attribute) PUB pub_attr ENUM luident optional_type_parameters_no_constraints, LBRACE]
// [481, non_empty_list(attribute) → • non_empty_list_rev(attribute), PUB / PRIV / EXTERN / STRUCT / ENUM / TRAIT / IMPL / ASYNC / TYPEALIAS / TRAITALIAS / FNALIAS / FN / LET / CONST / TYPE / TEST]
// [566, non_empty_list_rev(attribute) → • ATTRIBUTE, ATTRIBUTE / PUB / PRIV / EXTERN / STRUCT / ENUM / TRAIT / IMPL / ASYNC / TYPEALIAS / TRAITALIAS / FNALIAS / FN / LET / CONST / TYPE / TEST]
// [567, non_empty_list_rev(attribute) → • non_empty_list_rev(attribute) ATTRIBUTE, ATTRIBUTE / PUB / PRIV / EXTERN / STRUCT / ENUM / TRAIT / IMPL / ASYNC / TYPEALIAS / TRAITALIAS / FNALIAS / FN / LET / CONST / TYPE / TEST]
// [582, option(SEMI) → SEMI •, EOF]
// [634, non_empty_list_semi_rev_aux(structure_item) → non_empty_list_semi_rev_aux(structure_item) SEMI • structure_item, EOF / SEMI]
fn yy_state_669(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_structure_item => Shift(yy_state_670)
    T_ATTRIBUTE => Shift(yy_state_671)
    NT_non_empty_list_rev_attribute_ => Shift(yy_state_672)
    T_ENUM => Shift(yy_state_674)
    T_STRUCT => Shift(yy_state_688)
    T_TYPE => Shift(yy_state_691)
    T_IMPL => Shift(yy_state_696)
    T_TEST => Shift(yy_state_825)
    T_TYPEALIAS => Shift(yy_state_831)
    T_TRAITALIAS => Shift(yy_state_850)
    T_TRAIT => Shift(yy_state_867)
    T_FNALIAS => Shift(yy_state_906)
    NT_extern_fun_header => Shift(yy_state_943)
    NT_fun_header => Shift(yy_state_950)
    NT_val_header => Shift(yy_state_956)
    NT_enum_header => Shift(yy_state_959)
    NT_struct_header => Shift(yy_state_964)
    NT_type_alias_header => Shift(yy_state_969)
    NT_type_header_bang => Shift(yy_state_973)
    NT_type_header => Shift(yy_state_981)
    T_CONST => Shift(yy_state_985)
    T_LET => Shift(yy_state_989)
    T_EXTERN => Shift(yy_state_993)
    NT_non_empty_list_attribute_ => Shift(yy_state_1009)
    T_PUB => Shift(yy_state_1257)
    T_PRIV => Shift(yy_state_1339)
    T_FN => Shift(yy_state_1420)
    T_ASYNC => Shift(yy_state_1426)
    T_EOF => Reduce(1, NT_option_SEMI_, yy_action_425)
    _ => Error
  }
}

// [634, non_empty_list_semi_rev_aux(structure_item) → non_empty_list_semi_rev_aux(structure_item) SEMI structure_item •, EOF / SEMI]
fn yy_state_670(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_non_empty_list_semi_rev_aux_structure_item_, yy_action_445)
}

// [566, non_empty_list_rev(attribute) → ATTRIBUTE •, ATTRIBUTE / PUB / PRIV / EXTERN / STRUCT / ENUM / TRAIT / IMPL / ASYNC / TYPEALIAS / TRAITALIAS / FNALIAS / FN / LET / CONST / TYPE / TEST]
fn yy_state_671(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_non_empty_list_rev_attribute_, yy_action_111)
}

// [481, non_empty_list(attribute) → non_empty_list_rev(attribute) •, PUB / PRIV / EXTERN / STRUCT / ENUM / TRAIT / IMPL / ASYNC / TYPEALIAS / TRAITALIAS / FNALIAS / FN / LET / CONST / TYPE / TEST]
// [567, non_empty_list_rev(attribute) → non_empty_list_rev(attribute) • ATTRIBUTE, ATTRIBUTE / PUB / PRIV / EXTERN / STRUCT / ENUM / TRAIT / IMPL / ASYNC / TYPEALIAS / TRAITALIAS / FNALIAS / FN / LET / CONST / TYPE / TEST]
fn yy_state_672(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ATTRIBUTE => Shift(yy_state_673)
    T_PUB | T_PRIV | T_EXTERN | T_STRUCT | T_ENUM | T_TRAIT | T_IMPL | T_ASYNC | T_TYPEALIAS | T_TRAITALIAS | T_FNALIAS | T_FN | T_LET | T_CONST | T_TYPE | T_TEST => Reduce(1, NT_non_empty_list_attribute_, yy_action_276)
    _ => Error
  }
}

// [567, non_empty_list_rev(attribute) → non_empty_list_rev(attribute) ATTRIBUTE •, ATTRIBUTE / PUB / PRIV / EXTERN / STRUCT / ENUM / TRAIT / IMPL / ASYNC / TYPEALIAS / TRAITALIAS / FNALIAS / FN / LET / CONST / TYPE / TEST]
fn yy_state_673(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_non_empty_list_rev_attribute_, yy_action_54)
}

// [162, enum_header → ENUM • luident optional_type_parameters_no_constraints, LBRACE]
// [192, luident → • LIDENT, LBRACKET / LBRACE]
// [193, luident → • UIDENT, LBRACKET / LBRACE]
fn yy_state_674(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    NT_luident => Shift(yy_state_675)
    _ => Error
  }
}

// [13, optional_type_parameters_no_constraints → • option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)), LBRACE]
// [162, enum_header → ENUM luident • optional_type_parameters_no_constraints, LBRACE]
// [453, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → •, LBRACE]
// [454, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → • LBRACKET non_empty_list_commas(id(type_decl_binder)) RBRACKET, LBRACE]
fn yy_state_675(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_676)
    NT_optional_type_parameters_no_constraints => Shift(yy_state_686)
    NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__ => Shift(yy_state_687)
    T_LBRACE => Reduce(0, NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__, yy_action_613)
    _ => Error
  }
}

// [192, luident → • LIDENT, COMMA / RBRACKET]
// [193, luident → • UIDENT, COMMA / RBRACKET]
// [331, type_decl_binder → • luident, COMMA / RBRACKET]
// [332, type_decl_binder → • UNDERSCORE, COMMA / RBRACKET]
// [452, non_empty_list_commas(id(type_decl_binder)) → • non_empty_list_commas_rev(id(type_decl_binder)) option(COMMA), RBRACKET]
// [454, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → LBRACKET • non_empty_list_commas(id(type_decl_binder)) RBRACKET, LIDENT / UIDENT / EOF / DERIVE / ASYNC / EQUAL / LPAREN / RPAREN / COMMA / SEMI / UNDERSCORE / LBRACE / AMPER / PACKAGE_NAME]
// [555, non_empty_list_commas_rev(id(type_decl_binder)) → • type_decl_binder, COMMA / RBRACKET]
// [556, non_empty_list_commas_rev(id(type_decl_binder)) → • non_empty_list_commas_rev(id(type_decl_binder)) COMMA type_decl_binder, COMMA / RBRACKET]
fn yy_state_676(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    NT_type_decl_binder => Shift(yy_state_677)
    NT_non_empty_list_commas_id_type_decl_binder__ => Shift(yy_state_678)
    NT_non_empty_list_commas_rev_id_type_decl_binder__ => Shift(yy_state_680)
    T_UNDERSCORE => Shift(yy_state_683)
    NT_luident => Shift(yy_state_684)
    _ => Error
  }
}

// [555, non_empty_list_commas_rev(id(type_decl_binder)) → type_decl_binder •, COMMA / RBRACKET]
fn yy_state_677(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_non_empty_list_commas_rev_id_type_decl_binder__, yy_action_255)
}

// [454, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → LBRACKET non_empty_list_commas(id(type_decl_binder)) • RBRACKET, LIDENT / UIDENT / EOF / DERIVE / ASYNC / EQUAL / LPAREN / RPAREN / COMMA / SEMI / UNDERSCORE / LBRACE / AMPER / PACKAGE_NAME]
fn yy_state_678(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACKET => Shift(yy_state_679)
    _ => Error
  }
}

// [454, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → LBRACKET non_empty_list_commas(id(type_decl_binder)) RBRACKET •, LIDENT / UIDENT / EOF / DERIVE / ASYNC / EQUAL / LPAREN / RPAREN / COMMA / SEMI / UNDERSCORE / LBRACE / AMPER / PACKAGE_NAME]
fn yy_state_679(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__, yy_action_624)
}

// [452, non_empty_list_commas(id(type_decl_binder)) → non_empty_list_commas_rev(id(type_decl_binder)) • option(COMMA), RBRACKET]
// [533, option(COMMA) → •, RBRACKET]
// [534, option(COMMA) → • COMMA, RBRACKET]
// [556, non_empty_list_commas_rev(id(type_decl_binder)) → non_empty_list_commas_rev(id(type_decl_binder)) • COMMA type_decl_binder, COMMA / RBRACKET]
fn yy_state_680(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COMMA => Shift(yy_state_681)
    NT_option_COMMA_ => Shift(yy_state_685)
    T_RBRACKET => Reduce(0, NT_option_COMMA_, yy_action_181)
    _ => Error
  }
}

// [192, luident → • LIDENT, COMMA / RBRACKET]
// [193, luident → • UIDENT, COMMA / RBRACKET]
// [331, type_decl_binder → • luident, COMMA / RBRACKET]
// [332, type_decl_binder → • UNDERSCORE, COMMA / RBRACKET]
// [534, option(COMMA) → COMMA •, RBRACKET]
// [556, non_empty_list_commas_rev(id(type_decl_binder)) → non_empty_list_commas_rev(id(type_decl_binder)) COMMA • type_decl_binder, COMMA / RBRACKET]
fn yy_state_681(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    NT_type_decl_binder => Shift(yy_state_682)
    T_UNDERSCORE => Shift(yy_state_683)
    NT_luident => Shift(yy_state_684)
    T_RBRACKET => Reduce(1, NT_option_COMMA_, yy_action_56)
    _ => Error
  }
}

// [556, non_empty_list_commas_rev(id(type_decl_binder)) → non_empty_list_commas_rev(id(type_decl_binder)) COMMA type_decl_binder •, COMMA / RBRACKET]
fn yy_state_682(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_non_empty_list_commas_rev_id_type_decl_binder__, yy_action_587)
}

// [332, type_decl_binder → UNDERSCORE •, COMMA / RBRACKET]
fn yy_state_683(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_type_decl_binder, yy_action_691)
}

// [331, type_decl_binder → luident •, COMMA / RBRACKET]
fn yy_state_684(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_type_decl_binder, yy_action_374)
}

// [452, non_empty_list_commas(id(type_decl_binder)) → non_empty_list_commas_rev(id(type_decl_binder)) option(COMMA) •, RBRACKET]
fn yy_state_685(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_non_empty_list_commas_id_type_decl_binder__, yy_action_164)
}

// [162, enum_header → ENUM luident optional_type_parameters_no_constraints •, LBRACE]
fn yy_state_686(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_enum_header, yy_action_603)
}

// [13, optional_type_parameters_no_constraints → option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) •, LIDENT / UIDENT / EOF / DERIVE / ASYNC / EQUAL / LPAREN / RPAREN / COMMA / SEMI / UNDERSCORE / LBRACE / AMPER / PACKAGE_NAME]
fn yy_state_687(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_optional_type_parameters_no_constraints, yy_action_17)
}

// [156, struct_header → STRUCT • luident optional_type_parameters_no_constraints, LBRACE]
// [192, luident → • LIDENT, LBRACKET / LBRACE]
// [193, luident → • UIDENT, LBRACKET / LBRACE]
fn yy_state_688(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    NT_luident => Shift(yy_state_689)
    _ => Error
  }
}

// [13, optional_type_parameters_no_constraints → • option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)), LBRACE]
// [156, struct_header → STRUCT luident • optional_type_parameters_no_constraints, LBRACE]
// [453, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → •, LBRACE]
// [454, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → • LBRACKET non_empty_list_commas(id(type_decl_binder)) RBRACKET, LBRACE]
fn yy_state_689(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_676)
    NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__ => Shift(yy_state_687)
    NT_optional_type_parameters_no_constraints => Shift(yy_state_690)
    T_LBRACE => Reduce(0, NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__, yy_action_613)
    _ => Error
  }
}

// [156, struct_header → STRUCT luident optional_type_parameters_no_constraints •, LBRACE]
fn yy_state_690(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_struct_header, yy_action_329)
}

// [138, type_header → TYPE • luident optional_type_parameters_no_constraints, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / AMPER / PACKAGE_NAME]
// [144, type_header_bang → TYPE • EXCLAMATION luident, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / LBRACE / AMPER / PACKAGE_NAME]
// [192, luident → • LIDENT, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / LBRACKET / UNDERSCORE / AMPER / PACKAGE_NAME]
// [193, luident → • UIDENT, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / LBRACKET / UNDERSCORE / AMPER / PACKAGE_NAME]
fn yy_state_691(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    T_EXCLAMATION => Shift(yy_state_692)
    NT_luident => Shift(yy_state_694)
    _ => Error
  }
}

// [144, type_header_bang → TYPE EXCLAMATION • luident, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / LBRACE / AMPER / PACKAGE_NAME]
// [192, luident → • LIDENT, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / LBRACE / AMPER / PACKAGE_NAME]
// [193, luident → • UIDENT, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / LBRACE / AMPER / PACKAGE_NAME]
fn yy_state_692(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    NT_luident => Shift(yy_state_693)
    _ => Error
  }
}

// [144, type_header_bang → TYPE EXCLAMATION luident •, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / LBRACE / AMPER / PACKAGE_NAME]
fn yy_state_693(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_type_header_bang, yy_action_657)
}

// [13, optional_type_parameters_no_constraints → • option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)), LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / AMPER / PACKAGE_NAME]
// [138, type_header → TYPE luident • optional_type_parameters_no_constraints, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / AMPER / PACKAGE_NAME]
// [453, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → •, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / AMPER / PACKAGE_NAME]
// [454, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → • LBRACKET non_empty_list_commas(id(type_decl_binder)) RBRACKET, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / AMPER / PACKAGE_NAME]
fn yy_state_694(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_676)
    NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__ => Shift(yy_state_687)
    NT_optional_type_parameters_no_constraints => Shift(yy_state_695)
    T_LIDENT | T_UIDENT | T_EOF | T_DERIVE | T_ASYNC | T_LPAREN | T_SEMI | T_UNDERSCORE | T_AMPER | T_PACKAGE_NAME => Reduce(0, NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__, yy_action_613)
    _ => Error
  }
}

// [138, type_header → TYPE luident optional_type_parameters_no_constraints •, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / AMPER / PACKAGE_NAME]
fn yy_state_695(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_type_header, yy_action_570)
}

// [11, type_parameters → • LBRACKET non_empty_list_commas(id(tvar_binder)) RBRACKET, LIDENT / UIDENT / AMPER / PACKAGE_NAME]
// [12, optional_type_parameters → • option(type_parameters), LIDENT / UIDENT / AMPER / PACKAGE_NAME]
// [123, structure_item → IMPL • optional_type_parameters type_name FOR type_ WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [129, structure_item → IMPL • optional_type_parameters type_name WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [450, option(type_parameters) → •, LIDENT / UIDENT / AMPER / PACKAGE_NAME]
// [451, option(type_parameters) → • type_parameters, LIDENT / UIDENT / AMPER / PACKAGE_NAME]
fn yy_state_696(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_type_parameters => Shift(yy_state_697)
    NT_optional_type_parameters => Shift(yy_state_698)
    NT_option_type_parameters_ => Shift(yy_state_807)
    T_LBRACKET => Shift(yy_state_808)
    T_LIDENT | T_UIDENT | T_AMPER | T_PACKAGE_NAME => Reduce(0, NT_option_type_parameters_, yy_action_515)
    _ => Error
  }
}

// [451, option(type_parameters) → type_parameters •, LIDENT / UIDENT / EQUAL / LPAREN / LBRACE / AMPER / PACKAGE_NAME / THIN_ARROW]
fn yy_state_697(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_option_type_parameters_, yy_action_307)
}

// [123, structure_item → IMPL optional_type_parameters • type_name FOR type_ WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [129, structure_item → IMPL optional_type_parameters • type_name WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [192, luident → • LIDENT, WITH / FOR]
// [193, luident → • UIDENT, WITH / FOR]
// [198, qual_ident_ty → • luident, WITH / FOR]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, WITH / FOR]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, WITH / FOR]
// [335, type_name → • qual_ident_ty, WITH / FOR]
// [336, type_name → • AMPER qual_ident_ty, WITH / FOR]
fn yy_state_698(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    NT_qual_ident_ty => Shift(yy_state_26)
    NT_type_name => Shift(yy_state_699)
    _ => Error
  }
}

// [123, structure_item → IMPL optional_type_parameters type_name • FOR type_ WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [129, structure_item → IMPL optional_type_parameters type_name • WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
fn yy_state_699(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_WITH => Shift(yy_state_700)
    T_FOR => Shift(yy_state_799)
    _ => Error
  }
}

// [129, structure_item → IMPL optional_type_parameters type_name WITH • LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
fn yy_state_700(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_701)
    _ => Error
  }
}

// [129, structure_item → IMPL optional_type_parameters type_name WITH LIDENT • optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [201, optional_bang → • EXCLAMATION, LPAREN]
// [202, optional_bang → •, LPAREN]
fn yy_state_701(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EXCLAMATION => Shift(yy_state_535)
    NT_optional_bang => Shift(yy_state_702)
    T_LPAREN => Reduce(0, NT_optional_bang, yy_action_662)
    _ => Error
  }
}

// [10, parameters → • LPAREN list_commas(parameter) RPAREN, EQUAL / LBRACE / THIN_ARROW]
// [129, structure_item → IMPL optional_type_parameters type_name WITH LIDENT optional_bang • parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
fn yy_state_702(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_298)
    NT_parameters => Shift(yy_state_703)
    _ => Error
  }
}

// [129, structure_item → IMPL optional_type_parameters type_name WITH LIDENT optional_bang parameters • option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [460, option(preceded(THIN_ARROW,return_type)) → •, EQUAL / LBRACE]
// [461, option(preceded(THIN_ARROW,return_type)) → • THIN_ARROW return_type, EQUAL / LBRACE]
fn yy_state_703(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_THIN_ARROW => Shift(yy_state_246)
    NT_option_preceded_THIN_ARROW_return_type__ => Shift(yy_state_704)
    T_EQUAL | T_LBRACE => Reduce(0, NT_option_preceded_THIN_ARROW_return_type__, yy_action_161)
    _ => Error
  }
}

// [42, block_expr_with_local_types → • LBRACE local_types_and_stmts RBRACE, EOF / SEMI]
// [43, impl_body → • block_expr_with_local_types, EOF / SEMI]
// [44, impl_body → • EQUAL STRING, EOF / SEMI]
// [129, structure_item → IMPL optional_type_parameters type_name WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) • impl_body, EOF / SEMI]
fn yy_state_704(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_impl_body => Shift(yy_state_705)
    T_EQUAL => Shift(yy_state_706)
    NT_block_expr_with_local_types => Shift(yy_state_708)
    T_LBRACE => Shift(yy_state_709)
    _ => Error
  }
}

// [129, structure_item → IMPL optional_type_parameters type_name WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body •, EOF / SEMI]
fn yy_state_705(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(9, NT_structure_item, yy_action_31)
}

// [44, impl_body → EQUAL • STRING, EOF / SEMI]
fn yy_state_706(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_STRING => Shift(yy_state_707)
    _ => Error
  }
}

// [44, impl_body → EQUAL STRING •, EOF / SEMI]
fn yy_state_707(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_impl_body, yy_action_88)
}

// [43, impl_body → block_expr_with_local_types •, EOF / SEMI]
fn yy_state_708(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_impl_body, yy_action_576)
}

// [29, local_type_decl → • STRUCT luident LBRACE list_semis(record_decl_field) RBRACE deriving_directive_list, SEMI / RBRACE]
// [30, local_type_decl → • ENUM luident LBRACE list_semis(enum_constructor) RBRACE deriving_directive_list, SEMI / RBRACE]
// [31, local_type_decl → • TYPE luident type_ deriving_directive_list, SEMI / RBRACE]
// [39, local_types_and_stmts → • local_type_decl, RBRACE]
// [40, local_types_and_stmts → • list_semis_rev(statement), RBRACE]
// [41, local_types_and_stmts → • local_type_decl SEMI local_types_and_stmts, RBRACE]
// [42, block_expr_with_local_types → LBRACE • local_types_and_stmts RBRACE, EOF / SEMI]
// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [194, qual_ident → • LIDENT, AUGMENTED_ASSIGNMENT / EQUAL]
// [195, qual_ident → • PACKAGE_NAME DOT_LIDENT, AUGMENTED_ASSIGNMENT / EQUAL]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [203, fn_header → • FN LIDENT optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [205, statement → • LET pattern EQUAL expr, SEMI / RBRACE]
// [206, statement → • LET pattern COLON type_ EQUAL expr, SEMI / RBRACE]
// [207, statement → • LET MUTABLE LIDENT EQUAL expr, SEMI / RBRACE]
// [208, statement → • LET MUTABLE LIDENT COLON type_ EQUAL expr, SEMI / RBRACE]
// [209, statement → • ASYNC FN LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, SEMI / RBRACE]
// [210, statement → • FN LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, SEMI / RBRACE]
// [211, statement → • ASYNC fn_header list_semis(multi_pattern_case) RBRACE, SEMI / RBRACE]
// [212, statement → • fn_header list_semis(multi_pattern_case) RBRACE, SEMI / RBRACE]
// [213, statement → • guard_statement, SEMI / RBRACE]
// [214, statement → • expr_statement, SEMI / RBRACE]
// [215, guard_statement → • GUARD infix_expr, SEMI / RBRACE]
// [216, guard_statement → • GUARD infix_expr ELSE block_expr, SEMI / RBRACE]
// [217, guard_statement → • GUARD LET pattern EQUAL infix_expr, SEMI / RBRACE]
// [218, guard_statement → • GUARD LET pattern EQUAL infix_expr ELSE LBRACE single_pattern_cases RBRACE, SEMI / RBRACE]
// [219, expr_statement → • BREAK POST_LABEL option(expr), SEMI / RBRACE]
// [220, expr_statement → • BREAK option(expr), SEMI / RBRACE]
// [221, expr_statement → • CONTINUE POST_LABEL list_commas_no_trailing(expr), SEMI / RBRACE]
// [222, expr_statement → • CONTINUE list_commas_no_trailing(expr), SEMI / RBRACE]
// [223, expr_statement → • RETURN option(expr), SEMI / RBRACE]
// [224, expr_statement → • RAISE expr, SEMI / RBRACE]
// [225, expr_statement → • ELLIPSIS, SEMI / RBRACE]
// [226, expr_statement → • left_value AUGMENTED_ASSIGNMENT expr, SEMI / RBRACE]
// [227, expr_statement → • left_value EQUAL expr, SEMI / RBRACE]
// [228, expr_statement → • expr, SEMI / RBRACE]
// [229, loop_label_colon → • POST_LABEL COLON, WHILE / LOOP / FOR]
// [230, loop_label_colon → •, WHILE / LOOP / FOR]
// [231, while_expr → • loop_label_colon WHILE infix_expr block_expr optional_else, SEMI / RBRACE]
// [238, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE, SEMI / RBRACE]
// [239, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE ELSE LBRACE single_pattern_cases RBRACE, SEMI / RBRACE]
// [240, if_expr → • IF infix_expr block_expr ELSE block_expr, SEMI / RBRACE]
// [241, if_expr → • IF infix_expr block_expr ELSE if_expr, SEMI / RBRACE]
// [242, if_expr → • IF infix_expr block_expr, SEMI / RBRACE]
// [243, match_expr → • MATCH infix_expr LBRACE non_empty_list_semis(single_pattern_case) RBRACE, SEMI / RBRACE]
// [244, match_expr → • MATCH infix_expr LBRACE RBRACE, SEMI / RBRACE]
// [245, loop_expr → • loop_label_colon LOOP non_empty_list_commas_no_trailing(expr) LBRACE list_semis(multi_pattern_case) RBRACE, SEMI / RBRACE]
// [249, for_expr → • loop_label_colon FOR for_binders SEMI option(infix_expr) SEMI list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) block_expr optional_else, SEMI / RBRACE]
// [250, for_expr → • loop_label_colon FOR for_binders block_expr optional_else, SEMI / RBRACE]
// [251, foreach_expr → • loop_label_colon FOR non_empty_list_commas(foreach_binder) IN expr block_expr optional_else, SEMI / RBRACE]
// [254, expr → • loop_expr, SEMI / RBRACE]
// [255, expr → • for_expr, SEMI / RBRACE]
// [256, expr → • foreach_expr, SEMI / RBRACE]
// [257, expr → • while_expr, SEMI / RBRACE]
// [258, expr → • try_expr, SEMI / RBRACE]
// [259, expr → • if_expr, SEMI / RBRACE]
// [260, expr → • match_expr, SEMI / RBRACE]
// [261, expr → • pipe_expr, SEMI / RBRACE]
// [262, pipe_expr → • pipe_expr PIPE infix_expr, SEMI / RBRACE / PIPE]
// [263, pipe_expr → • infix_expr, SEMI / RBRACE / PIPE]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [285, left_value → • qual_ident, AUGMENTED_ASSIGNMENT / EQUAL]
// [286, left_value → • simple_expr DOT_LIDENT, AUGMENTED_ASSIGNMENT / EQUAL]
// [287, left_value → • simple_expr DOT_INT, AUGMENTED_ASSIGNMENT / EQUAL]
// [288, left_value → • simple_expr LBRACKET expr RBRACKET, AUGMENTED_ASSIGNMENT / EQUAL]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [466, list_semis_rev(statement) → •, RBRACE]
// [467, list_semis_rev(statement) → • non_empty_list_semis_rev(statement), RBRACE]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [561, non_empty_list_semis_rev(statement) → • non_empty_list_semi_rev_aux(statement) option(SEMI), RBRACE]
// [579, non_empty_list_semi_rev_aux(statement) → • statement, SEMI / RBRACE]
// [580, non_empty_list_semi_rev_aux(statement) → • non_empty_list_semi_rev_aux(statement) SEMI statement, SEMI / RBRACE]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_709(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    NT_statement => Shift(yy_state_251)
    NT_non_empty_list_semi_rev_aux_statement_ => Shift(yy_state_252)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    NT_prefix_expr => Shift(yy_state_306)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_323)
    NT_pipe_expr => Shift(yy_state_346)
    NT_match_expr => Shift(yy_state_349)
    NT_if_expr => Shift(yy_state_350)
    NT_try_expr => Shift(yy_state_351)
    NT_while_expr => Shift(yy_state_352)
    NT_foreach_expr => Shift(yy_state_353)
    NT_for_expr => Shift(yy_state_354)
    NT_loop_expr => Shift(yy_state_355)
    T_MATCH => Shift(yy_state_356)
    NT_qual_ident => Shift(yy_state_367)
    NT_simple_expr => Shift(yy_state_368)
    T_IF => Shift(yy_state_373)
    T_TRY => Shift(yy_state_379)
    NT_loop_label_colon => Shift(yy_state_396)
    T_POST_LABEL => Shift(yy_state_404)
    NT_expr => Shift(yy_state_490)
    NT_left_value => Shift(yy_state_491)
    T_ELLIPSIS => Shift(yy_state_496)
    T_RAISE => Shift(yy_state_497)
    T_RETURN => Shift(yy_state_499)
    T_CONTINUE => Shift(yy_state_501)
    T_BREAK => Shift(yy_state_506)
    T_PACKAGE_NAME => Shift(yy_state_510)
    T_LIDENT => Shift(yy_state_512)
    T_GUARD => Shift(yy_state_584)
    NT_expr_statement => Shift(yy_state_596)
    NT_guard_statement => Shift(yy_state_597)
    NT_fn_header => Shift(yy_state_598)
    T_ASYNC => Shift(yy_state_601)
    T_LET => Shift(yy_state_612)
    T_FN => Shift(yy_state_628)
    NT_non_empty_list_semis_rev_statement_ => Shift(yy_state_643)
    NT_local_types_and_stmts => Shift(yy_state_710)
    NT_list_semis_rev_statement_ => Shift(yy_state_712)
    NT_local_type_decl => Shift(yy_state_713)
    T_TYPE => Shift(yy_state_716)
    T_ENUM => Shift(yy_state_734)
    T_STRUCT => Shift(yy_state_766)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_481)
    T_RBRACE => Reduce(0, NT_list_semis_rev_statement_, yy_action_644)
    _ => Error
  }
}

// [42, block_expr_with_local_types → LBRACE local_types_and_stmts • RBRACE, EOF / SEMI]
fn yy_state_710(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACE => Shift(yy_state_711)
    _ => Error
  }
}

// [42, block_expr_with_local_types → LBRACE local_types_and_stmts RBRACE •, EOF / SEMI]
fn yy_state_711(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_block_expr_with_local_types, yy_action_630)
}

// [40, local_types_and_stmts → list_semis_rev(statement) •, RBRACE]
fn yy_state_712(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_local_types_and_stmts, yy_action_152)
}

// [39, local_types_and_stmts → local_type_decl •, RBRACE]
// [41, local_types_and_stmts → local_type_decl • SEMI local_types_and_stmts, RBRACE]
fn yy_state_713(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_SEMI => Shift(yy_state_714)
    T_RBRACE => Reduce(1, NT_local_types_and_stmts, yy_action_509)
    _ => Error
  }
}

// [29, local_type_decl → • STRUCT luident LBRACE list_semis(record_decl_field) RBRACE deriving_directive_list, SEMI / RBRACE]
// [30, local_type_decl → • ENUM luident LBRACE list_semis(enum_constructor) RBRACE deriving_directive_list, SEMI / RBRACE]
// [31, local_type_decl → • TYPE luident type_ deriving_directive_list, SEMI / RBRACE]
// [39, local_types_and_stmts → • local_type_decl, RBRACE]
// [40, local_types_and_stmts → • list_semis_rev(statement), RBRACE]
// [41, local_types_and_stmts → • local_type_decl SEMI local_types_and_stmts, RBRACE]
// [41, local_types_and_stmts → local_type_decl SEMI • local_types_and_stmts, RBRACE]
// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [194, qual_ident → • LIDENT, AUGMENTED_ASSIGNMENT / EQUAL]
// [195, qual_ident → • PACKAGE_NAME DOT_LIDENT, AUGMENTED_ASSIGNMENT / EQUAL]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [203, fn_header → • FN LIDENT optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [205, statement → • LET pattern EQUAL expr, SEMI / RBRACE]
// [206, statement → • LET pattern COLON type_ EQUAL expr, SEMI / RBRACE]
// [207, statement → • LET MUTABLE LIDENT EQUAL expr, SEMI / RBRACE]
// [208, statement → • LET MUTABLE LIDENT COLON type_ EQUAL expr, SEMI / RBRACE]
// [209, statement → • ASYNC FN LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, SEMI / RBRACE]
// [210, statement → • FN LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, SEMI / RBRACE]
// [211, statement → • ASYNC fn_header list_semis(multi_pattern_case) RBRACE, SEMI / RBRACE]
// [212, statement → • fn_header list_semis(multi_pattern_case) RBRACE, SEMI / RBRACE]
// [213, statement → • guard_statement, SEMI / RBRACE]
// [214, statement → • expr_statement, SEMI / RBRACE]
// [215, guard_statement → • GUARD infix_expr, SEMI / RBRACE]
// [216, guard_statement → • GUARD infix_expr ELSE block_expr, SEMI / RBRACE]
// [217, guard_statement → • GUARD LET pattern EQUAL infix_expr, SEMI / RBRACE]
// [218, guard_statement → • GUARD LET pattern EQUAL infix_expr ELSE LBRACE single_pattern_cases RBRACE, SEMI / RBRACE]
// [219, expr_statement → • BREAK POST_LABEL option(expr), SEMI / RBRACE]
// [220, expr_statement → • BREAK option(expr), SEMI / RBRACE]
// [221, expr_statement → • CONTINUE POST_LABEL list_commas_no_trailing(expr), SEMI / RBRACE]
// [222, expr_statement → • CONTINUE list_commas_no_trailing(expr), SEMI / RBRACE]
// [223, expr_statement → • RETURN option(expr), SEMI / RBRACE]
// [224, expr_statement → • RAISE expr, SEMI / RBRACE]
// [225, expr_statement → • ELLIPSIS, SEMI / RBRACE]
// [226, expr_statement → • left_value AUGMENTED_ASSIGNMENT expr, SEMI / RBRACE]
// [227, expr_statement → • left_value EQUAL expr, SEMI / RBRACE]
// [228, expr_statement → • expr, SEMI / RBRACE]
// [229, loop_label_colon → • POST_LABEL COLON, WHILE / LOOP / FOR]
// [230, loop_label_colon → •, WHILE / LOOP / FOR]
// [231, while_expr → • loop_label_colon WHILE infix_expr block_expr optional_else, SEMI / RBRACE]
// [238, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE, SEMI / RBRACE]
// [239, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE ELSE LBRACE single_pattern_cases RBRACE, SEMI / RBRACE]
// [240, if_expr → • IF infix_expr block_expr ELSE block_expr, SEMI / RBRACE]
// [241, if_expr → • IF infix_expr block_expr ELSE if_expr, SEMI / RBRACE]
// [242, if_expr → • IF infix_expr block_expr, SEMI / RBRACE]
// [243, match_expr → • MATCH infix_expr LBRACE non_empty_list_semis(single_pattern_case) RBRACE, SEMI / RBRACE]
// [244, match_expr → • MATCH infix_expr LBRACE RBRACE, SEMI / RBRACE]
// [245, loop_expr → • loop_label_colon LOOP non_empty_list_commas_no_trailing(expr) LBRACE list_semis(multi_pattern_case) RBRACE, SEMI / RBRACE]
// [249, for_expr → • loop_label_colon FOR for_binders SEMI option(infix_expr) SEMI list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) block_expr optional_else, SEMI / RBRACE]
// [250, for_expr → • loop_label_colon FOR for_binders block_expr optional_else, SEMI / RBRACE]
// [251, foreach_expr → • loop_label_colon FOR non_empty_list_commas(foreach_binder) IN expr block_expr optional_else, SEMI / RBRACE]
// [254, expr → • loop_expr, SEMI / RBRACE]
// [255, expr → • for_expr, SEMI / RBRACE]
// [256, expr → • foreach_expr, SEMI / RBRACE]
// [257, expr → • while_expr, SEMI / RBRACE]
// [258, expr → • try_expr, SEMI / RBRACE]
// [259, expr → • if_expr, SEMI / RBRACE]
// [260, expr → • match_expr, SEMI / RBRACE]
// [261, expr → • pipe_expr, SEMI / RBRACE]
// [262, pipe_expr → • pipe_expr PIPE infix_expr, SEMI / RBRACE / PIPE]
// [263, pipe_expr → • infix_expr, SEMI / RBRACE / PIPE]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / MINUS / SEMI / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [285, left_value → • qual_ident, AUGMENTED_ASSIGNMENT / EQUAL]
// [286, left_value → • simple_expr DOT_LIDENT, AUGMENTED_ASSIGNMENT / EQUAL]
// [287, left_value → • simple_expr DOT_INT, AUGMENTED_ASSIGNMENT / EQUAL]
// [288, left_value → • simple_expr LBRACKET expr RBRACKET, AUGMENTED_ASSIGNMENT / EQUAL]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [466, list_semis_rev(statement) → •, RBRACE]
// [467, list_semis_rev(statement) → • non_empty_list_semis_rev(statement), RBRACE]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [561, non_empty_list_semis_rev(statement) → • non_empty_list_semi_rev_aux(statement) option(SEMI), RBRACE]
// [579, non_empty_list_semi_rev_aux(statement) → • statement, SEMI / RBRACE]
// [580, non_empty_list_semi_rev_aux(statement) → • non_empty_list_semi_rev_aux(statement) SEMI statement, SEMI / RBRACE]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / RBRACE / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_714(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    NT_statement => Shift(yy_state_251)
    NT_non_empty_list_semi_rev_aux_statement_ => Shift(yy_state_252)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    NT_prefix_expr => Shift(yy_state_306)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_323)
    NT_pipe_expr => Shift(yy_state_346)
    NT_match_expr => Shift(yy_state_349)
    NT_if_expr => Shift(yy_state_350)
    NT_try_expr => Shift(yy_state_351)
    NT_while_expr => Shift(yy_state_352)
    NT_foreach_expr => Shift(yy_state_353)
    NT_for_expr => Shift(yy_state_354)
    NT_loop_expr => Shift(yy_state_355)
    T_MATCH => Shift(yy_state_356)
    NT_qual_ident => Shift(yy_state_367)
    NT_simple_expr => Shift(yy_state_368)
    T_IF => Shift(yy_state_373)
    T_TRY => Shift(yy_state_379)
    NT_loop_label_colon => Shift(yy_state_396)
    T_POST_LABEL => Shift(yy_state_404)
    NT_expr => Shift(yy_state_490)
    NT_left_value => Shift(yy_state_491)
    T_ELLIPSIS => Shift(yy_state_496)
    T_RAISE => Shift(yy_state_497)
    T_RETURN => Shift(yy_state_499)
    T_CONTINUE => Shift(yy_state_501)
    T_BREAK => Shift(yy_state_506)
    T_PACKAGE_NAME => Shift(yy_state_510)
    T_LIDENT => Shift(yy_state_512)
    T_GUARD => Shift(yy_state_584)
    NT_expr_statement => Shift(yy_state_596)
    NT_guard_statement => Shift(yy_state_597)
    NT_fn_header => Shift(yy_state_598)
    T_ASYNC => Shift(yy_state_601)
    T_LET => Shift(yy_state_612)
    T_FN => Shift(yy_state_628)
    NT_non_empty_list_semis_rev_statement_ => Shift(yy_state_643)
    NT_list_semis_rev_statement_ => Shift(yy_state_712)
    NT_local_type_decl => Shift(yy_state_713)
    NT_local_types_and_stmts => Shift(yy_state_715)
    T_TYPE => Shift(yy_state_716)
    T_ENUM => Shift(yy_state_734)
    T_STRUCT => Shift(yy_state_766)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_481)
    T_RBRACE => Reduce(0, NT_list_semis_rev_statement_, yy_action_644)
    _ => Error
  }
}

// [41, local_types_and_stmts → local_type_decl SEMI local_types_and_stmts •, RBRACE]
fn yy_state_715(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_local_types_and_stmts, yy_action_456)
}

// [31, local_type_decl → TYPE • luident type_ deriving_directive_list, SEMI / RBRACE]
// [192, luident → • LIDENT, LIDENT / UIDENT / ASYNC / LPAREN / UNDERSCORE / AMPER / PACKAGE_NAME]
// [193, luident → • UIDENT, LIDENT / UIDENT / ASYNC / LPAREN / UNDERSCORE / AMPER / PACKAGE_NAME]
fn yy_state_716(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    NT_luident => Shift(yy_state_717)
    _ => Error
  }
}

// [31, local_type_decl → TYPE luident • type_ deriving_directive_list, SEMI / RBRACE]
// [192, luident → • LIDENT, DERIVE / QUESTION / SEMI / LBRACKET / RBRACE]
// [193, luident → • UIDENT, DERIVE / QUESTION / SEMI / LBRACKET / RBRACE]
// [198, qual_ident_ty → • luident, DERIVE / QUESTION / SEMI / LBRACKET / RBRACE]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, DERIVE / QUESTION / SEMI / LBRACKET / RBRACE]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, DERIVE / QUESTION / SEMI / LBRACKET / RBRACE]
// [410, type_ → • type_ QUESTION, DERIVE / QUESTION / SEMI / RBRACE]
// [411, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN, DERIVE / QUESTION / SEMI / RBRACE]
// [412, type_ → • ASYNC LPAREN type_ COMMA RPAREN THIN_ARROW return_type, DERIVE / QUESTION / SEMI / RBRACE]
// [413, type_ → • ASYNC LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, DERIVE / QUESTION / SEMI / RBRACE]
// [414, type_ → • LPAREN type_ COMMA RPAREN THIN_ARROW return_type, DERIVE / QUESTION / SEMI / RBRACE]
// [415, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, DERIVE / QUESTION / SEMI / RBRACE]
// [416, type_ → • ASYNC LPAREN RPAREN THIN_ARROW return_type, DERIVE / QUESTION / SEMI / RBRACE]
// [417, type_ → • LPAREN RPAREN THIN_ARROW return_type, DERIVE / QUESTION / SEMI / RBRACE]
// [418, type_ → • LPAREN type_ RPAREN, DERIVE / QUESTION / SEMI / RBRACE]
// [419, type_ → • ASYNC LPAREN type_ RPAREN THIN_ARROW return_type, DERIVE / QUESTION / SEMI / RBRACE]
// [420, type_ → • LPAREN type_ RPAREN THIN_ARROW return_type, DERIVE / QUESTION / SEMI / RBRACE]
// [421, type_ → • qual_ident_ty optional_type_arguments, DERIVE / QUESTION / SEMI / RBRACE]
// [422, type_ → • AMPER qual_ident_ty, DERIVE / QUESTION / SEMI / RBRACE]
// [423, type_ → • UNDERSCORE, DERIVE / QUESTION / SEMI / RBRACE]
fn yy_state_717(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    T_UNDERSCORE => Shift(yy_state_120)
    T_AMPER => Shift(yy_state_121)
    NT_qual_ident_ty => Shift(yy_state_123)
    T_ASYNC => Shift(yy_state_129)
    T_LPAREN => Shift(yy_state_134)
    NT_type_ => Shift(yy_state_718)
    _ => Error
  }
}

// [31, local_type_decl → TYPE luident type_ • deriving_directive_list, SEMI / RBRACE]
// [185, deriving_directive_list → •, SEMI / RBRACE]
// [186, deriving_directive_list → • DERIVE LPAREN list_commas(deriving_directive) RPAREN, SEMI / RBRACE]
// [410, type_ → type_ • QUESTION, DERIVE / QUESTION / SEMI / RBRACE]
fn yy_state_718(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_QUESTION => Shift(yy_state_139)
    T_DERIVE => Shift(yy_state_719)
    NT_deriving_directive_list => Shift(yy_state_733)
    T_SEMI | T_RBRACE => Reduce(0, NT_deriving_directive_list, yy_action_147)
    _ => Error
  }
}

// [186, deriving_directive_list → DERIVE • LPAREN list_commas(deriving_directive) RPAREN, EOF / SEMI / RBRACE]
fn yy_state_719(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_720)
    _ => Error
  }
}

// [183, deriving_directive → • type_name, RPAREN / COMMA]
// [184, deriving_directive → • type_name LPAREN list_commas(argument) RPAREN, RPAREN / COMMA]
// [186, deriving_directive_list → DERIVE LPAREN • list_commas(deriving_directive) RPAREN, EOF / SEMI / RBRACE]
// [192, luident → • LIDENT, LPAREN / RPAREN / COMMA]
// [193, luident → • UIDENT, LPAREN / RPAREN / COMMA]
// [198, qual_ident_ty → • luident, LPAREN / RPAREN / COMMA]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, LPAREN / RPAREN / COMMA]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, LPAREN / RPAREN / COMMA]
// [335, type_name → • qual_ident_ty, LPAREN / RPAREN / COMMA]
// [336, type_name → • AMPER qual_ident_ty, LPAREN / RPAREN / COMMA]
// [495, list_commas(deriving_directive) → •, RPAREN]
// [496, list_commas(deriving_directive) → • non_empty_list_commas(deriving_directive), RPAREN]
// [577, non_empty_list_commas(deriving_directive) → • non_empty_list_commas_rev(deriving_directive) option(COMMA), RPAREN]
// [616, non_empty_list_commas_rev(deriving_directive) → • deriving_directive, RPAREN / COMMA]
// [617, non_empty_list_commas_rev(deriving_directive) → • non_empty_list_commas_rev(deriving_directive) COMMA deriving_directive, RPAREN / COMMA]
fn yy_state_720(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    NT_qual_ident_ty => Shift(yy_state_26)
    NT_deriving_directive => Shift(yy_state_721)
    NT_non_empty_list_commas_rev_deriving_directive_ => Shift(yy_state_722)
    NT_type_name => Shift(yy_state_726)
    NT_non_empty_list_commas_deriving_directive_ => Shift(yy_state_730)
    NT_list_commas_deriving_directive_ => Shift(yy_state_731)
    T_RPAREN => Reduce(0, NT_list_commas_deriving_directive_, yy_action_249)
    _ => Error
  }
}

// [616, non_empty_list_commas_rev(deriving_directive) → deriving_directive •, RPAREN / COMMA]
fn yy_state_721(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_non_empty_list_commas_rev_deriving_directive_, yy_action_636)
}

// [533, option(COMMA) → •, RPAREN]
// [534, option(COMMA) → • COMMA, RPAREN]
// [577, non_empty_list_commas(deriving_directive) → non_empty_list_commas_rev(deriving_directive) • option(COMMA), RPAREN]
// [617, non_empty_list_commas_rev(deriving_directive) → non_empty_list_commas_rev(deriving_directive) • COMMA deriving_directive, RPAREN / COMMA]
fn yy_state_722(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_option_COMMA_ => Shift(yy_state_723)
    T_COMMA => Shift(yy_state_724)
    T_RPAREN => Reduce(0, NT_option_COMMA_, yy_action_181)
    _ => Error
  }
}

// [577, non_empty_list_commas(deriving_directive) → non_empty_list_commas_rev(deriving_directive) option(COMMA) •, RPAREN]
fn yy_state_723(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_non_empty_list_commas_deriving_directive_, yy_action_171)
}

// [183, deriving_directive → • type_name, RPAREN / COMMA]
// [184, deriving_directive → • type_name LPAREN list_commas(argument) RPAREN, RPAREN / COMMA]
// [192, luident → • LIDENT, LPAREN / RPAREN / COMMA]
// [193, luident → • UIDENT, LPAREN / RPAREN / COMMA]
// [198, qual_ident_ty → • luident, LPAREN / RPAREN / COMMA]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, LPAREN / RPAREN / COMMA]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, LPAREN / RPAREN / COMMA]
// [335, type_name → • qual_ident_ty, LPAREN / RPAREN / COMMA]
// [336, type_name → • AMPER qual_ident_ty, LPAREN / RPAREN / COMMA]
// [534, option(COMMA) → COMMA •, RPAREN]
// [617, non_empty_list_commas_rev(deriving_directive) → non_empty_list_commas_rev(deriving_directive) COMMA • deriving_directive, RPAREN / COMMA]
fn yy_state_724(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    NT_qual_ident_ty => Shift(yy_state_26)
    NT_deriving_directive => Shift(yy_state_725)
    NT_type_name => Shift(yy_state_726)
    T_RPAREN => Reduce(1, NT_option_COMMA_, yy_action_56)
    _ => Error
  }
}

// [617, non_empty_list_commas_rev(deriving_directive) → non_empty_list_commas_rev(deriving_directive) COMMA deriving_directive •, RPAREN / COMMA]
fn yy_state_725(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_non_empty_list_commas_rev_deriving_directive_, yy_action_363)
}

// [183, deriving_directive → type_name •, RPAREN / COMMA]
// [184, deriving_directive → type_name • LPAREN list_commas(argument) RPAREN, RPAREN / COMMA]
fn yy_state_726(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_727)
    T_RPAREN | T_COMMA => Reduce(1, NT_deriving_directive, yy_action_50)
    _ => Error
  }
}

// [184, deriving_directive → type_name LPAREN • list_commas(argument) RPAREN, RPAREN / COMMA]
// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [229, loop_label_colon → • POST_LABEL COLON, WHILE / LOOP / FOR]
// [230, loop_label_colon → •, WHILE / LOOP / FOR]
// [231, while_expr → • loop_label_colon WHILE infix_expr block_expr optional_else, RPAREN / COMMA]
// [238, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE, RPAREN / COMMA]
// [239, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE ELSE LBRACE single_pattern_cases RBRACE, RPAREN / COMMA]
// [240, if_expr → • IF infix_expr block_expr ELSE block_expr, RPAREN / COMMA]
// [241, if_expr → • IF infix_expr block_expr ELSE if_expr, RPAREN / COMMA]
// [242, if_expr → • IF infix_expr block_expr, RPAREN / COMMA]
// [243, match_expr → • MATCH infix_expr LBRACE non_empty_list_semis(single_pattern_case) RBRACE, RPAREN / COMMA]
// [244, match_expr → • MATCH infix_expr LBRACE RBRACE, RPAREN / COMMA]
// [245, loop_expr → • loop_label_colon LOOP non_empty_list_commas_no_trailing(expr) LBRACE list_semis(multi_pattern_case) RBRACE, RPAREN / COMMA]
// [249, for_expr → • loop_label_colon FOR for_binders SEMI option(infix_expr) SEMI list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) block_expr optional_else, RPAREN / COMMA]
// [250, for_expr → • loop_label_colon FOR for_binders block_expr optional_else, RPAREN / COMMA]
// [251, foreach_expr → • loop_label_colon FOR non_empty_list_commas(foreach_binder) IN expr block_expr optional_else, RPAREN / COMMA]
// [254, expr → • loop_expr, RPAREN / COMMA]
// [255, expr → • for_expr, RPAREN / COMMA]
// [256, expr → • foreach_expr, RPAREN / COMMA]
// [257, expr → • while_expr, RPAREN / COMMA]
// [258, expr → • try_expr, RPAREN / COMMA]
// [259, expr → • if_expr, RPAREN / COMMA]
// [260, expr → • match_expr, RPAREN / COMMA]
// [261, expr → • pipe_expr, RPAREN / COMMA]
// [262, pipe_expr → • pipe_expr PIPE infix_expr, RPAREN / COMMA / PIPE]
// [263, pipe_expr → • infix_expr, RPAREN / COMMA / PIPE]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / RPAREN / COMMA / MINUS / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [355, argument → • LIDENT optional_question EQUAL expr, RPAREN / COMMA]
// [356, argument → • expr, RPAREN / COMMA]
// [357, argument → • POST_LABEL, RPAREN / COMMA]
// [358, argument → • LIDENT QUESTION, RPAREN / COMMA]
// [493, list_commas(argument) → •, RPAREN]
// [494, list_commas(argument) → • non_empty_list_commas(argument), RPAREN]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [576, non_empty_list_commas(argument) → • non_empty_list_commas_rev(argument) option(COMMA), RPAREN]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / LPAREN / RPAREN / COMMA / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [614, non_empty_list_commas_rev(argument) → • argument, RPAREN / COMMA]
// [615, non_empty_list_commas_rev(argument) → • non_empty_list_commas_rev(argument) COMMA argument, RPAREN / COMMA]
fn yy_state_727(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    NT_argument => Shift(yy_state_282)
    NT_non_empty_list_commas_rev_argument_ => Shift(yy_state_283)
    NT_expr => Shift(yy_state_287)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    NT_non_empty_list_commas_argument_ => Shift(yy_state_314)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_323)
    NT_pipe_expr => Shift(yy_state_346)
    NT_match_expr => Shift(yy_state_349)
    NT_if_expr => Shift(yy_state_350)
    NT_try_expr => Shift(yy_state_351)
    NT_while_expr => Shift(yy_state_352)
    NT_foreach_expr => Shift(yy_state_353)
    NT_for_expr => Shift(yy_state_354)
    NT_loop_expr => Shift(yy_state_355)
    T_MATCH => Shift(yy_state_356)
    T_IF => Shift(yy_state_373)
    T_TRY => Shift(yy_state_379)
    NT_loop_label_colon => Shift(yy_state_396)
    T_POST_LABEL => Shift(yy_state_447)
    T_LIDENT => Shift(yy_state_448)
    NT_list_commas_argument_ => Shift(yy_state_728)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_481)
    T_RPAREN => Reduce(0, NT_list_commas_argument_, yy_action_394)
    _ => Error
  }
}

// [184, deriving_directive → type_name LPAREN list_commas(argument) • RPAREN, RPAREN / COMMA]
fn yy_state_728(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RPAREN => Shift(yy_state_729)
    _ => Error
  }
}

// [184, deriving_directive → type_name LPAREN list_commas(argument) RPAREN •, RPAREN / COMMA]
fn yy_state_729(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_deriving_directive, yy_action_595)
}

// [496, list_commas(deriving_directive) → non_empty_list_commas(deriving_directive) •, RPAREN]
fn yy_state_730(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_list_commas_deriving_directive_, yy_action_103)
}

// [186, deriving_directive_list → DERIVE LPAREN list_commas(deriving_directive) • RPAREN, EOF / SEMI / RBRACE]
fn yy_state_731(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RPAREN => Shift(yy_state_732)
    _ => Error
  }
}

// [186, deriving_directive_list → DERIVE LPAREN list_commas(deriving_directive) RPAREN •, EOF / SEMI / RBRACE]
fn yy_state_732(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_deriving_directive_list, yy_action_2)
}

// [31, local_type_decl → TYPE luident type_ deriving_directive_list •, SEMI / RBRACE]
fn yy_state_733(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_local_type_decl, yy_action_571)
}

// [30, local_type_decl → ENUM • luident LBRACE list_semis(enum_constructor) RBRACE deriving_directive_list, SEMI / RBRACE]
// [192, luident → • LIDENT, LBRACE]
// [193, luident → • UIDENT, LBRACE]
fn yy_state_734(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    NT_luident => Shift(yy_state_735)
    _ => Error
  }
}

// [30, local_type_decl → ENUM luident • LBRACE list_semis(enum_constructor) RBRACE deriving_directive_list, SEMI / RBRACE]
fn yy_state_735(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACE => Shift(yy_state_736)
    _ => Error
  }
}

// [30, local_type_decl → ENUM luident LBRACE • list_semis(enum_constructor) RBRACE deriving_directive_list, SEMI / RBRACE]
// [429, enum_constructor → • UIDENT option(delimited(LPAREN,non_empty_list_commas(constructor_param),RPAREN)) option(eq_int_tag), SEMI / RBRACE]
// [464, list_semis(enum_constructor) → •, RBRACE]
// [465, list_semis(enum_constructor) → • non_empty_list_semis(enum_constructor), RBRACE]
// [560, non_empty_list_semis(enum_constructor) → • non_empty_list_semis_rev(enum_constructor), RBRACE]
// [611, non_empty_list_semis_rev(enum_constructor) → • non_empty_list_semi_rev_aux(enum_constructor) option(SEMI), RBRACE]
// [631, non_empty_list_semi_rev_aux(enum_constructor) → • enum_constructor, SEMI / RBRACE]
// [632, non_empty_list_semi_rev_aux(enum_constructor) → • non_empty_list_semi_rev_aux(enum_constructor) SEMI enum_constructor, SEMI / RBRACE]
fn yy_state_736(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_enum_constructor => Shift(yy_state_737)
    NT_non_empty_list_semi_rev_aux_enum_constructor_ => Shift(yy_state_738)
    T_UIDENT => Shift(yy_state_742)
    NT_non_empty_list_semis_rev_enum_constructor_ => Shift(yy_state_761)
    NT_non_empty_list_semis_enum_constructor_ => Shift(yy_state_762)
    NT_list_semis_enum_constructor_ => Shift(yy_state_763)
    T_RBRACE => Reduce(0, NT_list_semis_enum_constructor_, yy_action_412)
    _ => Error
  }
}

// [631, non_empty_list_semi_rev_aux(enum_constructor) → enum_constructor •, SEMI / RBRACE]
fn yy_state_737(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_non_empty_list_semi_rev_aux_enum_constructor_, yy_action_601)
}

// [581, option(SEMI) → •, RBRACE]
// [582, option(SEMI) → • SEMI, RBRACE]
// [611, non_empty_list_semis_rev(enum_constructor) → non_empty_list_semi_rev_aux(enum_constructor) • option(SEMI), RBRACE]
// [632, non_empty_list_semi_rev_aux(enum_constructor) → non_empty_list_semi_rev_aux(enum_constructor) • SEMI enum_constructor, SEMI / RBRACE]
fn yy_state_738(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_option_SEMI_ => Shift(yy_state_739)
    T_SEMI => Shift(yy_state_740)
    T_RBRACE => Reduce(0, NT_option_SEMI_, yy_action_539)
    _ => Error
  }
}

// [611, non_empty_list_semis_rev(enum_constructor) → non_empty_list_semi_rev_aux(enum_constructor) option(SEMI) •, RBRACE]
fn yy_state_739(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_non_empty_list_semis_rev_enum_constructor_, yy_action_550)
}

// [429, enum_constructor → • UIDENT option(delimited(LPAREN,non_empty_list_commas(constructor_param),RPAREN)) option(eq_int_tag), SEMI / RBRACE]
// [582, option(SEMI) → SEMI •, RBRACE]
// [632, non_empty_list_semi_rev_aux(enum_constructor) → non_empty_list_semi_rev_aux(enum_constructor) SEMI • enum_constructor, SEMI / RBRACE]
fn yy_state_740(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_enum_constructor => Shift(yy_state_741)
    T_UIDENT => Shift(yy_state_742)
    T_RBRACE => Reduce(1, NT_option_SEMI_, yy_action_425)
    _ => Error
  }
}

// [632, non_empty_list_semi_rev_aux(enum_constructor) → non_empty_list_semi_rev_aux(enum_constructor) SEMI enum_constructor •, SEMI / RBRACE]
fn yy_state_741(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_non_empty_list_semi_rev_aux_enum_constructor_, yy_action_568)
}

// [429, enum_constructor → UIDENT • option(delimited(LPAREN,non_empty_list_commas(constructor_param),RPAREN)) option(eq_int_tag), SEMI / RBRACE]
// [541, option(delimited(LPAREN,non_empty_list_commas(constructor_param),RPAREN)) → •, EQUAL / SEMI / RBRACE]
// [542, option(delimited(LPAREN,non_empty_list_commas(constructor_param),RPAREN)) → • LPAREN non_empty_list_commas(constructor_param) RPAREN, EQUAL / SEMI / RBRACE]
fn yy_state_742(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_743)
    NT_option_delimited_LPAREN_non_empty_list_commas_constructor_param__RPAREN__ => Shift(yy_state_757)
    T_EQUAL | T_SEMI | T_RBRACE => Reduce(0, NT_option_delimited_LPAREN_non_empty_list_commas_constructor_param__RPAREN__, yy_action_403)
    _ => Error
  }
}

// [427, constructor_param → • option(MUTABLE) type_, RPAREN / COMMA]
// [428, constructor_param → • option(MUTABLE) POST_LABEL COLON type_, RPAREN / COMMA]
// [538, option(MUTABLE) → •, LIDENT / UIDENT / POST_LABEL / ASYNC / LPAREN / UNDERSCORE / AMPER / PACKAGE_NAME]
// [539, option(MUTABLE) → • MUTABLE, LIDENT / UIDENT / POST_LABEL / ASYNC / LPAREN / UNDERSCORE / AMPER / PACKAGE_NAME]
// [540, non_empty_list_commas(constructor_param) → • non_empty_list_commas_rev(constructor_param) option(COMMA), RPAREN]
// [542, option(delimited(LPAREN,non_empty_list_commas(constructor_param),RPAREN)) → LPAREN • non_empty_list_commas(constructor_param) RPAREN, EQUAL / SEMI / RBRACE]
// [600, non_empty_list_commas_rev(constructor_param) → • constructor_param, RPAREN / COMMA]
// [601, non_empty_list_commas_rev(constructor_param) → • non_empty_list_commas_rev(constructor_param) COMMA constructor_param, RPAREN / COMMA]
fn yy_state_743(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_constructor_param => Shift(yy_state_744)
    NT_non_empty_list_commas_constructor_param_ => Shift(yy_state_745)
    NT_non_empty_list_commas_rev_constructor_param_ => Shift(yy_state_747)
    T_MUTABLE => Shift(yy_state_751)
    NT_option_MUTABLE_ => Shift(yy_state_752)
    T_LIDENT | T_UIDENT | T_POST_LABEL | T_ASYNC | T_LPAREN | T_UNDERSCORE | T_AMPER | T_PACKAGE_NAME => Reduce(0, NT_option_MUTABLE_, yy_action_224)
    _ => Error
  }
}

// [600, non_empty_list_commas_rev(constructor_param) → constructor_param •, RPAREN / COMMA]
fn yy_state_744(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_non_empty_list_commas_rev_constructor_param_, yy_action_416)
}

// [542, option(delimited(LPAREN,non_empty_list_commas(constructor_param),RPAREN)) → LPAREN non_empty_list_commas(constructor_param) • RPAREN, EQUAL / SEMI / RBRACE]
fn yy_state_745(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RPAREN => Shift(yy_state_746)
    _ => Error
  }
}

// [542, option(delimited(LPAREN,non_empty_list_commas(constructor_param),RPAREN)) → LPAREN non_empty_list_commas(constructor_param) RPAREN •, EQUAL / SEMI / RBRACE]
fn yy_state_746(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_option_delimited_LPAREN_non_empty_list_commas_constructor_param__RPAREN__, yy_action_139)
}

// [533, option(COMMA) → •, RPAREN]
// [534, option(COMMA) → • COMMA, RPAREN]
// [540, non_empty_list_commas(constructor_param) → non_empty_list_commas_rev(constructor_param) • option(COMMA), RPAREN]
// [601, non_empty_list_commas_rev(constructor_param) → non_empty_list_commas_rev(constructor_param) • COMMA constructor_param, RPAREN / COMMA]
fn yy_state_747(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_option_COMMA_ => Shift(yy_state_748)
    T_COMMA => Shift(yy_state_749)
    T_RPAREN => Reduce(0, NT_option_COMMA_, yy_action_181)
    _ => Error
  }
}

// [540, non_empty_list_commas(constructor_param) → non_empty_list_commas_rev(constructor_param) option(COMMA) •, RPAREN]
fn yy_state_748(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_non_empty_list_commas_constructor_param_, yy_action_712)
}

// [427, constructor_param → • option(MUTABLE) type_, RPAREN / COMMA]
// [428, constructor_param → • option(MUTABLE) POST_LABEL COLON type_, RPAREN / COMMA]
// [534, option(COMMA) → COMMA •, RPAREN]
// [538, option(MUTABLE) → •, LIDENT / UIDENT / POST_LABEL / ASYNC / LPAREN / UNDERSCORE / AMPER / PACKAGE_NAME]
// [539, option(MUTABLE) → • MUTABLE, LIDENT / UIDENT / POST_LABEL / ASYNC / LPAREN / UNDERSCORE / AMPER / PACKAGE_NAME]
// [601, non_empty_list_commas_rev(constructor_param) → non_empty_list_commas_rev(constructor_param) COMMA • constructor_param, RPAREN / COMMA]
fn yy_state_749(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_constructor_param => Shift(yy_state_750)
    T_MUTABLE => Shift(yy_state_751)
    NT_option_MUTABLE_ => Shift(yy_state_752)
    T_LIDENT | T_UIDENT | T_POST_LABEL | T_ASYNC | T_LPAREN | T_UNDERSCORE | T_AMPER | T_PACKAGE_NAME => Reduce(0, NT_option_MUTABLE_, yy_action_224)
    T_RPAREN => Reduce(1, NT_option_COMMA_, yy_action_56)
    _ => Error
  }
}

// [601, non_empty_list_commas_rev(constructor_param) → non_empty_list_commas_rev(constructor_param) COMMA constructor_param •, RPAREN / COMMA]
fn yy_state_750(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_non_empty_list_commas_rev_constructor_param_, yy_action_121)
}

// [539, option(MUTABLE) → MUTABLE •, LIDENT / UIDENT / POST_LABEL / ASYNC / LPAREN / UNDERSCORE / AMPER / PACKAGE_NAME]
fn yy_state_751(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_option_MUTABLE_, yy_action_237)
}

// [192, luident → • LIDENT, RPAREN / COMMA / QUESTION / LBRACKET]
// [193, luident → • UIDENT, RPAREN / COMMA / QUESTION / LBRACKET]
// [198, qual_ident_ty → • luident, RPAREN / COMMA / QUESTION / LBRACKET]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, RPAREN / COMMA / QUESTION / LBRACKET]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, RPAREN / COMMA / QUESTION / LBRACKET]
// [410, type_ → • type_ QUESTION, RPAREN / COMMA / QUESTION]
// [411, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN, RPAREN / COMMA / QUESTION]
// [412, type_ → • ASYNC LPAREN type_ COMMA RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [413, type_ → • ASYNC LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [414, type_ → • LPAREN type_ COMMA RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [415, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [416, type_ → • ASYNC LPAREN RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [417, type_ → • LPAREN RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [418, type_ → • LPAREN type_ RPAREN, RPAREN / COMMA / QUESTION]
// [419, type_ → • ASYNC LPAREN type_ RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [420, type_ → • LPAREN type_ RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [421, type_ → • qual_ident_ty optional_type_arguments, RPAREN / COMMA / QUESTION]
// [422, type_ → • AMPER qual_ident_ty, RPAREN / COMMA / QUESTION]
// [423, type_ → • UNDERSCORE, RPAREN / COMMA / QUESTION]
// [427, constructor_param → option(MUTABLE) • type_, RPAREN / COMMA]
// [428, constructor_param → option(MUTABLE) • POST_LABEL COLON type_, RPAREN / COMMA]
fn yy_state_752(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    T_UNDERSCORE => Shift(yy_state_120)
    T_AMPER => Shift(yy_state_121)
    NT_qual_ident_ty => Shift(yy_state_123)
    T_ASYNC => Shift(yy_state_129)
    T_LPAREN => Shift(yy_state_134)
    T_POST_LABEL => Shift(yy_state_753)
    NT_type_ => Shift(yy_state_756)
    _ => Error
  }
}

// [428, constructor_param → option(MUTABLE) POST_LABEL • COLON type_, RPAREN / COMMA]
fn yy_state_753(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_754)
    _ => Error
  }
}

// [192, luident → • LIDENT, RPAREN / COMMA / QUESTION / LBRACKET]
// [193, luident → • UIDENT, RPAREN / COMMA / QUESTION / LBRACKET]
// [198, qual_ident_ty → • luident, RPAREN / COMMA / QUESTION / LBRACKET]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, RPAREN / COMMA / QUESTION / LBRACKET]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, RPAREN / COMMA / QUESTION / LBRACKET]
// [410, type_ → • type_ QUESTION, RPAREN / COMMA / QUESTION]
// [411, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN, RPAREN / COMMA / QUESTION]
// [412, type_ → • ASYNC LPAREN type_ COMMA RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [413, type_ → • ASYNC LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [414, type_ → • LPAREN type_ COMMA RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [415, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [416, type_ → • ASYNC LPAREN RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [417, type_ → • LPAREN RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [418, type_ → • LPAREN type_ RPAREN, RPAREN / COMMA / QUESTION]
// [419, type_ → • ASYNC LPAREN type_ RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [420, type_ → • LPAREN type_ RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [421, type_ → • qual_ident_ty optional_type_arguments, RPAREN / COMMA / QUESTION]
// [422, type_ → • AMPER qual_ident_ty, RPAREN / COMMA / QUESTION]
// [423, type_ → • UNDERSCORE, RPAREN / COMMA / QUESTION]
// [428, constructor_param → option(MUTABLE) POST_LABEL COLON • type_, RPAREN / COMMA]
fn yy_state_754(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    T_UNDERSCORE => Shift(yy_state_120)
    T_AMPER => Shift(yy_state_121)
    NT_qual_ident_ty => Shift(yy_state_123)
    T_ASYNC => Shift(yy_state_129)
    T_LPAREN => Shift(yy_state_134)
    NT_type_ => Shift(yy_state_755)
    _ => Error
  }
}

// [410, type_ → type_ • QUESTION, RPAREN / COMMA / QUESTION]
// [428, constructor_param → option(MUTABLE) POST_LABEL COLON type_ •, RPAREN / COMMA]
fn yy_state_755(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_QUESTION => Shift(yy_state_139)
    T_RPAREN | T_COMMA => Reduce(4, NT_constructor_param, yy_action_182)
    _ => Error
  }
}

// [410, type_ → type_ • QUESTION, RPAREN / COMMA / QUESTION]
// [427, constructor_param → option(MUTABLE) type_ •, RPAREN / COMMA]
fn yy_state_756(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_QUESTION => Shift(yy_state_139)
    T_RPAREN | T_COMMA => Reduce(2, NT_constructor_param, yy_action_301)
    _ => Error
  }
}

// [429, enum_constructor → UIDENT option(delimited(LPAREN,non_empty_list_commas(constructor_param),RPAREN)) • option(eq_int_tag), SEMI / RBRACE]
// [543, option(eq_int_tag) → •, SEMI / RBRACE]
// [544, option(eq_int_tag) → • EQUAL INT, SEMI / RBRACE]
fn yy_state_757(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EQUAL => Shift(yy_state_758)
    NT_option_eq_int_tag_ => Shift(yy_state_760)
    T_SEMI | T_RBRACE => Reduce(0, NT_option_eq_int_tag_, yy_action_114)
    _ => Error
  }
}

// [544, option(eq_int_tag) → EQUAL • INT, SEMI / RBRACE]
fn yy_state_758(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_INT => Shift(yy_state_759)
    _ => Error
  }
}

// [544, option(eq_int_tag) → EQUAL INT •, SEMI / RBRACE]
fn yy_state_759(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_option_eq_int_tag_, yy_action_554)
}

// [429, enum_constructor → UIDENT option(delimited(LPAREN,non_empty_list_commas(constructor_param),RPAREN)) option(eq_int_tag) •, SEMI / RBRACE]
fn yy_state_760(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_enum_constructor, yy_action_516)
}

// [560, non_empty_list_semis(enum_constructor) → non_empty_list_semis_rev(enum_constructor) •, RBRACE]
fn yy_state_761(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_non_empty_list_semis_enum_constructor_, yy_action_158)
}

// [465, list_semis(enum_constructor) → non_empty_list_semis(enum_constructor) •, RBRACE]
fn yy_state_762(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_list_semis_enum_constructor_, yy_action_440)
}

// [30, local_type_decl → ENUM luident LBRACE list_semis(enum_constructor) • RBRACE deriving_directive_list, SEMI / RBRACE]
fn yy_state_763(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACE => Shift(yy_state_764)
    _ => Error
  }
}

// [30, local_type_decl → ENUM luident LBRACE list_semis(enum_constructor) RBRACE • deriving_directive_list, SEMI / RBRACE]
// [185, deriving_directive_list → •, SEMI / RBRACE]
// [186, deriving_directive_list → • DERIVE LPAREN list_commas(deriving_directive) RPAREN, SEMI / RBRACE]
fn yy_state_764(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_DERIVE => Shift(yy_state_719)
    NT_deriving_directive_list => Shift(yy_state_765)
    T_SEMI | T_RBRACE => Reduce(0, NT_deriving_directive_list, yy_action_147)
    _ => Error
  }
}

// [30, local_type_decl → ENUM luident LBRACE list_semis(enum_constructor) RBRACE deriving_directive_list •, SEMI / RBRACE]
fn yy_state_765(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(6, NT_local_type_decl, yy_action_462)
}

// [29, local_type_decl → STRUCT • luident LBRACE list_semis(record_decl_field) RBRACE deriving_directive_list, SEMI / RBRACE]
// [192, luident → • LIDENT, LBRACE]
// [193, luident → • UIDENT, LBRACE]
fn yy_state_766(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    NT_luident => Shift(yy_state_767)
    _ => Error
  }
}

// [29, local_type_decl → STRUCT luident • LBRACE list_semis(record_decl_field) RBRACE deriving_directive_list, SEMI / RBRACE]
fn yy_state_767(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACE => Shift(yy_state_768)
    _ => Error
  }
}

// [29, local_type_decl → STRUCT luident LBRACE • list_semis(record_decl_field) RBRACE deriving_directive_list, SEMI / RBRACE]
// [424, record_decl_field → • option(MUTABLE) LIDENT COLON type_, SEMI / RBRACE]
// [425, record_decl_field → • PRIV option(MUTABLE) LIDENT COLON type_, SEMI / RBRACE]
// [426, record_decl_field → • PUB pub_attr option(MUTABLE) LIDENT COLON type_, SEMI / RBRACE]
// [462, list_semis(record_decl_field) → •, RBRACE]
// [463, list_semis(record_decl_field) → • non_empty_list_semis(record_decl_field), RBRACE]
// [538, option(MUTABLE) → •, LIDENT]
// [539, option(MUTABLE) → • MUTABLE, LIDENT]
// [559, non_empty_list_semis(record_decl_field) → • non_empty_list_semis_rev(record_decl_field), RBRACE]
// [610, non_empty_list_semis_rev(record_decl_field) → • non_empty_list_semi_rev_aux(record_decl_field) option(SEMI), RBRACE]
// [629, non_empty_list_semi_rev_aux(record_decl_field) → • record_decl_field, SEMI / RBRACE]
// [630, non_empty_list_semi_rev_aux(record_decl_field) → • non_empty_list_semi_rev_aux(record_decl_field) SEMI record_decl_field, SEMI / RBRACE]
fn yy_state_768(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_MUTABLE => Shift(yy_state_751)
    NT_record_decl_field => Shift(yy_state_769)
    NT_non_empty_list_semi_rev_aux_record_decl_field_ => Shift(yy_state_770)
    T_PUB => Shift(yy_state_774)
    T_PRIV => Shift(yy_state_785)
    NT_option_MUTABLE_ => Shift(yy_state_790)
    NT_non_empty_list_semis_rev_record_decl_field_ => Shift(yy_state_794)
    NT_non_empty_list_semis_record_decl_field_ => Shift(yy_state_795)
    NT_list_semis_record_decl_field_ => Shift(yy_state_796)
    T_RBRACE => Reduce(0, NT_list_semis_record_decl_field_, yy_action_341)
    T_LIDENT => Reduce(0, NT_option_MUTABLE_, yy_action_224)
    _ => Error
  }
}

// [629, non_empty_list_semi_rev_aux(record_decl_field) → record_decl_field •, SEMI / RBRACE]
fn yy_state_769(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_non_empty_list_semi_rev_aux_record_decl_field_, yy_action_623)
}

// [581, option(SEMI) → •, RBRACE]
// [582, option(SEMI) → • SEMI, RBRACE]
// [610, non_empty_list_semis_rev(record_decl_field) → non_empty_list_semi_rev_aux(record_decl_field) • option(SEMI), RBRACE]
// [630, non_empty_list_semi_rev_aux(record_decl_field) → non_empty_list_semi_rev_aux(record_decl_field) • SEMI record_decl_field, SEMI / RBRACE]
fn yy_state_770(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_option_SEMI_ => Shift(yy_state_771)
    T_SEMI => Shift(yy_state_772)
    T_RBRACE => Reduce(0, NT_option_SEMI_, yy_action_539)
    _ => Error
  }
}

// [610, non_empty_list_semis_rev(record_decl_field) → non_empty_list_semi_rev_aux(record_decl_field) option(SEMI) •, RBRACE]
fn yy_state_771(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_non_empty_list_semis_rev_record_decl_field_, yy_action_508)
}

// [424, record_decl_field → • option(MUTABLE) LIDENT COLON type_, SEMI / RBRACE]
// [425, record_decl_field → • PRIV option(MUTABLE) LIDENT COLON type_, SEMI / RBRACE]
// [426, record_decl_field → • PUB pub_attr option(MUTABLE) LIDENT COLON type_, SEMI / RBRACE]
// [538, option(MUTABLE) → •, LIDENT]
// [539, option(MUTABLE) → • MUTABLE, LIDENT]
// [582, option(SEMI) → SEMI •, RBRACE]
// [630, non_empty_list_semi_rev_aux(record_decl_field) → non_empty_list_semi_rev_aux(record_decl_field) SEMI • record_decl_field, SEMI / RBRACE]
fn yy_state_772(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_MUTABLE => Shift(yy_state_751)
    NT_record_decl_field => Shift(yy_state_773)
    T_PUB => Shift(yy_state_774)
    T_PRIV => Shift(yy_state_785)
    NT_option_MUTABLE_ => Shift(yy_state_790)
    T_LIDENT => Reduce(0, NT_option_MUTABLE_, yy_action_224)
    T_RBRACE => Reduce(1, NT_option_SEMI_, yy_action_425)
    _ => Error
  }
}

// [630, non_empty_list_semi_rev_aux(record_decl_field) → non_empty_list_semi_rev_aux(record_decl_field) SEMI record_decl_field •, SEMI / RBRACE]
fn yy_state_773(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_non_empty_list_semi_rev_aux_record_decl_field_, yy_action_337)
}

// [135, pub_attr → •, LIDENT / MUTABLE]
// [136, pub_attr → • LPAREN READONLY RPAREN, LIDENT / MUTABLE]
// [137, pub_attr → • LPAREN LIDENT RPAREN, LIDENT / MUTABLE]
// [426, record_decl_field → PUB • pub_attr option(MUTABLE) LIDENT COLON type_, SEMI / RBRACE]
fn yy_state_774(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_pub_attr => Shift(yy_state_775)
    T_LPAREN => Shift(yy_state_780)
    T_LIDENT | T_MUTABLE => Reduce(0, NT_pub_attr, yy_action_250)
    _ => Error
  }
}

// [426, record_decl_field → PUB pub_attr • option(MUTABLE) LIDENT COLON type_, SEMI / RBRACE]
// [538, option(MUTABLE) → •, LIDENT]
// [539, option(MUTABLE) → • MUTABLE, LIDENT]
fn yy_state_775(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_MUTABLE => Shift(yy_state_751)
    NT_option_MUTABLE_ => Shift(yy_state_776)
    T_LIDENT => Reduce(0, NT_option_MUTABLE_, yy_action_224)
    _ => Error
  }
}

// [426, record_decl_field → PUB pub_attr option(MUTABLE) • LIDENT COLON type_, SEMI / RBRACE]
fn yy_state_776(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_777)
    _ => Error
  }
}

// [426, record_decl_field → PUB pub_attr option(MUTABLE) LIDENT • COLON type_, SEMI / RBRACE]
fn yy_state_777(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_778)
    _ => Error
  }
}

// [192, luident → • LIDENT, QUESTION / SEMI / LBRACKET / RBRACE]
// [193, luident → • UIDENT, QUESTION / SEMI / LBRACKET / RBRACE]
// [198, qual_ident_ty → • luident, QUESTION / SEMI / LBRACKET / RBRACE]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, QUESTION / SEMI / LBRACKET / RBRACE]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, QUESTION / SEMI / LBRACKET / RBRACE]
// [410, type_ → • type_ QUESTION, QUESTION / SEMI / RBRACE]
// [411, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN, QUESTION / SEMI / RBRACE]
// [412, type_ → • ASYNC LPAREN type_ COMMA RPAREN THIN_ARROW return_type, QUESTION / SEMI / RBRACE]
// [413, type_ → • ASYNC LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, QUESTION / SEMI / RBRACE]
// [414, type_ → • LPAREN type_ COMMA RPAREN THIN_ARROW return_type, QUESTION / SEMI / RBRACE]
// [415, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, QUESTION / SEMI / RBRACE]
// [416, type_ → • ASYNC LPAREN RPAREN THIN_ARROW return_type, QUESTION / SEMI / RBRACE]
// [417, type_ → • LPAREN RPAREN THIN_ARROW return_type, QUESTION / SEMI / RBRACE]
// [418, type_ → • LPAREN type_ RPAREN, QUESTION / SEMI / RBRACE]
// [419, type_ → • ASYNC LPAREN type_ RPAREN THIN_ARROW return_type, QUESTION / SEMI / RBRACE]
// [420, type_ → • LPAREN type_ RPAREN THIN_ARROW return_type, QUESTION / SEMI / RBRACE]
// [421, type_ → • qual_ident_ty optional_type_arguments, QUESTION / SEMI / RBRACE]
// [422, type_ → • AMPER qual_ident_ty, QUESTION / SEMI / RBRACE]
// [423, type_ → • UNDERSCORE, QUESTION / SEMI / RBRACE]
// [426, record_decl_field → PUB pub_attr option(MUTABLE) LIDENT COLON • type_, SEMI / RBRACE]
fn yy_state_778(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    T_UNDERSCORE => Shift(yy_state_120)
    T_AMPER => Shift(yy_state_121)
    NT_qual_ident_ty => Shift(yy_state_123)
    T_ASYNC => Shift(yy_state_129)
    T_LPAREN => Shift(yy_state_134)
    NT_type_ => Shift(yy_state_779)
    _ => Error
  }
}

// [410, type_ → type_ • QUESTION, QUESTION / SEMI / RBRACE]
// [426, record_decl_field → PUB pub_attr option(MUTABLE) LIDENT COLON type_ •, SEMI / RBRACE]
fn yy_state_779(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_QUESTION => Shift(yy_state_139)
    T_SEMI | T_RBRACE => Reduce(6, NT_record_decl_field, yy_action_199)
    _ => Error
  }
}

// [136, pub_attr → LPAREN • READONLY RPAREN, LIDENT / EXTERN / STRUCT / ENUM / TRAIT / IMPL / ASYNC / TYPEALIAS / TRAITALIAS / FNALIAS / FN / LET / CONST / MUTABLE / TYPE]
// [137, pub_attr → LPAREN • LIDENT RPAREN, LIDENT / EXTERN / STRUCT / ENUM / TRAIT / IMPL / ASYNC / TYPEALIAS / TRAITALIAS / FNALIAS / FN / LET / CONST / MUTABLE / TYPE]
fn yy_state_780(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_781)
    T_READONLY => Shift(yy_state_783)
    _ => Error
  }
}

// [137, pub_attr → LPAREN LIDENT • RPAREN, LIDENT / EXTERN / STRUCT / ENUM / TRAIT / IMPL / ASYNC / TYPEALIAS / TRAITALIAS / FNALIAS / FN / LET / CONST / MUTABLE / TYPE]
fn yy_state_781(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RPAREN => Shift(yy_state_782)
    _ => Error
  }
}

// [137, pub_attr → LPAREN LIDENT RPAREN •, LIDENT / EXTERN / STRUCT / ENUM / TRAIT / IMPL / ASYNC / TYPEALIAS / TRAITALIAS / FNALIAS / FN / LET / CONST / MUTABLE / TYPE]
fn yy_state_782(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_pub_attr, yy_action_599)
}

// [136, pub_attr → LPAREN READONLY • RPAREN, LIDENT / EXTERN / STRUCT / ENUM / TRAIT / IMPL / ASYNC / TYPEALIAS / TRAITALIAS / FNALIAS / FN / LET / CONST / MUTABLE / TYPE]
fn yy_state_783(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RPAREN => Shift(yy_state_784)
    _ => Error
  }
}

// [136, pub_attr → LPAREN READONLY RPAREN •, LIDENT / EXTERN / STRUCT / ENUM / TRAIT / IMPL / ASYNC / TYPEALIAS / TRAITALIAS / FNALIAS / FN / LET / CONST / MUTABLE / TYPE]
fn yy_state_784(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_pub_attr, yy_action_68)
}

// [425, record_decl_field → PRIV • option(MUTABLE) LIDENT COLON type_, SEMI / RBRACE]
// [538, option(MUTABLE) → •, LIDENT]
// [539, option(MUTABLE) → • MUTABLE, LIDENT]
fn yy_state_785(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_MUTABLE => Shift(yy_state_751)
    NT_option_MUTABLE_ => Shift(yy_state_786)
    T_LIDENT => Reduce(0, NT_option_MUTABLE_, yy_action_224)
    _ => Error
  }
}

// [425, record_decl_field → PRIV option(MUTABLE) • LIDENT COLON type_, SEMI / RBRACE]
fn yy_state_786(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_787)
    _ => Error
  }
}

// [425, record_decl_field → PRIV option(MUTABLE) LIDENT • COLON type_, SEMI / RBRACE]
fn yy_state_787(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_788)
    _ => Error
  }
}

// [192, luident → • LIDENT, QUESTION / SEMI / LBRACKET / RBRACE]
// [193, luident → • UIDENT, QUESTION / SEMI / LBRACKET / RBRACE]
// [198, qual_ident_ty → • luident, QUESTION / SEMI / LBRACKET / RBRACE]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, QUESTION / SEMI / LBRACKET / RBRACE]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, QUESTION / SEMI / LBRACKET / RBRACE]
// [410, type_ → • type_ QUESTION, QUESTION / SEMI / RBRACE]
// [411, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN, QUESTION / SEMI / RBRACE]
// [412, type_ → • ASYNC LPAREN type_ COMMA RPAREN THIN_ARROW return_type, QUESTION / SEMI / RBRACE]
// [413, type_ → • ASYNC LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, QUESTION / SEMI / RBRACE]
// [414, type_ → • LPAREN type_ COMMA RPAREN THIN_ARROW return_type, QUESTION / SEMI / RBRACE]
// [415, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, QUESTION / SEMI / RBRACE]
// [416, type_ → • ASYNC LPAREN RPAREN THIN_ARROW return_type, QUESTION / SEMI / RBRACE]
// [417, type_ → • LPAREN RPAREN THIN_ARROW return_type, QUESTION / SEMI / RBRACE]
// [418, type_ → • LPAREN type_ RPAREN, QUESTION / SEMI / RBRACE]
// [419, type_ → • ASYNC LPAREN type_ RPAREN THIN_ARROW return_type, QUESTION / SEMI / RBRACE]
// [420, type_ → • LPAREN type_ RPAREN THIN_ARROW return_type, QUESTION / SEMI / RBRACE]
// [421, type_ → • qual_ident_ty optional_type_arguments, QUESTION / SEMI / RBRACE]
// [422, type_ → • AMPER qual_ident_ty, QUESTION / SEMI / RBRACE]
// [423, type_ → • UNDERSCORE, QUESTION / SEMI / RBRACE]
// [425, record_decl_field → PRIV option(MUTABLE) LIDENT COLON • type_, SEMI / RBRACE]
fn yy_state_788(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    T_UNDERSCORE => Shift(yy_state_120)
    T_AMPER => Shift(yy_state_121)
    NT_qual_ident_ty => Shift(yy_state_123)
    T_ASYNC => Shift(yy_state_129)
    T_LPAREN => Shift(yy_state_134)
    NT_type_ => Shift(yy_state_789)
    _ => Error
  }
}

// [410, type_ → type_ • QUESTION, QUESTION / SEMI / RBRACE]
// [425, record_decl_field → PRIV option(MUTABLE) LIDENT COLON type_ •, SEMI / RBRACE]
fn yy_state_789(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_QUESTION => Shift(yy_state_139)
    T_SEMI | T_RBRACE => Reduce(5, NT_record_decl_field, yy_action_354)
    _ => Error
  }
}

// [424, record_decl_field → option(MUTABLE) • LIDENT COLON type_, SEMI / RBRACE]
fn yy_state_790(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_791)
    _ => Error
  }
}

// [424, record_decl_field → option(MUTABLE) LIDENT • COLON type_, SEMI / RBRACE]
fn yy_state_791(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_792)
    _ => Error
  }
}

// [192, luident → • LIDENT, QUESTION / SEMI / LBRACKET / RBRACE]
// [193, luident → • UIDENT, QUESTION / SEMI / LBRACKET / RBRACE]
// [198, qual_ident_ty → • luident, QUESTION / SEMI / LBRACKET / RBRACE]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, QUESTION / SEMI / LBRACKET / RBRACE]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, QUESTION / SEMI / LBRACKET / RBRACE]
// [410, type_ → • type_ QUESTION, QUESTION / SEMI / RBRACE]
// [411, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN, QUESTION / SEMI / RBRACE]
// [412, type_ → • ASYNC LPAREN type_ COMMA RPAREN THIN_ARROW return_type, QUESTION / SEMI / RBRACE]
// [413, type_ → • ASYNC LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, QUESTION / SEMI / RBRACE]
// [414, type_ → • LPAREN type_ COMMA RPAREN THIN_ARROW return_type, QUESTION / SEMI / RBRACE]
// [415, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, QUESTION / SEMI / RBRACE]
// [416, type_ → • ASYNC LPAREN RPAREN THIN_ARROW return_type, QUESTION / SEMI / RBRACE]
// [417, type_ → • LPAREN RPAREN THIN_ARROW return_type, QUESTION / SEMI / RBRACE]
// [418, type_ → • LPAREN type_ RPAREN, QUESTION / SEMI / RBRACE]
// [419, type_ → • ASYNC LPAREN type_ RPAREN THIN_ARROW return_type, QUESTION / SEMI / RBRACE]
// [420, type_ → • LPAREN type_ RPAREN THIN_ARROW return_type, QUESTION / SEMI / RBRACE]
// [421, type_ → • qual_ident_ty optional_type_arguments, QUESTION / SEMI / RBRACE]
// [422, type_ → • AMPER qual_ident_ty, QUESTION / SEMI / RBRACE]
// [423, type_ → • UNDERSCORE, QUESTION / SEMI / RBRACE]
// [424, record_decl_field → option(MUTABLE) LIDENT COLON • type_, SEMI / RBRACE]
fn yy_state_792(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    T_UNDERSCORE => Shift(yy_state_120)
    T_AMPER => Shift(yy_state_121)
    NT_qual_ident_ty => Shift(yy_state_123)
    T_ASYNC => Shift(yy_state_129)
    T_LPAREN => Shift(yy_state_134)
    NT_type_ => Shift(yy_state_793)
    _ => Error
  }
}

// [410, type_ → type_ • QUESTION, QUESTION / SEMI / RBRACE]
// [424, record_decl_field → option(MUTABLE) LIDENT COLON type_ •, SEMI / RBRACE]
fn yy_state_793(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_QUESTION => Shift(yy_state_139)
    T_SEMI | T_RBRACE => Reduce(4, NT_record_decl_field, yy_action_422)
    _ => Error
  }
}

// [559, non_empty_list_semis(record_decl_field) → non_empty_list_semis_rev(record_decl_field) •, RBRACE]
fn yy_state_794(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_non_empty_list_semis_record_decl_field_, yy_action_534)
}

// [463, list_semis(record_decl_field) → non_empty_list_semis(record_decl_field) •, RBRACE]
fn yy_state_795(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_list_semis_record_decl_field_, yy_action_685)
}

// [29, local_type_decl → STRUCT luident LBRACE list_semis(record_decl_field) • RBRACE deriving_directive_list, SEMI / RBRACE]
fn yy_state_796(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACE => Shift(yy_state_797)
    _ => Error
  }
}

// [29, local_type_decl → STRUCT luident LBRACE list_semis(record_decl_field) RBRACE • deriving_directive_list, SEMI / RBRACE]
// [185, deriving_directive_list → •, SEMI / RBRACE]
// [186, deriving_directive_list → • DERIVE LPAREN list_commas(deriving_directive) RPAREN, SEMI / RBRACE]
fn yy_state_797(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_DERIVE => Shift(yy_state_719)
    NT_deriving_directive_list => Shift(yy_state_798)
    T_SEMI | T_RBRACE => Reduce(0, NT_deriving_directive_list, yy_action_147)
    _ => Error
  }
}

// [29, local_type_decl → STRUCT luident LBRACE list_semis(record_decl_field) RBRACE deriving_directive_list •, SEMI / RBRACE]
fn yy_state_798(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(6, NT_local_type_decl, yy_action_612)
}

// [123, structure_item → IMPL optional_type_parameters type_name FOR • type_ WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [192, luident → • LIDENT, WITH / QUESTION / LBRACKET]
// [193, luident → • UIDENT, WITH / QUESTION / LBRACKET]
// [198, qual_ident_ty → • luident, WITH / QUESTION / LBRACKET]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, WITH / QUESTION / LBRACKET]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, WITH / QUESTION / LBRACKET]
// [410, type_ → • type_ QUESTION, WITH / QUESTION]
// [411, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN, WITH / QUESTION]
// [412, type_ → • ASYNC LPAREN type_ COMMA RPAREN THIN_ARROW return_type, WITH / QUESTION]
// [413, type_ → • ASYNC LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, WITH / QUESTION]
// [414, type_ → • LPAREN type_ COMMA RPAREN THIN_ARROW return_type, WITH / QUESTION]
// [415, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, WITH / QUESTION]
// [416, type_ → • ASYNC LPAREN RPAREN THIN_ARROW return_type, WITH / QUESTION]
// [417, type_ → • LPAREN RPAREN THIN_ARROW return_type, WITH / QUESTION]
// [418, type_ → • LPAREN type_ RPAREN, WITH / QUESTION]
// [419, type_ → • ASYNC LPAREN type_ RPAREN THIN_ARROW return_type, WITH / QUESTION]
// [420, type_ → • LPAREN type_ RPAREN THIN_ARROW return_type, WITH / QUESTION]
// [421, type_ → • qual_ident_ty optional_type_arguments, WITH / QUESTION]
// [422, type_ → • AMPER qual_ident_ty, WITH / QUESTION]
// [423, type_ → • UNDERSCORE, WITH / QUESTION]
fn yy_state_799(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    T_UNDERSCORE => Shift(yy_state_120)
    T_AMPER => Shift(yy_state_121)
    NT_qual_ident_ty => Shift(yy_state_123)
    T_ASYNC => Shift(yy_state_129)
    T_LPAREN => Shift(yy_state_134)
    NT_type_ => Shift(yy_state_800)
    _ => Error
  }
}

// [123, structure_item → IMPL optional_type_parameters type_name FOR type_ • WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [410, type_ → type_ • QUESTION, WITH / QUESTION]
fn yy_state_800(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_QUESTION => Shift(yy_state_139)
    T_WITH => Shift(yy_state_801)
    _ => Error
  }
}

// [123, structure_item → IMPL optional_type_parameters type_name FOR type_ WITH • LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
fn yy_state_801(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_802)
    _ => Error
  }
}

// [123, structure_item → IMPL optional_type_parameters type_name FOR type_ WITH LIDENT • optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [201, optional_bang → • EXCLAMATION, LPAREN]
// [202, optional_bang → •, LPAREN]
fn yy_state_802(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EXCLAMATION => Shift(yy_state_535)
    NT_optional_bang => Shift(yy_state_803)
    T_LPAREN => Reduce(0, NT_optional_bang, yy_action_662)
    _ => Error
  }
}

// [10, parameters → • LPAREN list_commas(parameter) RPAREN, EQUAL / LBRACE / THIN_ARROW]
// [123, structure_item → IMPL optional_type_parameters type_name FOR type_ WITH LIDENT optional_bang • parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
fn yy_state_803(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_298)
    NT_parameters => Shift(yy_state_804)
    _ => Error
  }
}

// [123, structure_item → IMPL optional_type_parameters type_name FOR type_ WITH LIDENT optional_bang parameters • option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [460, option(preceded(THIN_ARROW,return_type)) → •, EQUAL / LBRACE]
// [461, option(preceded(THIN_ARROW,return_type)) → • THIN_ARROW return_type, EQUAL / LBRACE]
fn yy_state_804(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_THIN_ARROW => Shift(yy_state_246)
    NT_option_preceded_THIN_ARROW_return_type__ => Shift(yy_state_805)
    T_EQUAL | T_LBRACE => Reduce(0, NT_option_preceded_THIN_ARROW_return_type__, yy_action_161)
    _ => Error
  }
}

// [42, block_expr_with_local_types → • LBRACE local_types_and_stmts RBRACE, EOF / SEMI]
// [43, impl_body → • block_expr_with_local_types, EOF / SEMI]
// [44, impl_body → • EQUAL STRING, EOF / SEMI]
// [123, structure_item → IMPL optional_type_parameters type_name FOR type_ WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) • impl_body, EOF / SEMI]
fn yy_state_805(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EQUAL => Shift(yy_state_706)
    NT_block_expr_with_local_types => Shift(yy_state_708)
    T_LBRACE => Shift(yy_state_709)
    NT_impl_body => Shift(yy_state_806)
    _ => Error
  }
}

// [123, structure_item → IMPL optional_type_parameters type_name FOR type_ WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body •, EOF / SEMI]
fn yy_state_806(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(11, NT_structure_item, yy_action_402)
}

// [12, optional_type_parameters → option(type_parameters) •, LIDENT / UIDENT / EQUAL / LPAREN / LBRACE / AMPER / PACKAGE_NAME / THIN_ARROW]
fn yy_state_807(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_optional_type_parameters, yy_action_572)
}

// [11, type_parameters → LBRACKET • non_empty_list_commas(id(tvar_binder)) RBRACKET, LIDENT / UIDENT / EQUAL / LPAREN / LBRACE / AMPER / PACKAGE_NAME / THIN_ARROW]
// [192, luident → • LIDENT, COMMA / COLON / RBRACKET]
// [193, luident → • UIDENT, COMMA / COLON / RBRACKET]
// [329, tvar_binder → • luident, COMMA / RBRACKET]
// [330, tvar_binder → • luident COLON separated_nonempty_list(PLUS,tvar_constraint), COMMA / RBRACKET]
// [449, non_empty_list_commas(id(tvar_binder)) → • non_empty_list_commas_rev(id(tvar_binder)) option(COMMA), RBRACKET]
// [553, non_empty_list_commas_rev(id(tvar_binder)) → • tvar_binder, COMMA / RBRACKET]
// [554, non_empty_list_commas_rev(id(tvar_binder)) → • non_empty_list_commas_rev(id(tvar_binder)) COMMA tvar_binder, COMMA / RBRACKET]
fn yy_state_808(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    NT_tvar_binder => Shift(yy_state_809)
    NT_non_empty_list_commas_rev_id_tvar_binder__ => Shift(yy_state_810)
    NT_luident => Shift(yy_state_813)
    NT_non_empty_list_commas_id_tvar_binder__ => Shift(yy_state_823)
    _ => Error
  }
}

// [553, non_empty_list_commas_rev(id(tvar_binder)) → tvar_binder •, COMMA / RBRACKET]
fn yy_state_809(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_non_empty_list_commas_rev_id_tvar_binder__, yy_action_299)
}

// [449, non_empty_list_commas(id(tvar_binder)) → non_empty_list_commas_rev(id(tvar_binder)) • option(COMMA), RBRACKET]
// [533, option(COMMA) → •, RBRACKET]
// [534, option(COMMA) → • COMMA, RBRACKET]
// [554, non_empty_list_commas_rev(id(tvar_binder)) → non_empty_list_commas_rev(id(tvar_binder)) • COMMA tvar_binder, COMMA / RBRACKET]
fn yy_state_810(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COMMA => Shift(yy_state_811)
    NT_option_COMMA_ => Shift(yy_state_822)
    T_RBRACKET => Reduce(0, NT_option_COMMA_, yy_action_181)
    _ => Error
  }
}

// [192, luident → • LIDENT, COMMA / COLON / RBRACKET]
// [193, luident → • UIDENT, COMMA / COLON / RBRACKET]
// [329, tvar_binder → • luident, COMMA / RBRACKET]
// [330, tvar_binder → • luident COLON separated_nonempty_list(PLUS,tvar_constraint), COMMA / RBRACKET]
// [534, option(COMMA) → COMMA •, RBRACKET]
// [554, non_empty_list_commas_rev(id(tvar_binder)) → non_empty_list_commas_rev(id(tvar_binder)) COMMA • tvar_binder, COMMA / RBRACKET]
fn yy_state_811(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    NT_tvar_binder => Shift(yy_state_812)
    NT_luident => Shift(yy_state_813)
    T_RBRACKET => Reduce(1, NT_option_COMMA_, yy_action_56)
    _ => Error
  }
}

// [554, non_empty_list_commas_rev(id(tvar_binder)) → non_empty_list_commas_rev(id(tvar_binder)) COMMA tvar_binder •, COMMA / RBRACKET]
fn yy_state_812(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_non_empty_list_commas_rev_id_tvar_binder__, yy_action_557)
}

// [329, tvar_binder → luident •, COMMA / RBRACKET]
// [330, tvar_binder → luident • COLON separated_nonempty_list(PLUS,tvar_constraint), COMMA / RBRACKET]
fn yy_state_813(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_814)
    T_COMMA | T_RBRACKET => Reduce(1, NT_tvar_binder, yy_action_604)
    _ => Error
  }
}

// [192, luident → • LIDENT, COMMA / PLUS / RBRACKET]
// [193, luident → • UIDENT, COMMA / PLUS / RBRACKET]
// [198, qual_ident_ty → • luident, COMMA / PLUS / RBRACKET]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COMMA / PLUS / RBRACKET]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COMMA / PLUS / RBRACKET]
// [330, tvar_binder → luident COLON • separated_nonempty_list(PLUS,tvar_constraint), COMMA / RBRACKET]
// [333, tvar_constraint → • qual_ident_ty, COMMA / PLUS / RBRACKET]
// [334, tvar_constraint → • UIDENT QUESTION, COMMA / PLUS / RBRACKET]
// [473, separated_nonempty_list(PLUS,tvar_constraint) → • tvar_constraint, COMMA / RBRACKET]
// [474, separated_nonempty_list(PLUS,tvar_constraint) → • tvar_constraint PLUS separated_nonempty_list(PLUS,tvar_constraint), COMMA / RBRACKET]
fn yy_state_814(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_LIDENT => Shift(yy_state_25)
    NT_tvar_constraint => Shift(yy_state_815)
    NT_qual_ident_ty => Shift(yy_state_818)
    T_UIDENT => Shift(yy_state_819)
    NT_separated_nonempty_list_PLUS_tvar_constraint_ => Shift(yy_state_821)
    _ => Error
  }
}

// [473, separated_nonempty_list(PLUS,tvar_constraint) → tvar_constraint •, COMMA / RBRACKET / LBRACE]
// [474, separated_nonempty_list(PLUS,tvar_constraint) → tvar_constraint • PLUS separated_nonempty_list(PLUS,tvar_constraint), COMMA / RBRACKET / LBRACE]
fn yy_state_815(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PLUS => Shift(yy_state_816)
    T_COMMA | T_RBRACKET | T_LBRACE => Reduce(1, NT_separated_nonempty_list_PLUS_tvar_constraint_, yy_action_85)
    _ => Error
  }
}

// [192, luident → • LIDENT, COMMA / PLUS / RBRACKET / LBRACE]
// [193, luident → • UIDENT, COMMA / PLUS / RBRACKET / LBRACE]
// [198, qual_ident_ty → • luident, COMMA / PLUS / RBRACKET / LBRACE]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COMMA / PLUS / RBRACKET / LBRACE]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COMMA / PLUS / RBRACKET / LBRACE]
// [333, tvar_constraint → • qual_ident_ty, COMMA / PLUS / RBRACKET / LBRACE]
// [334, tvar_constraint → • UIDENT QUESTION, COMMA / PLUS / RBRACKET / LBRACE]
// [473, separated_nonempty_list(PLUS,tvar_constraint) → • tvar_constraint, COMMA / RBRACKET / LBRACE]
// [474, separated_nonempty_list(PLUS,tvar_constraint) → • tvar_constraint PLUS separated_nonempty_list(PLUS,tvar_constraint), COMMA / RBRACKET / LBRACE]
// [474, separated_nonempty_list(PLUS,tvar_constraint) → tvar_constraint PLUS • separated_nonempty_list(PLUS,tvar_constraint), COMMA / RBRACKET / LBRACE]
fn yy_state_816(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_LIDENT => Shift(yy_state_25)
    NT_tvar_constraint => Shift(yy_state_815)
    NT_separated_nonempty_list_PLUS_tvar_constraint_ => Shift(yy_state_817)
    NT_qual_ident_ty => Shift(yy_state_818)
    T_UIDENT => Shift(yy_state_819)
    _ => Error
  }
}

// [474, separated_nonempty_list(PLUS,tvar_constraint) → tvar_constraint PLUS separated_nonempty_list(PLUS,tvar_constraint) •, COMMA / RBRACKET / LBRACE]
fn yy_state_817(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_separated_nonempty_list_PLUS_tvar_constraint_, yy_action_120)
}

// [333, tvar_constraint → qual_ident_ty •, COMMA / PLUS / RBRACKET / LBRACE]
fn yy_state_818(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_tvar_constraint, yy_action_319)
}

// [193, luident → UIDENT •, COMMA / PLUS / RBRACKET / LBRACE]
// [334, tvar_constraint → UIDENT • QUESTION, COMMA / PLUS / RBRACKET / LBRACE]
fn yy_state_819(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_QUESTION => Shift(yy_state_820)
    T_COMMA | T_PLUS | T_RBRACKET | T_LBRACE => Reduce(1, NT_luident, yy_action_676)
    _ => Error
  }
}

// [334, tvar_constraint → UIDENT QUESTION •, COMMA / PLUS / RBRACKET / LBRACE]
fn yy_state_820(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_tvar_constraint, yy_action_427)
}

// [330, tvar_binder → luident COLON separated_nonempty_list(PLUS,tvar_constraint) •, COMMA / RBRACKET]
fn yy_state_821(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_tvar_binder, yy_action_348)
}

// [449, non_empty_list_commas(id(tvar_binder)) → non_empty_list_commas_rev(id(tvar_binder)) option(COMMA) •, RBRACKET]
fn yy_state_822(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_non_empty_list_commas_id_tvar_binder__, yy_action_491)
}

// [11, type_parameters → LBRACKET non_empty_list_commas(id(tvar_binder)) • RBRACKET, LIDENT / UIDENT / EQUAL / LPAREN / LBRACE / AMPER / PACKAGE_NAME / THIN_ARROW]
fn yy_state_823(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACKET => Shift(yy_state_824)
    _ => Error
  }
}

// [11, type_parameters → LBRACKET non_empty_list_commas(id(tvar_binder)) RBRACKET •, LIDENT / UIDENT / EQUAL / LPAREN / LBRACE / AMPER / PACKAGE_NAME / THIN_ARROW]
fn yy_state_824(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_type_parameters, yy_action_233)
}

// [121, structure_item → TEST • option(loced_string) option(parameters) block_expr_with_local_types, EOF / SEMI]
// [479, option(loced_string) → •, LPAREN / LBRACE]
// [480, option(loced_string) → • STRING, LPAREN / LBRACE]
fn yy_state_825(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_STRING => Shift(yy_state_826)
    NT_option_loced_string_ => Shift(yy_state_827)
    T_LPAREN | T_LBRACE => Reduce(0, NT_option_loced_string_, yy_action_555)
    _ => Error
  }
}

// [480, option(loced_string) → STRING •, LPAREN / LBRACE]
fn yy_state_826(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_option_loced_string_, yy_action_303)
}

// [10, parameters → • LPAREN list_commas(parameter) RPAREN, LBRACE]
// [121, structure_item → TEST option(loced_string) • option(parameters) block_expr_with_local_types, EOF / SEMI]
// [458, option(parameters) → •, LBRACE]
// [459, option(parameters) → • parameters, LBRACE]
fn yy_state_827(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_298)
    NT_parameters => Shift(yy_state_828)
    NT_option_parameters_ => Shift(yy_state_829)
    T_LBRACE => Reduce(0, NT_option_parameters_, yy_action_287)
    _ => Error
  }
}

// [459, option(parameters) → parameters •, EQUAL / LBRACE / THIN_ARROW]
fn yy_state_828(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_option_parameters_, yy_action_89)
}

// [42, block_expr_with_local_types → • LBRACE local_types_and_stmts RBRACE, EOF / SEMI]
// [121, structure_item → TEST option(loced_string) option(parameters) • block_expr_with_local_types, EOF / SEMI]
fn yy_state_829(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACE => Shift(yy_state_709)
    NT_block_expr_with_local_types => Shift(yy_state_830)
    _ => Error
  }
}

// [121, structure_item → TEST option(loced_string) option(parameters) block_expr_with_local_types •, EOF / SEMI]
fn yy_state_830(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_structure_item, yy_action_556)
}

// [109, structure_item → TYPEALIAS • PACKAGE_NAME batch_type_alias_targets, EOF / SEMI]
// [150, type_alias_header → TYPEALIAS • luident optional_type_parameters_no_constraints, EQUAL]
// [192, luident → • LIDENT, EQUAL / LBRACKET]
// [193, luident → • UIDENT, EQUAL / LBRACKET]
fn yy_state_831(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    NT_luident => Shift(yy_state_832)
    T_PACKAGE_NAME => Shift(yy_state_834)
    _ => Error
  }
}

// [13, optional_type_parameters_no_constraints → • option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)), EQUAL]
// [150, type_alias_header → TYPEALIAS luident • optional_type_parameters_no_constraints, EQUAL]
// [453, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → •, EQUAL]
// [454, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → • LBRACKET non_empty_list_commas(id(type_decl_binder)) RBRACKET, EQUAL]
fn yy_state_832(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_676)
    NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__ => Shift(yy_state_687)
    NT_optional_type_parameters_no_constraints => Shift(yy_state_833)
    T_EQUAL => Reduce(0, NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__, yy_action_613)
    _ => Error
  }
}

// [150, type_alias_header → TYPEALIAS luident optional_type_parameters_no_constraints •, EQUAL]
fn yy_state_833(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_type_alias_header, yy_action_701)
}

// [109, structure_item → TYPEALIAS PACKAGE_NAME • batch_type_alias_targets, EOF / SEMI]
// [168, batch_type_alias_targets → • DOT_LIDENT optional_type_parameters_no_constraints, EOF / SEMI]
// [169, batch_type_alias_targets → • DOT_UIDENT optional_type_parameters_no_constraints, EOF / SEMI]
// [170, batch_type_alias_targets → • DOT_LPAREN non_empty_list_commas(batch_type_alias_target) RPAREN, EOF / SEMI]
fn yy_state_834(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_DOT_LPAREN => Shift(yy_state_835)
    T_DOT_UIDENT => Shift(yy_state_845)
    T_DOT_LIDENT => Shift(yy_state_847)
    NT_batch_type_alias_targets => Shift(yy_state_849)
    _ => Error
  }
}

// [170, batch_type_alias_targets → DOT_LPAREN • non_empty_list_commas(batch_type_alias_target) RPAREN, EOF / SEMI]
// [171, batch_type_alias_target → • luident optional_type_parameters_no_constraints, RPAREN / COMMA]
// [192, luident → • LIDENT, RPAREN / COMMA / LBRACKET]
// [193, luident → • UIDENT, RPAREN / COMMA / LBRACKET]
// [482, non_empty_list_commas(batch_type_alias_target) → • non_empty_list_commas_rev(batch_type_alias_target) option(COMMA), RPAREN]
// [568, non_empty_list_commas_rev(batch_type_alias_target) → • batch_type_alias_target, RPAREN / COMMA]
// [569, non_empty_list_commas_rev(batch_type_alias_target) → • non_empty_list_commas_rev(batch_type_alias_target) COMMA batch_type_alias_target, RPAREN / COMMA]
fn yy_state_835(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    NT_batch_type_alias_target => Shift(yy_state_836)
    NT_non_empty_list_commas_rev_batch_type_alias_target_ => Shift(yy_state_837)
    NT_luident => Shift(yy_state_840)
    NT_non_empty_list_commas_batch_type_alias_target_ => Shift(yy_state_843)
    _ => Error
  }
}

// [568, non_empty_list_commas_rev(batch_type_alias_target) → batch_type_alias_target •, RPAREN / COMMA]
fn yy_state_836(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_non_empty_list_commas_rev_batch_type_alias_target_, yy_action_60)
}

// [482, non_empty_list_commas(batch_type_alias_target) → non_empty_list_commas_rev(batch_type_alias_target) • option(COMMA), RPAREN]
// [533, option(COMMA) → •, RPAREN]
// [534, option(COMMA) → • COMMA, RPAREN]
// [569, non_empty_list_commas_rev(batch_type_alias_target) → non_empty_list_commas_rev(batch_type_alias_target) • COMMA batch_type_alias_target, RPAREN / COMMA]
fn yy_state_837(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COMMA => Shift(yy_state_838)
    NT_option_COMMA_ => Shift(yy_state_842)
    T_RPAREN => Reduce(0, NT_option_COMMA_, yy_action_181)
    _ => Error
  }
}

// [171, batch_type_alias_target → • luident optional_type_parameters_no_constraints, RPAREN / COMMA]
// [192, luident → • LIDENT, RPAREN / COMMA / LBRACKET]
// [193, luident → • UIDENT, RPAREN / COMMA / LBRACKET]
// [534, option(COMMA) → COMMA •, RPAREN]
// [569, non_empty_list_commas_rev(batch_type_alias_target) → non_empty_list_commas_rev(batch_type_alias_target) COMMA • batch_type_alias_target, RPAREN / COMMA]
fn yy_state_838(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    NT_batch_type_alias_target => Shift(yy_state_839)
    NT_luident => Shift(yy_state_840)
    T_RPAREN => Reduce(1, NT_option_COMMA_, yy_action_56)
    _ => Error
  }
}

// [569, non_empty_list_commas_rev(batch_type_alias_target) → non_empty_list_commas_rev(batch_type_alias_target) COMMA batch_type_alias_target •, RPAREN / COMMA]
fn yy_state_839(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_non_empty_list_commas_rev_batch_type_alias_target_, yy_action_343)
}

// [13, optional_type_parameters_no_constraints → • option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)), RPAREN / COMMA]
// [171, batch_type_alias_target → luident • optional_type_parameters_no_constraints, RPAREN / COMMA]
// [453, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → •, RPAREN / COMMA]
// [454, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → • LBRACKET non_empty_list_commas(id(type_decl_binder)) RBRACKET, RPAREN / COMMA]
fn yy_state_840(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_676)
    NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__ => Shift(yy_state_687)
    NT_optional_type_parameters_no_constraints => Shift(yy_state_841)
    T_RPAREN | T_COMMA => Reduce(0, NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__, yy_action_613)
    _ => Error
  }
}

// [171, batch_type_alias_target → luident optional_type_parameters_no_constraints •, RPAREN / COMMA]
fn yy_state_841(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_batch_type_alias_target, yy_action_482)
}

// [482, non_empty_list_commas(batch_type_alias_target) → non_empty_list_commas_rev(batch_type_alias_target) option(COMMA) •, RPAREN]
fn yy_state_842(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_non_empty_list_commas_batch_type_alias_target_, yy_action_488)
}

// [170, batch_type_alias_targets → DOT_LPAREN non_empty_list_commas(batch_type_alias_target) • RPAREN, EOF / SEMI]
fn yy_state_843(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RPAREN => Shift(yy_state_844)
    _ => Error
  }
}

// [170, batch_type_alias_targets → DOT_LPAREN non_empty_list_commas(batch_type_alias_target) RPAREN •, EOF / SEMI]
fn yy_state_844(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_batch_type_alias_targets, yy_action_201)
}

// [13, optional_type_parameters_no_constraints → • option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)), EOF / SEMI]
// [169, batch_type_alias_targets → DOT_UIDENT • optional_type_parameters_no_constraints, EOF / SEMI]
// [453, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → •, EOF / SEMI]
// [454, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → • LBRACKET non_empty_list_commas(id(type_decl_binder)) RBRACKET, EOF / SEMI]
fn yy_state_845(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_676)
    NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__ => Shift(yy_state_687)
    NT_optional_type_parameters_no_constraints => Shift(yy_state_846)
    T_EOF | T_SEMI => Reduce(0, NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__, yy_action_613)
    _ => Error
  }
}

// [169, batch_type_alias_targets → DOT_UIDENT optional_type_parameters_no_constraints •, EOF / SEMI]
fn yy_state_846(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_batch_type_alias_targets, yy_action_522)
}

// [13, optional_type_parameters_no_constraints → • option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)), EOF / SEMI]
// [168, batch_type_alias_targets → DOT_LIDENT • optional_type_parameters_no_constraints, EOF / SEMI]
// [453, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → •, EOF / SEMI]
// [454, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → • LBRACKET non_empty_list_commas(id(type_decl_binder)) RBRACKET, EOF / SEMI]
fn yy_state_847(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_676)
    NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__ => Shift(yy_state_687)
    NT_optional_type_parameters_no_constraints => Shift(yy_state_848)
    T_EOF | T_SEMI => Reduce(0, NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__, yy_action_613)
    _ => Error
  }
}

// [168, batch_type_alias_targets → DOT_LIDENT optional_type_parameters_no_constraints •, EOF / SEMI]
fn yy_state_848(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_batch_type_alias_targets, yy_action_1)
}

// [109, structure_item → TYPEALIAS PACKAGE_NAME batch_type_alias_targets •, EOF / SEMI]
fn yy_state_849(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_structure_item, yy_action_281)
}

// [103, structure_item → TRAITALIAS • luident EQUAL type_name, EOF / SEMI]
// [115, structure_item → TRAITALIAS • PACKAGE_NAME batch_trait_alias_targets, EOF / SEMI]
// [192, luident → • LIDENT, EQUAL]
// [193, luident → • UIDENT, EQUAL]
fn yy_state_850(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    T_PACKAGE_NAME => Shift(yy_state_851)
    NT_luident => Shift(yy_state_864)
    _ => Error
  }
}

// [115, structure_item → TRAITALIAS PACKAGE_NAME • batch_trait_alias_targets, EOF / SEMI]
// [172, batch_trait_alias_targets → • DOT_LIDENT, EOF / SEMI]
// [173, batch_trait_alias_targets → • DOT_UIDENT, EOF / SEMI]
// [174, batch_trait_alias_targets → • DOT_LPAREN non_empty_list_commas(batch_trait_alias_target) RPAREN, EOF / SEMI]
fn yy_state_851(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_DOT_LPAREN => Shift(yy_state_852)
    T_DOT_UIDENT => Shift(yy_state_861)
    T_DOT_LIDENT => Shift(yy_state_862)
    NT_batch_trait_alias_targets => Shift(yy_state_863)
    _ => Error
  }
}

// [174, batch_trait_alias_targets → DOT_LPAREN • non_empty_list_commas(batch_trait_alias_target) RPAREN, EOF / SEMI]
// [175, batch_trait_alias_target → • luident, RPAREN / COMMA]
// [192, luident → • LIDENT, RPAREN / COMMA]
// [193, luident → • UIDENT, RPAREN / COMMA]
// [483, non_empty_list_commas(batch_trait_alias_target) → • non_empty_list_commas_rev(batch_trait_alias_target) option(COMMA), RPAREN]
// [570, non_empty_list_commas_rev(batch_trait_alias_target) → • batch_trait_alias_target, RPAREN / COMMA]
// [571, non_empty_list_commas_rev(batch_trait_alias_target) → • non_empty_list_commas_rev(batch_trait_alias_target) COMMA batch_trait_alias_target, RPAREN / COMMA]
fn yy_state_852(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    NT_batch_trait_alias_target => Shift(yy_state_853)
    NT_non_empty_list_commas_rev_batch_trait_alias_target_ => Shift(yy_state_854)
    NT_luident => Shift(yy_state_857)
    NT_non_empty_list_commas_batch_trait_alias_target_ => Shift(yy_state_859)
    _ => Error
  }
}

// [570, non_empty_list_commas_rev(batch_trait_alias_target) → batch_trait_alias_target •, RPAREN / COMMA]
fn yy_state_853(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_non_empty_list_commas_rev_batch_trait_alias_target_, yy_action_594)
}

// [483, non_empty_list_commas(batch_trait_alias_target) → non_empty_list_commas_rev(batch_trait_alias_target) • option(COMMA), RPAREN]
// [533, option(COMMA) → •, RPAREN]
// [534, option(COMMA) → • COMMA, RPAREN]
// [571, non_empty_list_commas_rev(batch_trait_alias_target) → non_empty_list_commas_rev(batch_trait_alias_target) • COMMA batch_trait_alias_target, RPAREN / COMMA]
fn yy_state_854(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COMMA => Shift(yy_state_855)
    NT_option_COMMA_ => Shift(yy_state_858)
    T_RPAREN => Reduce(0, NT_option_COMMA_, yy_action_181)
    _ => Error
  }
}

// [175, batch_trait_alias_target → • luident, RPAREN / COMMA]
// [192, luident → • LIDENT, RPAREN / COMMA]
// [193, luident → • UIDENT, RPAREN / COMMA]
// [534, option(COMMA) → COMMA •, RPAREN]
// [571, non_empty_list_commas_rev(batch_trait_alias_target) → non_empty_list_commas_rev(batch_trait_alias_target) COMMA • batch_trait_alias_target, RPAREN / COMMA]
fn yy_state_855(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    NT_batch_trait_alias_target => Shift(yy_state_856)
    NT_luident => Shift(yy_state_857)
    T_RPAREN => Reduce(1, NT_option_COMMA_, yy_action_56)
    _ => Error
  }
}

// [571, non_empty_list_commas_rev(batch_trait_alias_target) → non_empty_list_commas_rev(batch_trait_alias_target) COMMA batch_trait_alias_target •, RPAREN / COMMA]
fn yy_state_856(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_non_empty_list_commas_rev_batch_trait_alias_target_, yy_action_259)
}

// [175, batch_trait_alias_target → luident •, RPAREN / COMMA]
fn yy_state_857(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_batch_trait_alias_target, yy_action_669)
}

// [483, non_empty_list_commas(batch_trait_alias_target) → non_empty_list_commas_rev(batch_trait_alias_target) option(COMMA) •, RPAREN]
fn yy_state_858(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_non_empty_list_commas_batch_trait_alias_target_, yy_action_213)
}

// [174, batch_trait_alias_targets → DOT_LPAREN non_empty_list_commas(batch_trait_alias_target) • RPAREN, EOF / SEMI]
fn yy_state_859(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RPAREN => Shift(yy_state_860)
    _ => Error
  }
}

// [174, batch_trait_alias_targets → DOT_LPAREN non_empty_list_commas(batch_trait_alias_target) RPAREN •, EOF / SEMI]
fn yy_state_860(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_batch_trait_alias_targets, yy_action_537)
}

// [173, batch_trait_alias_targets → DOT_UIDENT •, EOF / SEMI]
fn yy_state_861(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_batch_trait_alias_targets, yy_action_682)
}

// [172, batch_trait_alias_targets → DOT_LIDENT •, EOF / SEMI]
fn yy_state_862(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_batch_trait_alias_targets, yy_action_285)
}

// [115, structure_item → TRAITALIAS PACKAGE_NAME batch_trait_alias_targets •, EOF / SEMI]
fn yy_state_863(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_structure_item, yy_action_519)
}

// [103, structure_item → TRAITALIAS luident • EQUAL type_name, EOF / SEMI]
fn yy_state_864(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EQUAL => Shift(yy_state_865)
    _ => Error
  }
}

// [103, structure_item → TRAITALIAS luident EQUAL • type_name, EOF / SEMI]
// [192, luident → • LIDENT, EOF / SEMI]
// [193, luident → • UIDENT, EOF / SEMI]
// [198, qual_ident_ty → • luident, EOF / SEMI]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, EOF / SEMI]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, EOF / SEMI]
// [335, type_name → • qual_ident_ty, EOF / SEMI]
// [336, type_name → • AMPER qual_ident_ty, EOF / SEMI]
fn yy_state_865(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    NT_qual_ident_ty => Shift(yy_state_26)
    NT_type_name => Shift(yy_state_866)
    _ => Error
  }
}

// [103, structure_item → TRAITALIAS luident EQUAL type_name •, EOF / SEMI]
fn yy_state_866(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_structure_item, yy_action_242)
}

// [97, structure_item → TRAIT • luident option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) LBRACE list_semis(trait_method_decl) RBRACE, EOF / SEMI]
// [192, luident → • LIDENT, COLON / LBRACE]
// [193, luident → • UIDENT, COLON / LBRACE]
fn yy_state_867(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    NT_luident => Shift(yy_state_868)
    _ => Error
  }
}

// [97, structure_item → TRAIT luident • option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) LBRACE list_semis(trait_method_decl) RBRACE, EOF / SEMI]
// [475, option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) → •, LBRACE]
// [476, option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) → • COLON separated_nonempty_list(PLUS,tvar_constraint), LBRACE]
fn yy_state_868(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_869)
    NT_option_preceded_COLON_separated_nonempty_list_PLUS_tvar_constraint___ => Shift(yy_state_871)
    T_LBRACE => Reduce(0, NT_option_preceded_COLON_separated_nonempty_list_PLUS_tvar_constraint___, yy_action_57)
    _ => Error
  }
}

// [192, luident → • LIDENT, PLUS / LBRACE]
// [193, luident → • UIDENT, PLUS / LBRACE]
// [198, qual_ident_ty → • luident, PLUS / LBRACE]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, PLUS / LBRACE]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, PLUS / LBRACE]
// [333, tvar_constraint → • qual_ident_ty, PLUS / LBRACE]
// [334, tvar_constraint → • UIDENT QUESTION, PLUS / LBRACE]
// [473, separated_nonempty_list(PLUS,tvar_constraint) → • tvar_constraint, LBRACE]
// [474, separated_nonempty_list(PLUS,tvar_constraint) → • tvar_constraint PLUS separated_nonempty_list(PLUS,tvar_constraint), LBRACE]
// [476, option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) → COLON • separated_nonempty_list(PLUS,tvar_constraint), LBRACE]
fn yy_state_869(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_LIDENT => Shift(yy_state_25)
    NT_tvar_constraint => Shift(yy_state_815)
    NT_qual_ident_ty => Shift(yy_state_818)
    T_UIDENT => Shift(yy_state_819)
    NT_separated_nonempty_list_PLUS_tvar_constraint_ => Shift(yy_state_870)
    _ => Error
  }
}

// [476, option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) → COLON separated_nonempty_list(PLUS,tvar_constraint) •, LBRACE]
fn yy_state_870(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_option_preceded_COLON_separated_nonempty_list_PLUS_tvar_constraint___, yy_action_194)
}

// [97, structure_item → TRAIT luident option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) • LBRACE list_semis(trait_method_decl) RBRACE, EOF / SEMI]
fn yy_state_871(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACE => Shift(yy_state_872)
    _ => Error
  }
}

// [97, structure_item → TRAIT luident option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) LBRACE • list_semis(trait_method_decl) RBRACE, EOF / SEMI]
// [187, trait_method_decl → • LIDENT optional_bang optional_type_parameters LPAREN list_commas(trait_method_param) RPAREN option(preceded(THIN_ARROW,return_type)) option(preceded(EQUAL,wildcard)), SEMI / RBRACE]
// [477, list_semis(trait_method_decl) → •, RBRACE]
// [478, list_semis(trait_method_decl) → • non_empty_list_semis(trait_method_decl), RBRACE]
// [565, non_empty_list_semis(trait_method_decl) → • non_empty_list_semis_rev(trait_method_decl), RBRACE]
// [613, non_empty_list_semis_rev(trait_method_decl) → • non_empty_list_semi_rev_aux(trait_method_decl) option(SEMI), RBRACE]
// [635, non_empty_list_semi_rev_aux(trait_method_decl) → • trait_method_decl, SEMI / RBRACE]
// [636, non_empty_list_semi_rev_aux(trait_method_decl) → • non_empty_list_semi_rev_aux(trait_method_decl) SEMI trait_method_decl, SEMI / RBRACE]
fn yy_state_872(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_trait_method_decl => Shift(yy_state_873)
    NT_non_empty_list_semi_rev_aux_trait_method_decl_ => Shift(yy_state_874)
    T_LIDENT => Shift(yy_state_878)
    NT_non_empty_list_semis_rev_trait_method_decl_ => Shift(yy_state_902)
    NT_non_empty_list_semis_trait_method_decl_ => Shift(yy_state_903)
    NT_list_semis_trait_method_decl_ => Shift(yy_state_904)
    T_RBRACE => Reduce(0, NT_list_semis_trait_method_decl_, yy_action_262)
    _ => Error
  }
}

// [635, non_empty_list_semi_rev_aux(trait_method_decl) → trait_method_decl •, SEMI / RBRACE]
fn yy_state_873(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_non_empty_list_semi_rev_aux_trait_method_decl_, yy_action_575)
}

// [581, option(SEMI) → •, RBRACE]
// [582, option(SEMI) → • SEMI, RBRACE]
// [613, non_empty_list_semis_rev(trait_method_decl) → non_empty_list_semi_rev_aux(trait_method_decl) • option(SEMI), RBRACE]
// [636, non_empty_list_semi_rev_aux(trait_method_decl) → non_empty_list_semi_rev_aux(trait_method_decl) • SEMI trait_method_decl, SEMI / RBRACE]
fn yy_state_874(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_option_SEMI_ => Shift(yy_state_875)
    T_SEMI => Shift(yy_state_876)
    T_RBRACE => Reduce(0, NT_option_SEMI_, yy_action_539)
    _ => Error
  }
}

// [613, non_empty_list_semis_rev(trait_method_decl) → non_empty_list_semi_rev_aux(trait_method_decl) option(SEMI) •, RBRACE]
fn yy_state_875(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_non_empty_list_semis_rev_trait_method_decl_, yy_action_638)
}

// [187, trait_method_decl → • LIDENT optional_bang optional_type_parameters LPAREN list_commas(trait_method_param) RPAREN option(preceded(THIN_ARROW,return_type)) option(preceded(EQUAL,wildcard)), SEMI / RBRACE]
// [582, option(SEMI) → SEMI •, RBRACE]
// [636, non_empty_list_semi_rev_aux(trait_method_decl) → non_empty_list_semi_rev_aux(trait_method_decl) SEMI • trait_method_decl, SEMI / RBRACE]
fn yy_state_876(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_trait_method_decl => Shift(yy_state_877)
    T_LIDENT => Shift(yy_state_878)
    T_RBRACE => Reduce(1, NT_option_SEMI_, yy_action_425)
    _ => Error
  }
}

// [636, non_empty_list_semi_rev_aux(trait_method_decl) → non_empty_list_semi_rev_aux(trait_method_decl) SEMI trait_method_decl •, SEMI / RBRACE]
fn yy_state_877(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_non_empty_list_semi_rev_aux_trait_method_decl_, yy_action_514)
}

// [187, trait_method_decl → LIDENT • optional_bang optional_type_parameters LPAREN list_commas(trait_method_param) RPAREN option(preceded(THIN_ARROW,return_type)) option(preceded(EQUAL,wildcard)), SEMI / RBRACE]
// [201, optional_bang → • EXCLAMATION, LPAREN / LBRACKET]
// [202, optional_bang → •, LPAREN / LBRACKET]
fn yy_state_878(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EXCLAMATION => Shift(yy_state_535)
    NT_optional_bang => Shift(yy_state_879)
    T_LPAREN | T_LBRACKET => Reduce(0, NT_optional_bang, yy_action_662)
    _ => Error
  }
}

// [11, type_parameters → • LBRACKET non_empty_list_commas(id(tvar_binder)) RBRACKET, LPAREN]
// [12, optional_type_parameters → • option(type_parameters), LPAREN]
// [187, trait_method_decl → LIDENT optional_bang • optional_type_parameters LPAREN list_commas(trait_method_param) RPAREN option(preceded(THIN_ARROW,return_type)) option(preceded(EQUAL,wildcard)), SEMI / RBRACE]
// [450, option(type_parameters) → •, LPAREN]
// [451, option(type_parameters) → • type_parameters, LPAREN]
fn yy_state_879(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_type_parameters => Shift(yy_state_697)
    NT_option_type_parameters_ => Shift(yy_state_807)
    T_LBRACKET => Shift(yy_state_808)
    NT_optional_type_parameters => Shift(yy_state_880)
    T_LPAREN => Reduce(0, NT_option_type_parameters_, yy_action_515)
    _ => Error
  }
}

// [187, trait_method_decl → LIDENT optional_bang optional_type_parameters • LPAREN list_commas(trait_method_param) RPAREN option(preceded(THIN_ARROW,return_type)) option(preceded(EQUAL,wildcard)), SEMI / RBRACE]
fn yy_state_880(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_881)
    _ => Error
  }
}

// [187, trait_method_decl → LIDENT optional_bang optional_type_parameters LPAREN • list_commas(trait_method_param) RPAREN option(preceded(THIN_ARROW,return_type)) option(preceded(EQUAL,wildcard)), SEMI / RBRACE]
// [189, trait_method_param → • type_, RPAREN / COMMA]
// [190, trait_method_param → • LIDENT COLON type_, RPAREN / COMMA]
// [191, trait_method_param → • POST_LABEL COLON type_, RPAREN / COMMA]
// [192, luident → • LIDENT, RPAREN / COMMA / QUESTION / LBRACKET]
// [193, luident → • UIDENT, RPAREN / COMMA / QUESTION / LBRACKET]
// [198, qual_ident_ty → • luident, RPAREN / COMMA / QUESTION / LBRACKET]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, RPAREN / COMMA / QUESTION / LBRACKET]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, RPAREN / COMMA / QUESTION / LBRACKET]
// [410, type_ → • type_ QUESTION, RPAREN / COMMA / QUESTION]
// [411, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN, RPAREN / COMMA / QUESTION]
// [412, type_ → • ASYNC LPAREN type_ COMMA RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [413, type_ → • ASYNC LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [414, type_ → • LPAREN type_ COMMA RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [415, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [416, type_ → • ASYNC LPAREN RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [417, type_ → • LPAREN RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [418, type_ → • LPAREN type_ RPAREN, RPAREN / COMMA / QUESTION]
// [419, type_ → • ASYNC LPAREN type_ RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [420, type_ → • LPAREN type_ RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [421, type_ → • qual_ident_ty optional_type_arguments, RPAREN / COMMA / QUESTION]
// [422, type_ → • AMPER qual_ident_ty, RPAREN / COMMA / QUESTION]
// [423, type_ → • UNDERSCORE, RPAREN / COMMA / QUESTION]
// [497, list_commas(trait_method_param) → •, RPAREN]
// [498, list_commas(trait_method_param) → • non_empty_list_commas(trait_method_param), RPAREN]
// [578, non_empty_list_commas(trait_method_param) → • non_empty_list_commas_rev(trait_method_param) option(COMMA), RPAREN]
// [618, non_empty_list_commas_rev(trait_method_param) → • trait_method_param, RPAREN / COMMA]
// [619, non_empty_list_commas_rev(trait_method_param) → • non_empty_list_commas_rev(trait_method_param) COMMA trait_method_param, RPAREN / COMMA]
fn yy_state_881(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_UNDERSCORE => Shift(yy_state_120)
    T_AMPER => Shift(yy_state_121)
    NT_qual_ident_ty => Shift(yy_state_123)
    T_ASYNC => Shift(yy_state_129)
    T_LPAREN => Shift(yy_state_134)
    NT_trait_method_param => Shift(yy_state_882)
    NT_non_empty_list_commas_rev_trait_method_param_ => Shift(yy_state_883)
    T_POST_LABEL => Shift(yy_state_887)
    T_LIDENT => Shift(yy_state_890)
    NT_type_ => Shift(yy_state_893)
    NT_non_empty_list_commas_trait_method_param_ => Shift(yy_state_894)
    NT_list_commas_trait_method_param_ => Shift(yy_state_895)
    T_RPAREN => Reduce(0, NT_list_commas_trait_method_param_, yy_action_134)
    _ => Error
  }
}

// [618, non_empty_list_commas_rev(trait_method_param) → trait_method_param •, RPAREN / COMMA]
fn yy_state_882(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_non_empty_list_commas_rev_trait_method_param_, yy_action_209)
}

// [533, option(COMMA) → •, RPAREN]
// [534, option(COMMA) → • COMMA, RPAREN]
// [578, non_empty_list_commas(trait_method_param) → non_empty_list_commas_rev(trait_method_param) • option(COMMA), RPAREN]
// [619, non_empty_list_commas_rev(trait_method_param) → non_empty_list_commas_rev(trait_method_param) • COMMA trait_method_param, RPAREN / COMMA]
fn yy_state_883(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_option_COMMA_ => Shift(yy_state_884)
    T_COMMA => Shift(yy_state_885)
    T_RPAREN => Reduce(0, NT_option_COMMA_, yy_action_181)
    _ => Error
  }
}

// [578, non_empty_list_commas(trait_method_param) → non_empty_list_commas_rev(trait_method_param) option(COMMA) •, RPAREN]
fn yy_state_884(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_non_empty_list_commas_trait_method_param_, yy_action_375)
}

// [189, trait_method_param → • type_, RPAREN / COMMA]
// [190, trait_method_param → • LIDENT COLON type_, RPAREN / COMMA]
// [191, trait_method_param → • POST_LABEL COLON type_, RPAREN / COMMA]
// [192, luident → • LIDENT, RPAREN / COMMA / QUESTION / LBRACKET]
// [193, luident → • UIDENT, RPAREN / COMMA / QUESTION / LBRACKET]
// [198, qual_ident_ty → • luident, RPAREN / COMMA / QUESTION / LBRACKET]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, RPAREN / COMMA / QUESTION / LBRACKET]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, RPAREN / COMMA / QUESTION / LBRACKET]
// [410, type_ → • type_ QUESTION, RPAREN / COMMA / QUESTION]
// [411, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN, RPAREN / COMMA / QUESTION]
// [412, type_ → • ASYNC LPAREN type_ COMMA RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [413, type_ → • ASYNC LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [414, type_ → • LPAREN type_ COMMA RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [415, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [416, type_ → • ASYNC LPAREN RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [417, type_ → • LPAREN RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [418, type_ → • LPAREN type_ RPAREN, RPAREN / COMMA / QUESTION]
// [419, type_ → • ASYNC LPAREN type_ RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [420, type_ → • LPAREN type_ RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [421, type_ → • qual_ident_ty optional_type_arguments, RPAREN / COMMA / QUESTION]
// [422, type_ → • AMPER qual_ident_ty, RPAREN / COMMA / QUESTION]
// [423, type_ → • UNDERSCORE, RPAREN / COMMA / QUESTION]
// [534, option(COMMA) → COMMA •, RPAREN]
// [619, non_empty_list_commas_rev(trait_method_param) → non_empty_list_commas_rev(trait_method_param) COMMA • trait_method_param, RPAREN / COMMA]
fn yy_state_885(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_UNDERSCORE => Shift(yy_state_120)
    T_AMPER => Shift(yy_state_121)
    NT_qual_ident_ty => Shift(yy_state_123)
    T_ASYNC => Shift(yy_state_129)
    T_LPAREN => Shift(yy_state_134)
    NT_trait_method_param => Shift(yy_state_886)
    T_POST_LABEL => Shift(yy_state_887)
    T_LIDENT => Shift(yy_state_890)
    NT_type_ => Shift(yy_state_893)
    T_RPAREN => Reduce(1, NT_option_COMMA_, yy_action_56)
    _ => Error
  }
}

// [619, non_empty_list_commas_rev(trait_method_param) → non_empty_list_commas_rev(trait_method_param) COMMA trait_method_param •, RPAREN / COMMA]
fn yy_state_886(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_non_empty_list_commas_rev_trait_method_param_, yy_action_614)
}

// [191, trait_method_param → POST_LABEL • COLON type_, RPAREN / COMMA]
fn yy_state_887(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_888)
    _ => Error
  }
}

// [191, trait_method_param → POST_LABEL COLON • type_, RPAREN / COMMA]
// [192, luident → • LIDENT, RPAREN / COMMA / QUESTION / LBRACKET]
// [193, luident → • UIDENT, RPAREN / COMMA / QUESTION / LBRACKET]
// [198, qual_ident_ty → • luident, RPAREN / COMMA / QUESTION / LBRACKET]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, RPAREN / COMMA / QUESTION / LBRACKET]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, RPAREN / COMMA / QUESTION / LBRACKET]
// [410, type_ → • type_ QUESTION, RPAREN / COMMA / QUESTION]
// [411, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN, RPAREN / COMMA / QUESTION]
// [412, type_ → • ASYNC LPAREN type_ COMMA RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [413, type_ → • ASYNC LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [414, type_ → • LPAREN type_ COMMA RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [415, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [416, type_ → • ASYNC LPAREN RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [417, type_ → • LPAREN RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [418, type_ → • LPAREN type_ RPAREN, RPAREN / COMMA / QUESTION]
// [419, type_ → • ASYNC LPAREN type_ RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [420, type_ → • LPAREN type_ RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [421, type_ → • qual_ident_ty optional_type_arguments, RPAREN / COMMA / QUESTION]
// [422, type_ → • AMPER qual_ident_ty, RPAREN / COMMA / QUESTION]
// [423, type_ → • UNDERSCORE, RPAREN / COMMA / QUESTION]
fn yy_state_888(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    T_UNDERSCORE => Shift(yy_state_120)
    T_AMPER => Shift(yy_state_121)
    NT_qual_ident_ty => Shift(yy_state_123)
    T_ASYNC => Shift(yy_state_129)
    T_LPAREN => Shift(yy_state_134)
    NT_type_ => Shift(yy_state_889)
    _ => Error
  }
}

// [191, trait_method_param → POST_LABEL COLON type_ •, RPAREN / COMMA]
// [410, type_ → type_ • QUESTION, RPAREN / COMMA / QUESTION]
fn yy_state_889(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_QUESTION => Shift(yy_state_139)
    T_RPAREN | T_COMMA => Reduce(3, NT_trait_method_param, yy_action_513)
    _ => Error
  }
}

// [190, trait_method_param → LIDENT • COLON type_, RPAREN / COMMA]
// [192, luident → LIDENT •, RPAREN / COMMA / QUESTION / LBRACKET]
fn yy_state_890(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_891)
    T_RPAREN | T_COMMA | T_QUESTION | T_LBRACKET => Reduce(1, NT_luident, yy_action_155)
    _ => Error
  }
}

// [190, trait_method_param → LIDENT COLON • type_, RPAREN / COMMA]
// [192, luident → • LIDENT, RPAREN / COMMA / QUESTION / LBRACKET]
// [193, luident → • UIDENT, RPAREN / COMMA / QUESTION / LBRACKET]
// [198, qual_ident_ty → • luident, RPAREN / COMMA / QUESTION / LBRACKET]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, RPAREN / COMMA / QUESTION / LBRACKET]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, RPAREN / COMMA / QUESTION / LBRACKET]
// [410, type_ → • type_ QUESTION, RPAREN / COMMA / QUESTION]
// [411, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN, RPAREN / COMMA / QUESTION]
// [412, type_ → • ASYNC LPAREN type_ COMMA RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [413, type_ → • ASYNC LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [414, type_ → • LPAREN type_ COMMA RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [415, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [416, type_ → • ASYNC LPAREN RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [417, type_ → • LPAREN RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [418, type_ → • LPAREN type_ RPAREN, RPAREN / COMMA / QUESTION]
// [419, type_ → • ASYNC LPAREN type_ RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [420, type_ → • LPAREN type_ RPAREN THIN_ARROW return_type, RPAREN / COMMA / QUESTION]
// [421, type_ → • qual_ident_ty optional_type_arguments, RPAREN / COMMA / QUESTION]
// [422, type_ → • AMPER qual_ident_ty, RPAREN / COMMA / QUESTION]
// [423, type_ → • UNDERSCORE, RPAREN / COMMA / QUESTION]
fn yy_state_891(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    T_UNDERSCORE => Shift(yy_state_120)
    T_AMPER => Shift(yy_state_121)
    NT_qual_ident_ty => Shift(yy_state_123)
    T_ASYNC => Shift(yy_state_129)
    T_LPAREN => Shift(yy_state_134)
    NT_type_ => Shift(yy_state_892)
    _ => Error
  }
}

// [190, trait_method_param → LIDENT COLON type_ •, RPAREN / COMMA]
// [410, type_ → type_ • QUESTION, RPAREN / COMMA / QUESTION]
fn yy_state_892(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_QUESTION => Shift(yy_state_139)
    T_RPAREN | T_COMMA => Reduce(3, NT_trait_method_param, yy_action_243)
    _ => Error
  }
}

// [189, trait_method_param → type_ •, RPAREN / COMMA]
// [410, type_ → type_ • QUESTION, RPAREN / COMMA / QUESTION]
fn yy_state_893(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_QUESTION => Shift(yy_state_139)
    T_RPAREN | T_COMMA => Reduce(1, NT_trait_method_param, yy_action_324)
    _ => Error
  }
}

// [498, list_commas(trait_method_param) → non_empty_list_commas(trait_method_param) •, RPAREN]
fn yy_state_894(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_list_commas_trait_method_param_, yy_action_62)
}

// [187, trait_method_decl → LIDENT optional_bang optional_type_parameters LPAREN list_commas(trait_method_param) • RPAREN option(preceded(THIN_ARROW,return_type)) option(preceded(EQUAL,wildcard)), SEMI / RBRACE]
fn yy_state_895(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RPAREN => Shift(yy_state_896)
    _ => Error
  }
}

// [187, trait_method_decl → LIDENT optional_bang optional_type_parameters LPAREN list_commas(trait_method_param) RPAREN • option(preceded(THIN_ARROW,return_type)) option(preceded(EQUAL,wildcard)), SEMI / RBRACE]
// [460, option(preceded(THIN_ARROW,return_type)) → •, EQUAL / SEMI / RBRACE]
// [461, option(preceded(THIN_ARROW,return_type)) → • THIN_ARROW return_type, EQUAL / SEMI / RBRACE]
fn yy_state_896(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_THIN_ARROW => Shift(yy_state_246)
    NT_option_preceded_THIN_ARROW_return_type__ => Shift(yy_state_897)
    T_EQUAL | T_SEMI | T_RBRACE => Reduce(0, NT_option_preceded_THIN_ARROW_return_type__, yy_action_161)
    _ => Error
  }
}

// [187, trait_method_decl → LIDENT optional_bang optional_type_parameters LPAREN list_commas(trait_method_param) RPAREN option(preceded(THIN_ARROW,return_type)) • option(preceded(EQUAL,wildcard)), SEMI / RBRACE]
// [499, option(preceded(EQUAL,wildcard)) → •, SEMI / RBRACE]
// [500, option(preceded(EQUAL,wildcard)) → • EQUAL wildcard, SEMI / RBRACE]
fn yy_state_897(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EQUAL => Shift(yy_state_898)
    NT_option_preceded_EQUAL_wildcard__ => Shift(yy_state_901)
    T_SEMI | T_RBRACE => Reduce(0, NT_option_preceded_EQUAL_wildcard__, yy_action_222)
    _ => Error
  }
}

// [188, wildcard → • UNDERSCORE, SEMI / RBRACE]
// [500, option(preceded(EQUAL,wildcard)) → EQUAL • wildcard, SEMI / RBRACE]
fn yy_state_898(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_wildcard => Shift(yy_state_899)
    T_UNDERSCORE => Shift(yy_state_900)
    _ => Error
  }
}

// [500, option(preceded(EQUAL,wildcard)) → EQUAL wildcard •, SEMI / RBRACE]
fn yy_state_899(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_option_preceded_EQUAL_wildcard__, yy_action_455)
}

// [188, wildcard → UNDERSCORE •, SEMI / RBRACE]
fn yy_state_900(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_wildcard, yy_action_541)
}

// [187, trait_method_decl → LIDENT optional_bang optional_type_parameters LPAREN list_commas(trait_method_param) RPAREN option(preceded(THIN_ARROW,return_type)) option(preceded(EQUAL,wildcard)) •, SEMI / RBRACE]
fn yy_state_901(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(8, NT_trait_method_decl, yy_action_5)
}

// [565, non_empty_list_semis(trait_method_decl) → non_empty_list_semis_rev(trait_method_decl) •, RBRACE]
fn yy_state_902(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_non_empty_list_semis_trait_method_decl_, yy_action_538)
}

// [478, list_semis(trait_method_decl) → non_empty_list_semis(trait_method_decl) •, RBRACE]
fn yy_state_903(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_list_semis_trait_method_decl_, yy_action_368)
}

// [97, structure_item → TRAIT luident option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) LBRACE list_semis(trait_method_decl) • RBRACE, EOF / SEMI]
fn yy_state_904(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACE => Shift(yy_state_905)
    _ => Error
  }
}

// [97, structure_item → TRAIT luident option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) LBRACE list_semis(trait_method_decl) RBRACE •, EOF / SEMI]
fn yy_state_905(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(6, NT_structure_item, yy_action_70)
}

// [91, structure_item → FNALIAS • func_alias_targets, EOF / SEMI]
// [176, func_alias_targets → • func_alias_target(LIDENT), EOF / SEMI]
// [177, func_alias_targets → • func_alias_type_name(LIDENT,UIDENT) func_alias_target(LIDENT), EOF / SEMI]
// [178, func_alias_targets → • PACKAGE_NAME func_alias_target(DOT_LIDENT), EOF / SEMI]
// [179, func_alias_targets → • PACKAGE_NAME func_alias_type_name(DOT_LIDENT,DOT_UIDENT) func_alias_target(LIDENT), EOF / SEMI]
// [180, func_alias_targets → • option(func_alias_type_name(LIDENT,UIDENT)) LPAREN non_empty_list_commas(func_alias_target(LIDENT)) RPAREN, EOF / SEMI]
// [181, func_alias_targets → • PACKAGE_NAME DOT_LPAREN non_empty_list_commas(func_alias_target(LIDENT)) RPAREN, EOF / SEMI]
// [182, func_alias_targets → • PACKAGE_NAME func_alias_type_name(DOT_LIDENT,DOT_UIDENT) LPAREN non_empty_list_commas(func_alias_target(LIDENT)) RPAREN, EOF / SEMI]
// [484, func_alias_type_name(LIDENT,UIDENT) → • LIDENT COLONCOLON, LIDENT / LPAREN]
// [485, func_alias_type_name(LIDENT,UIDENT) → • UIDENT COLONCOLON, LIDENT / LPAREN]
// [486, func_alias_target(LIDENT) → • LIDENT option(preceded(AS,binder)), EOF / SEMI]
// [490, option(func_alias_type_name(LIDENT,UIDENT)) → •, LPAREN]
// [491, option(func_alias_type_name(LIDENT,UIDENT)) → • func_alias_type_name(LIDENT,UIDENT), LPAREN]
fn yy_state_906(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_907)
    T_LIDENT => Shift(yy_state_909)
    NT_option_func_alias_type_name_LIDENT_UIDENT__ => Shift(yy_state_914)
    T_PACKAGE_NAME => Shift(yy_state_924)
    NT_func_alias_type_name_LIDENT_UIDENT_ => Shift(yy_state_939)
    NT_func_alias_target_LIDENT_ => Shift(yy_state_941)
    NT_func_alias_targets => Shift(yy_state_942)
    T_LPAREN => Reduce(0, NT_option_func_alias_type_name_LIDENT_UIDENT__, yy_action_298)
    _ => Error
  }
}

// [485, func_alias_type_name(LIDENT,UIDENT) → UIDENT • COLONCOLON, LIDENT / LPAREN]
fn yy_state_907(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLONCOLON => Shift(yy_state_908)
    _ => Error
  }
}

// [485, func_alias_type_name(LIDENT,UIDENT) → UIDENT COLONCOLON •, LIDENT / LPAREN]
fn yy_state_908(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_func_alias_type_name_LIDENT_UIDENT_, yy_action_602)
}

// [484, func_alias_type_name(LIDENT,UIDENT) → LIDENT • COLONCOLON, LIDENT / LPAREN]
// [486, func_alias_target(LIDENT) → LIDENT • option(preceded(AS,binder)), EOF / SEMI]
// [572, option(preceded(AS,binder)) → •, EOF / SEMI]
// [573, option(preceded(AS,binder)) → • AS LIDENT, EOF / SEMI]
fn yy_state_909(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AS => Shift(yy_state_910)
    NT_option_preceded_AS_binder__ => Shift(yy_state_912)
    T_COLONCOLON => Shift(yy_state_913)
    T_EOF | T_SEMI => Reduce(0, NT_option_preceded_AS_binder__, yy_action_198)
    _ => Error
  }
}

// [573, option(preceded(AS,binder)) → AS • LIDENT, EOF / RPAREN / COMMA / SEMI]
fn yy_state_910(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_911)
    _ => Error
  }
}

// [573, option(preceded(AS,binder)) → AS LIDENT •, EOF / RPAREN / COMMA / SEMI]
fn yy_state_911(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_option_preceded_AS_binder__, yy_action_378)
}

// [486, func_alias_target(LIDENT) → LIDENT option(preceded(AS,binder)) •, EOF / RPAREN / COMMA / SEMI]
fn yy_state_912(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_func_alias_target_LIDENT_, yy_action_674)
}

// [484, func_alias_type_name(LIDENT,UIDENT) → LIDENT COLONCOLON •, LIDENT / LPAREN]
fn yy_state_913(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_func_alias_type_name_LIDENT_UIDENT_, yy_action_527)
}

// [180, func_alias_targets → option(func_alias_type_name(LIDENT,UIDENT)) • LPAREN non_empty_list_commas(func_alias_target(LIDENT)) RPAREN, EOF / SEMI]
fn yy_state_914(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_915)
    _ => Error
  }
}

// [180, func_alias_targets → option(func_alias_type_name(LIDENT,UIDENT)) LPAREN • non_empty_list_commas(func_alias_target(LIDENT)) RPAREN, EOF / SEMI]
// [486, func_alias_target(LIDENT) → • LIDENT option(preceded(AS,binder)), RPAREN / COMMA]
// [492, non_empty_list_commas(func_alias_target(LIDENT)) → • non_empty_list_commas_rev(func_alias_target(LIDENT)) option(COMMA), RPAREN]
// [574, non_empty_list_commas_rev(func_alias_target(LIDENT)) → • func_alias_target(LIDENT), RPAREN / COMMA]
// [575, non_empty_list_commas_rev(func_alias_target(LIDENT)) → • non_empty_list_commas_rev(func_alias_target(LIDENT)) COMMA func_alias_target(LIDENT), RPAREN / COMMA]
fn yy_state_915(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_func_alias_target_LIDENT_ => Shift(yy_state_916)
    NT_non_empty_list_commas_rev_func_alias_target_LIDENT__ => Shift(yy_state_917)
    T_LIDENT => Shift(yy_state_920)
    NT_non_empty_list_commas_func_alias_target_LIDENT__ => Shift(yy_state_922)
    _ => Error
  }
}

// [574, non_empty_list_commas_rev(func_alias_target(LIDENT)) → func_alias_target(LIDENT) •, RPAREN / COMMA]
fn yy_state_916(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_non_empty_list_commas_rev_func_alias_target_LIDENT__, yy_action_496)
}

// [492, non_empty_list_commas(func_alias_target(LIDENT)) → non_empty_list_commas_rev(func_alias_target(LIDENT)) • option(COMMA), RPAREN]
// [533, option(COMMA) → •, RPAREN]
// [534, option(COMMA) → • COMMA, RPAREN]
// [575, non_empty_list_commas_rev(func_alias_target(LIDENT)) → non_empty_list_commas_rev(func_alias_target(LIDENT)) • COMMA func_alias_target(LIDENT), RPAREN / COMMA]
fn yy_state_917(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COMMA => Shift(yy_state_918)
    NT_option_COMMA_ => Shift(yy_state_921)
    T_RPAREN => Reduce(0, NT_option_COMMA_, yy_action_181)
    _ => Error
  }
}

// [486, func_alias_target(LIDENT) → • LIDENT option(preceded(AS,binder)), RPAREN / COMMA]
// [534, option(COMMA) → COMMA •, RPAREN]
// [575, non_empty_list_commas_rev(func_alias_target(LIDENT)) → non_empty_list_commas_rev(func_alias_target(LIDENT)) COMMA • func_alias_target(LIDENT), RPAREN / COMMA]
fn yy_state_918(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_func_alias_target_LIDENT_ => Shift(yy_state_919)
    T_LIDENT => Shift(yy_state_920)
    T_RPAREN => Reduce(1, NT_option_COMMA_, yy_action_56)
    _ => Error
  }
}

// [575, non_empty_list_commas_rev(func_alias_target(LIDENT)) → non_empty_list_commas_rev(func_alias_target(LIDENT)) COMMA func_alias_target(LIDENT) •, RPAREN / COMMA]
fn yy_state_919(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_non_empty_list_commas_rev_func_alias_target_LIDENT__, yy_action_165)
}

// [486, func_alias_target(LIDENT) → LIDENT • option(preceded(AS,binder)), EOF / RPAREN / COMMA / SEMI]
// [572, option(preceded(AS,binder)) → •, EOF / RPAREN / COMMA / SEMI]
// [573, option(preceded(AS,binder)) → • AS LIDENT, EOF / RPAREN / COMMA / SEMI]
fn yy_state_920(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AS => Shift(yy_state_910)
    NT_option_preceded_AS_binder__ => Shift(yy_state_912)
    T_EOF | T_RPAREN | T_COMMA | T_SEMI => Reduce(0, NT_option_preceded_AS_binder__, yy_action_198)
    _ => Error
  }
}

// [492, non_empty_list_commas(func_alias_target(LIDENT)) → non_empty_list_commas_rev(func_alias_target(LIDENT)) option(COMMA) •, RPAREN]
fn yy_state_921(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_non_empty_list_commas_func_alias_target_LIDENT__, yy_action_616)
}

// [180, func_alias_targets → option(func_alias_type_name(LIDENT,UIDENT)) LPAREN non_empty_list_commas(func_alias_target(LIDENT)) • RPAREN, EOF / SEMI]
fn yy_state_922(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RPAREN => Shift(yy_state_923)
    _ => Error
  }
}

// [180, func_alias_targets → option(func_alias_type_name(LIDENT,UIDENT)) LPAREN non_empty_list_commas(func_alias_target(LIDENT)) RPAREN •, EOF / SEMI]
fn yy_state_923(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_func_alias_targets, yy_action_69)
}

// [178, func_alias_targets → PACKAGE_NAME • func_alias_target(DOT_LIDENT), EOF / SEMI]
// [179, func_alias_targets → PACKAGE_NAME • func_alias_type_name(DOT_LIDENT,DOT_UIDENT) func_alias_target(LIDENT), EOF / SEMI]
// [181, func_alias_targets → PACKAGE_NAME • DOT_LPAREN non_empty_list_commas(func_alias_target(LIDENT)) RPAREN, EOF / SEMI]
// [182, func_alias_targets → PACKAGE_NAME • func_alias_type_name(DOT_LIDENT,DOT_UIDENT) LPAREN non_empty_list_commas(func_alias_target(LIDENT)) RPAREN, EOF / SEMI]
// [487, func_alias_target(DOT_LIDENT) → • DOT_LIDENT option(preceded(AS,binder)), EOF / SEMI]
// [488, func_alias_type_name(DOT_LIDENT,DOT_UIDENT) → • DOT_LIDENT COLONCOLON, LIDENT / LPAREN]
// [489, func_alias_type_name(DOT_LIDENT,DOT_UIDENT) → • DOT_UIDENT COLONCOLON, LIDENT / LPAREN]
fn yy_state_924(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_DOT_UIDENT => Shift(yy_state_925)
    T_DOT_LIDENT => Shift(yy_state_927)
    T_DOT_LPAREN => Shift(yy_state_930)
    NT_func_alias_type_name_DOT_LIDENT_DOT_UIDENT_ => Shift(yy_state_933)
    NT_func_alias_target_DOT_LIDENT_ => Shift(yy_state_938)
    _ => Error
  }
}

// [489, func_alias_type_name(DOT_LIDENT,DOT_UIDENT) → DOT_UIDENT • COLONCOLON, LIDENT / LPAREN]
fn yy_state_925(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLONCOLON => Shift(yy_state_926)
    _ => Error
  }
}

// [489, func_alias_type_name(DOT_LIDENT,DOT_UIDENT) → DOT_UIDENT COLONCOLON •, LIDENT / LPAREN]
fn yy_state_926(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_func_alias_type_name_DOT_LIDENT_DOT_UIDENT_, yy_action_692)
}

// [487, func_alias_target(DOT_LIDENT) → DOT_LIDENT • option(preceded(AS,binder)), EOF / SEMI]
// [488, func_alias_type_name(DOT_LIDENT,DOT_UIDENT) → DOT_LIDENT • COLONCOLON, LIDENT / LPAREN]
// [572, option(preceded(AS,binder)) → •, EOF / SEMI]
// [573, option(preceded(AS,binder)) → • AS LIDENT, EOF / SEMI]
fn yy_state_927(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AS => Shift(yy_state_910)
    T_COLONCOLON => Shift(yy_state_928)
    NT_option_preceded_AS_binder__ => Shift(yy_state_929)
    T_EOF | T_SEMI => Reduce(0, NT_option_preceded_AS_binder__, yy_action_198)
    _ => Error
  }
}

// [488, func_alias_type_name(DOT_LIDENT,DOT_UIDENT) → DOT_LIDENT COLONCOLON •, LIDENT / LPAREN]
fn yy_state_928(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_func_alias_type_name_DOT_LIDENT_DOT_UIDENT_, yy_action_642)
}

// [487, func_alias_target(DOT_LIDENT) → DOT_LIDENT option(preceded(AS,binder)) •, EOF / SEMI]
fn yy_state_929(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_func_alias_target_DOT_LIDENT_, yy_action_16)
}

// [181, func_alias_targets → PACKAGE_NAME DOT_LPAREN • non_empty_list_commas(func_alias_target(LIDENT)) RPAREN, EOF / SEMI]
// [486, func_alias_target(LIDENT) → • LIDENT option(preceded(AS,binder)), RPAREN / COMMA]
// [492, non_empty_list_commas(func_alias_target(LIDENT)) → • non_empty_list_commas_rev(func_alias_target(LIDENT)) option(COMMA), RPAREN]
// [574, non_empty_list_commas_rev(func_alias_target(LIDENT)) → • func_alias_target(LIDENT), RPAREN / COMMA]
// [575, non_empty_list_commas_rev(func_alias_target(LIDENT)) → • non_empty_list_commas_rev(func_alias_target(LIDENT)) COMMA func_alias_target(LIDENT), RPAREN / COMMA]
fn yy_state_930(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_func_alias_target_LIDENT_ => Shift(yy_state_916)
    NT_non_empty_list_commas_rev_func_alias_target_LIDENT__ => Shift(yy_state_917)
    T_LIDENT => Shift(yy_state_920)
    NT_non_empty_list_commas_func_alias_target_LIDENT__ => Shift(yy_state_931)
    _ => Error
  }
}

// [181, func_alias_targets → PACKAGE_NAME DOT_LPAREN non_empty_list_commas(func_alias_target(LIDENT)) • RPAREN, EOF / SEMI]
fn yy_state_931(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RPAREN => Shift(yy_state_932)
    _ => Error
  }
}

// [181, func_alias_targets → PACKAGE_NAME DOT_LPAREN non_empty_list_commas(func_alias_target(LIDENT)) RPAREN •, EOF / SEMI]
fn yy_state_932(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_func_alias_targets, yy_action_405)
}

// [179, func_alias_targets → PACKAGE_NAME func_alias_type_name(DOT_LIDENT,DOT_UIDENT) • func_alias_target(LIDENT), EOF / SEMI]
// [182, func_alias_targets → PACKAGE_NAME func_alias_type_name(DOT_LIDENT,DOT_UIDENT) • LPAREN non_empty_list_commas(func_alias_target(LIDENT)) RPAREN, EOF / SEMI]
// [486, func_alias_target(LIDENT) → • LIDENT option(preceded(AS,binder)), EOF / SEMI]
fn yy_state_933(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_920)
    T_LPAREN => Shift(yy_state_934)
    NT_func_alias_target_LIDENT_ => Shift(yy_state_937)
    _ => Error
  }
}

// [182, func_alias_targets → PACKAGE_NAME func_alias_type_name(DOT_LIDENT,DOT_UIDENT) LPAREN • non_empty_list_commas(func_alias_target(LIDENT)) RPAREN, EOF / SEMI]
// [486, func_alias_target(LIDENT) → • LIDENT option(preceded(AS,binder)), RPAREN / COMMA]
// [492, non_empty_list_commas(func_alias_target(LIDENT)) → • non_empty_list_commas_rev(func_alias_target(LIDENT)) option(COMMA), RPAREN]
// [574, non_empty_list_commas_rev(func_alias_target(LIDENT)) → • func_alias_target(LIDENT), RPAREN / COMMA]
// [575, non_empty_list_commas_rev(func_alias_target(LIDENT)) → • non_empty_list_commas_rev(func_alias_target(LIDENT)) COMMA func_alias_target(LIDENT), RPAREN / COMMA]
fn yy_state_934(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_func_alias_target_LIDENT_ => Shift(yy_state_916)
    NT_non_empty_list_commas_rev_func_alias_target_LIDENT__ => Shift(yy_state_917)
    T_LIDENT => Shift(yy_state_920)
    NT_non_empty_list_commas_func_alias_target_LIDENT__ => Shift(yy_state_935)
    _ => Error
  }
}

// [182, func_alias_targets → PACKAGE_NAME func_alias_type_name(DOT_LIDENT,DOT_UIDENT) LPAREN non_empty_list_commas(func_alias_target(LIDENT)) • RPAREN, EOF / SEMI]
fn yy_state_935(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RPAREN => Shift(yy_state_936)
    _ => Error
  }
}

// [182, func_alias_targets → PACKAGE_NAME func_alias_type_name(DOT_LIDENT,DOT_UIDENT) LPAREN non_empty_list_commas(func_alias_target(LIDENT)) RPAREN •, EOF / SEMI]
fn yy_state_936(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_func_alias_targets, yy_action_540)
}

// [179, func_alias_targets → PACKAGE_NAME func_alias_type_name(DOT_LIDENT,DOT_UIDENT) func_alias_target(LIDENT) •, EOF / SEMI]
fn yy_state_937(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_func_alias_targets, yy_action_248)
}

// [178, func_alias_targets → PACKAGE_NAME func_alias_target(DOT_LIDENT) •, EOF / SEMI]
fn yy_state_938(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_func_alias_targets, yy_action_580)
}

// [177, func_alias_targets → func_alias_type_name(LIDENT,UIDENT) • func_alias_target(LIDENT), EOF / SEMI]
// [486, func_alias_target(LIDENT) → • LIDENT option(preceded(AS,binder)), EOF / SEMI]
// [491, option(func_alias_type_name(LIDENT,UIDENT)) → func_alias_type_name(LIDENT,UIDENT) •, LPAREN]
fn yy_state_939(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_920)
    NT_func_alias_target_LIDENT_ => Shift(yy_state_940)
    T_LPAREN => Reduce(1, NT_option_func_alias_type_name_LIDENT_UIDENT__, yy_action_163)
    _ => Error
  }
}

// [177, func_alias_targets → func_alias_type_name(LIDENT,UIDENT) func_alias_target(LIDENT) •, EOF / SEMI]
fn yy_state_940(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_func_alias_targets, yy_action_330)
}

// [176, func_alias_targets → func_alias_target(LIDENT) •, EOF / SEMI]
fn yy_state_941(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_func_alias_targets, yy_action_18)
}

// [91, structure_item → FNALIAS func_alias_targets •, EOF / SEMI]
fn yy_state_942(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_structure_item, yy_action_130)
}

// [88, structure_item → extern_fun_header • EQUAL STRING, EOF / SEMI]
// [89, structure_item → extern_fun_header • EQUAL non_empty_list(MULTILINE_STRING), EOF / SEMI]
fn yy_state_943(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EQUAL => Shift(yy_state_944)
    _ => Error
  }
}

// [88, structure_item → extern_fun_header EQUAL • STRING, EOF / SEMI]
// [89, structure_item → extern_fun_header EQUAL • non_empty_list(MULTILINE_STRING), EOF / SEMI]
// [472, non_empty_list(MULTILINE_STRING) → • non_empty_list_rev(MULTILINE_STRING), EOF / SEMI]
// [563, non_empty_list_rev(MULTILINE_STRING) → • MULTILINE_STRING, MULTILINE_STRING / EOF / SEMI]
// [564, non_empty_list_rev(MULTILINE_STRING) → • non_empty_list_rev(MULTILINE_STRING) MULTILINE_STRING, MULTILINE_STRING / EOF / SEMI]
fn yy_state_944(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_MULTILINE_STRING => Shift(yy_state_945)
    NT_non_empty_list_rev_MULTILINE_STRING_ => Shift(yy_state_946)
    NT_non_empty_list_MULTILINE_STRING_ => Shift(yy_state_948)
    T_STRING => Shift(yy_state_949)
    _ => Error
  }
}

// [563, non_empty_list_rev(MULTILINE_STRING) → MULTILINE_STRING •, MULTILINE_STRING / EOF / SEMI]
fn yy_state_945(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_non_empty_list_rev_MULTILINE_STRING_, yy_action_223)
}

// [472, non_empty_list(MULTILINE_STRING) → non_empty_list_rev(MULTILINE_STRING) •, EOF / SEMI]
// [564, non_empty_list_rev(MULTILINE_STRING) → non_empty_list_rev(MULTILINE_STRING) • MULTILINE_STRING, MULTILINE_STRING / EOF / SEMI]
fn yy_state_946(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_MULTILINE_STRING => Shift(yy_state_947)
    T_EOF | T_SEMI => Reduce(1, NT_non_empty_list_MULTILINE_STRING_, yy_action_339)
    _ => Error
  }
}

// [564, non_empty_list_rev(MULTILINE_STRING) → non_empty_list_rev(MULTILINE_STRING) MULTILINE_STRING •, MULTILINE_STRING / EOF / SEMI]
fn yy_state_947(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_non_empty_list_rev_MULTILINE_STRING_, yy_action_334)
}

// [89, structure_item → extern_fun_header EQUAL non_empty_list(MULTILINE_STRING) •, EOF / SEMI]
fn yy_state_948(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_structure_item, yy_action_113)
}

// [88, structure_item → extern_fun_header EQUAL STRING •, EOF / SEMI]
fn yy_state_949(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_structure_item, yy_action_535)
}

// [42, block_expr_with_local_types → • LBRACE local_types_and_stmts RBRACE, EOF / SEMI]
// [85, structure_item → fun_header • EQUAL STRING STRING, EOF / SEMI]
// [86, structure_item → fun_header • EQUAL STRING, EOF / SEMI]
// [87, structure_item → fun_header • EQUAL non_empty_list(MULTILINE_STRING), EOF / SEMI]
// [90, structure_item → fun_header • block_expr_with_local_types, EOF / SEMI]
fn yy_state_950(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACE => Shift(yy_state_709)
    NT_block_expr_with_local_types => Shift(yy_state_951)
    T_EQUAL => Shift(yy_state_952)
    _ => Error
  }
}

// [90, structure_item → fun_header block_expr_with_local_types •, EOF / SEMI]
fn yy_state_951(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_structure_item, yy_action_559)
}

// [85, structure_item → fun_header EQUAL • STRING STRING, EOF / SEMI]
// [86, structure_item → fun_header EQUAL • STRING, EOF / SEMI]
// [87, structure_item → fun_header EQUAL • non_empty_list(MULTILINE_STRING), EOF / SEMI]
// [472, non_empty_list(MULTILINE_STRING) → • non_empty_list_rev(MULTILINE_STRING), EOF / SEMI]
// [563, non_empty_list_rev(MULTILINE_STRING) → • MULTILINE_STRING, MULTILINE_STRING / EOF / SEMI]
// [564, non_empty_list_rev(MULTILINE_STRING) → • non_empty_list_rev(MULTILINE_STRING) MULTILINE_STRING, MULTILINE_STRING / EOF / SEMI]
fn yy_state_952(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_MULTILINE_STRING => Shift(yy_state_945)
    NT_non_empty_list_rev_MULTILINE_STRING_ => Shift(yy_state_946)
    NT_non_empty_list_MULTILINE_STRING_ => Shift(yy_state_953)
    T_STRING => Shift(yy_state_954)
    _ => Error
  }
}

// [87, structure_item → fun_header EQUAL non_empty_list(MULTILINE_STRING) •, EOF / SEMI]
fn yy_state_953(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_structure_item, yy_action_239)
}

// [85, structure_item → fun_header EQUAL STRING • STRING, EOF / SEMI]
// [86, structure_item → fun_header EQUAL STRING •, EOF / SEMI]
fn yy_state_954(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_STRING => Shift(yy_state_955)
    T_EOF | T_SEMI => Reduce(3, NT_structure_item, yy_action_350)
    _ => Error
  }
}

// [85, structure_item → fun_header EQUAL STRING STRING •, EOF / SEMI]
fn yy_state_955(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_structure_item, yy_action_634)
}

// [84, structure_item → val_header • EQUAL expr, EOF / SEMI]
fn yy_state_956(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EQUAL => Shift(yy_state_957)
    _ => Error
  }
}

// [84, structure_item → val_header EQUAL • expr, EOF / SEMI]
// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [196, qual_ident_simple_expr → • LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [197, qual_ident_simple_expr → • PACKAGE_NAME DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [204, fn_header_no_binder → • FN optional_bang LBRACE, CHAR / INT / BYTE / BYTES / FLOAT / STRING / LIDENT / UIDENT / FALSE / TRUE / LPAREN / MINUS / LBRACKET / UNDERSCORE / LBRACE / RBRACE / AMPER / PACKAGE_NAME]
// [229, loop_label_colon → • POST_LABEL COLON, WHILE / LOOP / FOR]
// [230, loop_label_colon → •, WHILE / LOOP / FOR]
// [231, while_expr → • loop_label_colon WHILE infix_expr block_expr optional_else, EOF / SEMI]
// [238, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE, EOF / SEMI]
// [239, try_expr → • TRY expr catch_keyword single_pattern_cases RBRACE ELSE LBRACE single_pattern_cases RBRACE, EOF / SEMI]
// [240, if_expr → • IF infix_expr block_expr ELSE block_expr, EOF / SEMI]
// [241, if_expr → • IF infix_expr block_expr ELSE if_expr, EOF / SEMI]
// [242, if_expr → • IF infix_expr block_expr, EOF / SEMI]
// [243, match_expr → • MATCH infix_expr LBRACE non_empty_list_semis(single_pattern_case) RBRACE, EOF / SEMI]
// [244, match_expr → • MATCH infix_expr LBRACE RBRACE, EOF / SEMI]
// [245, loop_expr → • loop_label_colon LOOP non_empty_list_commas_no_trailing(expr) LBRACE list_semis(multi_pattern_case) RBRACE, EOF / SEMI]
// [249, for_expr → • loop_label_colon FOR for_binders SEMI option(infix_expr) SEMI list_commas_no_trailing(separated_pair(binder,EQUAL,expr)) block_expr optional_else, EOF / SEMI]
// [250, for_expr → • loop_label_colon FOR for_binders block_expr optional_else, EOF / SEMI]
// [251, foreach_expr → • loop_label_colon FOR non_empty_list_commas(foreach_binder) IN expr block_expr optional_else, EOF / SEMI]
// [254, expr → • loop_expr, EOF / SEMI]
// [255, expr → • for_expr, EOF / SEMI]
// [256, expr → • foreach_expr, EOF / SEMI]
// [257, expr → • while_expr, EOF / SEMI]
// [258, expr → • try_expr, EOF / SEMI]
// [259, expr → • if_expr, EOF / SEMI]
// [260, expr → • match_expr, EOF / SEMI]
// [261, expr → • pipe_expr, EOF / SEMI]
// [262, pipe_expr → • pipe_expr PIPE infix_expr, EOF / SEMI / PIPE]
// [263, pipe_expr → • infix_expr, EOF / SEMI / PIPE]
// [264, infix_expr → • infix_expr INFIX4 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / MINUS / SEMI / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [265, infix_expr → • infix_expr INFIX3 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / MINUS / SEMI / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [266, infix_expr → • infix_expr INFIX2 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / MINUS / SEMI / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [267, infix_expr → • infix_expr INFIX1 infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / MINUS / SEMI / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [268, infix_expr → • infix_expr PLUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / MINUS / SEMI / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [269, infix_expr → • infix_expr MINUS infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / MINUS / SEMI / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [270, infix_expr → • infix_expr AMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / MINUS / SEMI / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [271, infix_expr → • infix_expr CARET infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / MINUS / SEMI / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [272, infix_expr → • infix_expr BAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / MINUS / SEMI / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [273, infix_expr → • infix_expr AMPERAMPER infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / MINUS / SEMI / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [274, infix_expr → • infix_expr BARBAR infix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / MINUS / SEMI / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [275, infix_expr → • postfix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / MINUS / SEMI / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [276, postfix_expr → • range_expr AS type_name, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / MINUS / SEMI / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [277, postfix_expr → • range_expr IS range_pattern, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / MINUS / SEMI / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [278, postfix_expr → • range_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / MINUS / SEMI / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / PIPE]
// [279, range_expr → • prefix_expr RANGE_EXCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / MINUS / SEMI / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [280, range_expr → • prefix_expr RANGE_INCLUSIVE prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / MINUS / SEMI / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [281, range_expr → • prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / MINUS / SEMI / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / IS]
// [282, prefix_expr → • PLUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / MINUS / SEMI / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [283, prefix_expr → • MINUS prefix_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / MINUS / SEMI / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [284, prefix_expr → • simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / MINUS / SEMI / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [289, constr → • UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [290, constr → • PACKAGE_NAME DOT_UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [291, constr → • type_name COLONCOLON UIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [292, simple_expr → • LBRACE record_defn RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [293, simple_expr → • type_name COLONCOLON LBRACE list_commas_with_trailing_info(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [294, simple_expr → • LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [295, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [296, simple_expr → • LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [297, simple_expr → • type_name COLONCOLON LBRACE DOTDOT expr COMMA list_commas(record_defn_single) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [298, simple_expr → • LBRACE none_empty_list_semis_rev_with_trailing_info(statement) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [299, simple_expr → • LBRACE list_commas(map_expr_elem) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [300, simple_expr → • ASYNC FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [301, simple_expr → • FN optional_bang parameters option(preceded(THIN_ARROW,return_type)) block_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [302, simple_expr → • ASYNC fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [303, simple_expr → • fn_header_no_binder list_semis(multi_pattern_case) RBRACE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [304, simple_expr → • atomic_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [305, simple_expr → • UNDERSCORE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [306, simple_expr → • qual_ident_simple_expr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [307, simple_expr → • constr, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [308, simple_expr → • LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [309, simple_expr → • simple_expr LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [310, simple_expr → • simple_expr EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [311, simple_expr → • simple_expr EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [312, simple_expr → • simple_expr QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [313, simple_expr → • simple_expr LBRACKET expr RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [314, simple_expr → • simple_expr LBRACKET option(expr) COLON option(expr) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [315, simple_expr → • simple_expr DOT_LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [316, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [317, simple_expr → • simple_expr DOT_LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [318, simple_expr → • simple_expr DOT_LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [319, simple_expr → • simple_expr DOTDOT LIDENT LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [320, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [321, simple_expr → • simple_expr DOTDOT LIDENT EXCLAMATION EXCLAMATION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [322, simple_expr → • simple_expr DOTDOT LIDENT QUESTION LPAREN list_commas(argument) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [323, simple_expr → • simple_expr DOT_LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [324, simple_expr → • simple_expr DOT_INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [325, simple_expr → • type_name COLONCOLON LIDENT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [326, simple_expr → • LPAREN list_commas(expr) RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [327, simple_expr → • LPAREN expr COLON type_ RPAREN, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [328, simple_expr → • LBRACKET list_commas(spreadable_elem) RBRACKET, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
// [337, multiline_string → • MULTILINE_STRING, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [338, multiline_string → • MULTILINE_INTERP, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [339, atomic_expr → • simple_constant, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [340, atomic_expr → • non_empty_list(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [341, atomic_expr → • INTERP, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [342, simple_constant → • TRUE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [343, simple_constant → • FALSE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [344, simple_constant → • BYTE, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [345, simple_constant → • BYTES, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [346, simple_constant → • CHAR, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [347, simple_constant → • INT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [348, simple_constant → • FLOAT, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [349, simple_constant → • STRING, INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [530, non_empty_list(multiline_string) → • non_empty_list_rev(multiline_string), INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [596, non_empty_list_rev(multiline_string) → • multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
// [597, non_empty_list_rev(multiline_string) → • non_empty_list_rev(multiline_string) multiline_string, MULTILINE_STRING / MULTILINE_INTERP / INFIX1 / INFIX2 / INFIX3 / INFIX4 / EOF / LPAREN / MINUS / QUESTION / EXCLAMATION / DOT_LIDENT / DOT_INT / SEMI / LBRACKET / PLUS / BAR / AMPERAMPER / AMPER / CARET / BARBAR / AS / PIPE / DOTDOT / RANGE_INCLUSIVE / RANGE_EXCLUSIVE / IS]
fn yy_state_957(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_rev_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_5)
    T_MULTILINE_STRING => Shift(yy_state_6)
    T_STRING => Shift(yy_state_7)
    T_FLOAT => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_luident => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LBRACKET => Shift(yy_state_27)
    T_LPAREN => Shift(yy_state_35)
    NT_constr => Shift(yy_state_40)
    NT_qual_ident_simple_expr => Shift(yy_state_41)
    T_UNDERSCORE => Shift(yy_state_42)
    NT_atomic_expr => Shift(yy_state_43)
    NT_fn_header_no_binder => Shift(yy_state_44)
    T_UIDENT => Shift(yy_state_102)
    T_ASYNC => Shift(yy_state_237)
    T_LBRACE => Shift(yy_state_255)
    NT_type_name => Shift(yy_state_264)
    NT_simple_expr => Shift(yy_state_276)
    T_MINUS => Shift(yy_state_288)
    T_PLUS => Shift(yy_state_290)
    T_FN => Shift(yy_state_292)
    NT_prefix_expr => Shift(yy_state_306)
    T_PACKAGE_NAME => Shift(yy_state_309)
    T_LIDENT => Shift(yy_state_311)
    NT_range_expr => Shift(yy_state_317)
    NT_postfix_expr => Shift(yy_state_322)
    NT_infix_expr => Shift(yy_state_323)
    NT_pipe_expr => Shift(yy_state_346)
    NT_match_expr => Shift(yy_state_349)
    NT_if_expr => Shift(yy_state_350)
    NT_try_expr => Shift(yy_state_351)
    NT_while_expr => Shift(yy_state_352)
    NT_foreach_expr => Shift(yy_state_353)
    NT_for_expr => Shift(yy_state_354)
    NT_loop_expr => Shift(yy_state_355)
    T_MATCH => Shift(yy_state_356)
    T_IF => Shift(yy_state_373)
    T_TRY => Shift(yy_state_379)
    NT_loop_label_colon => Shift(yy_state_396)
    T_POST_LABEL => Shift(yy_state_404)
    NT_expr => Shift(yy_state_958)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_481)
    _ => Error
  }
}

// [84, structure_item → val_header EQUAL expr •, EOF / SEMI]
fn yy_state_958(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_structure_item, yy_action_383)
}

// [83, structure_item → enum_header • LBRACE list_semis(enum_constructor) RBRACE deriving_directive_list, EOF / SEMI]
fn yy_state_959(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACE => Shift(yy_state_960)
    _ => Error
  }
}

// [83, structure_item → enum_header LBRACE • list_semis(enum_constructor) RBRACE deriving_directive_list, EOF / SEMI]
// [429, enum_constructor → • UIDENT option(delimited(LPAREN,non_empty_list_commas(constructor_param),RPAREN)) option(eq_int_tag), SEMI / RBRACE]
// [464, list_semis(enum_constructor) → •, RBRACE]
// [465, list_semis(enum_constructor) → • non_empty_list_semis(enum_constructor), RBRACE]
// [560, non_empty_list_semis(enum_constructor) → • non_empty_list_semis_rev(enum_constructor), RBRACE]
// [611, non_empty_list_semis_rev(enum_constructor) → • non_empty_list_semi_rev_aux(enum_constructor) option(SEMI), RBRACE]
// [631, non_empty_list_semi_rev_aux(enum_constructor) → • enum_constructor, SEMI / RBRACE]
// [632, non_empty_list_semi_rev_aux(enum_constructor) → • non_empty_list_semi_rev_aux(enum_constructor) SEMI enum_constructor, SEMI / RBRACE]
fn yy_state_960(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_enum_constructor => Shift(yy_state_737)
    NT_non_empty_list_semi_rev_aux_enum_constructor_ => Shift(yy_state_738)
    T_UIDENT => Shift(yy_state_742)
    NT_non_empty_list_semis_rev_enum_constructor_ => Shift(yy_state_761)
    NT_non_empty_list_semis_enum_constructor_ => Shift(yy_state_762)
    NT_list_semis_enum_constructor_ => Shift(yy_state_961)
    T_RBRACE => Reduce(0, NT_list_semis_enum_constructor_, yy_action_412)
    _ => Error
  }
}

// [83, structure_item → enum_header LBRACE list_semis(enum_constructor) • RBRACE deriving_directive_list, EOF / SEMI]
fn yy_state_961(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACE => Shift(yy_state_962)
    _ => Error
  }
}

// [83, structure_item → enum_header LBRACE list_semis(enum_constructor) RBRACE • deriving_directive_list, EOF / SEMI]
// [185, deriving_directive_list → •, EOF / SEMI]
// [186, deriving_directive_list → • DERIVE LPAREN list_commas(deriving_directive) RPAREN, EOF / SEMI]
fn yy_state_962(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_DERIVE => Shift(yy_state_719)
    NT_deriving_directive_list => Shift(yy_state_963)
    T_EOF | T_SEMI => Reduce(0, NT_deriving_directive_list, yy_action_147)
    _ => Error
  }
}

// [83, structure_item → enum_header LBRACE list_semis(enum_constructor) RBRACE deriving_directive_list •, EOF / SEMI]
fn yy_state_963(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_structure_item, yy_action_311)
}

// [82, structure_item → struct_header • LBRACE list_semis(record_decl_field) RBRACE deriving_directive_list, EOF / SEMI]
fn yy_state_964(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACE => Shift(yy_state_965)
    _ => Error
  }
}

// [82, structure_item → struct_header LBRACE • list_semis(record_decl_field) RBRACE deriving_directive_list, EOF / SEMI]
// [424, record_decl_field → • option(MUTABLE) LIDENT COLON type_, SEMI / RBRACE]
// [425, record_decl_field → • PRIV option(MUTABLE) LIDENT COLON type_, SEMI / RBRACE]
// [426, record_decl_field → • PUB pub_attr option(MUTABLE) LIDENT COLON type_, SEMI / RBRACE]
// [462, list_semis(record_decl_field) → •, RBRACE]
// [463, list_semis(record_decl_field) → • non_empty_list_semis(record_decl_field), RBRACE]
// [538, option(MUTABLE) → •, LIDENT]
// [539, option(MUTABLE) → • MUTABLE, LIDENT]
// [559, non_empty_list_semis(record_decl_field) → • non_empty_list_semis_rev(record_decl_field), RBRACE]
// [610, non_empty_list_semis_rev(record_decl_field) → • non_empty_list_semi_rev_aux(record_decl_field) option(SEMI), RBRACE]
// [629, non_empty_list_semi_rev_aux(record_decl_field) → • record_decl_field, SEMI / RBRACE]
// [630, non_empty_list_semi_rev_aux(record_decl_field) → • non_empty_list_semi_rev_aux(record_decl_field) SEMI record_decl_field, SEMI / RBRACE]
fn yy_state_965(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_MUTABLE => Shift(yy_state_751)
    NT_record_decl_field => Shift(yy_state_769)
    NT_non_empty_list_semi_rev_aux_record_decl_field_ => Shift(yy_state_770)
    T_PUB => Shift(yy_state_774)
    T_PRIV => Shift(yy_state_785)
    NT_option_MUTABLE_ => Shift(yy_state_790)
    NT_non_empty_list_semis_rev_record_decl_field_ => Shift(yy_state_794)
    NT_non_empty_list_semis_record_decl_field_ => Shift(yy_state_795)
    NT_list_semis_record_decl_field_ => Shift(yy_state_966)
    T_RBRACE => Reduce(0, NT_list_semis_record_decl_field_, yy_action_341)
    T_LIDENT => Reduce(0, NT_option_MUTABLE_, yy_action_224)
    _ => Error
  }
}

// [82, structure_item → struct_header LBRACE list_semis(record_decl_field) • RBRACE deriving_directive_list, EOF / SEMI]
fn yy_state_966(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACE => Shift(yy_state_967)
    _ => Error
  }
}

// [82, structure_item → struct_header LBRACE list_semis(record_decl_field) RBRACE • deriving_directive_list, EOF / SEMI]
// [185, deriving_directive_list → •, EOF / SEMI]
// [186, deriving_directive_list → • DERIVE LPAREN list_commas(deriving_directive) RPAREN, EOF / SEMI]
fn yy_state_967(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_DERIVE => Shift(yy_state_719)
    NT_deriving_directive_list => Shift(yy_state_968)
    T_EOF | T_SEMI => Reduce(0, NT_deriving_directive_list, yy_action_147)
    _ => Error
  }
}

// [82, structure_item → struct_header LBRACE list_semis(record_decl_field) RBRACE deriving_directive_list •, EOF / SEMI]
fn yy_state_968(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_structure_item, yy_action_452)
}

// [81, structure_item → type_alias_header • EQUAL type_ deriving_directive_list, EOF / SEMI]
fn yy_state_969(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EQUAL => Shift(yy_state_970)
    _ => Error
  }
}

// [81, structure_item → type_alias_header EQUAL • type_ deriving_directive_list, EOF / SEMI]
// [192, luident → • LIDENT, EOF / DERIVE / QUESTION / SEMI / LBRACKET]
// [193, luident → • UIDENT, EOF / DERIVE / QUESTION / SEMI / LBRACKET]
// [198, qual_ident_ty → • luident, EOF / DERIVE / QUESTION / SEMI / LBRACKET]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, EOF / DERIVE / QUESTION / SEMI / LBRACKET]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, EOF / DERIVE / QUESTION / SEMI / LBRACKET]
// [410, type_ → • type_ QUESTION, EOF / DERIVE / QUESTION / SEMI]
// [411, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN, EOF / DERIVE / QUESTION / SEMI]
// [412, type_ → • ASYNC LPAREN type_ COMMA RPAREN THIN_ARROW return_type, EOF / DERIVE / QUESTION / SEMI]
// [413, type_ → • ASYNC LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, EOF / DERIVE / QUESTION / SEMI]
// [414, type_ → • LPAREN type_ COMMA RPAREN THIN_ARROW return_type, EOF / DERIVE / QUESTION / SEMI]
// [415, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, EOF / DERIVE / QUESTION / SEMI]
// [416, type_ → • ASYNC LPAREN RPAREN THIN_ARROW return_type, EOF / DERIVE / QUESTION / SEMI]
// [417, type_ → • LPAREN RPAREN THIN_ARROW return_type, EOF / DERIVE / QUESTION / SEMI]
// [418, type_ → • LPAREN type_ RPAREN, EOF / DERIVE / QUESTION / SEMI]
// [419, type_ → • ASYNC LPAREN type_ RPAREN THIN_ARROW return_type, EOF / DERIVE / QUESTION / SEMI]
// [420, type_ → • LPAREN type_ RPAREN THIN_ARROW return_type, EOF / DERIVE / QUESTION / SEMI]
// [421, type_ → • qual_ident_ty optional_type_arguments, EOF / DERIVE / QUESTION / SEMI]
// [422, type_ → • AMPER qual_ident_ty, EOF / DERIVE / QUESTION / SEMI]
// [423, type_ → • UNDERSCORE, EOF / DERIVE / QUESTION / SEMI]
fn yy_state_970(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    T_UNDERSCORE => Shift(yy_state_120)
    T_AMPER => Shift(yy_state_121)
    NT_qual_ident_ty => Shift(yy_state_123)
    T_ASYNC => Shift(yy_state_129)
    T_LPAREN => Shift(yy_state_134)
    NT_type_ => Shift(yy_state_971)
    _ => Error
  }
}

// [81, structure_item → type_alias_header EQUAL type_ • deriving_directive_list, EOF / SEMI]
// [185, deriving_directive_list → •, EOF / SEMI]
// [186, deriving_directive_list → • DERIVE LPAREN list_commas(deriving_directive) RPAREN, EOF / SEMI]
// [410, type_ → type_ • QUESTION, EOF / DERIVE / QUESTION / SEMI]
fn yy_state_971(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_QUESTION => Shift(yy_state_139)
    T_DERIVE => Shift(yy_state_719)
    NT_deriving_directive_list => Shift(yy_state_972)
    T_EOF | T_SEMI => Reduce(0, NT_deriving_directive_list, yy_action_147)
    _ => Error
  }
}

// [81, structure_item → type_alias_header EQUAL type_ deriving_directive_list •, EOF / SEMI]
fn yy_state_972(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_structure_item, yy_action_282)
}

// [79, structure_item → type_header_bang • option(type_) deriving_directive_list, EOF / SEMI]
// [80, structure_item → type_header_bang • LBRACE list_semis(enum_constructor) RBRACE deriving_directive_list, EOF / SEMI]
// [192, luident → • LIDENT, EOF / DERIVE / QUESTION / SEMI / LBRACKET]
// [193, luident → • UIDENT, EOF / DERIVE / QUESTION / SEMI / LBRACKET]
// [198, qual_ident_ty → • luident, EOF / DERIVE / QUESTION / SEMI / LBRACKET]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, EOF / DERIVE / QUESTION / SEMI / LBRACKET]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, EOF / DERIVE / QUESTION / SEMI / LBRACKET]
// [410, type_ → • type_ QUESTION, EOF / DERIVE / QUESTION / SEMI]
// [411, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN, EOF / DERIVE / QUESTION / SEMI]
// [412, type_ → • ASYNC LPAREN type_ COMMA RPAREN THIN_ARROW return_type, EOF / DERIVE / QUESTION / SEMI]
// [413, type_ → • ASYNC LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, EOF / DERIVE / QUESTION / SEMI]
// [414, type_ → • LPAREN type_ COMMA RPAREN THIN_ARROW return_type, EOF / DERIVE / QUESTION / SEMI]
// [415, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, EOF / DERIVE / QUESTION / SEMI]
// [416, type_ → • ASYNC LPAREN RPAREN THIN_ARROW return_type, EOF / DERIVE / QUESTION / SEMI]
// [417, type_ → • LPAREN RPAREN THIN_ARROW return_type, EOF / DERIVE / QUESTION / SEMI]
// [418, type_ → • LPAREN type_ RPAREN, EOF / DERIVE / QUESTION / SEMI]
// [419, type_ → • ASYNC LPAREN type_ RPAREN THIN_ARROW return_type, EOF / DERIVE / QUESTION / SEMI]
// [420, type_ → • LPAREN type_ RPAREN THIN_ARROW return_type, EOF / DERIVE / QUESTION / SEMI]
// [421, type_ → • qual_ident_ty optional_type_arguments, EOF / DERIVE / QUESTION / SEMI]
// [422, type_ → • AMPER qual_ident_ty, EOF / DERIVE / QUESTION / SEMI]
// [423, type_ → • UNDERSCORE, EOF / DERIVE / QUESTION / SEMI]
// [470, option(type_) → •, EOF / DERIVE / SEMI]
// [471, option(type_) → • type_, EOF / DERIVE / SEMI]
fn yy_state_973(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    T_UNDERSCORE => Shift(yy_state_120)
    T_AMPER => Shift(yy_state_121)
    NT_qual_ident_ty => Shift(yy_state_123)
    T_ASYNC => Shift(yy_state_129)
    T_LPAREN => Shift(yy_state_134)
    NT_type_ => Shift(yy_state_974)
    T_LBRACE => Shift(yy_state_975)
    NT_option_type__ => Shift(yy_state_979)
    T_EOF | T_DERIVE | T_SEMI => Reduce(0, NT_option_type__, yy_action_397)
    _ => Error
  }
}

// [410, type_ → type_ • QUESTION, EOF / DERIVE / QUESTION / SEMI]
// [471, option(type_) → type_ •, EOF / DERIVE / SEMI]
fn yy_state_974(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_QUESTION => Shift(yy_state_139)
    T_EOF | T_DERIVE | T_SEMI => Reduce(1, NT_option_type__, yy_action_424)
    _ => Error
  }
}

// [80, structure_item → type_header_bang LBRACE • list_semis(enum_constructor) RBRACE deriving_directive_list, EOF / SEMI]
// [429, enum_constructor → • UIDENT option(delimited(LPAREN,non_empty_list_commas(constructor_param),RPAREN)) option(eq_int_tag), SEMI / RBRACE]
// [464, list_semis(enum_constructor) → •, RBRACE]
// [465, list_semis(enum_constructor) → • non_empty_list_semis(enum_constructor), RBRACE]
// [560, non_empty_list_semis(enum_constructor) → • non_empty_list_semis_rev(enum_constructor), RBRACE]
// [611, non_empty_list_semis_rev(enum_constructor) → • non_empty_list_semi_rev_aux(enum_constructor) option(SEMI), RBRACE]
// [631, non_empty_list_semi_rev_aux(enum_constructor) → • enum_constructor, SEMI / RBRACE]
// [632, non_empty_list_semi_rev_aux(enum_constructor) → • non_empty_list_semi_rev_aux(enum_constructor) SEMI enum_constructor, SEMI / RBRACE]
fn yy_state_975(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_enum_constructor => Shift(yy_state_737)
    NT_non_empty_list_semi_rev_aux_enum_constructor_ => Shift(yy_state_738)
    T_UIDENT => Shift(yy_state_742)
    NT_non_empty_list_semis_rev_enum_constructor_ => Shift(yy_state_761)
    NT_non_empty_list_semis_enum_constructor_ => Shift(yy_state_762)
    NT_list_semis_enum_constructor_ => Shift(yy_state_976)
    T_RBRACE => Reduce(0, NT_list_semis_enum_constructor_, yy_action_412)
    _ => Error
  }
}

// [80, structure_item → type_header_bang LBRACE list_semis(enum_constructor) • RBRACE deriving_directive_list, EOF / SEMI]
fn yy_state_976(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACE => Shift(yy_state_977)
    _ => Error
  }
}

// [80, structure_item → type_header_bang LBRACE list_semis(enum_constructor) RBRACE • deriving_directive_list, EOF / SEMI]
// [185, deriving_directive_list → •, EOF / SEMI]
// [186, deriving_directive_list → • DERIVE LPAREN list_commas(deriving_directive) RPAREN, EOF / SEMI]
fn yy_state_977(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_DERIVE => Shift(yy_state_719)
    NT_deriving_directive_list => Shift(yy_state_978)
    T_EOF | T_SEMI => Reduce(0, NT_deriving_directive_list, yy_action_147)
    _ => Error
  }
}

// [80, structure_item → type_header_bang LBRACE list_semis(enum_constructor) RBRACE deriving_directive_list •, EOF / SEMI]
fn yy_state_978(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_structure_item, yy_action_667)
}

// [79, structure_item → type_header_bang option(type_) • deriving_directive_list, EOF / SEMI]
// [185, deriving_directive_list → •, EOF / SEMI]
// [186, deriving_directive_list → • DERIVE LPAREN list_commas(deriving_directive) RPAREN, EOF / SEMI]
fn yy_state_979(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_DERIVE => Shift(yy_state_719)
    NT_deriving_directive_list => Shift(yy_state_980)
    T_EOF | T_SEMI => Reduce(0, NT_deriving_directive_list, yy_action_147)
    _ => Error
  }
}

// [79, structure_item → type_header_bang option(type_) deriving_directive_list •, EOF / SEMI]
fn yy_state_980(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_structure_item, yy_action_435)
}

// [71, structure_item → type_header • deriving_directive_list, EOF / SEMI]
// [78, structure_item → type_header • type_ deriving_directive_list, EOF / SEMI]
// [185, deriving_directive_list → •, EOF / SEMI]
// [186, deriving_directive_list → • DERIVE LPAREN list_commas(deriving_directive) RPAREN, EOF / SEMI]
// [192, luident → • LIDENT, EOF / DERIVE / QUESTION / SEMI / LBRACKET]
// [193, luident → • UIDENT, EOF / DERIVE / QUESTION / SEMI / LBRACKET]
// [198, qual_ident_ty → • luident, EOF / DERIVE / QUESTION / SEMI / LBRACKET]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, EOF / DERIVE / QUESTION / SEMI / LBRACKET]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, EOF / DERIVE / QUESTION / SEMI / LBRACKET]
// [410, type_ → • type_ QUESTION, EOF / DERIVE / QUESTION / SEMI]
// [411, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN, EOF / DERIVE / QUESTION / SEMI]
// [412, type_ → • ASYNC LPAREN type_ COMMA RPAREN THIN_ARROW return_type, EOF / DERIVE / QUESTION / SEMI]
// [413, type_ → • ASYNC LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, EOF / DERIVE / QUESTION / SEMI]
// [414, type_ → • LPAREN type_ COMMA RPAREN THIN_ARROW return_type, EOF / DERIVE / QUESTION / SEMI]
// [415, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, EOF / DERIVE / QUESTION / SEMI]
// [416, type_ → • ASYNC LPAREN RPAREN THIN_ARROW return_type, EOF / DERIVE / QUESTION / SEMI]
// [417, type_ → • LPAREN RPAREN THIN_ARROW return_type, EOF / DERIVE / QUESTION / SEMI]
// [418, type_ → • LPAREN type_ RPAREN, EOF / DERIVE / QUESTION / SEMI]
// [419, type_ → • ASYNC LPAREN type_ RPAREN THIN_ARROW return_type, EOF / DERIVE / QUESTION / SEMI]
// [420, type_ → • LPAREN type_ RPAREN THIN_ARROW return_type, EOF / DERIVE / QUESTION / SEMI]
// [421, type_ → • qual_ident_ty optional_type_arguments, EOF / DERIVE / QUESTION / SEMI]
// [422, type_ → • AMPER qual_ident_ty, EOF / DERIVE / QUESTION / SEMI]
// [423, type_ → • UNDERSCORE, EOF / DERIVE / QUESTION / SEMI]
fn yy_state_981(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    T_UNDERSCORE => Shift(yy_state_120)
    T_AMPER => Shift(yy_state_121)
    NT_qual_ident_ty => Shift(yy_state_123)
    T_ASYNC => Shift(yy_state_129)
    T_LPAREN => Shift(yy_state_134)
    T_DERIVE => Shift(yy_state_719)
    NT_type_ => Shift(yy_state_982)
    NT_deriving_directive_list => Shift(yy_state_984)
    T_EOF | T_SEMI => Reduce(0, NT_deriving_directive_list, yy_action_147)
    _ => Error
  }
}

// [78, structure_item → type_header type_ • deriving_directive_list, EOF / SEMI]
// [185, deriving_directive_list → •, EOF / SEMI]
// [186, deriving_directive_list → • DERIVE LPAREN list_commas(deriving_directive) RPAREN, EOF / SEMI]
// [410, type_ → type_ • QUESTION, EOF / DERIVE / QUESTION / SEMI]
fn yy_state_982(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_QUESTION => Shift(yy_state_139)
    T_DERIVE => Shift(yy_state_719)
    NT_deriving_directive_list => Shift(yy_state_983)
    T_EOF | T_SEMI => Reduce(0, NT_deriving_directive_list, yy_action_147)
    _ => Error
  }
}

// [78, structure_item → type_header type_ deriving_directive_list •, EOF / SEMI]
fn yy_state_983(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_structure_item, yy_action_338)
}

// [71, structure_item → type_header deriving_directive_list •, EOF / SEMI]
fn yy_state_984(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_structure_item, yy_action_127)
}

// [58, val_header → CONST • UIDENT, EQUAL]
// [59, val_header → CONST • UIDENT COLON type_, EQUAL]
fn yy_state_985(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_986)
    _ => Error
  }
}

// [58, val_header → CONST UIDENT •, EQUAL]
// [59, val_header → CONST UIDENT • COLON type_, EQUAL]
fn yy_state_986(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_987)
    T_EQUAL => Reduce(2, NT_val_header, yy_action_592)
    _ => Error
  }
}

// [59, val_header → CONST UIDENT COLON • type_, EQUAL]
// [192, luident → • LIDENT, EQUAL / QUESTION / LBRACKET]
// [193, luident → • UIDENT, EQUAL / QUESTION / LBRACKET]
// [198, qual_ident_ty → • luident, EQUAL / QUESTION / LBRACKET]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, EQUAL / QUESTION / LBRACKET]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, EQUAL / QUESTION / LBRACKET]
// [410, type_ → • type_ QUESTION, EQUAL / QUESTION]
// [411, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN, EQUAL / QUESTION]
// [412, type_ → • ASYNC LPAREN type_ COMMA RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [413, type_ → • ASYNC LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [414, type_ → • LPAREN type_ COMMA RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [415, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [416, type_ → • ASYNC LPAREN RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [417, type_ → • LPAREN RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [418, type_ → • LPAREN type_ RPAREN, EQUAL / QUESTION]
// [419, type_ → • ASYNC LPAREN type_ RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [420, type_ → • LPAREN type_ RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [421, type_ → • qual_ident_ty optional_type_arguments, EQUAL / QUESTION]
// [422, type_ → • AMPER qual_ident_ty, EQUAL / QUESTION]
// [423, type_ → • UNDERSCORE, EQUAL / QUESTION]
fn yy_state_987(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    T_UNDERSCORE => Shift(yy_state_120)
    T_AMPER => Shift(yy_state_121)
    NT_qual_ident_ty => Shift(yy_state_123)
    T_ASYNC => Shift(yy_state_129)
    T_LPAREN => Shift(yy_state_134)
    NT_type_ => Shift(yy_state_988)
    _ => Error
  }
}

// [59, val_header → CONST UIDENT COLON type_ •, EQUAL]
// [410, type_ → type_ • QUESTION, EQUAL / QUESTION]
fn yy_state_988(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_QUESTION => Shift(yy_state_139)
    T_EQUAL => Reduce(4, NT_val_header, yy_action_79)
    _ => Error
  }
}

// [46, val_header → LET • LIDENT, EQUAL]
// [47, val_header → LET • LIDENT COLON type_, EQUAL]
fn yy_state_989(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_990)
    _ => Error
  }
}

// [46, val_header → LET LIDENT •, EQUAL]
// [47, val_header → LET LIDENT • COLON type_, EQUAL]
fn yy_state_990(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_991)
    T_EQUAL => Reduce(2, NT_val_header, yy_action_266)
    _ => Error
  }
}

// [47, val_header → LET LIDENT COLON • type_, EQUAL]
// [192, luident → • LIDENT, EQUAL / QUESTION / LBRACKET]
// [193, luident → • UIDENT, EQUAL / QUESTION / LBRACKET]
// [198, qual_ident_ty → • luident, EQUAL / QUESTION / LBRACKET]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, EQUAL / QUESTION / LBRACKET]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, EQUAL / QUESTION / LBRACKET]
// [410, type_ → • type_ QUESTION, EQUAL / QUESTION]
// [411, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN, EQUAL / QUESTION]
// [412, type_ → • ASYNC LPAREN type_ COMMA RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [413, type_ → • ASYNC LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [414, type_ → • LPAREN type_ COMMA RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [415, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [416, type_ → • ASYNC LPAREN RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [417, type_ → • LPAREN RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [418, type_ → • LPAREN type_ RPAREN, EQUAL / QUESTION]
// [419, type_ → • ASYNC LPAREN type_ RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [420, type_ → • LPAREN type_ RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [421, type_ → • qual_ident_ty optional_type_arguments, EQUAL / QUESTION]
// [422, type_ → • AMPER qual_ident_ty, EQUAL / QUESTION]
// [423, type_ → • UNDERSCORE, EQUAL / QUESTION]
fn yy_state_991(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    T_UNDERSCORE => Shift(yy_state_120)
    T_AMPER => Shift(yy_state_121)
    NT_qual_ident_ty => Shift(yy_state_123)
    T_ASYNC => Shift(yy_state_129)
    T_LPAREN => Shift(yy_state_134)
    NT_type_ => Shift(yy_state_992)
    _ => Error
  }
}

// [47, val_header → LET LIDENT COLON type_ •, EQUAL]
// [410, type_ → type_ • QUESTION, EQUAL / QUESTION]
fn yy_state_992(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_QUESTION => Shift(yy_state_139)
    T_EQUAL => Reduce(4, NT_val_header, yy_action_279)
    _ => Error
  }
}

// [32, extern_fun_header → EXTERN • STRING FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL]
// [72, structure_item → EXTERN • TYPE luident optional_type_parameters_no_constraints deriving_directive_list, EOF / SEMI]
fn yy_state_993(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_TYPE => Shift(yy_state_994)
    T_STRING => Shift(yy_state_998)
    _ => Error
  }
}

// [72, structure_item → EXTERN TYPE • luident optional_type_parameters_no_constraints deriving_directive_list, EOF / SEMI]
// [192, luident → • LIDENT, EOF / DERIVE / SEMI / LBRACKET]
// [193, luident → • UIDENT, EOF / DERIVE / SEMI / LBRACKET]
fn yy_state_994(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    NT_luident => Shift(yy_state_995)
    _ => Error
  }
}

// [13, optional_type_parameters_no_constraints → • option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)), EOF / DERIVE / SEMI]
// [72, structure_item → EXTERN TYPE luident • optional_type_parameters_no_constraints deriving_directive_list, EOF / SEMI]
// [453, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → •, EOF / DERIVE / SEMI]
// [454, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → • LBRACKET non_empty_list_commas(id(type_decl_binder)) RBRACKET, EOF / DERIVE / SEMI]
fn yy_state_995(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_676)
    NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__ => Shift(yy_state_687)
    NT_optional_type_parameters_no_constraints => Shift(yy_state_996)
    T_EOF | T_DERIVE | T_SEMI => Reduce(0, NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__, yy_action_613)
    _ => Error
  }
}

// [72, structure_item → EXTERN TYPE luident optional_type_parameters_no_constraints • deriving_directive_list, EOF / SEMI]
// [185, deriving_directive_list → •, EOF / SEMI]
// [186, deriving_directive_list → • DERIVE LPAREN list_commas(deriving_directive) RPAREN, EOF / SEMI]
fn yy_state_996(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_DERIVE => Shift(yy_state_719)
    NT_deriving_directive_list => Shift(yy_state_997)
    T_EOF | T_SEMI => Reduce(0, NT_deriving_directive_list, yy_action_147)
    _ => Error
  }
}

// [72, structure_item → EXTERN TYPE luident optional_type_parameters_no_constraints deriving_directive_list •, EOF / SEMI]
fn yy_state_997(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_structure_item, yy_action_611)
}

// [32, extern_fun_header → EXTERN STRING • FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL]
fn yy_state_998(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_FN => Shift(yy_state_999)
    _ => Error
  }
}

// [15, fun_binder → • type_name COLONCOLON LIDENT, EQUAL / LPAREN / EXCLAMATION / LBRACKET / THIN_ARROW]
// [16, fun_binder → • LIDENT, EQUAL / LPAREN / EXCLAMATION / LBRACKET / THIN_ARROW]
// [32, extern_fun_header → EXTERN STRING FN • fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL]
// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
fn yy_state_999(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    NT_qual_ident_ty => Shift(yy_state_26)
    NT_fun_binder => Shift(yy_state_1000)
    T_LIDENT => Shift(yy_state_1005)
    NT_type_name => Shift(yy_state_1006)
    _ => Error
  }
}

// [32, extern_fun_header → EXTERN STRING FN fun_binder • optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL]
// [201, optional_bang → • EXCLAMATION, EQUAL / LPAREN / LBRACKET / THIN_ARROW]
// [202, optional_bang → •, EQUAL / LPAREN / LBRACKET / THIN_ARROW]
fn yy_state_1000(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EXCLAMATION => Shift(yy_state_535)
    NT_optional_bang => Shift(yy_state_1001)
    T_EQUAL | T_LPAREN | T_LBRACKET | T_THIN_ARROW => Reduce(0, NT_optional_bang, yy_action_662)
    _ => Error
  }
}

// [11, type_parameters → • LBRACKET non_empty_list_commas(id(tvar_binder)) RBRACKET, EQUAL / LPAREN / THIN_ARROW]
// [12, optional_type_parameters → • option(type_parameters), EQUAL / LPAREN / THIN_ARROW]
// [32, extern_fun_header → EXTERN STRING FN fun_binder optional_bang • optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL]
// [450, option(type_parameters) → •, EQUAL / LPAREN / THIN_ARROW]
// [451, option(type_parameters) → • type_parameters, EQUAL / LPAREN / THIN_ARROW]
fn yy_state_1001(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_type_parameters => Shift(yy_state_697)
    NT_option_type_parameters_ => Shift(yy_state_807)
    T_LBRACKET => Shift(yy_state_808)
    NT_optional_type_parameters => Shift(yy_state_1002)
    T_EQUAL | T_LPAREN | T_THIN_ARROW => Reduce(0, NT_option_type_parameters_, yy_action_515)
    _ => Error
  }
}

// [10, parameters → • LPAREN list_commas(parameter) RPAREN, EQUAL / THIN_ARROW]
// [32, extern_fun_header → EXTERN STRING FN fun_binder optional_bang optional_type_parameters • option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL]
// [458, option(parameters) → •, EQUAL / THIN_ARROW]
// [459, option(parameters) → • parameters, EQUAL / THIN_ARROW]
fn yy_state_1002(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_298)
    NT_parameters => Shift(yy_state_828)
    NT_option_parameters_ => Shift(yy_state_1003)
    T_EQUAL | T_THIN_ARROW => Reduce(0, NT_option_parameters_, yy_action_287)
    _ => Error
  }
}

// [32, extern_fun_header → EXTERN STRING FN fun_binder optional_bang optional_type_parameters option(parameters) • option(preceded(THIN_ARROW,return_type)), EQUAL]
// [460, option(preceded(THIN_ARROW,return_type)) → •, EQUAL]
// [461, option(preceded(THIN_ARROW,return_type)) → • THIN_ARROW return_type, EQUAL]
fn yy_state_1003(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_THIN_ARROW => Shift(yy_state_246)
    NT_option_preceded_THIN_ARROW_return_type__ => Shift(yy_state_1004)
    T_EQUAL => Reduce(0, NT_option_preceded_THIN_ARROW_return_type__, yy_action_161)
    _ => Error
  }
}

// [32, extern_fun_header → EXTERN STRING FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)) •, EQUAL]
fn yy_state_1004(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(8, NT_extern_fun_header, yy_action_360)
}

// [16, fun_binder → LIDENT •, EQUAL / LPAREN / EXCLAMATION / LBRACKET / LBRACE / THIN_ARROW]
// [192, luident → LIDENT •, COLONCOLON]
fn yy_state_1005(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EQUAL | T_LPAREN | T_EXCLAMATION | T_LBRACKET | T_LBRACE | T_THIN_ARROW => Reduce(1, NT_fun_binder, yy_action_494)
    T_COLONCOLON => Reduce(1, NT_luident, yy_action_155)
    _ => Error
  }
}

// [15, fun_binder → type_name • COLONCOLON LIDENT, EQUAL / LPAREN / EXCLAMATION / LBRACKET / LBRACE / THIN_ARROW]
fn yy_state_1006(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLONCOLON => Shift(yy_state_1007)
    _ => Error
  }
}

// [15, fun_binder → type_name COLONCOLON • LIDENT, EQUAL / LPAREN / EXCLAMATION / LBRACKET / LBRACE / THIN_ARROW]
fn yy_state_1007(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_1008)
    _ => Error
  }
}

// [15, fun_binder → type_name COLONCOLON LIDENT •, EQUAL / LPAREN / EXCLAMATION / LBRACKET / LBRACE / THIN_ARROW]
fn yy_state_1008(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_fun_binder, yy_action_236)
}

// [23, fun_header → non_empty_list(attribute) • ASYNC FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [24, fun_header → non_empty_list(attribute) • FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [25, fun_header → non_empty_list(attribute) • PRIV ASYNC FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [26, fun_header → non_empty_list(attribute) • PRIV FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [27, fun_header → non_empty_list(attribute) • PUB pub_attr ASYNC FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [28, fun_header → non_empty_list(attribute) • PUB pub_attr FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [35, extern_fun_header → non_empty_list(attribute) • EXTERN STRING FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL]
// [36, extern_fun_header → non_empty_list(attribute) • PRIV EXTERN STRING FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL]
// [37, extern_fun_header → non_empty_list(attribute) • PUB pub_attr EXTERN STRING FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL]
// [52, val_header → non_empty_list(attribute) • LET LIDENT, EQUAL]
// [53, val_header → non_empty_list(attribute) • LET LIDENT COLON type_, EQUAL]
// [54, val_header → non_empty_list(attribute) • PRIV LET LIDENT, EQUAL]
// [55, val_header → non_empty_list(attribute) • PRIV LET LIDENT COLON type_, EQUAL]
// [56, val_header → non_empty_list(attribute) • PUB pub_attr LET LIDENT, EQUAL]
// [57, val_header → non_empty_list(attribute) • PUB pub_attr LET LIDENT COLON type_, EQUAL]
// [64, val_header → non_empty_list(attribute) • CONST UIDENT, EQUAL]
// [65, val_header → non_empty_list(attribute) • CONST UIDENT COLON type_, EQUAL]
// [66, val_header → non_empty_list(attribute) • PRIV CONST UIDENT, EQUAL]
// [67, val_header → non_empty_list(attribute) • PRIV CONST UIDENT COLON type_, EQUAL]
// [68, val_header → non_empty_list(attribute) • PUB pub_attr CONST UIDENT, EQUAL]
// [69, val_header → non_empty_list(attribute) • PUB pub_attr CONST UIDENT COLON type_, EQUAL]
// [75, structure_item → non_empty_list(attribute) • EXTERN TYPE luident optional_type_parameters_no_constraints deriving_directive_list, EOF / SEMI]
// [76, structure_item → non_empty_list(attribute) • PRIV EXTERN TYPE luident optional_type_parameters_no_constraints deriving_directive_list, EOF / SEMI]
// [77, structure_item → non_empty_list(attribute) • PUB pub_attr EXTERN TYPE luident optional_type_parameters_no_constraints deriving_directive_list, EOF / SEMI]
// [94, structure_item → non_empty_list(attribute) • FNALIAS func_alias_targets, EOF / SEMI]
// [95, structure_item → non_empty_list(attribute) • PRIV FNALIAS func_alias_targets, EOF / SEMI]
// [96, structure_item → non_empty_list(attribute) • PUB pub_attr FNALIAS func_alias_targets, EOF / SEMI]
// [100, structure_item → non_empty_list(attribute) • TRAIT luident option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) LBRACE list_semis(trait_method_decl) RBRACE, EOF / SEMI]
// [101, structure_item → non_empty_list(attribute) • PRIV TRAIT luident option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) LBRACE list_semis(trait_method_decl) RBRACE, EOF / SEMI]
// [102, structure_item → non_empty_list(attribute) • PUB pub_attr TRAIT luident option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) LBRACE list_semis(trait_method_decl) RBRACE, EOF / SEMI]
// [106, structure_item → non_empty_list(attribute) • TRAITALIAS luident EQUAL type_name, EOF / SEMI]
// [107, structure_item → non_empty_list(attribute) • PRIV TRAITALIAS luident EQUAL type_name, EOF / SEMI]
// [108, structure_item → non_empty_list(attribute) • PUB pub_attr TRAITALIAS luident EQUAL type_name, EOF / SEMI]
// [112, structure_item → non_empty_list(attribute) • TYPEALIAS PACKAGE_NAME batch_type_alias_targets, EOF / SEMI]
// [113, structure_item → non_empty_list(attribute) • PRIV TYPEALIAS PACKAGE_NAME batch_type_alias_targets, EOF / SEMI]
// [114, structure_item → non_empty_list(attribute) • PUB pub_attr TYPEALIAS PACKAGE_NAME batch_type_alias_targets, EOF / SEMI]
// [118, structure_item → non_empty_list(attribute) • TRAITALIAS PACKAGE_NAME batch_trait_alias_targets, EOF / SEMI]
// [119, structure_item → non_empty_list(attribute) • PRIV TRAITALIAS PACKAGE_NAME batch_trait_alias_targets, EOF / SEMI]
// [120, structure_item → non_empty_list(attribute) • PUB pub_attr TRAITALIAS PACKAGE_NAME batch_trait_alias_targets, EOF / SEMI]
// [122, structure_item → non_empty_list(attribute) • TEST option(loced_string) option(parameters) block_expr_with_local_types, EOF / SEMI]
// [126, structure_item → non_empty_list(attribute) • IMPL optional_type_parameters type_name FOR type_ WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [127, structure_item → non_empty_list(attribute) • PRIV IMPL optional_type_parameters type_name FOR type_ WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [128, structure_item → non_empty_list(attribute) • PUB pub_attr IMPL optional_type_parameters type_name FOR type_ WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [132, structure_item → non_empty_list(attribute) • IMPL optional_type_parameters type_name WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [133, structure_item → non_empty_list(attribute) • PRIV IMPL optional_type_parameters type_name WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [134, structure_item → non_empty_list(attribute) • PUB pub_attr IMPL optional_type_parameters type_name WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [141, type_header → non_empty_list(attribute) • TYPE luident optional_type_parameters_no_constraints, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / AMPER / PACKAGE_NAME]
// [142, type_header → non_empty_list(attribute) • PRIV TYPE luident optional_type_parameters_no_constraints, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / AMPER / PACKAGE_NAME]
// [143, type_header → non_empty_list(attribute) • PUB pub_attr TYPE luident optional_type_parameters_no_constraints, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / AMPER / PACKAGE_NAME]
// [147, type_header_bang → non_empty_list(attribute) • TYPE EXCLAMATION luident, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / LBRACE / AMPER / PACKAGE_NAME]
// [148, type_header_bang → non_empty_list(attribute) • PRIV TYPE EXCLAMATION luident, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / LBRACE / AMPER / PACKAGE_NAME]
// [149, type_header_bang → non_empty_list(attribute) • PUB pub_attr TYPE EXCLAMATION luident, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / LBRACE / AMPER / PACKAGE_NAME]
// [153, type_alias_header → non_empty_list(attribute) • TYPEALIAS luident optional_type_parameters_no_constraints, EQUAL]
// [154, type_alias_header → non_empty_list(attribute) • PRIV TYPEALIAS luident optional_type_parameters_no_constraints, EQUAL]
// [155, type_alias_header → non_empty_list(attribute) • PUB pub_attr TYPEALIAS luident optional_type_parameters_no_constraints, EQUAL]
// [159, struct_header → non_empty_list(attribute) • STRUCT luident optional_type_parameters_no_constraints, LBRACE]
// [160, struct_header → non_empty_list(attribute) • PRIV STRUCT luident optional_type_parameters_no_constraints, LBRACE]
// [161, struct_header → non_empty_list(attribute) • PUB pub_attr STRUCT luident optional_type_parameters_no_constraints, LBRACE]
// [165, enum_header → non_empty_list(attribute) • ENUM luident optional_type_parameters_no_constraints, LBRACE]
// [166, enum_header → non_empty_list(attribute) • PRIV ENUM luident optional_type_parameters_no_constraints, LBRACE]
// [167, enum_header → non_empty_list(attribute) • PUB pub_attr ENUM luident optional_type_parameters_no_constraints, LBRACE]
fn yy_state_1009(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ENUM => Shift(yy_state_1010)
    T_STRUCT => Shift(yy_state_1013)
    T_TYPE => Shift(yy_state_1016)
    T_IMPL => Shift(yy_state_1021)
    T_TEST => Shift(yy_state_1038)
    T_TYPEALIAS => Shift(yy_state_1042)
    T_TRAITALIAS => Shift(yy_state_1047)
    T_TRAIT => Shift(yy_state_1053)
    T_FNALIAS => Shift(yy_state_1059)
    T_CONST => Shift(yy_state_1061)
    T_LET => Shift(yy_state_1065)
    T_EXTERN => Shift(yy_state_1069)
    T_PUB => Shift(yy_state_1081)
    T_PRIV => Shift(yy_state_1163)
    T_FN => Shift(yy_state_1244)
    T_ASYNC => Shift(yy_state_1250)
    _ => Error
  }
}

// [165, enum_header → non_empty_list(attribute) ENUM • luident optional_type_parameters_no_constraints, LBRACE]
// [192, luident → • LIDENT, LBRACKET / LBRACE]
// [193, luident → • UIDENT, LBRACKET / LBRACE]
fn yy_state_1010(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    NT_luident => Shift(yy_state_1011)
    _ => Error
  }
}

// [13, optional_type_parameters_no_constraints → • option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)), LBRACE]
// [165, enum_header → non_empty_list(attribute) ENUM luident • optional_type_parameters_no_constraints, LBRACE]
// [453, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → •, LBRACE]
// [454, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → • LBRACKET non_empty_list_commas(id(type_decl_binder)) RBRACKET, LBRACE]
fn yy_state_1011(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_676)
    NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__ => Shift(yy_state_687)
    NT_optional_type_parameters_no_constraints => Shift(yy_state_1012)
    T_LBRACE => Reduce(0, NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__, yy_action_613)
    _ => Error
  }
}

// [165, enum_header → non_empty_list(attribute) ENUM luident optional_type_parameters_no_constraints •, LBRACE]
fn yy_state_1012(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_enum_header, yy_action_408)
}

// [159, struct_header → non_empty_list(attribute) STRUCT • luident optional_type_parameters_no_constraints, LBRACE]
// [192, luident → • LIDENT, LBRACKET / LBRACE]
// [193, luident → • UIDENT, LBRACKET / LBRACE]
fn yy_state_1013(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    NT_luident => Shift(yy_state_1014)
    _ => Error
  }
}

// [13, optional_type_parameters_no_constraints → • option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)), LBRACE]
// [159, struct_header → non_empty_list(attribute) STRUCT luident • optional_type_parameters_no_constraints, LBRACE]
// [453, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → •, LBRACE]
// [454, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → • LBRACKET non_empty_list_commas(id(type_decl_binder)) RBRACKET, LBRACE]
fn yy_state_1014(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_676)
    NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__ => Shift(yy_state_687)
    NT_optional_type_parameters_no_constraints => Shift(yy_state_1015)
    T_LBRACE => Reduce(0, NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__, yy_action_613)
    _ => Error
  }
}

// [159, struct_header → non_empty_list(attribute) STRUCT luident optional_type_parameters_no_constraints •, LBRACE]
fn yy_state_1015(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_struct_header, yy_action_457)
}

// [141, type_header → non_empty_list(attribute) TYPE • luident optional_type_parameters_no_constraints, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / AMPER / PACKAGE_NAME]
// [147, type_header_bang → non_empty_list(attribute) TYPE • EXCLAMATION luident, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / LBRACE / AMPER / PACKAGE_NAME]
// [192, luident → • LIDENT, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / LBRACKET / UNDERSCORE / AMPER / PACKAGE_NAME]
// [193, luident → • UIDENT, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / LBRACKET / UNDERSCORE / AMPER / PACKAGE_NAME]
fn yy_state_1016(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    T_EXCLAMATION => Shift(yy_state_1017)
    NT_luident => Shift(yy_state_1019)
    _ => Error
  }
}

// [147, type_header_bang → non_empty_list(attribute) TYPE EXCLAMATION • luident, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / LBRACE / AMPER / PACKAGE_NAME]
// [192, luident → • LIDENT, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / LBRACE / AMPER / PACKAGE_NAME]
// [193, luident → • UIDENT, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / LBRACE / AMPER / PACKAGE_NAME]
fn yy_state_1017(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    NT_luident => Shift(yy_state_1018)
    _ => Error
  }
}

// [147, type_header_bang → non_empty_list(attribute) TYPE EXCLAMATION luident •, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / LBRACE / AMPER / PACKAGE_NAME]
fn yy_state_1018(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_type_header_bang, yy_action_43)
}

// [13, optional_type_parameters_no_constraints → • option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)), LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / AMPER / PACKAGE_NAME]
// [141, type_header → non_empty_list(attribute) TYPE luident • optional_type_parameters_no_constraints, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / AMPER / PACKAGE_NAME]
// [453, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → •, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / AMPER / PACKAGE_NAME]
// [454, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → • LBRACKET non_empty_list_commas(id(type_decl_binder)) RBRACKET, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / AMPER / PACKAGE_NAME]
fn yy_state_1019(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_676)
    NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__ => Shift(yy_state_687)
    NT_optional_type_parameters_no_constraints => Shift(yy_state_1020)
    T_LIDENT | T_UIDENT | T_EOF | T_DERIVE | T_ASYNC | T_LPAREN | T_SEMI | T_UNDERSCORE | T_AMPER | T_PACKAGE_NAME => Reduce(0, NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__, yy_action_613)
    _ => Error
  }
}

// [141, type_header → non_empty_list(attribute) TYPE luident optional_type_parameters_no_constraints •, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / AMPER / PACKAGE_NAME]
fn yy_state_1020(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_type_header, yy_action_584)
}

// [11, type_parameters → • LBRACKET non_empty_list_commas(id(tvar_binder)) RBRACKET, LIDENT / UIDENT / AMPER / PACKAGE_NAME]
// [12, optional_type_parameters → • option(type_parameters), LIDENT / UIDENT / AMPER / PACKAGE_NAME]
// [126, structure_item → non_empty_list(attribute) IMPL • optional_type_parameters type_name FOR type_ WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [132, structure_item → non_empty_list(attribute) IMPL • optional_type_parameters type_name WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [450, option(type_parameters) → •, LIDENT / UIDENT / AMPER / PACKAGE_NAME]
// [451, option(type_parameters) → • type_parameters, LIDENT / UIDENT / AMPER / PACKAGE_NAME]
fn yy_state_1021(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_type_parameters => Shift(yy_state_697)
    NT_option_type_parameters_ => Shift(yy_state_807)
    T_LBRACKET => Shift(yy_state_808)
    NT_optional_type_parameters => Shift(yy_state_1022)
    T_LIDENT | T_UIDENT | T_AMPER | T_PACKAGE_NAME => Reduce(0, NT_option_type_parameters_, yy_action_515)
    _ => Error
  }
}

// [126, structure_item → non_empty_list(attribute) IMPL optional_type_parameters • type_name FOR type_ WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [132, structure_item → non_empty_list(attribute) IMPL optional_type_parameters • type_name WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [192, luident → • LIDENT, WITH / FOR]
// [193, luident → • UIDENT, WITH / FOR]
// [198, qual_ident_ty → • luident, WITH / FOR]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, WITH / FOR]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, WITH / FOR]
// [335, type_name → • qual_ident_ty, WITH / FOR]
// [336, type_name → • AMPER qual_ident_ty, WITH / FOR]
fn yy_state_1022(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    NT_qual_ident_ty => Shift(yy_state_26)
    NT_type_name => Shift(yy_state_1023)
    _ => Error
  }
}

// [126, structure_item → non_empty_list(attribute) IMPL optional_type_parameters type_name • FOR type_ WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [132, structure_item → non_empty_list(attribute) IMPL optional_type_parameters type_name • WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
fn yy_state_1023(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_WITH => Shift(yy_state_1024)
    T_FOR => Shift(yy_state_1030)
    _ => Error
  }
}

// [132, structure_item → non_empty_list(attribute) IMPL optional_type_parameters type_name WITH • LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
fn yy_state_1024(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_1025)
    _ => Error
  }
}

// [132, structure_item → non_empty_list(attribute) IMPL optional_type_parameters type_name WITH LIDENT • optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [201, optional_bang → • EXCLAMATION, LPAREN]
// [202, optional_bang → •, LPAREN]
fn yy_state_1025(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EXCLAMATION => Shift(yy_state_535)
    NT_optional_bang => Shift(yy_state_1026)
    T_LPAREN => Reduce(0, NT_optional_bang, yy_action_662)
    _ => Error
  }
}

// [10, parameters → • LPAREN list_commas(parameter) RPAREN, EQUAL / LBRACE / THIN_ARROW]
// [132, structure_item → non_empty_list(attribute) IMPL optional_type_parameters type_name WITH LIDENT optional_bang • parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
fn yy_state_1026(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_298)
    NT_parameters => Shift(yy_state_1027)
    _ => Error
  }
}

// [132, structure_item → non_empty_list(attribute) IMPL optional_type_parameters type_name WITH LIDENT optional_bang parameters • option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [460, option(preceded(THIN_ARROW,return_type)) → •, EQUAL / LBRACE]
// [461, option(preceded(THIN_ARROW,return_type)) → • THIN_ARROW return_type, EQUAL / LBRACE]
fn yy_state_1027(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_THIN_ARROW => Shift(yy_state_246)
    NT_option_preceded_THIN_ARROW_return_type__ => Shift(yy_state_1028)
    T_EQUAL | T_LBRACE => Reduce(0, NT_option_preceded_THIN_ARROW_return_type__, yy_action_161)
    _ => Error
  }
}

// [42, block_expr_with_local_types → • LBRACE local_types_and_stmts RBRACE, EOF / SEMI]
// [43, impl_body → • block_expr_with_local_types, EOF / SEMI]
// [44, impl_body → • EQUAL STRING, EOF / SEMI]
// [132, structure_item → non_empty_list(attribute) IMPL optional_type_parameters type_name WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) • impl_body, EOF / SEMI]
fn yy_state_1028(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EQUAL => Shift(yy_state_706)
    NT_block_expr_with_local_types => Shift(yy_state_708)
    T_LBRACE => Shift(yy_state_709)
    NT_impl_body => Shift(yy_state_1029)
    _ => Error
  }
}

// [132, structure_item → non_empty_list(attribute) IMPL optional_type_parameters type_name WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body •, EOF / SEMI]
fn yy_state_1029(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(10, NT_structure_item, yy_action_470)
}

// [126, structure_item → non_empty_list(attribute) IMPL optional_type_parameters type_name FOR • type_ WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [192, luident → • LIDENT, WITH / QUESTION / LBRACKET]
// [193, luident → • UIDENT, WITH / QUESTION / LBRACKET]
// [198, qual_ident_ty → • luident, WITH / QUESTION / LBRACKET]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, WITH / QUESTION / LBRACKET]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, WITH / QUESTION / LBRACKET]
// [410, type_ → • type_ QUESTION, WITH / QUESTION]
// [411, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN, WITH / QUESTION]
// [412, type_ → • ASYNC LPAREN type_ COMMA RPAREN THIN_ARROW return_type, WITH / QUESTION]
// [413, type_ → • ASYNC LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, WITH / QUESTION]
// [414, type_ → • LPAREN type_ COMMA RPAREN THIN_ARROW return_type, WITH / QUESTION]
// [415, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, WITH / QUESTION]
// [416, type_ → • ASYNC LPAREN RPAREN THIN_ARROW return_type, WITH / QUESTION]
// [417, type_ → • LPAREN RPAREN THIN_ARROW return_type, WITH / QUESTION]
// [418, type_ → • LPAREN type_ RPAREN, WITH / QUESTION]
// [419, type_ → • ASYNC LPAREN type_ RPAREN THIN_ARROW return_type, WITH / QUESTION]
// [420, type_ → • LPAREN type_ RPAREN THIN_ARROW return_type, WITH / QUESTION]
// [421, type_ → • qual_ident_ty optional_type_arguments, WITH / QUESTION]
// [422, type_ → • AMPER qual_ident_ty, WITH / QUESTION]
// [423, type_ → • UNDERSCORE, WITH / QUESTION]
fn yy_state_1030(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    T_UNDERSCORE => Shift(yy_state_120)
    T_AMPER => Shift(yy_state_121)
    NT_qual_ident_ty => Shift(yy_state_123)
    T_ASYNC => Shift(yy_state_129)
    T_LPAREN => Shift(yy_state_134)
    NT_type_ => Shift(yy_state_1031)
    _ => Error
  }
}

// [126, structure_item → non_empty_list(attribute) IMPL optional_type_parameters type_name FOR type_ • WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [410, type_ → type_ • QUESTION, WITH / QUESTION]
fn yy_state_1031(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_QUESTION => Shift(yy_state_139)
    T_WITH => Shift(yy_state_1032)
    _ => Error
  }
}

// [126, structure_item → non_empty_list(attribute) IMPL optional_type_parameters type_name FOR type_ WITH • LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
fn yy_state_1032(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_1033)
    _ => Error
  }
}

// [126, structure_item → non_empty_list(attribute) IMPL optional_type_parameters type_name FOR type_ WITH LIDENT • optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [201, optional_bang → • EXCLAMATION, LPAREN]
// [202, optional_bang → •, LPAREN]
fn yy_state_1033(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EXCLAMATION => Shift(yy_state_535)
    NT_optional_bang => Shift(yy_state_1034)
    T_LPAREN => Reduce(0, NT_optional_bang, yy_action_662)
    _ => Error
  }
}

// [10, parameters → • LPAREN list_commas(parameter) RPAREN, EQUAL / LBRACE / THIN_ARROW]
// [126, structure_item → non_empty_list(attribute) IMPL optional_type_parameters type_name FOR type_ WITH LIDENT optional_bang • parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
fn yy_state_1034(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_298)
    NT_parameters => Shift(yy_state_1035)
    _ => Error
  }
}

// [126, structure_item → non_empty_list(attribute) IMPL optional_type_parameters type_name FOR type_ WITH LIDENT optional_bang parameters • option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [460, option(preceded(THIN_ARROW,return_type)) → •, EQUAL / LBRACE]
// [461, option(preceded(THIN_ARROW,return_type)) → • THIN_ARROW return_type, EQUAL / LBRACE]
fn yy_state_1035(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_THIN_ARROW => Shift(yy_state_246)
    NT_option_preceded_THIN_ARROW_return_type__ => Shift(yy_state_1036)
    T_EQUAL | T_LBRACE => Reduce(0, NT_option_preceded_THIN_ARROW_return_type__, yy_action_161)
    _ => Error
  }
}

// [42, block_expr_with_local_types → • LBRACE local_types_and_stmts RBRACE, EOF / SEMI]
// [43, impl_body → • block_expr_with_local_types, EOF / SEMI]
// [44, impl_body → • EQUAL STRING, EOF / SEMI]
// [126, structure_item → non_empty_list(attribute) IMPL optional_type_parameters type_name FOR type_ WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) • impl_body, EOF / SEMI]
fn yy_state_1036(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EQUAL => Shift(yy_state_706)
    NT_block_expr_with_local_types => Shift(yy_state_708)
    T_LBRACE => Shift(yy_state_709)
    NT_impl_body => Shift(yy_state_1037)
    _ => Error
  }
}

// [126, structure_item → non_empty_list(attribute) IMPL optional_type_parameters type_name FOR type_ WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body •, EOF / SEMI]
fn yy_state_1037(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(12, NT_structure_item, yy_action_518)
}

// [122, structure_item → non_empty_list(attribute) TEST • option(loced_string) option(parameters) block_expr_with_local_types, EOF / SEMI]
// [479, option(loced_string) → •, LPAREN / LBRACE]
// [480, option(loced_string) → • STRING, LPAREN / LBRACE]
fn yy_state_1038(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_STRING => Shift(yy_state_826)
    NT_option_loced_string_ => Shift(yy_state_1039)
    T_LPAREN | T_LBRACE => Reduce(0, NT_option_loced_string_, yy_action_555)
    _ => Error
  }
}

// [10, parameters → • LPAREN list_commas(parameter) RPAREN, LBRACE]
// [122, structure_item → non_empty_list(attribute) TEST option(loced_string) • option(parameters) block_expr_with_local_types, EOF / SEMI]
// [458, option(parameters) → •, LBRACE]
// [459, option(parameters) → • parameters, LBRACE]
fn yy_state_1039(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_298)
    NT_parameters => Shift(yy_state_828)
    NT_option_parameters_ => Shift(yy_state_1040)
    T_LBRACE => Reduce(0, NT_option_parameters_, yy_action_287)
    _ => Error
  }
}

// [42, block_expr_with_local_types → • LBRACE local_types_and_stmts RBRACE, EOF / SEMI]
// [122, structure_item → non_empty_list(attribute) TEST option(loced_string) option(parameters) • block_expr_with_local_types, EOF / SEMI]
fn yy_state_1040(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACE => Shift(yy_state_709)
    NT_block_expr_with_local_types => Shift(yy_state_1041)
    _ => Error
  }
}

// [122, structure_item → non_empty_list(attribute) TEST option(loced_string) option(parameters) block_expr_with_local_types •, EOF / SEMI]
fn yy_state_1041(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_structure_item, yy_action_641)
}

// [112, structure_item → non_empty_list(attribute) TYPEALIAS • PACKAGE_NAME batch_type_alias_targets, EOF / SEMI]
// [153, type_alias_header → non_empty_list(attribute) TYPEALIAS • luident optional_type_parameters_no_constraints, EQUAL]
// [192, luident → • LIDENT, EQUAL / LBRACKET]
// [193, luident → • UIDENT, EQUAL / LBRACKET]
fn yy_state_1042(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    NT_luident => Shift(yy_state_1043)
    T_PACKAGE_NAME => Shift(yy_state_1045)
    _ => Error
  }
}

// [13, optional_type_parameters_no_constraints → • option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)), EQUAL]
// [153, type_alias_header → non_empty_list(attribute) TYPEALIAS luident • optional_type_parameters_no_constraints, EQUAL]
// [453, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → •, EQUAL]
// [454, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → • LBRACKET non_empty_list_commas(id(type_decl_binder)) RBRACKET, EQUAL]
fn yy_state_1043(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_676)
    NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__ => Shift(yy_state_687)
    NT_optional_type_parameters_no_constraints => Shift(yy_state_1044)
    T_EQUAL => Reduce(0, NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__, yy_action_613)
    _ => Error
  }
}

// [153, type_alias_header → non_empty_list(attribute) TYPEALIAS luident optional_type_parameters_no_constraints •, EQUAL]
fn yy_state_1044(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_type_alias_header, yy_action_175)
}

// [112, structure_item → non_empty_list(attribute) TYPEALIAS PACKAGE_NAME • batch_type_alias_targets, EOF / SEMI]
// [168, batch_type_alias_targets → • DOT_LIDENT optional_type_parameters_no_constraints, EOF / SEMI]
// [169, batch_type_alias_targets → • DOT_UIDENT optional_type_parameters_no_constraints, EOF / SEMI]
// [170, batch_type_alias_targets → • DOT_LPAREN non_empty_list_commas(batch_type_alias_target) RPAREN, EOF / SEMI]
fn yy_state_1045(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_DOT_LPAREN => Shift(yy_state_835)
    T_DOT_UIDENT => Shift(yy_state_845)
    T_DOT_LIDENT => Shift(yy_state_847)
    NT_batch_type_alias_targets => Shift(yy_state_1046)
    _ => Error
  }
}

// [112, structure_item → non_empty_list(attribute) TYPEALIAS PACKAGE_NAME batch_type_alias_targets •, EOF / SEMI]
fn yy_state_1046(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_structure_item, yy_action_687)
}

// [106, structure_item → non_empty_list(attribute) TRAITALIAS • luident EQUAL type_name, EOF / SEMI]
// [118, structure_item → non_empty_list(attribute) TRAITALIAS • PACKAGE_NAME batch_trait_alias_targets, EOF / SEMI]
// [192, luident → • LIDENT, EQUAL]
// [193, luident → • UIDENT, EQUAL]
fn yy_state_1047(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    T_PACKAGE_NAME => Shift(yy_state_1048)
    NT_luident => Shift(yy_state_1050)
    _ => Error
  }
}

// [118, structure_item → non_empty_list(attribute) TRAITALIAS PACKAGE_NAME • batch_trait_alias_targets, EOF / SEMI]
// [172, batch_trait_alias_targets → • DOT_LIDENT, EOF / SEMI]
// [173, batch_trait_alias_targets → • DOT_UIDENT, EOF / SEMI]
// [174, batch_trait_alias_targets → • DOT_LPAREN non_empty_list_commas(batch_trait_alias_target) RPAREN, EOF / SEMI]
fn yy_state_1048(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_DOT_LPAREN => Shift(yy_state_852)
    T_DOT_UIDENT => Shift(yy_state_861)
    T_DOT_LIDENT => Shift(yy_state_862)
    NT_batch_trait_alias_targets => Shift(yy_state_1049)
    _ => Error
  }
}

// [118, structure_item → non_empty_list(attribute) TRAITALIAS PACKAGE_NAME batch_trait_alias_targets •, EOF / SEMI]
fn yy_state_1049(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_structure_item, yy_action_271)
}

// [106, structure_item → non_empty_list(attribute) TRAITALIAS luident • EQUAL type_name, EOF / SEMI]
fn yy_state_1050(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EQUAL => Shift(yy_state_1051)
    _ => Error
  }
}

// [106, structure_item → non_empty_list(attribute) TRAITALIAS luident EQUAL • type_name, EOF / SEMI]
// [192, luident → • LIDENT, EOF / SEMI]
// [193, luident → • UIDENT, EOF / SEMI]
// [198, qual_ident_ty → • luident, EOF / SEMI]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, EOF / SEMI]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, EOF / SEMI]
// [335, type_name → • qual_ident_ty, EOF / SEMI]
// [336, type_name → • AMPER qual_ident_ty, EOF / SEMI]
fn yy_state_1051(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    NT_qual_ident_ty => Shift(yy_state_26)
    NT_type_name => Shift(yy_state_1052)
    _ => Error
  }
}

// [106, structure_item → non_empty_list(attribute) TRAITALIAS luident EQUAL type_name •, EOF / SEMI]
fn yy_state_1052(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_structure_item, yy_action_670)
}

// [100, structure_item → non_empty_list(attribute) TRAIT • luident option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) LBRACE list_semis(trait_method_decl) RBRACE, EOF / SEMI]
// [192, luident → • LIDENT, COLON / LBRACE]
// [193, luident → • UIDENT, COLON / LBRACE]
fn yy_state_1053(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    NT_luident => Shift(yy_state_1054)
    _ => Error
  }
}

// [100, structure_item → non_empty_list(attribute) TRAIT luident • option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) LBRACE list_semis(trait_method_decl) RBRACE, EOF / SEMI]
// [475, option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) → •, LBRACE]
// [476, option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) → • COLON separated_nonempty_list(PLUS,tvar_constraint), LBRACE]
fn yy_state_1054(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_869)
    NT_option_preceded_COLON_separated_nonempty_list_PLUS_tvar_constraint___ => Shift(yy_state_1055)
    T_LBRACE => Reduce(0, NT_option_preceded_COLON_separated_nonempty_list_PLUS_tvar_constraint___, yy_action_57)
    _ => Error
  }
}

// [100, structure_item → non_empty_list(attribute) TRAIT luident option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) • LBRACE list_semis(trait_method_decl) RBRACE, EOF / SEMI]
fn yy_state_1055(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACE => Shift(yy_state_1056)
    _ => Error
  }
}

// [100, structure_item → non_empty_list(attribute) TRAIT luident option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) LBRACE • list_semis(trait_method_decl) RBRACE, EOF / SEMI]
// [187, trait_method_decl → • LIDENT optional_bang optional_type_parameters LPAREN list_commas(trait_method_param) RPAREN option(preceded(THIN_ARROW,return_type)) option(preceded(EQUAL,wildcard)), SEMI / RBRACE]
// [477, list_semis(trait_method_decl) → •, RBRACE]
// [478, list_semis(trait_method_decl) → • non_empty_list_semis(trait_method_decl), RBRACE]
// [565, non_empty_list_semis(trait_method_decl) → • non_empty_list_semis_rev(trait_method_decl), RBRACE]
// [613, non_empty_list_semis_rev(trait_method_decl) → • non_empty_list_semi_rev_aux(trait_method_decl) option(SEMI), RBRACE]
// [635, non_empty_list_semi_rev_aux(trait_method_decl) → • trait_method_decl, SEMI / RBRACE]
// [636, non_empty_list_semi_rev_aux(trait_method_decl) → • non_empty_list_semi_rev_aux(trait_method_decl) SEMI trait_method_decl, SEMI / RBRACE]
fn yy_state_1056(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_trait_method_decl => Shift(yy_state_873)
    NT_non_empty_list_semi_rev_aux_trait_method_decl_ => Shift(yy_state_874)
    T_LIDENT => Shift(yy_state_878)
    NT_non_empty_list_semis_rev_trait_method_decl_ => Shift(yy_state_902)
    NT_non_empty_list_semis_trait_method_decl_ => Shift(yy_state_903)
    NT_list_semis_trait_method_decl_ => Shift(yy_state_1057)
    T_RBRACE => Reduce(0, NT_list_semis_trait_method_decl_, yy_action_262)
    _ => Error
  }
}

// [100, structure_item → non_empty_list(attribute) TRAIT luident option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) LBRACE list_semis(trait_method_decl) • RBRACE, EOF / SEMI]
fn yy_state_1057(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACE => Shift(yy_state_1058)
    _ => Error
  }
}

// [100, structure_item → non_empty_list(attribute) TRAIT luident option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) LBRACE list_semis(trait_method_decl) RBRACE •, EOF / SEMI]
fn yy_state_1058(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(7, NT_structure_item, yy_action_364)
}

// [94, structure_item → non_empty_list(attribute) FNALIAS • func_alias_targets, EOF / SEMI]
// [176, func_alias_targets → • func_alias_target(LIDENT), EOF / SEMI]
// [177, func_alias_targets → • func_alias_type_name(LIDENT,UIDENT) func_alias_target(LIDENT), EOF / SEMI]
// [178, func_alias_targets → • PACKAGE_NAME func_alias_target(DOT_LIDENT), EOF / SEMI]
// [179, func_alias_targets → • PACKAGE_NAME func_alias_type_name(DOT_LIDENT,DOT_UIDENT) func_alias_target(LIDENT), EOF / SEMI]
// [180, func_alias_targets → • option(func_alias_type_name(LIDENT,UIDENT)) LPAREN non_empty_list_commas(func_alias_target(LIDENT)) RPAREN, EOF / SEMI]
// [181, func_alias_targets → • PACKAGE_NAME DOT_LPAREN non_empty_list_commas(func_alias_target(LIDENT)) RPAREN, EOF / SEMI]
// [182, func_alias_targets → • PACKAGE_NAME func_alias_type_name(DOT_LIDENT,DOT_UIDENT) LPAREN non_empty_list_commas(func_alias_target(LIDENT)) RPAREN, EOF / SEMI]
// [484, func_alias_type_name(LIDENT,UIDENT) → • LIDENT COLONCOLON, LIDENT / LPAREN]
// [485, func_alias_type_name(LIDENT,UIDENT) → • UIDENT COLONCOLON, LIDENT / LPAREN]
// [486, func_alias_target(LIDENT) → • LIDENT option(preceded(AS,binder)), EOF / SEMI]
// [490, option(func_alias_type_name(LIDENT,UIDENT)) → •, LPAREN]
// [491, option(func_alias_type_name(LIDENT,UIDENT)) → • func_alias_type_name(LIDENT,UIDENT), LPAREN]
fn yy_state_1059(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_907)
    T_LIDENT => Shift(yy_state_909)
    NT_option_func_alias_type_name_LIDENT_UIDENT__ => Shift(yy_state_914)
    T_PACKAGE_NAME => Shift(yy_state_924)
    NT_func_alias_type_name_LIDENT_UIDENT_ => Shift(yy_state_939)
    NT_func_alias_target_LIDENT_ => Shift(yy_state_941)
    NT_func_alias_targets => Shift(yy_state_1060)
    T_LPAREN => Reduce(0, NT_option_func_alias_type_name_LIDENT_UIDENT__, yy_action_298)
    _ => Error
  }
}

// [94, structure_item → non_empty_list(attribute) FNALIAS func_alias_targets •, EOF / SEMI]
fn yy_state_1060(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_structure_item, yy_action_420)
}

// [64, val_header → non_empty_list(attribute) CONST • UIDENT, EQUAL]
// [65, val_header → non_empty_list(attribute) CONST • UIDENT COLON type_, EQUAL]
fn yy_state_1061(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_1062)
    _ => Error
  }
}

// [64, val_header → non_empty_list(attribute) CONST UIDENT •, EQUAL]
// [65, val_header → non_empty_list(attribute) CONST UIDENT • COLON type_, EQUAL]
fn yy_state_1062(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_1063)
    T_EQUAL => Reduce(3, NT_val_header, yy_action_302)
    _ => Error
  }
}

// [65, val_header → non_empty_list(attribute) CONST UIDENT COLON • type_, EQUAL]
// [192, luident → • LIDENT, EQUAL / QUESTION / LBRACKET]
// [193, luident → • UIDENT, EQUAL / QUESTION / LBRACKET]
// [198, qual_ident_ty → • luident, EQUAL / QUESTION / LBRACKET]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, EQUAL / QUESTION / LBRACKET]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, EQUAL / QUESTION / LBRACKET]
// [410, type_ → • type_ QUESTION, EQUAL / QUESTION]
// [411, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN, EQUAL / QUESTION]
// [412, type_ → • ASYNC LPAREN type_ COMMA RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [413, type_ → • ASYNC LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [414, type_ → • LPAREN type_ COMMA RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [415, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [416, type_ → • ASYNC LPAREN RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [417, type_ → • LPAREN RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [418, type_ → • LPAREN type_ RPAREN, EQUAL / QUESTION]
// [419, type_ → • ASYNC LPAREN type_ RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [420, type_ → • LPAREN type_ RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [421, type_ → • qual_ident_ty optional_type_arguments, EQUAL / QUESTION]
// [422, type_ → • AMPER qual_ident_ty, EQUAL / QUESTION]
// [423, type_ → • UNDERSCORE, EQUAL / QUESTION]
fn yy_state_1063(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    T_UNDERSCORE => Shift(yy_state_120)
    T_AMPER => Shift(yy_state_121)
    NT_qual_ident_ty => Shift(yy_state_123)
    T_ASYNC => Shift(yy_state_129)
    T_LPAREN => Shift(yy_state_134)
    NT_type_ => Shift(yy_state_1064)
    _ => Error
  }
}

// [65, val_header → non_empty_list(attribute) CONST UIDENT COLON type_ •, EQUAL]
// [410, type_ → type_ • QUESTION, EQUAL / QUESTION]
fn yy_state_1064(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_QUESTION => Shift(yy_state_139)
    T_EQUAL => Reduce(5, NT_val_header, yy_action_404)
    _ => Error
  }
}

// [52, val_header → non_empty_list(attribute) LET • LIDENT, EQUAL]
// [53, val_header → non_empty_list(attribute) LET • LIDENT COLON type_, EQUAL]
fn yy_state_1065(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_1066)
    _ => Error
  }
}

// [52, val_header → non_empty_list(attribute) LET LIDENT •, EQUAL]
// [53, val_header → non_empty_list(attribute) LET LIDENT • COLON type_, EQUAL]
fn yy_state_1066(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_1067)
    T_EQUAL => Reduce(3, NT_val_header, yy_action_487)
    _ => Error
  }
}

// [53, val_header → non_empty_list(attribute) LET LIDENT COLON • type_, EQUAL]
// [192, luident → • LIDENT, EQUAL / QUESTION / LBRACKET]
// [193, luident → • UIDENT, EQUAL / QUESTION / LBRACKET]
// [198, qual_ident_ty → • luident, EQUAL / QUESTION / LBRACKET]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, EQUAL / QUESTION / LBRACKET]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, EQUAL / QUESTION / LBRACKET]
// [410, type_ → • type_ QUESTION, EQUAL / QUESTION]
// [411, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN, EQUAL / QUESTION]
// [412, type_ → • ASYNC LPAREN type_ COMMA RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [413, type_ → • ASYNC LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [414, type_ → • LPAREN type_ COMMA RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [415, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [416, type_ → • ASYNC LPAREN RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [417, type_ → • LPAREN RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [418, type_ → • LPAREN type_ RPAREN, EQUAL / QUESTION]
// [419, type_ → • ASYNC LPAREN type_ RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [420, type_ → • LPAREN type_ RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [421, type_ → • qual_ident_ty optional_type_arguments, EQUAL / QUESTION]
// [422, type_ → • AMPER qual_ident_ty, EQUAL / QUESTION]
// [423, type_ → • UNDERSCORE, EQUAL / QUESTION]
fn yy_state_1067(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    T_UNDERSCORE => Shift(yy_state_120)
    T_AMPER => Shift(yy_state_121)
    NT_qual_ident_ty => Shift(yy_state_123)
    T_ASYNC => Shift(yy_state_129)
    T_LPAREN => Shift(yy_state_134)
    NT_type_ => Shift(yy_state_1068)
    _ => Error
  }
}

// [53, val_header → non_empty_list(attribute) LET LIDENT COLON type_ •, EQUAL]
// [410, type_ → type_ • QUESTION, EQUAL / QUESTION]
fn yy_state_1068(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_QUESTION => Shift(yy_state_139)
    T_EQUAL => Reduce(5, NT_val_header, yy_action_524)
    _ => Error
  }
}

// [35, extern_fun_header → non_empty_list(attribute) EXTERN • STRING FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL]
// [75, structure_item → non_empty_list(attribute) EXTERN • TYPE luident optional_type_parameters_no_constraints deriving_directive_list, EOF / SEMI]
fn yy_state_1069(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_TYPE => Shift(yy_state_1070)
    T_STRING => Shift(yy_state_1074)
    _ => Error
  }
}

// [75, structure_item → non_empty_list(attribute) EXTERN TYPE • luident optional_type_parameters_no_constraints deriving_directive_list, EOF / SEMI]
// [192, luident → • LIDENT, EOF / DERIVE / SEMI / LBRACKET]
// [193, luident → • UIDENT, EOF / DERIVE / SEMI / LBRACKET]
fn yy_state_1070(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    NT_luident => Shift(yy_state_1071)
    _ => Error
  }
}

// [13, optional_type_parameters_no_constraints → • option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)), EOF / DERIVE / SEMI]
// [75, structure_item → non_empty_list(attribute) EXTERN TYPE luident • optional_type_parameters_no_constraints deriving_directive_list, EOF / SEMI]
// [453, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → •, EOF / DERIVE / SEMI]
// [454, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → • LBRACKET non_empty_list_commas(id(type_decl_binder)) RBRACKET, EOF / DERIVE / SEMI]
fn yy_state_1071(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_676)
    NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__ => Shift(yy_state_687)
    NT_optional_type_parameters_no_constraints => Shift(yy_state_1072)
    T_EOF | T_DERIVE | T_SEMI => Reduce(0, NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__, yy_action_613)
    _ => Error
  }
}

// [75, structure_item → non_empty_list(attribute) EXTERN TYPE luident optional_type_parameters_no_constraints • deriving_directive_list, EOF / SEMI]
// [185, deriving_directive_list → •, EOF / SEMI]
// [186, deriving_directive_list → • DERIVE LPAREN list_commas(deriving_directive) RPAREN, EOF / SEMI]
fn yy_state_1072(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_DERIVE => Shift(yy_state_719)
    NT_deriving_directive_list => Shift(yy_state_1073)
    T_EOF | T_SEMI => Reduce(0, NT_deriving_directive_list, yy_action_147)
    _ => Error
  }
}

// [75, structure_item → non_empty_list(attribute) EXTERN TYPE luident optional_type_parameters_no_constraints deriving_directive_list •, EOF / SEMI]
fn yy_state_1073(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(6, NT_structure_item, yy_action_251)
}

// [35, extern_fun_header → non_empty_list(attribute) EXTERN STRING • FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL]
fn yy_state_1074(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_FN => Shift(yy_state_1075)
    _ => Error
  }
}

// [15, fun_binder → • type_name COLONCOLON LIDENT, EQUAL / LPAREN / EXCLAMATION / LBRACKET / THIN_ARROW]
// [16, fun_binder → • LIDENT, EQUAL / LPAREN / EXCLAMATION / LBRACKET / THIN_ARROW]
// [35, extern_fun_header → non_empty_list(attribute) EXTERN STRING FN • fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL]
// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
fn yy_state_1075(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LIDENT => Shift(yy_state_1005)
    NT_type_name => Shift(yy_state_1006)
    NT_fun_binder => Shift(yy_state_1076)
    _ => Error
  }
}

// [35, extern_fun_header → non_empty_list(attribute) EXTERN STRING FN fun_binder • optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL]
// [201, optional_bang → • EXCLAMATION, EQUAL / LPAREN / LBRACKET / THIN_ARROW]
// [202, optional_bang → •, EQUAL / LPAREN / LBRACKET / THIN_ARROW]
fn yy_state_1076(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EXCLAMATION => Shift(yy_state_535)
    NT_optional_bang => Shift(yy_state_1077)
    T_EQUAL | T_LPAREN | T_LBRACKET | T_THIN_ARROW => Reduce(0, NT_optional_bang, yy_action_662)
    _ => Error
  }
}

// [11, type_parameters → • LBRACKET non_empty_list_commas(id(tvar_binder)) RBRACKET, EQUAL / LPAREN / THIN_ARROW]
// [12, optional_type_parameters → • option(type_parameters), EQUAL / LPAREN / THIN_ARROW]
// [35, extern_fun_header → non_empty_list(attribute) EXTERN STRING FN fun_binder optional_bang • optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL]
// [450, option(type_parameters) → •, EQUAL / LPAREN / THIN_ARROW]
// [451, option(type_parameters) → • type_parameters, EQUAL / LPAREN / THIN_ARROW]
fn yy_state_1077(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_type_parameters => Shift(yy_state_697)
    NT_option_type_parameters_ => Shift(yy_state_807)
    T_LBRACKET => Shift(yy_state_808)
    NT_optional_type_parameters => Shift(yy_state_1078)
    T_EQUAL | T_LPAREN | T_THIN_ARROW => Reduce(0, NT_option_type_parameters_, yy_action_515)
    _ => Error
  }
}

// [10, parameters → • LPAREN list_commas(parameter) RPAREN, EQUAL / THIN_ARROW]
// [35, extern_fun_header → non_empty_list(attribute) EXTERN STRING FN fun_binder optional_bang optional_type_parameters • option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL]
// [458, option(parameters) → •, EQUAL / THIN_ARROW]
// [459, option(parameters) → • parameters, EQUAL / THIN_ARROW]
fn yy_state_1078(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_298)
    NT_parameters => Shift(yy_state_828)
    NT_option_parameters_ => Shift(yy_state_1079)
    T_EQUAL | T_THIN_ARROW => Reduce(0, NT_option_parameters_, yy_action_287)
    _ => Error
  }
}

// [35, extern_fun_header → non_empty_list(attribute) EXTERN STRING FN fun_binder optional_bang optional_type_parameters option(parameters) • option(preceded(THIN_ARROW,return_type)), EQUAL]
// [460, option(preceded(THIN_ARROW,return_type)) → •, EQUAL]
// [461, option(preceded(THIN_ARROW,return_type)) → • THIN_ARROW return_type, EQUAL]
fn yy_state_1079(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_THIN_ARROW => Shift(yy_state_246)
    NT_option_preceded_THIN_ARROW_return_type__ => Shift(yy_state_1080)
    T_EQUAL => Reduce(0, NT_option_preceded_THIN_ARROW_return_type__, yy_action_161)
    _ => Error
  }
}

// [35, extern_fun_header → non_empty_list(attribute) EXTERN STRING FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)) •, EQUAL]
fn yy_state_1080(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(9, NT_extern_fun_header, yy_action_520)
}

// [27, fun_header → non_empty_list(attribute) PUB • pub_attr ASYNC FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [28, fun_header → non_empty_list(attribute) PUB • pub_attr FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [37, extern_fun_header → non_empty_list(attribute) PUB • pub_attr EXTERN STRING FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL]
// [56, val_header → non_empty_list(attribute) PUB • pub_attr LET LIDENT, EQUAL]
// [57, val_header → non_empty_list(attribute) PUB • pub_attr LET LIDENT COLON type_, EQUAL]
// [68, val_header → non_empty_list(attribute) PUB • pub_attr CONST UIDENT, EQUAL]
// [69, val_header → non_empty_list(attribute) PUB • pub_attr CONST UIDENT COLON type_, EQUAL]
// [77, structure_item → non_empty_list(attribute) PUB • pub_attr EXTERN TYPE luident optional_type_parameters_no_constraints deriving_directive_list, EOF / SEMI]
// [96, structure_item → non_empty_list(attribute) PUB • pub_attr FNALIAS func_alias_targets, EOF / SEMI]
// [102, structure_item → non_empty_list(attribute) PUB • pub_attr TRAIT luident option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) LBRACE list_semis(trait_method_decl) RBRACE, EOF / SEMI]
// [108, structure_item → non_empty_list(attribute) PUB • pub_attr TRAITALIAS luident EQUAL type_name, EOF / SEMI]
// [114, structure_item → non_empty_list(attribute) PUB • pub_attr TYPEALIAS PACKAGE_NAME batch_type_alias_targets, EOF / SEMI]
// [120, structure_item → non_empty_list(attribute) PUB • pub_attr TRAITALIAS PACKAGE_NAME batch_trait_alias_targets, EOF / SEMI]
// [128, structure_item → non_empty_list(attribute) PUB • pub_attr IMPL optional_type_parameters type_name FOR type_ WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [134, structure_item → non_empty_list(attribute) PUB • pub_attr IMPL optional_type_parameters type_name WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [135, pub_attr → •, EXTERN / STRUCT / ENUM / TRAIT / IMPL / ASYNC / TYPEALIAS / TRAITALIAS / FNALIAS / FN / LET / CONST / TYPE]
// [136, pub_attr → • LPAREN READONLY RPAREN, EXTERN / STRUCT / ENUM / TRAIT / IMPL / ASYNC / TYPEALIAS / TRAITALIAS / FNALIAS / FN / LET / CONST / TYPE]
// [137, pub_attr → • LPAREN LIDENT RPAREN, EXTERN / STRUCT / ENUM / TRAIT / IMPL / ASYNC / TYPEALIAS / TRAITALIAS / FNALIAS / FN / LET / CONST / TYPE]
// [143, type_header → non_empty_list(attribute) PUB • pub_attr TYPE luident optional_type_parameters_no_constraints, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / AMPER / PACKAGE_NAME]
// [149, type_header_bang → non_empty_list(attribute) PUB • pub_attr TYPE EXCLAMATION luident, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / LBRACE / AMPER / PACKAGE_NAME]
// [155, type_alias_header → non_empty_list(attribute) PUB • pub_attr TYPEALIAS luident optional_type_parameters_no_constraints, EQUAL]
// [161, struct_header → non_empty_list(attribute) PUB • pub_attr STRUCT luident optional_type_parameters_no_constraints, LBRACE]
// [167, enum_header → non_empty_list(attribute) PUB • pub_attr ENUM luident optional_type_parameters_no_constraints, LBRACE]
fn yy_state_1081(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_780)
    NT_pub_attr => Shift(yy_state_1082)
    T_EXTERN | T_STRUCT | T_ENUM | T_TRAIT | T_IMPL | T_ASYNC | T_TYPEALIAS | T_TRAITALIAS | T_FNALIAS | T_FN | T_LET | T_CONST | T_TYPE => Reduce(0, NT_pub_attr, yy_action_250)
    _ => Error
  }
}

// [27, fun_header → non_empty_list(attribute) PUB pub_attr • ASYNC FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [28, fun_header → non_empty_list(attribute) PUB pub_attr • FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [37, extern_fun_header → non_empty_list(attribute) PUB pub_attr • EXTERN STRING FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL]
// [56, val_header → non_empty_list(attribute) PUB pub_attr • LET LIDENT, EQUAL]
// [57, val_header → non_empty_list(attribute) PUB pub_attr • LET LIDENT COLON type_, EQUAL]
// [68, val_header → non_empty_list(attribute) PUB pub_attr • CONST UIDENT, EQUAL]
// [69, val_header → non_empty_list(attribute) PUB pub_attr • CONST UIDENT COLON type_, EQUAL]
// [77, structure_item → non_empty_list(attribute) PUB pub_attr • EXTERN TYPE luident optional_type_parameters_no_constraints deriving_directive_list, EOF / SEMI]
// [96, structure_item → non_empty_list(attribute) PUB pub_attr • FNALIAS func_alias_targets, EOF / SEMI]
// [102, structure_item → non_empty_list(attribute) PUB pub_attr • TRAIT luident option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) LBRACE list_semis(trait_method_decl) RBRACE, EOF / SEMI]
// [108, structure_item → non_empty_list(attribute) PUB pub_attr • TRAITALIAS luident EQUAL type_name, EOF / SEMI]
// [114, structure_item → non_empty_list(attribute) PUB pub_attr • TYPEALIAS PACKAGE_NAME batch_type_alias_targets, EOF / SEMI]
// [120, structure_item → non_empty_list(attribute) PUB pub_attr • TRAITALIAS PACKAGE_NAME batch_trait_alias_targets, EOF / SEMI]
// [128, structure_item → non_empty_list(attribute) PUB pub_attr • IMPL optional_type_parameters type_name FOR type_ WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [134, structure_item → non_empty_list(attribute) PUB pub_attr • IMPL optional_type_parameters type_name WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [143, type_header → non_empty_list(attribute) PUB pub_attr • TYPE luident optional_type_parameters_no_constraints, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / AMPER / PACKAGE_NAME]
// [149, type_header_bang → non_empty_list(attribute) PUB pub_attr • TYPE EXCLAMATION luident, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / LBRACE / AMPER / PACKAGE_NAME]
// [155, type_alias_header → non_empty_list(attribute) PUB pub_attr • TYPEALIAS luident optional_type_parameters_no_constraints, EQUAL]
// [161, struct_header → non_empty_list(attribute) PUB pub_attr • STRUCT luident optional_type_parameters_no_constraints, LBRACE]
// [167, enum_header → non_empty_list(attribute) PUB pub_attr • ENUM luident optional_type_parameters_no_constraints, LBRACE]
fn yy_state_1082(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ENUM => Shift(yy_state_1083)
    T_STRUCT => Shift(yy_state_1086)
    T_TYPE => Shift(yy_state_1089)
    T_IMPL => Shift(yy_state_1094)
    T_TYPEALIAS => Shift(yy_state_1111)
    T_TRAITALIAS => Shift(yy_state_1116)
    T_TRAIT => Shift(yy_state_1122)
    T_FNALIAS => Shift(yy_state_1128)
    T_CONST => Shift(yy_state_1130)
    T_LET => Shift(yy_state_1134)
    T_EXTERN => Shift(yy_state_1138)
    T_FN => Shift(yy_state_1150)
    T_ASYNC => Shift(yy_state_1156)
    _ => Error
  }
}

// [167, enum_header → non_empty_list(attribute) PUB pub_attr ENUM • luident optional_type_parameters_no_constraints, LBRACE]
// [192, luident → • LIDENT, LBRACKET / LBRACE]
// [193, luident → • UIDENT, LBRACKET / LBRACE]
fn yy_state_1083(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    NT_luident => Shift(yy_state_1084)
    _ => Error
  }
}

// [13, optional_type_parameters_no_constraints → • option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)), LBRACE]
// [167, enum_header → non_empty_list(attribute) PUB pub_attr ENUM luident • optional_type_parameters_no_constraints, LBRACE]
// [453, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → •, LBRACE]
// [454, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → • LBRACKET non_empty_list_commas(id(type_decl_binder)) RBRACKET, LBRACE]
fn yy_state_1084(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_676)
    NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__ => Shift(yy_state_687)
    NT_optional_type_parameters_no_constraints => Shift(yy_state_1085)
    T_LBRACE => Reduce(0, NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__, yy_action_613)
    _ => Error
  }
}

// [167, enum_header → non_empty_list(attribute) PUB pub_attr ENUM luident optional_type_parameters_no_constraints •, LBRACE]
fn yy_state_1085(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(6, NT_enum_header, yy_action_80)
}

// [161, struct_header → non_empty_list(attribute) PUB pub_attr STRUCT • luident optional_type_parameters_no_constraints, LBRACE]
// [192, luident → • LIDENT, LBRACKET / LBRACE]
// [193, luident → • UIDENT, LBRACKET / LBRACE]
fn yy_state_1086(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    NT_luident => Shift(yy_state_1087)
    _ => Error
  }
}

// [13, optional_type_parameters_no_constraints → • option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)), LBRACE]
// [161, struct_header → non_empty_list(attribute) PUB pub_attr STRUCT luident • optional_type_parameters_no_constraints, LBRACE]
// [453, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → •, LBRACE]
// [454, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → • LBRACKET non_empty_list_commas(id(type_decl_binder)) RBRACKET, LBRACE]
fn yy_state_1087(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_676)
    NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__ => Shift(yy_state_687)
    NT_optional_type_parameters_no_constraints => Shift(yy_state_1088)
    T_LBRACE => Reduce(0, NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__, yy_action_613)
    _ => Error
  }
}

// [161, struct_header → non_empty_list(attribute) PUB pub_attr STRUCT luident optional_type_parameters_no_constraints •, LBRACE]
fn yy_state_1088(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(6, NT_struct_header, yy_action_235)
}

// [143, type_header → non_empty_list(attribute) PUB pub_attr TYPE • luident optional_type_parameters_no_constraints, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / AMPER / PACKAGE_NAME]
// [149, type_header_bang → non_empty_list(attribute) PUB pub_attr TYPE • EXCLAMATION luident, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / LBRACE / AMPER / PACKAGE_NAME]
// [192, luident → • LIDENT, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / LBRACKET / UNDERSCORE / AMPER / PACKAGE_NAME]
// [193, luident → • UIDENT, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / LBRACKET / UNDERSCORE / AMPER / PACKAGE_NAME]
fn yy_state_1089(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    T_EXCLAMATION => Shift(yy_state_1090)
    NT_luident => Shift(yy_state_1092)
    _ => Error
  }
}

// [149, type_header_bang → non_empty_list(attribute) PUB pub_attr TYPE EXCLAMATION • luident, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / LBRACE / AMPER / PACKAGE_NAME]
// [192, luident → • LIDENT, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / LBRACE / AMPER / PACKAGE_NAME]
// [193, luident → • UIDENT, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / LBRACE / AMPER / PACKAGE_NAME]
fn yy_state_1090(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    NT_luident => Shift(yy_state_1091)
    _ => Error
  }
}

// [149, type_header_bang → non_empty_list(attribute) PUB pub_attr TYPE EXCLAMATION luident •, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / LBRACE / AMPER / PACKAGE_NAME]
fn yy_state_1091(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(6, NT_type_header_bang, yy_action_472)
}

// [13, optional_type_parameters_no_constraints → • option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)), LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / AMPER / PACKAGE_NAME]
// [143, type_header → non_empty_list(attribute) PUB pub_attr TYPE luident • optional_type_parameters_no_constraints, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / AMPER / PACKAGE_NAME]
// [453, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → •, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / AMPER / PACKAGE_NAME]
// [454, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → • LBRACKET non_empty_list_commas(id(type_decl_binder)) RBRACKET, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / AMPER / PACKAGE_NAME]
fn yy_state_1092(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_676)
    NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__ => Shift(yy_state_687)
    NT_optional_type_parameters_no_constraints => Shift(yy_state_1093)
    T_LIDENT | T_UIDENT | T_EOF | T_DERIVE | T_ASYNC | T_LPAREN | T_SEMI | T_UNDERSCORE | T_AMPER | T_PACKAGE_NAME => Reduce(0, NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__, yy_action_613)
    _ => Error
  }
}

// [143, type_header → non_empty_list(attribute) PUB pub_attr TYPE luident optional_type_parameters_no_constraints •, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / AMPER / PACKAGE_NAME]
fn yy_state_1093(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(6, NT_type_header, yy_action_178)
}

// [11, type_parameters → • LBRACKET non_empty_list_commas(id(tvar_binder)) RBRACKET, LIDENT / UIDENT / AMPER / PACKAGE_NAME]
// [12, optional_type_parameters → • option(type_parameters), LIDENT / UIDENT / AMPER / PACKAGE_NAME]
// [128, structure_item → non_empty_list(attribute) PUB pub_attr IMPL • optional_type_parameters type_name FOR type_ WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [134, structure_item → non_empty_list(attribute) PUB pub_attr IMPL • optional_type_parameters type_name WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [450, option(type_parameters) → •, LIDENT / UIDENT / AMPER / PACKAGE_NAME]
// [451, option(type_parameters) → • type_parameters, LIDENT / UIDENT / AMPER / PACKAGE_NAME]
fn yy_state_1094(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_type_parameters => Shift(yy_state_697)
    NT_option_type_parameters_ => Shift(yy_state_807)
    T_LBRACKET => Shift(yy_state_808)
    NT_optional_type_parameters => Shift(yy_state_1095)
    T_LIDENT | T_UIDENT | T_AMPER | T_PACKAGE_NAME => Reduce(0, NT_option_type_parameters_, yy_action_515)
    _ => Error
  }
}

// [128, structure_item → non_empty_list(attribute) PUB pub_attr IMPL optional_type_parameters • type_name FOR type_ WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [134, structure_item → non_empty_list(attribute) PUB pub_attr IMPL optional_type_parameters • type_name WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [192, luident → • LIDENT, WITH / FOR]
// [193, luident → • UIDENT, WITH / FOR]
// [198, qual_ident_ty → • luident, WITH / FOR]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, WITH / FOR]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, WITH / FOR]
// [335, type_name → • qual_ident_ty, WITH / FOR]
// [336, type_name → • AMPER qual_ident_ty, WITH / FOR]
fn yy_state_1095(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    NT_qual_ident_ty => Shift(yy_state_26)
    NT_type_name => Shift(yy_state_1096)
    _ => Error
  }
}

// [128, structure_item → non_empty_list(attribute) PUB pub_attr IMPL optional_type_parameters type_name • FOR type_ WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [134, structure_item → non_empty_list(attribute) PUB pub_attr IMPL optional_type_parameters type_name • WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
fn yy_state_1096(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_WITH => Shift(yy_state_1097)
    T_FOR => Shift(yy_state_1103)
    _ => Error
  }
}

// [134, structure_item → non_empty_list(attribute) PUB pub_attr IMPL optional_type_parameters type_name WITH • LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
fn yy_state_1097(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_1098)
    _ => Error
  }
}

// [134, structure_item → non_empty_list(attribute) PUB pub_attr IMPL optional_type_parameters type_name WITH LIDENT • optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [201, optional_bang → • EXCLAMATION, LPAREN]
// [202, optional_bang → •, LPAREN]
fn yy_state_1098(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EXCLAMATION => Shift(yy_state_535)
    NT_optional_bang => Shift(yy_state_1099)
    T_LPAREN => Reduce(0, NT_optional_bang, yy_action_662)
    _ => Error
  }
}

// [10, parameters → • LPAREN list_commas(parameter) RPAREN, EQUAL / LBRACE / THIN_ARROW]
// [134, structure_item → non_empty_list(attribute) PUB pub_attr IMPL optional_type_parameters type_name WITH LIDENT optional_bang • parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
fn yy_state_1099(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_298)
    NT_parameters => Shift(yy_state_1100)
    _ => Error
  }
}

// [134, structure_item → non_empty_list(attribute) PUB pub_attr IMPL optional_type_parameters type_name WITH LIDENT optional_bang parameters • option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [460, option(preceded(THIN_ARROW,return_type)) → •, EQUAL / LBRACE]
// [461, option(preceded(THIN_ARROW,return_type)) → • THIN_ARROW return_type, EQUAL / LBRACE]
fn yy_state_1100(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_THIN_ARROW => Shift(yy_state_246)
    NT_option_preceded_THIN_ARROW_return_type__ => Shift(yy_state_1101)
    T_EQUAL | T_LBRACE => Reduce(0, NT_option_preceded_THIN_ARROW_return_type__, yy_action_161)
    _ => Error
  }
}

// [42, block_expr_with_local_types → • LBRACE local_types_and_stmts RBRACE, EOF / SEMI]
// [43, impl_body → • block_expr_with_local_types, EOF / SEMI]
// [44, impl_body → • EQUAL STRING, EOF / SEMI]
// [134, structure_item → non_empty_list(attribute) PUB pub_attr IMPL optional_type_parameters type_name WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) • impl_body, EOF / SEMI]
fn yy_state_1101(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EQUAL => Shift(yy_state_706)
    NT_block_expr_with_local_types => Shift(yy_state_708)
    T_LBRACE => Shift(yy_state_709)
    NT_impl_body => Shift(yy_state_1102)
    _ => Error
  }
}

// [134, structure_item → non_empty_list(attribute) PUB pub_attr IMPL optional_type_parameters type_name WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body •, EOF / SEMI]
fn yy_state_1102(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(12, NT_structure_item, yy_action_51)
}

// [128, structure_item → non_empty_list(attribute) PUB pub_attr IMPL optional_type_parameters type_name FOR • type_ WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [192, luident → • LIDENT, WITH / QUESTION / LBRACKET]
// [193, luident → • UIDENT, WITH / QUESTION / LBRACKET]
// [198, qual_ident_ty → • luident, WITH / QUESTION / LBRACKET]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, WITH / QUESTION / LBRACKET]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, WITH / QUESTION / LBRACKET]
// [410, type_ → • type_ QUESTION, WITH / QUESTION]
// [411, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN, WITH / QUESTION]
// [412, type_ → • ASYNC LPAREN type_ COMMA RPAREN THIN_ARROW return_type, WITH / QUESTION]
// [413, type_ → • ASYNC LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, WITH / QUESTION]
// [414, type_ → • LPAREN type_ COMMA RPAREN THIN_ARROW return_type, WITH / QUESTION]
// [415, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, WITH / QUESTION]
// [416, type_ → • ASYNC LPAREN RPAREN THIN_ARROW return_type, WITH / QUESTION]
// [417, type_ → • LPAREN RPAREN THIN_ARROW return_type, WITH / QUESTION]
// [418, type_ → • LPAREN type_ RPAREN, WITH / QUESTION]
// [419, type_ → • ASYNC LPAREN type_ RPAREN THIN_ARROW return_type, WITH / QUESTION]
// [420, type_ → • LPAREN type_ RPAREN THIN_ARROW return_type, WITH / QUESTION]
// [421, type_ → • qual_ident_ty optional_type_arguments, WITH / QUESTION]
// [422, type_ → • AMPER qual_ident_ty, WITH / QUESTION]
// [423, type_ → • UNDERSCORE, WITH / QUESTION]
fn yy_state_1103(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    T_UNDERSCORE => Shift(yy_state_120)
    T_AMPER => Shift(yy_state_121)
    NT_qual_ident_ty => Shift(yy_state_123)
    T_ASYNC => Shift(yy_state_129)
    T_LPAREN => Shift(yy_state_134)
    NT_type_ => Shift(yy_state_1104)
    _ => Error
  }
}

// [128, structure_item → non_empty_list(attribute) PUB pub_attr IMPL optional_type_parameters type_name FOR type_ • WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [410, type_ → type_ • QUESTION, WITH / QUESTION]
fn yy_state_1104(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_QUESTION => Shift(yy_state_139)
    T_WITH => Shift(yy_state_1105)
    _ => Error
  }
}

// [128, structure_item → non_empty_list(attribute) PUB pub_attr IMPL optional_type_parameters type_name FOR type_ WITH • LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
fn yy_state_1105(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_1106)
    _ => Error
  }
}

// [128, structure_item → non_empty_list(attribute) PUB pub_attr IMPL optional_type_parameters type_name FOR type_ WITH LIDENT • optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [201, optional_bang → • EXCLAMATION, LPAREN]
// [202, optional_bang → •, LPAREN]
fn yy_state_1106(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EXCLAMATION => Shift(yy_state_535)
    NT_optional_bang => Shift(yy_state_1107)
    T_LPAREN => Reduce(0, NT_optional_bang, yy_action_662)
    _ => Error
  }
}

// [10, parameters → • LPAREN list_commas(parameter) RPAREN, EQUAL / LBRACE / THIN_ARROW]
// [128, structure_item → non_empty_list(attribute) PUB pub_attr IMPL optional_type_parameters type_name FOR type_ WITH LIDENT optional_bang • parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
fn yy_state_1107(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_298)
    NT_parameters => Shift(yy_state_1108)
    _ => Error
  }
}

// [128, structure_item → non_empty_list(attribute) PUB pub_attr IMPL optional_type_parameters type_name FOR type_ WITH LIDENT optional_bang parameters • option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [460, option(preceded(THIN_ARROW,return_type)) → •, EQUAL / LBRACE]
// [461, option(preceded(THIN_ARROW,return_type)) → • THIN_ARROW return_type, EQUAL / LBRACE]
fn yy_state_1108(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_THIN_ARROW => Shift(yy_state_246)
    NT_option_preceded_THIN_ARROW_return_type__ => Shift(yy_state_1109)
    T_EQUAL | T_LBRACE => Reduce(0, NT_option_preceded_THIN_ARROW_return_type__, yy_action_161)
    _ => Error
  }
}

// [42, block_expr_with_local_types → • LBRACE local_types_and_stmts RBRACE, EOF / SEMI]
// [43, impl_body → • block_expr_with_local_types, EOF / SEMI]
// [44, impl_body → • EQUAL STRING, EOF / SEMI]
// [128, structure_item → non_empty_list(attribute) PUB pub_attr IMPL optional_type_parameters type_name FOR type_ WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) • impl_body, EOF / SEMI]
fn yy_state_1109(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EQUAL => Shift(yy_state_706)
    NT_block_expr_with_local_types => Shift(yy_state_708)
    T_LBRACE => Shift(yy_state_709)
    NT_impl_body => Shift(yy_state_1110)
    _ => Error
  }
}

// [128, structure_item → non_empty_list(attribute) PUB pub_attr IMPL optional_type_parameters type_name FOR type_ WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body •, EOF / SEMI]
fn yy_state_1110(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(14, NT_structure_item, yy_action_180)
}

// [114, structure_item → non_empty_list(attribute) PUB pub_attr TYPEALIAS • PACKAGE_NAME batch_type_alias_targets, EOF / SEMI]
// [155, type_alias_header → non_empty_list(attribute) PUB pub_attr TYPEALIAS • luident optional_type_parameters_no_constraints, EQUAL]
// [192, luident → • LIDENT, EQUAL / LBRACKET]
// [193, luident → • UIDENT, EQUAL / LBRACKET]
fn yy_state_1111(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    NT_luident => Shift(yy_state_1112)
    T_PACKAGE_NAME => Shift(yy_state_1114)
    _ => Error
  }
}

// [13, optional_type_parameters_no_constraints → • option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)), EQUAL]
// [155, type_alias_header → non_empty_list(attribute) PUB pub_attr TYPEALIAS luident • optional_type_parameters_no_constraints, EQUAL]
// [453, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → •, EQUAL]
// [454, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → • LBRACKET non_empty_list_commas(id(type_decl_binder)) RBRACKET, EQUAL]
fn yy_state_1112(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_676)
    NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__ => Shift(yy_state_687)
    NT_optional_type_parameters_no_constraints => Shift(yy_state_1113)
    T_EQUAL => Reduce(0, NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__, yy_action_613)
    _ => Error
  }
}

// [155, type_alias_header → non_empty_list(attribute) PUB pub_attr TYPEALIAS luident optional_type_parameters_no_constraints •, EQUAL]
fn yy_state_1113(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(6, NT_type_alias_header, yy_action_467)
}

// [114, structure_item → non_empty_list(attribute) PUB pub_attr TYPEALIAS PACKAGE_NAME • batch_type_alias_targets, EOF / SEMI]
// [168, batch_type_alias_targets → • DOT_LIDENT optional_type_parameters_no_constraints, EOF / SEMI]
// [169, batch_type_alias_targets → • DOT_UIDENT optional_type_parameters_no_constraints, EOF / SEMI]
// [170, batch_type_alias_targets → • DOT_LPAREN non_empty_list_commas(batch_type_alias_target) RPAREN, EOF / SEMI]
fn yy_state_1114(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_DOT_LPAREN => Shift(yy_state_835)
    T_DOT_UIDENT => Shift(yy_state_845)
    T_DOT_LIDENT => Shift(yy_state_847)
    NT_batch_type_alias_targets => Shift(yy_state_1115)
    _ => Error
  }
}

// [114, structure_item → non_empty_list(attribute) PUB pub_attr TYPEALIAS PACKAGE_NAME batch_type_alias_targets •, EOF / SEMI]
fn yy_state_1115(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(6, NT_structure_item, yy_action_697)
}

// [108, structure_item → non_empty_list(attribute) PUB pub_attr TRAITALIAS • luident EQUAL type_name, EOF / SEMI]
// [120, structure_item → non_empty_list(attribute) PUB pub_attr TRAITALIAS • PACKAGE_NAME batch_trait_alias_targets, EOF / SEMI]
// [192, luident → • LIDENT, EQUAL]
// [193, luident → • UIDENT, EQUAL]
fn yy_state_1116(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    T_PACKAGE_NAME => Shift(yy_state_1117)
    NT_luident => Shift(yy_state_1119)
    _ => Error
  }
}

// [120, structure_item → non_empty_list(attribute) PUB pub_attr TRAITALIAS PACKAGE_NAME • batch_trait_alias_targets, EOF / SEMI]
// [172, batch_trait_alias_targets → • DOT_LIDENT, EOF / SEMI]
// [173, batch_trait_alias_targets → • DOT_UIDENT, EOF / SEMI]
// [174, batch_trait_alias_targets → • DOT_LPAREN non_empty_list_commas(batch_trait_alias_target) RPAREN, EOF / SEMI]
fn yy_state_1117(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_DOT_LPAREN => Shift(yy_state_852)
    T_DOT_UIDENT => Shift(yy_state_861)
    T_DOT_LIDENT => Shift(yy_state_862)
    NT_batch_trait_alias_targets => Shift(yy_state_1118)
    _ => Error
  }
}

// [120, structure_item → non_empty_list(attribute) PUB pub_attr TRAITALIAS PACKAGE_NAME batch_trait_alias_targets •, EOF / SEMI]
fn yy_state_1118(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(6, NT_structure_item, yy_action_274)
}

// [108, structure_item → non_empty_list(attribute) PUB pub_attr TRAITALIAS luident • EQUAL type_name, EOF / SEMI]
fn yy_state_1119(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EQUAL => Shift(yy_state_1120)
    _ => Error
  }
}

// [108, structure_item → non_empty_list(attribute) PUB pub_attr TRAITALIAS luident EQUAL • type_name, EOF / SEMI]
// [192, luident → • LIDENT, EOF / SEMI]
// [193, luident → • UIDENT, EOF / SEMI]
// [198, qual_ident_ty → • luident, EOF / SEMI]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, EOF / SEMI]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, EOF / SEMI]
// [335, type_name → • qual_ident_ty, EOF / SEMI]
// [336, type_name → • AMPER qual_ident_ty, EOF / SEMI]
fn yy_state_1120(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    NT_qual_ident_ty => Shift(yy_state_26)
    NT_type_name => Shift(yy_state_1121)
    _ => Error
  }
}

// [108, structure_item → non_empty_list(attribute) PUB pub_attr TRAITALIAS luident EQUAL type_name •, EOF / SEMI]
fn yy_state_1121(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(7, NT_structure_item, yy_action_76)
}

// [102, structure_item → non_empty_list(attribute) PUB pub_attr TRAIT • luident option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) LBRACE list_semis(trait_method_decl) RBRACE, EOF / SEMI]
// [192, luident → • LIDENT, COLON / LBRACE]
// [193, luident → • UIDENT, COLON / LBRACE]
fn yy_state_1122(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    NT_luident => Shift(yy_state_1123)
    _ => Error
  }
}

// [102, structure_item → non_empty_list(attribute) PUB pub_attr TRAIT luident • option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) LBRACE list_semis(trait_method_decl) RBRACE, EOF / SEMI]
// [475, option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) → •, LBRACE]
// [476, option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) → • COLON separated_nonempty_list(PLUS,tvar_constraint), LBRACE]
fn yy_state_1123(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_869)
    NT_option_preceded_COLON_separated_nonempty_list_PLUS_tvar_constraint___ => Shift(yy_state_1124)
    T_LBRACE => Reduce(0, NT_option_preceded_COLON_separated_nonempty_list_PLUS_tvar_constraint___, yy_action_57)
    _ => Error
  }
}

// [102, structure_item → non_empty_list(attribute) PUB pub_attr TRAIT luident option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) • LBRACE list_semis(trait_method_decl) RBRACE, EOF / SEMI]
fn yy_state_1124(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACE => Shift(yy_state_1125)
    _ => Error
  }
}

// [102, structure_item → non_empty_list(attribute) PUB pub_attr TRAIT luident option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) LBRACE • list_semis(trait_method_decl) RBRACE, EOF / SEMI]
// [187, trait_method_decl → • LIDENT optional_bang optional_type_parameters LPAREN list_commas(trait_method_param) RPAREN option(preceded(THIN_ARROW,return_type)) option(preceded(EQUAL,wildcard)), SEMI / RBRACE]
// [477, list_semis(trait_method_decl) → •, RBRACE]
// [478, list_semis(trait_method_decl) → • non_empty_list_semis(trait_method_decl), RBRACE]
// [565, non_empty_list_semis(trait_method_decl) → • non_empty_list_semis_rev(trait_method_decl), RBRACE]
// [613, non_empty_list_semis_rev(trait_method_decl) → • non_empty_list_semi_rev_aux(trait_method_decl) option(SEMI), RBRACE]
// [635, non_empty_list_semi_rev_aux(trait_method_decl) → • trait_method_decl, SEMI / RBRACE]
// [636, non_empty_list_semi_rev_aux(trait_method_decl) → • non_empty_list_semi_rev_aux(trait_method_decl) SEMI trait_method_decl, SEMI / RBRACE]
fn yy_state_1125(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_trait_method_decl => Shift(yy_state_873)
    NT_non_empty_list_semi_rev_aux_trait_method_decl_ => Shift(yy_state_874)
    T_LIDENT => Shift(yy_state_878)
    NT_non_empty_list_semis_rev_trait_method_decl_ => Shift(yy_state_902)
    NT_non_empty_list_semis_trait_method_decl_ => Shift(yy_state_903)
    NT_list_semis_trait_method_decl_ => Shift(yy_state_1126)
    T_RBRACE => Reduce(0, NT_list_semis_trait_method_decl_, yy_action_262)
    _ => Error
  }
}

// [102, structure_item → non_empty_list(attribute) PUB pub_attr TRAIT luident option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) LBRACE list_semis(trait_method_decl) • RBRACE, EOF / SEMI]
fn yy_state_1126(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACE => Shift(yy_state_1127)
    _ => Error
  }
}

// [102, structure_item → non_empty_list(attribute) PUB pub_attr TRAIT luident option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) LBRACE list_semis(trait_method_decl) RBRACE •, EOF / SEMI]
fn yy_state_1127(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(9, NT_structure_item, yy_action_710)
}

// [96, structure_item → non_empty_list(attribute) PUB pub_attr FNALIAS • func_alias_targets, EOF / SEMI]
// [176, func_alias_targets → • func_alias_target(LIDENT), EOF / SEMI]
// [177, func_alias_targets → • func_alias_type_name(LIDENT,UIDENT) func_alias_target(LIDENT), EOF / SEMI]
// [178, func_alias_targets → • PACKAGE_NAME func_alias_target(DOT_LIDENT), EOF / SEMI]
// [179, func_alias_targets → • PACKAGE_NAME func_alias_type_name(DOT_LIDENT,DOT_UIDENT) func_alias_target(LIDENT), EOF / SEMI]
// [180, func_alias_targets → • option(func_alias_type_name(LIDENT,UIDENT)) LPAREN non_empty_list_commas(func_alias_target(LIDENT)) RPAREN, EOF / SEMI]
// [181, func_alias_targets → • PACKAGE_NAME DOT_LPAREN non_empty_list_commas(func_alias_target(LIDENT)) RPAREN, EOF / SEMI]
// [182, func_alias_targets → • PACKAGE_NAME func_alias_type_name(DOT_LIDENT,DOT_UIDENT) LPAREN non_empty_list_commas(func_alias_target(LIDENT)) RPAREN, EOF / SEMI]
// [484, func_alias_type_name(LIDENT,UIDENT) → • LIDENT COLONCOLON, LIDENT / LPAREN]
// [485, func_alias_type_name(LIDENT,UIDENT) → • UIDENT COLONCOLON, LIDENT / LPAREN]
// [486, func_alias_target(LIDENT) → • LIDENT option(preceded(AS,binder)), EOF / SEMI]
// [490, option(func_alias_type_name(LIDENT,UIDENT)) → •, LPAREN]
// [491, option(func_alias_type_name(LIDENT,UIDENT)) → • func_alias_type_name(LIDENT,UIDENT), LPAREN]
fn yy_state_1128(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_907)
    T_LIDENT => Shift(yy_state_909)
    NT_option_func_alias_type_name_LIDENT_UIDENT__ => Shift(yy_state_914)
    T_PACKAGE_NAME => Shift(yy_state_924)
    NT_func_alias_type_name_LIDENT_UIDENT_ => Shift(yy_state_939)
    NT_func_alias_target_LIDENT_ => Shift(yy_state_941)
    NT_func_alias_targets => Shift(yy_state_1129)
    T_LPAREN => Reduce(0, NT_option_func_alias_type_name_LIDENT_UIDENT__, yy_action_298)
    _ => Error
  }
}

// [96, structure_item → non_empty_list(attribute) PUB pub_attr FNALIAS func_alias_targets •, EOF / SEMI]
fn yy_state_1129(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_structure_item, yy_action_703)
}

// [68, val_header → non_empty_list(attribute) PUB pub_attr CONST • UIDENT, EQUAL]
// [69, val_header → non_empty_list(attribute) PUB pub_attr CONST • UIDENT COLON type_, EQUAL]
fn yy_state_1130(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_1131)
    _ => Error
  }
}

// [68, val_header → non_empty_list(attribute) PUB pub_attr CONST UIDENT •, EQUAL]
// [69, val_header → non_empty_list(attribute) PUB pub_attr CONST UIDENT • COLON type_, EQUAL]
fn yy_state_1131(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_1132)
    T_EQUAL => Reduce(5, NT_val_header, yy_action_26)
    _ => Error
  }
}

// [69, val_header → non_empty_list(attribute) PUB pub_attr CONST UIDENT COLON • type_, EQUAL]
// [192, luident → • LIDENT, EQUAL / QUESTION / LBRACKET]
// [193, luident → • UIDENT, EQUAL / QUESTION / LBRACKET]
// [198, qual_ident_ty → • luident, EQUAL / QUESTION / LBRACKET]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, EQUAL / QUESTION / LBRACKET]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, EQUAL / QUESTION / LBRACKET]
// [410, type_ → • type_ QUESTION, EQUAL / QUESTION]
// [411, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN, EQUAL / QUESTION]
// [412, type_ → • ASYNC LPAREN type_ COMMA RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [413, type_ → • ASYNC LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [414, type_ → • LPAREN type_ COMMA RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [415, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [416, type_ → • ASYNC LPAREN RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [417, type_ → • LPAREN RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [418, type_ → • LPAREN type_ RPAREN, EQUAL / QUESTION]
// [419, type_ → • ASYNC LPAREN type_ RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [420, type_ → • LPAREN type_ RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [421, type_ → • qual_ident_ty optional_type_arguments, EQUAL / QUESTION]
// [422, type_ → • AMPER qual_ident_ty, EQUAL / QUESTION]
// [423, type_ → • UNDERSCORE, EQUAL / QUESTION]
fn yy_state_1132(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    T_UNDERSCORE => Shift(yy_state_120)
    T_AMPER => Shift(yy_state_121)
    NT_qual_ident_ty => Shift(yy_state_123)
    T_ASYNC => Shift(yy_state_129)
    T_LPAREN => Shift(yy_state_134)
    NT_type_ => Shift(yy_state_1133)
    _ => Error
  }
}

// [69, val_header → non_empty_list(attribute) PUB pub_attr CONST UIDENT COLON type_ •, EQUAL]
// [410, type_ → type_ • QUESTION, EQUAL / QUESTION]
fn yy_state_1133(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_QUESTION => Shift(yy_state_139)
    T_EQUAL => Reduce(7, NT_val_header, yy_action_633)
    _ => Error
  }
}

// [56, val_header → non_empty_list(attribute) PUB pub_attr LET • LIDENT, EQUAL]
// [57, val_header → non_empty_list(attribute) PUB pub_attr LET • LIDENT COLON type_, EQUAL]
fn yy_state_1134(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_1135)
    _ => Error
  }
}

// [56, val_header → non_empty_list(attribute) PUB pub_attr LET LIDENT •, EQUAL]
// [57, val_header → non_empty_list(attribute) PUB pub_attr LET LIDENT • COLON type_, EQUAL]
fn yy_state_1135(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_1136)
    T_EQUAL => Reduce(5, NT_val_header, yy_action_643)
    _ => Error
  }
}

// [57, val_header → non_empty_list(attribute) PUB pub_attr LET LIDENT COLON • type_, EQUAL]
// [192, luident → • LIDENT, EQUAL / QUESTION / LBRACKET]
// [193, luident → • UIDENT, EQUAL / QUESTION / LBRACKET]
// [198, qual_ident_ty → • luident, EQUAL / QUESTION / LBRACKET]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, EQUAL / QUESTION / LBRACKET]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, EQUAL / QUESTION / LBRACKET]
// [410, type_ → • type_ QUESTION, EQUAL / QUESTION]
// [411, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN, EQUAL / QUESTION]
// [412, type_ → • ASYNC LPAREN type_ COMMA RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [413, type_ → • ASYNC LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [414, type_ → • LPAREN type_ COMMA RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [415, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [416, type_ → • ASYNC LPAREN RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [417, type_ → • LPAREN RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [418, type_ → • LPAREN type_ RPAREN, EQUAL / QUESTION]
// [419, type_ → • ASYNC LPAREN type_ RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [420, type_ → • LPAREN type_ RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [421, type_ → • qual_ident_ty optional_type_arguments, EQUAL / QUESTION]
// [422, type_ → • AMPER qual_ident_ty, EQUAL / QUESTION]
// [423, type_ → • UNDERSCORE, EQUAL / QUESTION]
fn yy_state_1136(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    T_UNDERSCORE => Shift(yy_state_120)
    T_AMPER => Shift(yy_state_121)
    NT_qual_ident_ty => Shift(yy_state_123)
    T_ASYNC => Shift(yy_state_129)
    T_LPAREN => Shift(yy_state_134)
    NT_type_ => Shift(yy_state_1137)
    _ => Error
  }
}

// [57, val_header → non_empty_list(attribute) PUB pub_attr LET LIDENT COLON type_ •, EQUAL]
// [410, type_ → type_ • QUESTION, EQUAL / QUESTION]
fn yy_state_1137(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_QUESTION => Shift(yy_state_139)
    T_EQUAL => Reduce(7, NT_val_header, yy_action_591)
    _ => Error
  }
}

// [37, extern_fun_header → non_empty_list(attribute) PUB pub_attr EXTERN • STRING FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL]
// [77, structure_item → non_empty_list(attribute) PUB pub_attr EXTERN • TYPE luident optional_type_parameters_no_constraints deriving_directive_list, EOF / SEMI]
fn yy_state_1138(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_TYPE => Shift(yy_state_1139)
    T_STRING => Shift(yy_state_1143)
    _ => Error
  }
}

// [77, structure_item → non_empty_list(attribute) PUB pub_attr EXTERN TYPE • luident optional_type_parameters_no_constraints deriving_directive_list, EOF / SEMI]
// [192, luident → • LIDENT, EOF / DERIVE / SEMI / LBRACKET]
// [193, luident → • UIDENT, EOF / DERIVE / SEMI / LBRACKET]
fn yy_state_1139(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    NT_luident => Shift(yy_state_1140)
    _ => Error
  }
}

// [13, optional_type_parameters_no_constraints → • option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)), EOF / DERIVE / SEMI]
// [77, structure_item → non_empty_list(attribute) PUB pub_attr EXTERN TYPE luident • optional_type_parameters_no_constraints deriving_directive_list, EOF / SEMI]
// [453, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → •, EOF / DERIVE / SEMI]
// [454, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → • LBRACKET non_empty_list_commas(id(type_decl_binder)) RBRACKET, EOF / DERIVE / SEMI]
fn yy_state_1140(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_676)
    NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__ => Shift(yy_state_687)
    NT_optional_type_parameters_no_constraints => Shift(yy_state_1141)
    T_EOF | T_DERIVE | T_SEMI => Reduce(0, NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__, yy_action_613)
    _ => Error
  }
}

// [77, structure_item → non_empty_list(attribute) PUB pub_attr EXTERN TYPE luident optional_type_parameters_no_constraints • deriving_directive_list, EOF / SEMI]
// [185, deriving_directive_list → •, EOF / SEMI]
// [186, deriving_directive_list → • DERIVE LPAREN list_commas(deriving_directive) RPAREN, EOF / SEMI]
fn yy_state_1141(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_DERIVE => Shift(yy_state_719)
    NT_deriving_directive_list => Shift(yy_state_1142)
    T_EOF | T_SEMI => Reduce(0, NT_deriving_directive_list, yy_action_147)
    _ => Error
  }
}

// [77, structure_item → non_empty_list(attribute) PUB pub_attr EXTERN TYPE luident optional_type_parameters_no_constraints deriving_directive_list •, EOF / SEMI]
fn yy_state_1142(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(8, NT_structure_item, yy_action_33)
}

// [37, extern_fun_header → non_empty_list(attribute) PUB pub_attr EXTERN STRING • FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL]
fn yy_state_1143(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_FN => Shift(yy_state_1144)
    _ => Error
  }
}

// [15, fun_binder → • type_name COLONCOLON LIDENT, EQUAL / LPAREN / EXCLAMATION / LBRACKET / THIN_ARROW]
// [16, fun_binder → • LIDENT, EQUAL / LPAREN / EXCLAMATION / LBRACKET / THIN_ARROW]
// [37, extern_fun_header → non_empty_list(attribute) PUB pub_attr EXTERN STRING FN • fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL]
// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
fn yy_state_1144(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LIDENT => Shift(yy_state_1005)
    NT_type_name => Shift(yy_state_1006)
    NT_fun_binder => Shift(yy_state_1145)
    _ => Error
  }
}

// [37, extern_fun_header → non_empty_list(attribute) PUB pub_attr EXTERN STRING FN fun_binder • optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL]
// [201, optional_bang → • EXCLAMATION, EQUAL / LPAREN / LBRACKET / THIN_ARROW]
// [202, optional_bang → •, EQUAL / LPAREN / LBRACKET / THIN_ARROW]
fn yy_state_1145(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EXCLAMATION => Shift(yy_state_535)
    NT_optional_bang => Shift(yy_state_1146)
    T_EQUAL | T_LPAREN | T_LBRACKET | T_THIN_ARROW => Reduce(0, NT_optional_bang, yy_action_662)
    _ => Error
  }
}

// [11, type_parameters → • LBRACKET non_empty_list_commas(id(tvar_binder)) RBRACKET, EQUAL / LPAREN / THIN_ARROW]
// [12, optional_type_parameters → • option(type_parameters), EQUAL / LPAREN / THIN_ARROW]
// [37, extern_fun_header → non_empty_list(attribute) PUB pub_attr EXTERN STRING FN fun_binder optional_bang • optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL]
// [450, option(type_parameters) → •, EQUAL / LPAREN / THIN_ARROW]
// [451, option(type_parameters) → • type_parameters, EQUAL / LPAREN / THIN_ARROW]
fn yy_state_1146(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_type_parameters => Shift(yy_state_697)
    NT_option_type_parameters_ => Shift(yy_state_807)
    T_LBRACKET => Shift(yy_state_808)
    NT_optional_type_parameters => Shift(yy_state_1147)
    T_EQUAL | T_LPAREN | T_THIN_ARROW => Reduce(0, NT_option_type_parameters_, yy_action_515)
    _ => Error
  }
}

// [10, parameters → • LPAREN list_commas(parameter) RPAREN, EQUAL / THIN_ARROW]
// [37, extern_fun_header → non_empty_list(attribute) PUB pub_attr EXTERN STRING FN fun_binder optional_bang optional_type_parameters • option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL]
// [458, option(parameters) → •, EQUAL / THIN_ARROW]
// [459, option(parameters) → • parameters, EQUAL / THIN_ARROW]
fn yy_state_1147(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_298)
    NT_parameters => Shift(yy_state_828)
    NT_option_parameters_ => Shift(yy_state_1148)
    T_EQUAL | T_THIN_ARROW => Reduce(0, NT_option_parameters_, yy_action_287)
    _ => Error
  }
}

// [37, extern_fun_header → non_empty_list(attribute) PUB pub_attr EXTERN STRING FN fun_binder optional_bang optional_type_parameters option(parameters) • option(preceded(THIN_ARROW,return_type)), EQUAL]
// [460, option(preceded(THIN_ARROW,return_type)) → •, EQUAL]
// [461, option(preceded(THIN_ARROW,return_type)) → • THIN_ARROW return_type, EQUAL]
fn yy_state_1148(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_THIN_ARROW => Shift(yy_state_246)
    NT_option_preceded_THIN_ARROW_return_type__ => Shift(yy_state_1149)
    T_EQUAL => Reduce(0, NT_option_preceded_THIN_ARROW_return_type__, yy_action_161)
    _ => Error
  }
}

// [37, extern_fun_header → non_empty_list(attribute) PUB pub_attr EXTERN STRING FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)) •, EQUAL]
fn yy_state_1149(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(11, NT_extern_fun_header, yy_action_34)
}

// [15, fun_binder → • type_name COLONCOLON LIDENT, EQUAL / LPAREN / EXCLAMATION / LBRACKET / LBRACE / THIN_ARROW]
// [16, fun_binder → • LIDENT, EQUAL / LPAREN / EXCLAMATION / LBRACKET / LBRACE / THIN_ARROW]
// [28, fun_header → non_empty_list(attribute) PUB pub_attr FN • fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
fn yy_state_1150(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LIDENT => Shift(yy_state_1005)
    NT_type_name => Shift(yy_state_1006)
    NT_fun_binder => Shift(yy_state_1151)
    _ => Error
  }
}

// [28, fun_header → non_empty_list(attribute) PUB pub_attr FN fun_binder • optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [201, optional_bang → • EXCLAMATION, EQUAL / LPAREN / LBRACKET / LBRACE / THIN_ARROW]
// [202, optional_bang → •, EQUAL / LPAREN / LBRACKET / LBRACE / THIN_ARROW]
fn yy_state_1151(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EXCLAMATION => Shift(yy_state_535)
    NT_optional_bang => Shift(yy_state_1152)
    T_EQUAL | T_LPAREN | T_LBRACKET | T_LBRACE | T_THIN_ARROW => Reduce(0, NT_optional_bang, yy_action_662)
    _ => Error
  }
}

// [11, type_parameters → • LBRACKET non_empty_list_commas(id(tvar_binder)) RBRACKET, EQUAL / LPAREN / LBRACE / THIN_ARROW]
// [12, optional_type_parameters → • option(type_parameters), EQUAL / LPAREN / LBRACE / THIN_ARROW]
// [28, fun_header → non_empty_list(attribute) PUB pub_attr FN fun_binder optional_bang • optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [450, option(type_parameters) → •, EQUAL / LPAREN / LBRACE / THIN_ARROW]
// [451, option(type_parameters) → • type_parameters, EQUAL / LPAREN / LBRACE / THIN_ARROW]
fn yy_state_1152(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_type_parameters => Shift(yy_state_697)
    NT_option_type_parameters_ => Shift(yy_state_807)
    T_LBRACKET => Shift(yy_state_808)
    NT_optional_type_parameters => Shift(yy_state_1153)
    T_EQUAL | T_LPAREN | T_LBRACE | T_THIN_ARROW => Reduce(0, NT_option_type_parameters_, yy_action_515)
    _ => Error
  }
}

// [10, parameters → • LPAREN list_commas(parameter) RPAREN, EQUAL / LBRACE / THIN_ARROW]
// [28, fun_header → non_empty_list(attribute) PUB pub_attr FN fun_binder optional_bang optional_type_parameters • option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [458, option(parameters) → •, EQUAL / LBRACE / THIN_ARROW]
// [459, option(parameters) → • parameters, EQUAL / LBRACE / THIN_ARROW]
fn yy_state_1153(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_298)
    NT_parameters => Shift(yy_state_828)
    NT_option_parameters_ => Shift(yy_state_1154)
    T_EQUAL | T_LBRACE | T_THIN_ARROW => Reduce(0, NT_option_parameters_, yy_action_287)
    _ => Error
  }
}

// [28, fun_header → non_empty_list(attribute) PUB pub_attr FN fun_binder optional_bang optional_type_parameters option(parameters) • option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [460, option(preceded(THIN_ARROW,return_type)) → •, EQUAL / LBRACE]
// [461, option(preceded(THIN_ARROW,return_type)) → • THIN_ARROW return_type, EQUAL / LBRACE]
fn yy_state_1154(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_THIN_ARROW => Shift(yy_state_246)
    NT_option_preceded_THIN_ARROW_return_type__ => Shift(yy_state_1155)
    T_EQUAL | T_LBRACE => Reduce(0, NT_option_preceded_THIN_ARROW_return_type__, yy_action_161)
    _ => Error
  }
}

// [28, fun_header → non_empty_list(attribute) PUB pub_attr FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)) •, EQUAL / LBRACE]
fn yy_state_1155(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(9, NT_fun_header, yy_action_371)
}

// [27, fun_header → non_empty_list(attribute) PUB pub_attr ASYNC • FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
fn yy_state_1156(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_FN => Shift(yy_state_1157)
    _ => Error
  }
}

// [15, fun_binder → • type_name COLONCOLON LIDENT, EQUAL / LPAREN / EXCLAMATION / LBRACKET / LBRACE / THIN_ARROW]
// [16, fun_binder → • LIDENT, EQUAL / LPAREN / EXCLAMATION / LBRACKET / LBRACE / THIN_ARROW]
// [27, fun_header → non_empty_list(attribute) PUB pub_attr ASYNC FN • fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
fn yy_state_1157(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LIDENT => Shift(yy_state_1005)
    NT_type_name => Shift(yy_state_1006)
    NT_fun_binder => Shift(yy_state_1158)
    _ => Error
  }
}

// [27, fun_header → non_empty_list(attribute) PUB pub_attr ASYNC FN fun_binder • optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [201, optional_bang → • EXCLAMATION, EQUAL / LPAREN / LBRACKET / LBRACE / THIN_ARROW]
// [202, optional_bang → •, EQUAL / LPAREN / LBRACKET / LBRACE / THIN_ARROW]
fn yy_state_1158(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EXCLAMATION => Shift(yy_state_535)
    NT_optional_bang => Shift(yy_state_1159)
    T_EQUAL | T_LPAREN | T_LBRACKET | T_LBRACE | T_THIN_ARROW => Reduce(0, NT_optional_bang, yy_action_662)
    _ => Error
  }
}

// [11, type_parameters → • LBRACKET non_empty_list_commas(id(tvar_binder)) RBRACKET, EQUAL / LPAREN / LBRACE / THIN_ARROW]
// [12, optional_type_parameters → • option(type_parameters), EQUAL / LPAREN / LBRACE / THIN_ARROW]
// [27, fun_header → non_empty_list(attribute) PUB pub_attr ASYNC FN fun_binder optional_bang • optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [450, option(type_parameters) → •, EQUAL / LPAREN / LBRACE / THIN_ARROW]
// [451, option(type_parameters) → • type_parameters, EQUAL / LPAREN / LBRACE / THIN_ARROW]
fn yy_state_1159(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_type_parameters => Shift(yy_state_697)
    NT_option_type_parameters_ => Shift(yy_state_807)
    T_LBRACKET => Shift(yy_state_808)
    NT_optional_type_parameters => Shift(yy_state_1160)
    T_EQUAL | T_LPAREN | T_LBRACE | T_THIN_ARROW => Reduce(0, NT_option_type_parameters_, yy_action_515)
    _ => Error
  }
}

// [10, parameters → • LPAREN list_commas(parameter) RPAREN, EQUAL / LBRACE / THIN_ARROW]
// [27, fun_header → non_empty_list(attribute) PUB pub_attr ASYNC FN fun_binder optional_bang optional_type_parameters • option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [458, option(parameters) → •, EQUAL / LBRACE / THIN_ARROW]
// [459, option(parameters) → • parameters, EQUAL / LBRACE / THIN_ARROW]
fn yy_state_1160(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_298)
    NT_parameters => Shift(yy_state_828)
    NT_option_parameters_ => Shift(yy_state_1161)
    T_EQUAL | T_LBRACE | T_THIN_ARROW => Reduce(0, NT_option_parameters_, yy_action_287)
    _ => Error
  }
}

// [27, fun_header → non_empty_list(attribute) PUB pub_attr ASYNC FN fun_binder optional_bang optional_type_parameters option(parameters) • option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [460, option(preceded(THIN_ARROW,return_type)) → •, EQUAL / LBRACE]
// [461, option(preceded(THIN_ARROW,return_type)) → • THIN_ARROW return_type, EQUAL / LBRACE]
fn yy_state_1161(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_THIN_ARROW => Shift(yy_state_246)
    NT_option_preceded_THIN_ARROW_return_type__ => Shift(yy_state_1162)
    T_EQUAL | T_LBRACE => Reduce(0, NT_option_preceded_THIN_ARROW_return_type__, yy_action_161)
    _ => Error
  }
}

// [27, fun_header → non_empty_list(attribute) PUB pub_attr ASYNC FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)) •, EQUAL / LBRACE]
fn yy_state_1162(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(10, NT_fun_header, yy_action_597)
}

// [25, fun_header → non_empty_list(attribute) PRIV • ASYNC FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [26, fun_header → non_empty_list(attribute) PRIV • FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [36, extern_fun_header → non_empty_list(attribute) PRIV • EXTERN STRING FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL]
// [54, val_header → non_empty_list(attribute) PRIV • LET LIDENT, EQUAL]
// [55, val_header → non_empty_list(attribute) PRIV • LET LIDENT COLON type_, EQUAL]
// [66, val_header → non_empty_list(attribute) PRIV • CONST UIDENT, EQUAL]
// [67, val_header → non_empty_list(attribute) PRIV • CONST UIDENT COLON type_, EQUAL]
// [76, structure_item → non_empty_list(attribute) PRIV • EXTERN TYPE luident optional_type_parameters_no_constraints deriving_directive_list, EOF / SEMI]
// [95, structure_item → non_empty_list(attribute) PRIV • FNALIAS func_alias_targets, EOF / SEMI]
// [101, structure_item → non_empty_list(attribute) PRIV • TRAIT luident option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) LBRACE list_semis(trait_method_decl) RBRACE, EOF / SEMI]
// [107, structure_item → non_empty_list(attribute) PRIV • TRAITALIAS luident EQUAL type_name, EOF / SEMI]
// [113, structure_item → non_empty_list(attribute) PRIV • TYPEALIAS PACKAGE_NAME batch_type_alias_targets, EOF / SEMI]
// [119, structure_item → non_empty_list(attribute) PRIV • TRAITALIAS PACKAGE_NAME batch_trait_alias_targets, EOF / SEMI]
// [127, structure_item → non_empty_list(attribute) PRIV • IMPL optional_type_parameters type_name FOR type_ WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [133, structure_item → non_empty_list(attribute) PRIV • IMPL optional_type_parameters type_name WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [142, type_header → non_empty_list(attribute) PRIV • TYPE luident optional_type_parameters_no_constraints, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / AMPER / PACKAGE_NAME]
// [148, type_header_bang → non_empty_list(attribute) PRIV • TYPE EXCLAMATION luident, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / LBRACE / AMPER / PACKAGE_NAME]
// [154, type_alias_header → non_empty_list(attribute) PRIV • TYPEALIAS luident optional_type_parameters_no_constraints, EQUAL]
// [160, struct_header → non_empty_list(attribute) PRIV • STRUCT luident optional_type_parameters_no_constraints, LBRACE]
// [166, enum_header → non_empty_list(attribute) PRIV • ENUM luident optional_type_parameters_no_constraints, LBRACE]
fn yy_state_1163(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ENUM => Shift(yy_state_1164)
    T_STRUCT => Shift(yy_state_1167)
    T_TYPE => Shift(yy_state_1170)
    T_IMPL => Shift(yy_state_1175)
    T_TYPEALIAS => Shift(yy_state_1192)
    T_TRAITALIAS => Shift(yy_state_1197)
    T_TRAIT => Shift(yy_state_1203)
    T_FNALIAS => Shift(yy_state_1209)
    T_CONST => Shift(yy_state_1211)
    T_LET => Shift(yy_state_1215)
    T_EXTERN => Shift(yy_state_1219)
    T_FN => Shift(yy_state_1231)
    T_ASYNC => Shift(yy_state_1237)
    _ => Error
  }
}

// [166, enum_header → non_empty_list(attribute) PRIV ENUM • luident optional_type_parameters_no_constraints, LBRACE]
// [192, luident → • LIDENT, LBRACKET / LBRACE]
// [193, luident → • UIDENT, LBRACKET / LBRACE]
fn yy_state_1164(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    NT_luident => Shift(yy_state_1165)
    _ => Error
  }
}

// [13, optional_type_parameters_no_constraints → • option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)), LBRACE]
// [166, enum_header → non_empty_list(attribute) PRIV ENUM luident • optional_type_parameters_no_constraints, LBRACE]
// [453, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → •, LBRACE]
// [454, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → • LBRACKET non_empty_list_commas(id(type_decl_binder)) RBRACKET, LBRACE]
fn yy_state_1165(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_676)
    NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__ => Shift(yy_state_687)
    NT_optional_type_parameters_no_constraints => Shift(yy_state_1166)
    T_LBRACE => Reduce(0, NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__, yy_action_613)
    _ => Error
  }
}

// [166, enum_header → non_empty_list(attribute) PRIV ENUM luident optional_type_parameters_no_constraints •, LBRACE]
fn yy_state_1166(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_enum_header, yy_action_589)
}

// [160, struct_header → non_empty_list(attribute) PRIV STRUCT • luident optional_type_parameters_no_constraints, LBRACE]
// [192, luident → • LIDENT, LBRACKET / LBRACE]
// [193, luident → • UIDENT, LBRACKET / LBRACE]
fn yy_state_1167(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    NT_luident => Shift(yy_state_1168)
    _ => Error
  }
}

// [13, optional_type_parameters_no_constraints → • option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)), LBRACE]
// [160, struct_header → non_empty_list(attribute) PRIV STRUCT luident • optional_type_parameters_no_constraints, LBRACE]
// [453, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → •, LBRACE]
// [454, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → • LBRACKET non_empty_list_commas(id(type_decl_binder)) RBRACKET, LBRACE]
fn yy_state_1168(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_676)
    NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__ => Shift(yy_state_687)
    NT_optional_type_parameters_no_constraints => Shift(yy_state_1169)
    T_LBRACE => Reduce(0, NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__, yy_action_613)
    _ => Error
  }
}

// [160, struct_header → non_empty_list(attribute) PRIV STRUCT luident optional_type_parameters_no_constraints •, LBRACE]
fn yy_state_1169(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_struct_header, yy_action_217)
}

// [142, type_header → non_empty_list(attribute) PRIV TYPE • luident optional_type_parameters_no_constraints, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / AMPER / PACKAGE_NAME]
// [148, type_header_bang → non_empty_list(attribute) PRIV TYPE • EXCLAMATION luident, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / LBRACE / AMPER / PACKAGE_NAME]
// [192, luident → • LIDENT, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / LBRACKET / UNDERSCORE / AMPER / PACKAGE_NAME]
// [193, luident → • UIDENT, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / LBRACKET / UNDERSCORE / AMPER / PACKAGE_NAME]
fn yy_state_1170(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    T_EXCLAMATION => Shift(yy_state_1171)
    NT_luident => Shift(yy_state_1173)
    _ => Error
  }
}

// [148, type_header_bang → non_empty_list(attribute) PRIV TYPE EXCLAMATION • luident, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / LBRACE / AMPER / PACKAGE_NAME]
// [192, luident → • LIDENT, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / LBRACE / AMPER / PACKAGE_NAME]
// [193, luident → • UIDENT, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / LBRACE / AMPER / PACKAGE_NAME]
fn yy_state_1171(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    NT_luident => Shift(yy_state_1172)
    _ => Error
  }
}

// [148, type_header_bang → non_empty_list(attribute) PRIV TYPE EXCLAMATION luident •, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / LBRACE / AMPER / PACKAGE_NAME]
fn yy_state_1172(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_type_header_bang, yy_action_409)
}

// [13, optional_type_parameters_no_constraints → • option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)), LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / AMPER / PACKAGE_NAME]
// [142, type_header → non_empty_list(attribute) PRIV TYPE luident • optional_type_parameters_no_constraints, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / AMPER / PACKAGE_NAME]
// [453, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → •, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / AMPER / PACKAGE_NAME]
// [454, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → • LBRACKET non_empty_list_commas(id(type_decl_binder)) RBRACKET, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / AMPER / PACKAGE_NAME]
fn yy_state_1173(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_676)
    NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__ => Shift(yy_state_687)
    NT_optional_type_parameters_no_constraints => Shift(yy_state_1174)
    T_LIDENT | T_UIDENT | T_EOF | T_DERIVE | T_ASYNC | T_LPAREN | T_SEMI | T_UNDERSCORE | T_AMPER | T_PACKAGE_NAME => Reduce(0, NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__, yy_action_613)
    _ => Error
  }
}

// [142, type_header → non_empty_list(attribute) PRIV TYPE luident optional_type_parameters_no_constraints •, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / AMPER / PACKAGE_NAME]
fn yy_state_1174(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_type_header, yy_action_46)
}

// [11, type_parameters → • LBRACKET non_empty_list_commas(id(tvar_binder)) RBRACKET, LIDENT / UIDENT / AMPER / PACKAGE_NAME]
// [12, optional_type_parameters → • option(type_parameters), LIDENT / UIDENT / AMPER / PACKAGE_NAME]
// [127, structure_item → non_empty_list(attribute) PRIV IMPL • optional_type_parameters type_name FOR type_ WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [133, structure_item → non_empty_list(attribute) PRIV IMPL • optional_type_parameters type_name WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [450, option(type_parameters) → •, LIDENT / UIDENT / AMPER / PACKAGE_NAME]
// [451, option(type_parameters) → • type_parameters, LIDENT / UIDENT / AMPER / PACKAGE_NAME]
fn yy_state_1175(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_type_parameters => Shift(yy_state_697)
    NT_option_type_parameters_ => Shift(yy_state_807)
    T_LBRACKET => Shift(yy_state_808)
    NT_optional_type_parameters => Shift(yy_state_1176)
    T_LIDENT | T_UIDENT | T_AMPER | T_PACKAGE_NAME => Reduce(0, NT_option_type_parameters_, yy_action_515)
    _ => Error
  }
}

// [127, structure_item → non_empty_list(attribute) PRIV IMPL optional_type_parameters • type_name FOR type_ WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [133, structure_item → non_empty_list(attribute) PRIV IMPL optional_type_parameters • type_name WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [192, luident → • LIDENT, WITH / FOR]
// [193, luident → • UIDENT, WITH / FOR]
// [198, qual_ident_ty → • luident, WITH / FOR]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, WITH / FOR]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, WITH / FOR]
// [335, type_name → • qual_ident_ty, WITH / FOR]
// [336, type_name → • AMPER qual_ident_ty, WITH / FOR]
fn yy_state_1176(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    NT_qual_ident_ty => Shift(yy_state_26)
    NT_type_name => Shift(yy_state_1177)
    _ => Error
  }
}

// [127, structure_item → non_empty_list(attribute) PRIV IMPL optional_type_parameters type_name • FOR type_ WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [133, structure_item → non_empty_list(attribute) PRIV IMPL optional_type_parameters type_name • WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
fn yy_state_1177(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_WITH => Shift(yy_state_1178)
    T_FOR => Shift(yy_state_1184)
    _ => Error
  }
}

// [133, structure_item → non_empty_list(attribute) PRIV IMPL optional_type_parameters type_name WITH • LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
fn yy_state_1178(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_1179)
    _ => Error
  }
}

// [133, structure_item → non_empty_list(attribute) PRIV IMPL optional_type_parameters type_name WITH LIDENT • optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [201, optional_bang → • EXCLAMATION, LPAREN]
// [202, optional_bang → •, LPAREN]
fn yy_state_1179(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EXCLAMATION => Shift(yy_state_535)
    NT_optional_bang => Shift(yy_state_1180)
    T_LPAREN => Reduce(0, NT_optional_bang, yy_action_662)
    _ => Error
  }
}

// [10, parameters → • LPAREN list_commas(parameter) RPAREN, EQUAL / LBRACE / THIN_ARROW]
// [133, structure_item → non_empty_list(attribute) PRIV IMPL optional_type_parameters type_name WITH LIDENT optional_bang • parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
fn yy_state_1180(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_298)
    NT_parameters => Shift(yy_state_1181)
    _ => Error
  }
}

// [133, structure_item → non_empty_list(attribute) PRIV IMPL optional_type_parameters type_name WITH LIDENT optional_bang parameters • option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [460, option(preceded(THIN_ARROW,return_type)) → •, EQUAL / LBRACE]
// [461, option(preceded(THIN_ARROW,return_type)) → • THIN_ARROW return_type, EQUAL / LBRACE]
fn yy_state_1181(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_THIN_ARROW => Shift(yy_state_246)
    NT_option_preceded_THIN_ARROW_return_type__ => Shift(yy_state_1182)
    T_EQUAL | T_LBRACE => Reduce(0, NT_option_preceded_THIN_ARROW_return_type__, yy_action_161)
    _ => Error
  }
}

// [42, block_expr_with_local_types → • LBRACE local_types_and_stmts RBRACE, EOF / SEMI]
// [43, impl_body → • block_expr_with_local_types, EOF / SEMI]
// [44, impl_body → • EQUAL STRING, EOF / SEMI]
// [133, structure_item → non_empty_list(attribute) PRIV IMPL optional_type_parameters type_name WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) • impl_body, EOF / SEMI]
fn yy_state_1182(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EQUAL => Shift(yy_state_706)
    NT_block_expr_with_local_types => Shift(yy_state_708)
    T_LBRACE => Shift(yy_state_709)
    NT_impl_body => Shift(yy_state_1183)
    _ => Error
  }
}

// [133, structure_item → non_empty_list(attribute) PRIV IMPL optional_type_parameters type_name WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body •, EOF / SEMI]
fn yy_state_1183(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(11, NT_structure_item, yy_action_544)
}

// [127, structure_item → non_empty_list(attribute) PRIV IMPL optional_type_parameters type_name FOR • type_ WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [192, luident → • LIDENT, WITH / QUESTION / LBRACKET]
// [193, luident → • UIDENT, WITH / QUESTION / LBRACKET]
// [198, qual_ident_ty → • luident, WITH / QUESTION / LBRACKET]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, WITH / QUESTION / LBRACKET]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, WITH / QUESTION / LBRACKET]
// [410, type_ → • type_ QUESTION, WITH / QUESTION]
// [411, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN, WITH / QUESTION]
// [412, type_ → • ASYNC LPAREN type_ COMMA RPAREN THIN_ARROW return_type, WITH / QUESTION]
// [413, type_ → • ASYNC LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, WITH / QUESTION]
// [414, type_ → • LPAREN type_ COMMA RPAREN THIN_ARROW return_type, WITH / QUESTION]
// [415, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, WITH / QUESTION]
// [416, type_ → • ASYNC LPAREN RPAREN THIN_ARROW return_type, WITH / QUESTION]
// [417, type_ → • LPAREN RPAREN THIN_ARROW return_type, WITH / QUESTION]
// [418, type_ → • LPAREN type_ RPAREN, WITH / QUESTION]
// [419, type_ → • ASYNC LPAREN type_ RPAREN THIN_ARROW return_type, WITH / QUESTION]
// [420, type_ → • LPAREN type_ RPAREN THIN_ARROW return_type, WITH / QUESTION]
// [421, type_ → • qual_ident_ty optional_type_arguments, WITH / QUESTION]
// [422, type_ → • AMPER qual_ident_ty, WITH / QUESTION]
// [423, type_ → • UNDERSCORE, WITH / QUESTION]
fn yy_state_1184(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    T_UNDERSCORE => Shift(yy_state_120)
    T_AMPER => Shift(yy_state_121)
    NT_qual_ident_ty => Shift(yy_state_123)
    T_ASYNC => Shift(yy_state_129)
    T_LPAREN => Shift(yy_state_134)
    NT_type_ => Shift(yy_state_1185)
    _ => Error
  }
}

// [127, structure_item → non_empty_list(attribute) PRIV IMPL optional_type_parameters type_name FOR type_ • WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [410, type_ → type_ • QUESTION, WITH / QUESTION]
fn yy_state_1185(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_QUESTION => Shift(yy_state_139)
    T_WITH => Shift(yy_state_1186)
    _ => Error
  }
}

// [127, structure_item → non_empty_list(attribute) PRIV IMPL optional_type_parameters type_name FOR type_ WITH • LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
fn yy_state_1186(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_1187)
    _ => Error
  }
}

// [127, structure_item → non_empty_list(attribute) PRIV IMPL optional_type_parameters type_name FOR type_ WITH LIDENT • optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [201, optional_bang → • EXCLAMATION, LPAREN]
// [202, optional_bang → •, LPAREN]
fn yy_state_1187(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EXCLAMATION => Shift(yy_state_535)
    NT_optional_bang => Shift(yy_state_1188)
    T_LPAREN => Reduce(0, NT_optional_bang, yy_action_662)
    _ => Error
  }
}

// [10, parameters → • LPAREN list_commas(parameter) RPAREN, EQUAL / LBRACE / THIN_ARROW]
// [127, structure_item → non_empty_list(attribute) PRIV IMPL optional_type_parameters type_name FOR type_ WITH LIDENT optional_bang • parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
fn yy_state_1188(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_298)
    NT_parameters => Shift(yy_state_1189)
    _ => Error
  }
}

// [127, structure_item → non_empty_list(attribute) PRIV IMPL optional_type_parameters type_name FOR type_ WITH LIDENT optional_bang parameters • option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [460, option(preceded(THIN_ARROW,return_type)) → •, EQUAL / LBRACE]
// [461, option(preceded(THIN_ARROW,return_type)) → • THIN_ARROW return_type, EQUAL / LBRACE]
fn yy_state_1189(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_THIN_ARROW => Shift(yy_state_246)
    NT_option_preceded_THIN_ARROW_return_type__ => Shift(yy_state_1190)
    T_EQUAL | T_LBRACE => Reduce(0, NT_option_preceded_THIN_ARROW_return_type__, yy_action_161)
    _ => Error
  }
}

// [42, block_expr_with_local_types → • LBRACE local_types_and_stmts RBRACE, EOF / SEMI]
// [43, impl_body → • block_expr_with_local_types, EOF / SEMI]
// [44, impl_body → • EQUAL STRING, EOF / SEMI]
// [127, structure_item → non_empty_list(attribute) PRIV IMPL optional_type_parameters type_name FOR type_ WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) • impl_body, EOF / SEMI]
fn yy_state_1190(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EQUAL => Shift(yy_state_706)
    NT_block_expr_with_local_types => Shift(yy_state_708)
    T_LBRACE => Shift(yy_state_709)
    NT_impl_body => Shift(yy_state_1191)
    _ => Error
  }
}

// [127, structure_item → non_empty_list(attribute) PRIV IMPL optional_type_parameters type_name FOR type_ WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body •, EOF / SEMI]
fn yy_state_1191(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(13, NT_structure_item, yy_action_510)
}

// [113, structure_item → non_empty_list(attribute) PRIV TYPEALIAS • PACKAGE_NAME batch_type_alias_targets, EOF / SEMI]
// [154, type_alias_header → non_empty_list(attribute) PRIV TYPEALIAS • luident optional_type_parameters_no_constraints, EQUAL]
// [192, luident → • LIDENT, EQUAL / LBRACKET]
// [193, luident → • UIDENT, EQUAL / LBRACKET]
fn yy_state_1192(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    NT_luident => Shift(yy_state_1193)
    T_PACKAGE_NAME => Shift(yy_state_1195)
    _ => Error
  }
}

// [13, optional_type_parameters_no_constraints → • option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)), EQUAL]
// [154, type_alias_header → non_empty_list(attribute) PRIV TYPEALIAS luident • optional_type_parameters_no_constraints, EQUAL]
// [453, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → •, EQUAL]
// [454, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → • LBRACKET non_empty_list_commas(id(type_decl_binder)) RBRACKET, EQUAL]
fn yy_state_1193(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_676)
    NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__ => Shift(yy_state_687)
    NT_optional_type_parameters_no_constraints => Shift(yy_state_1194)
    T_EQUAL => Reduce(0, NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__, yy_action_613)
    _ => Error
  }
}

// [154, type_alias_header → non_empty_list(attribute) PRIV TYPEALIAS luident optional_type_parameters_no_constraints •, EQUAL]
fn yy_state_1194(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_type_alias_header, yy_action_431)
}

// [113, structure_item → non_empty_list(attribute) PRIV TYPEALIAS PACKAGE_NAME • batch_type_alias_targets, EOF / SEMI]
// [168, batch_type_alias_targets → • DOT_LIDENT optional_type_parameters_no_constraints, EOF / SEMI]
// [169, batch_type_alias_targets → • DOT_UIDENT optional_type_parameters_no_constraints, EOF / SEMI]
// [170, batch_type_alias_targets → • DOT_LPAREN non_empty_list_commas(batch_type_alias_target) RPAREN, EOF / SEMI]
fn yy_state_1195(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_DOT_LPAREN => Shift(yy_state_835)
    T_DOT_UIDENT => Shift(yy_state_845)
    T_DOT_LIDENT => Shift(yy_state_847)
    NT_batch_type_alias_targets => Shift(yy_state_1196)
    _ => Error
  }
}

// [113, structure_item → non_empty_list(attribute) PRIV TYPEALIAS PACKAGE_NAME batch_type_alias_targets •, EOF / SEMI]
fn yy_state_1196(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_structure_item, yy_action_352)
}

// [107, structure_item → non_empty_list(attribute) PRIV TRAITALIAS • luident EQUAL type_name, EOF / SEMI]
// [119, structure_item → non_empty_list(attribute) PRIV TRAITALIAS • PACKAGE_NAME batch_trait_alias_targets, EOF / SEMI]
// [192, luident → • LIDENT, EQUAL]
// [193, luident → • UIDENT, EQUAL]
fn yy_state_1197(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    T_PACKAGE_NAME => Shift(yy_state_1198)
    NT_luident => Shift(yy_state_1200)
    _ => Error
  }
}

// [119, structure_item → non_empty_list(attribute) PRIV TRAITALIAS PACKAGE_NAME • batch_trait_alias_targets, EOF / SEMI]
// [172, batch_trait_alias_targets → • DOT_LIDENT, EOF / SEMI]
// [173, batch_trait_alias_targets → • DOT_UIDENT, EOF / SEMI]
// [174, batch_trait_alias_targets → • DOT_LPAREN non_empty_list_commas(batch_trait_alias_target) RPAREN, EOF / SEMI]
fn yy_state_1198(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_DOT_LPAREN => Shift(yy_state_852)
    T_DOT_UIDENT => Shift(yy_state_861)
    T_DOT_LIDENT => Shift(yy_state_862)
    NT_batch_trait_alias_targets => Shift(yy_state_1199)
    _ => Error
  }
}

// [119, structure_item → non_empty_list(attribute) PRIV TRAITALIAS PACKAGE_NAME batch_trait_alias_targets •, EOF / SEMI]
fn yy_state_1199(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_structure_item, yy_action_395)
}

// [107, structure_item → non_empty_list(attribute) PRIV TRAITALIAS luident • EQUAL type_name, EOF / SEMI]
fn yy_state_1200(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EQUAL => Shift(yy_state_1201)
    _ => Error
  }
}

// [107, structure_item → non_empty_list(attribute) PRIV TRAITALIAS luident EQUAL • type_name, EOF / SEMI]
// [192, luident → • LIDENT, EOF / SEMI]
// [193, luident → • UIDENT, EOF / SEMI]
// [198, qual_ident_ty → • luident, EOF / SEMI]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, EOF / SEMI]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, EOF / SEMI]
// [335, type_name → • qual_ident_ty, EOF / SEMI]
// [336, type_name → • AMPER qual_ident_ty, EOF / SEMI]
fn yy_state_1201(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    NT_qual_ident_ty => Shift(yy_state_26)
    NT_type_name => Shift(yy_state_1202)
    _ => Error
  }
}

// [107, structure_item → non_empty_list(attribute) PRIV TRAITALIAS luident EQUAL type_name •, EOF / SEMI]
fn yy_state_1202(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(6, NT_structure_item, yy_action_218)
}

// [101, structure_item → non_empty_list(attribute) PRIV TRAIT • luident option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) LBRACE list_semis(trait_method_decl) RBRACE, EOF / SEMI]
// [192, luident → • LIDENT, COLON / LBRACE]
// [193, luident → • UIDENT, COLON / LBRACE]
fn yy_state_1203(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    NT_luident => Shift(yy_state_1204)
    _ => Error
  }
}

// [101, structure_item → non_empty_list(attribute) PRIV TRAIT luident • option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) LBRACE list_semis(trait_method_decl) RBRACE, EOF / SEMI]
// [475, option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) → •, LBRACE]
// [476, option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) → • COLON separated_nonempty_list(PLUS,tvar_constraint), LBRACE]
fn yy_state_1204(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_869)
    NT_option_preceded_COLON_separated_nonempty_list_PLUS_tvar_constraint___ => Shift(yy_state_1205)
    T_LBRACE => Reduce(0, NT_option_preceded_COLON_separated_nonempty_list_PLUS_tvar_constraint___, yy_action_57)
    _ => Error
  }
}

// [101, structure_item → non_empty_list(attribute) PRIV TRAIT luident option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) • LBRACE list_semis(trait_method_decl) RBRACE, EOF / SEMI]
fn yy_state_1205(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACE => Shift(yy_state_1206)
    _ => Error
  }
}

// [101, structure_item → non_empty_list(attribute) PRIV TRAIT luident option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) LBRACE • list_semis(trait_method_decl) RBRACE, EOF / SEMI]
// [187, trait_method_decl → • LIDENT optional_bang optional_type_parameters LPAREN list_commas(trait_method_param) RPAREN option(preceded(THIN_ARROW,return_type)) option(preceded(EQUAL,wildcard)), SEMI / RBRACE]
// [477, list_semis(trait_method_decl) → •, RBRACE]
// [478, list_semis(trait_method_decl) → • non_empty_list_semis(trait_method_decl), RBRACE]
// [565, non_empty_list_semis(trait_method_decl) → • non_empty_list_semis_rev(trait_method_decl), RBRACE]
// [613, non_empty_list_semis_rev(trait_method_decl) → • non_empty_list_semi_rev_aux(trait_method_decl) option(SEMI), RBRACE]
// [635, non_empty_list_semi_rev_aux(trait_method_decl) → • trait_method_decl, SEMI / RBRACE]
// [636, non_empty_list_semi_rev_aux(trait_method_decl) → • non_empty_list_semi_rev_aux(trait_method_decl) SEMI trait_method_decl, SEMI / RBRACE]
fn yy_state_1206(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_trait_method_decl => Shift(yy_state_873)
    NT_non_empty_list_semi_rev_aux_trait_method_decl_ => Shift(yy_state_874)
    T_LIDENT => Shift(yy_state_878)
    NT_non_empty_list_semis_rev_trait_method_decl_ => Shift(yy_state_902)
    NT_non_empty_list_semis_trait_method_decl_ => Shift(yy_state_903)
    NT_list_semis_trait_method_decl_ => Shift(yy_state_1207)
    T_RBRACE => Reduce(0, NT_list_semis_trait_method_decl_, yy_action_262)
    _ => Error
  }
}

// [101, structure_item → non_empty_list(attribute) PRIV TRAIT luident option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) LBRACE list_semis(trait_method_decl) • RBRACE, EOF / SEMI]
fn yy_state_1207(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACE => Shift(yy_state_1208)
    _ => Error
  }
}

// [101, structure_item → non_empty_list(attribute) PRIV TRAIT luident option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) LBRACE list_semis(trait_method_decl) RBRACE •, EOF / SEMI]
fn yy_state_1208(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(8, NT_structure_item, yy_action_608)
}

// [95, structure_item → non_empty_list(attribute) PRIV FNALIAS • func_alias_targets, EOF / SEMI]
// [176, func_alias_targets → • func_alias_target(LIDENT), EOF / SEMI]
// [177, func_alias_targets → • func_alias_type_name(LIDENT,UIDENT) func_alias_target(LIDENT), EOF / SEMI]
// [178, func_alias_targets → • PACKAGE_NAME func_alias_target(DOT_LIDENT), EOF / SEMI]
// [179, func_alias_targets → • PACKAGE_NAME func_alias_type_name(DOT_LIDENT,DOT_UIDENT) func_alias_target(LIDENT), EOF / SEMI]
// [180, func_alias_targets → • option(func_alias_type_name(LIDENT,UIDENT)) LPAREN non_empty_list_commas(func_alias_target(LIDENT)) RPAREN, EOF / SEMI]
// [181, func_alias_targets → • PACKAGE_NAME DOT_LPAREN non_empty_list_commas(func_alias_target(LIDENT)) RPAREN, EOF / SEMI]
// [182, func_alias_targets → • PACKAGE_NAME func_alias_type_name(DOT_LIDENT,DOT_UIDENT) LPAREN non_empty_list_commas(func_alias_target(LIDENT)) RPAREN, EOF / SEMI]
// [484, func_alias_type_name(LIDENT,UIDENT) → • LIDENT COLONCOLON, LIDENT / LPAREN]
// [485, func_alias_type_name(LIDENT,UIDENT) → • UIDENT COLONCOLON, LIDENT / LPAREN]
// [486, func_alias_target(LIDENT) → • LIDENT option(preceded(AS,binder)), EOF / SEMI]
// [490, option(func_alias_type_name(LIDENT,UIDENT)) → •, LPAREN]
// [491, option(func_alias_type_name(LIDENT,UIDENT)) → • func_alias_type_name(LIDENT,UIDENT), LPAREN]
fn yy_state_1209(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_907)
    T_LIDENT => Shift(yy_state_909)
    NT_option_func_alias_type_name_LIDENT_UIDENT__ => Shift(yy_state_914)
    T_PACKAGE_NAME => Shift(yy_state_924)
    NT_func_alias_type_name_LIDENT_UIDENT_ => Shift(yy_state_939)
    NT_func_alias_target_LIDENT_ => Shift(yy_state_941)
    NT_func_alias_targets => Shift(yy_state_1210)
    T_LPAREN => Reduce(0, NT_option_func_alias_type_name_LIDENT_UIDENT__, yy_action_298)
    _ => Error
  }
}

// [95, structure_item → non_empty_list(attribute) PRIV FNALIAS func_alias_targets •, EOF / SEMI]
fn yy_state_1210(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_structure_item, yy_action_185)
}

// [66, val_header → non_empty_list(attribute) PRIV CONST • UIDENT, EQUAL]
// [67, val_header → non_empty_list(attribute) PRIV CONST • UIDENT COLON type_, EQUAL]
fn yy_state_1211(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_1212)
    _ => Error
  }
}

// [66, val_header → non_empty_list(attribute) PRIV CONST UIDENT •, EQUAL]
// [67, val_header → non_empty_list(attribute) PRIV CONST UIDENT • COLON type_, EQUAL]
fn yy_state_1212(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_1213)
    T_EQUAL => Reduce(4, NT_val_header, yy_action_280)
    _ => Error
  }
}

// [67, val_header → non_empty_list(attribute) PRIV CONST UIDENT COLON • type_, EQUAL]
// [192, luident → • LIDENT, EQUAL / QUESTION / LBRACKET]
// [193, luident → • UIDENT, EQUAL / QUESTION / LBRACKET]
// [198, qual_ident_ty → • luident, EQUAL / QUESTION / LBRACKET]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, EQUAL / QUESTION / LBRACKET]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, EQUAL / QUESTION / LBRACKET]
// [410, type_ → • type_ QUESTION, EQUAL / QUESTION]
// [411, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN, EQUAL / QUESTION]
// [412, type_ → • ASYNC LPAREN type_ COMMA RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [413, type_ → • ASYNC LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [414, type_ → • LPAREN type_ COMMA RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [415, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [416, type_ → • ASYNC LPAREN RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [417, type_ → • LPAREN RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [418, type_ → • LPAREN type_ RPAREN, EQUAL / QUESTION]
// [419, type_ → • ASYNC LPAREN type_ RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [420, type_ → • LPAREN type_ RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [421, type_ → • qual_ident_ty optional_type_arguments, EQUAL / QUESTION]
// [422, type_ → • AMPER qual_ident_ty, EQUAL / QUESTION]
// [423, type_ → • UNDERSCORE, EQUAL / QUESTION]
fn yy_state_1213(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    T_UNDERSCORE => Shift(yy_state_120)
    T_AMPER => Shift(yy_state_121)
    NT_qual_ident_ty => Shift(yy_state_123)
    T_ASYNC => Shift(yy_state_129)
    T_LPAREN => Shift(yy_state_134)
    NT_type_ => Shift(yy_state_1214)
    _ => Error
  }
}

// [67, val_header → non_empty_list(attribute) PRIV CONST UIDENT COLON type_ •, EQUAL]
// [410, type_ → type_ • QUESTION, EQUAL / QUESTION]
fn yy_state_1214(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_QUESTION => Shift(yy_state_139)
    T_EQUAL => Reduce(6, NT_val_header, yy_action_646)
    _ => Error
  }
}

// [54, val_header → non_empty_list(attribute) PRIV LET • LIDENT, EQUAL]
// [55, val_header → non_empty_list(attribute) PRIV LET • LIDENT COLON type_, EQUAL]
fn yy_state_1215(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_1216)
    _ => Error
  }
}

// [54, val_header → non_empty_list(attribute) PRIV LET LIDENT •, EQUAL]
// [55, val_header → non_empty_list(attribute) PRIV LET LIDENT • COLON type_, EQUAL]
fn yy_state_1216(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_1217)
    T_EQUAL => Reduce(4, NT_val_header, yy_action_542)
    _ => Error
  }
}

// [55, val_header → non_empty_list(attribute) PRIV LET LIDENT COLON • type_, EQUAL]
// [192, luident → • LIDENT, EQUAL / QUESTION / LBRACKET]
// [193, luident → • UIDENT, EQUAL / QUESTION / LBRACKET]
// [198, qual_ident_ty → • luident, EQUAL / QUESTION / LBRACKET]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, EQUAL / QUESTION / LBRACKET]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, EQUAL / QUESTION / LBRACKET]
// [410, type_ → • type_ QUESTION, EQUAL / QUESTION]
// [411, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN, EQUAL / QUESTION]
// [412, type_ → • ASYNC LPAREN type_ COMMA RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [413, type_ → • ASYNC LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [414, type_ → • LPAREN type_ COMMA RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [415, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [416, type_ → • ASYNC LPAREN RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [417, type_ → • LPAREN RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [418, type_ → • LPAREN type_ RPAREN, EQUAL / QUESTION]
// [419, type_ → • ASYNC LPAREN type_ RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [420, type_ → • LPAREN type_ RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [421, type_ → • qual_ident_ty optional_type_arguments, EQUAL / QUESTION]
// [422, type_ → • AMPER qual_ident_ty, EQUAL / QUESTION]
// [423, type_ → • UNDERSCORE, EQUAL / QUESTION]
fn yy_state_1217(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    T_UNDERSCORE => Shift(yy_state_120)
    T_AMPER => Shift(yy_state_121)
    NT_qual_ident_ty => Shift(yy_state_123)
    T_ASYNC => Shift(yy_state_129)
    T_LPAREN => Shift(yy_state_134)
    NT_type_ => Shift(yy_state_1218)
    _ => Error
  }
}

// [55, val_header → non_empty_list(attribute) PRIV LET LIDENT COLON type_ •, EQUAL]
// [410, type_ → type_ • QUESTION, EQUAL / QUESTION]
fn yy_state_1218(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_QUESTION => Shift(yy_state_139)
    T_EQUAL => Reduce(6, NT_val_header, yy_action_71)
    _ => Error
  }
}

// [36, extern_fun_header → non_empty_list(attribute) PRIV EXTERN • STRING FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL]
// [76, structure_item → non_empty_list(attribute) PRIV EXTERN • TYPE luident optional_type_parameters_no_constraints deriving_directive_list, EOF / SEMI]
fn yy_state_1219(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_TYPE => Shift(yy_state_1220)
    T_STRING => Shift(yy_state_1224)
    _ => Error
  }
}

// [76, structure_item → non_empty_list(attribute) PRIV EXTERN TYPE • luident optional_type_parameters_no_constraints deriving_directive_list, EOF / SEMI]
// [192, luident → • LIDENT, EOF / DERIVE / SEMI / LBRACKET]
// [193, luident → • UIDENT, EOF / DERIVE / SEMI / LBRACKET]
fn yy_state_1220(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    NT_luident => Shift(yy_state_1221)
    _ => Error
  }
}

// [13, optional_type_parameters_no_constraints → • option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)), EOF / DERIVE / SEMI]
// [76, structure_item → non_empty_list(attribute) PRIV EXTERN TYPE luident • optional_type_parameters_no_constraints deriving_directive_list, EOF / SEMI]
// [453, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → •, EOF / DERIVE / SEMI]
// [454, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → • LBRACKET non_empty_list_commas(id(type_decl_binder)) RBRACKET, EOF / DERIVE / SEMI]
fn yy_state_1221(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_676)
    NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__ => Shift(yy_state_687)
    NT_optional_type_parameters_no_constraints => Shift(yy_state_1222)
    T_EOF | T_DERIVE | T_SEMI => Reduce(0, NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__, yy_action_613)
    _ => Error
  }
}

// [76, structure_item → non_empty_list(attribute) PRIV EXTERN TYPE luident optional_type_parameters_no_constraints • deriving_directive_list, EOF / SEMI]
// [185, deriving_directive_list → •, EOF / SEMI]
// [186, deriving_directive_list → • DERIVE LPAREN list_commas(deriving_directive) RPAREN, EOF / SEMI]
fn yy_state_1222(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_DERIVE => Shift(yy_state_719)
    NT_deriving_directive_list => Shift(yy_state_1223)
    T_EOF | T_SEMI => Reduce(0, NT_deriving_directive_list, yy_action_147)
    _ => Error
  }
}

// [76, structure_item → non_empty_list(attribute) PRIV EXTERN TYPE luident optional_type_parameters_no_constraints deriving_directive_list •, EOF / SEMI]
fn yy_state_1223(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(7, NT_structure_item, yy_action_590)
}

// [36, extern_fun_header → non_empty_list(attribute) PRIV EXTERN STRING • FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL]
fn yy_state_1224(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_FN => Shift(yy_state_1225)
    _ => Error
  }
}

// [15, fun_binder → • type_name COLONCOLON LIDENT, EQUAL / LPAREN / EXCLAMATION / LBRACKET / THIN_ARROW]
// [16, fun_binder → • LIDENT, EQUAL / LPAREN / EXCLAMATION / LBRACKET / THIN_ARROW]
// [36, extern_fun_header → non_empty_list(attribute) PRIV EXTERN STRING FN • fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL]
// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
fn yy_state_1225(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LIDENT => Shift(yy_state_1005)
    NT_type_name => Shift(yy_state_1006)
    NT_fun_binder => Shift(yy_state_1226)
    _ => Error
  }
}

// [36, extern_fun_header → non_empty_list(attribute) PRIV EXTERN STRING FN fun_binder • optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL]
// [201, optional_bang → • EXCLAMATION, EQUAL / LPAREN / LBRACKET / THIN_ARROW]
// [202, optional_bang → •, EQUAL / LPAREN / LBRACKET / THIN_ARROW]
fn yy_state_1226(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EXCLAMATION => Shift(yy_state_535)
    NT_optional_bang => Shift(yy_state_1227)
    T_EQUAL | T_LPAREN | T_LBRACKET | T_THIN_ARROW => Reduce(0, NT_optional_bang, yy_action_662)
    _ => Error
  }
}

// [11, type_parameters → • LBRACKET non_empty_list_commas(id(tvar_binder)) RBRACKET, EQUAL / LPAREN / THIN_ARROW]
// [12, optional_type_parameters → • option(type_parameters), EQUAL / LPAREN / THIN_ARROW]
// [36, extern_fun_header → non_empty_list(attribute) PRIV EXTERN STRING FN fun_binder optional_bang • optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL]
// [450, option(type_parameters) → •, EQUAL / LPAREN / THIN_ARROW]
// [451, option(type_parameters) → • type_parameters, EQUAL / LPAREN / THIN_ARROW]
fn yy_state_1227(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_type_parameters => Shift(yy_state_697)
    NT_option_type_parameters_ => Shift(yy_state_807)
    T_LBRACKET => Shift(yy_state_808)
    NT_optional_type_parameters => Shift(yy_state_1228)
    T_EQUAL | T_LPAREN | T_THIN_ARROW => Reduce(0, NT_option_type_parameters_, yy_action_515)
    _ => Error
  }
}

// [10, parameters → • LPAREN list_commas(parameter) RPAREN, EQUAL / THIN_ARROW]
// [36, extern_fun_header → non_empty_list(attribute) PRIV EXTERN STRING FN fun_binder optional_bang optional_type_parameters • option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL]
// [458, option(parameters) → •, EQUAL / THIN_ARROW]
// [459, option(parameters) → • parameters, EQUAL / THIN_ARROW]
fn yy_state_1228(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_298)
    NT_parameters => Shift(yy_state_828)
    NT_option_parameters_ => Shift(yy_state_1229)
    T_EQUAL | T_THIN_ARROW => Reduce(0, NT_option_parameters_, yy_action_287)
    _ => Error
  }
}

// [36, extern_fun_header → non_empty_list(attribute) PRIV EXTERN STRING FN fun_binder optional_bang optional_type_parameters option(parameters) • option(preceded(THIN_ARROW,return_type)), EQUAL]
// [460, option(preceded(THIN_ARROW,return_type)) → •, EQUAL]
// [461, option(preceded(THIN_ARROW,return_type)) → • THIN_ARROW return_type, EQUAL]
fn yy_state_1229(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_THIN_ARROW => Shift(yy_state_246)
    NT_option_preceded_THIN_ARROW_return_type__ => Shift(yy_state_1230)
    T_EQUAL => Reduce(0, NT_option_preceded_THIN_ARROW_return_type__, yy_action_161)
    _ => Error
  }
}

// [36, extern_fun_header → non_empty_list(attribute) PRIV EXTERN STRING FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)) •, EQUAL]
fn yy_state_1230(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(10, NT_extern_fun_header, yy_action_635)
}

// [15, fun_binder → • type_name COLONCOLON LIDENT, EQUAL / LPAREN / EXCLAMATION / LBRACKET / LBRACE / THIN_ARROW]
// [16, fun_binder → • LIDENT, EQUAL / LPAREN / EXCLAMATION / LBRACKET / LBRACE / THIN_ARROW]
// [26, fun_header → non_empty_list(attribute) PRIV FN • fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
fn yy_state_1231(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LIDENT => Shift(yy_state_1005)
    NT_type_name => Shift(yy_state_1006)
    NT_fun_binder => Shift(yy_state_1232)
    _ => Error
  }
}

// [26, fun_header → non_empty_list(attribute) PRIV FN fun_binder • optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [201, optional_bang → • EXCLAMATION, EQUAL / LPAREN / LBRACKET / LBRACE / THIN_ARROW]
// [202, optional_bang → •, EQUAL / LPAREN / LBRACKET / LBRACE / THIN_ARROW]
fn yy_state_1232(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EXCLAMATION => Shift(yy_state_535)
    NT_optional_bang => Shift(yy_state_1233)
    T_EQUAL | T_LPAREN | T_LBRACKET | T_LBRACE | T_THIN_ARROW => Reduce(0, NT_optional_bang, yy_action_662)
    _ => Error
  }
}

// [11, type_parameters → • LBRACKET non_empty_list_commas(id(tvar_binder)) RBRACKET, EQUAL / LPAREN / LBRACE / THIN_ARROW]
// [12, optional_type_parameters → • option(type_parameters), EQUAL / LPAREN / LBRACE / THIN_ARROW]
// [26, fun_header → non_empty_list(attribute) PRIV FN fun_binder optional_bang • optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [450, option(type_parameters) → •, EQUAL / LPAREN / LBRACE / THIN_ARROW]
// [451, option(type_parameters) → • type_parameters, EQUAL / LPAREN / LBRACE / THIN_ARROW]
fn yy_state_1233(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_type_parameters => Shift(yy_state_697)
    NT_option_type_parameters_ => Shift(yy_state_807)
    T_LBRACKET => Shift(yy_state_808)
    NT_optional_type_parameters => Shift(yy_state_1234)
    T_EQUAL | T_LPAREN | T_LBRACE | T_THIN_ARROW => Reduce(0, NT_option_type_parameters_, yy_action_515)
    _ => Error
  }
}

// [10, parameters → • LPAREN list_commas(parameter) RPAREN, EQUAL / LBRACE / THIN_ARROW]
// [26, fun_header → non_empty_list(attribute) PRIV FN fun_binder optional_bang optional_type_parameters • option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [458, option(parameters) → •, EQUAL / LBRACE / THIN_ARROW]
// [459, option(parameters) → • parameters, EQUAL / LBRACE / THIN_ARROW]
fn yy_state_1234(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_298)
    NT_parameters => Shift(yy_state_828)
    NT_option_parameters_ => Shift(yy_state_1235)
    T_EQUAL | T_LBRACE | T_THIN_ARROW => Reduce(0, NT_option_parameters_, yy_action_287)
    _ => Error
  }
}

// [26, fun_header → non_empty_list(attribute) PRIV FN fun_binder optional_bang optional_type_parameters option(parameters) • option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [460, option(preceded(THIN_ARROW,return_type)) → •, EQUAL / LBRACE]
// [461, option(preceded(THIN_ARROW,return_type)) → • THIN_ARROW return_type, EQUAL / LBRACE]
fn yy_state_1235(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_THIN_ARROW => Shift(yy_state_246)
    NT_option_preceded_THIN_ARROW_return_type__ => Shift(yy_state_1236)
    T_EQUAL | T_LBRACE => Reduce(0, NT_option_preceded_THIN_ARROW_return_type__, yy_action_161)
    _ => Error
  }
}

// [26, fun_header → non_empty_list(attribute) PRIV FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)) •, EQUAL / LBRACE]
fn yy_state_1236(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(8, NT_fun_header, yy_action_195)
}

// [25, fun_header → non_empty_list(attribute) PRIV ASYNC • FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
fn yy_state_1237(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_FN => Shift(yy_state_1238)
    _ => Error
  }
}

// [15, fun_binder → • type_name COLONCOLON LIDENT, EQUAL / LPAREN / EXCLAMATION / LBRACKET / LBRACE / THIN_ARROW]
// [16, fun_binder → • LIDENT, EQUAL / LPAREN / EXCLAMATION / LBRACKET / LBRACE / THIN_ARROW]
// [25, fun_header → non_empty_list(attribute) PRIV ASYNC FN • fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
fn yy_state_1238(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LIDENT => Shift(yy_state_1005)
    NT_type_name => Shift(yy_state_1006)
    NT_fun_binder => Shift(yy_state_1239)
    _ => Error
  }
}

// [25, fun_header → non_empty_list(attribute) PRIV ASYNC FN fun_binder • optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [201, optional_bang → • EXCLAMATION, EQUAL / LPAREN / LBRACKET / LBRACE / THIN_ARROW]
// [202, optional_bang → •, EQUAL / LPAREN / LBRACKET / LBRACE / THIN_ARROW]
fn yy_state_1239(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EXCLAMATION => Shift(yy_state_535)
    NT_optional_bang => Shift(yy_state_1240)
    T_EQUAL | T_LPAREN | T_LBRACKET | T_LBRACE | T_THIN_ARROW => Reduce(0, NT_optional_bang, yy_action_662)
    _ => Error
  }
}

// [11, type_parameters → • LBRACKET non_empty_list_commas(id(tvar_binder)) RBRACKET, EQUAL / LPAREN / LBRACE / THIN_ARROW]
// [12, optional_type_parameters → • option(type_parameters), EQUAL / LPAREN / LBRACE / THIN_ARROW]
// [25, fun_header → non_empty_list(attribute) PRIV ASYNC FN fun_binder optional_bang • optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [450, option(type_parameters) → •, EQUAL / LPAREN / LBRACE / THIN_ARROW]
// [451, option(type_parameters) → • type_parameters, EQUAL / LPAREN / LBRACE / THIN_ARROW]
fn yy_state_1240(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_type_parameters => Shift(yy_state_697)
    NT_option_type_parameters_ => Shift(yy_state_807)
    T_LBRACKET => Shift(yy_state_808)
    NT_optional_type_parameters => Shift(yy_state_1241)
    T_EQUAL | T_LPAREN | T_LBRACE | T_THIN_ARROW => Reduce(0, NT_option_type_parameters_, yy_action_515)
    _ => Error
  }
}

// [10, parameters → • LPAREN list_commas(parameter) RPAREN, EQUAL / LBRACE / THIN_ARROW]
// [25, fun_header → non_empty_list(attribute) PRIV ASYNC FN fun_binder optional_bang optional_type_parameters • option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [458, option(parameters) → •, EQUAL / LBRACE / THIN_ARROW]
// [459, option(parameters) → • parameters, EQUAL / LBRACE / THIN_ARROW]
fn yy_state_1241(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_298)
    NT_parameters => Shift(yy_state_828)
    NT_option_parameters_ => Shift(yy_state_1242)
    T_EQUAL | T_LBRACE | T_THIN_ARROW => Reduce(0, NT_option_parameters_, yy_action_287)
    _ => Error
  }
}

// [25, fun_header → non_empty_list(attribute) PRIV ASYNC FN fun_binder optional_bang optional_type_parameters option(parameters) • option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [460, option(preceded(THIN_ARROW,return_type)) → •, EQUAL / LBRACE]
// [461, option(preceded(THIN_ARROW,return_type)) → • THIN_ARROW return_type, EQUAL / LBRACE]
fn yy_state_1242(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_THIN_ARROW => Shift(yy_state_246)
    NT_option_preceded_THIN_ARROW_return_type__ => Shift(yy_state_1243)
    T_EQUAL | T_LBRACE => Reduce(0, NT_option_preceded_THIN_ARROW_return_type__, yy_action_161)
    _ => Error
  }
}

// [25, fun_header → non_empty_list(attribute) PRIV ASYNC FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)) •, EQUAL / LBRACE]
fn yy_state_1243(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(9, NT_fun_header, yy_action_240)
}

// [15, fun_binder → • type_name COLONCOLON LIDENT, EQUAL / LPAREN / EXCLAMATION / LBRACKET / LBRACE / THIN_ARROW]
// [16, fun_binder → • LIDENT, EQUAL / LPAREN / EXCLAMATION / LBRACKET / LBRACE / THIN_ARROW]
// [24, fun_header → non_empty_list(attribute) FN • fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
fn yy_state_1244(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LIDENT => Shift(yy_state_1005)
    NT_type_name => Shift(yy_state_1006)
    NT_fun_binder => Shift(yy_state_1245)
    _ => Error
  }
}

// [24, fun_header → non_empty_list(attribute) FN fun_binder • optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [201, optional_bang → • EXCLAMATION, EQUAL / LPAREN / LBRACKET / LBRACE / THIN_ARROW]
// [202, optional_bang → •, EQUAL / LPAREN / LBRACKET / LBRACE / THIN_ARROW]
fn yy_state_1245(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EXCLAMATION => Shift(yy_state_535)
    NT_optional_bang => Shift(yy_state_1246)
    T_EQUAL | T_LPAREN | T_LBRACKET | T_LBRACE | T_THIN_ARROW => Reduce(0, NT_optional_bang, yy_action_662)
    _ => Error
  }
}

// [11, type_parameters → • LBRACKET non_empty_list_commas(id(tvar_binder)) RBRACKET, EQUAL / LPAREN / LBRACE / THIN_ARROW]
// [12, optional_type_parameters → • option(type_parameters), EQUAL / LPAREN / LBRACE / THIN_ARROW]
// [24, fun_header → non_empty_list(attribute) FN fun_binder optional_bang • optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [450, option(type_parameters) → •, EQUAL / LPAREN / LBRACE / THIN_ARROW]
// [451, option(type_parameters) → • type_parameters, EQUAL / LPAREN / LBRACE / THIN_ARROW]
fn yy_state_1246(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_type_parameters => Shift(yy_state_697)
    NT_option_type_parameters_ => Shift(yy_state_807)
    T_LBRACKET => Shift(yy_state_808)
    NT_optional_type_parameters => Shift(yy_state_1247)
    T_EQUAL | T_LPAREN | T_LBRACE | T_THIN_ARROW => Reduce(0, NT_option_type_parameters_, yy_action_515)
    _ => Error
  }
}

// [10, parameters → • LPAREN list_commas(parameter) RPAREN, EQUAL / LBRACE / THIN_ARROW]
// [24, fun_header → non_empty_list(attribute) FN fun_binder optional_bang optional_type_parameters • option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [458, option(parameters) → •, EQUAL / LBRACE / THIN_ARROW]
// [459, option(parameters) → • parameters, EQUAL / LBRACE / THIN_ARROW]
fn yy_state_1247(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_298)
    NT_parameters => Shift(yy_state_828)
    NT_option_parameters_ => Shift(yy_state_1248)
    T_EQUAL | T_LBRACE | T_THIN_ARROW => Reduce(0, NT_option_parameters_, yy_action_287)
    _ => Error
  }
}

// [24, fun_header → non_empty_list(attribute) FN fun_binder optional_bang optional_type_parameters option(parameters) • option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [460, option(preceded(THIN_ARROW,return_type)) → •, EQUAL / LBRACE]
// [461, option(preceded(THIN_ARROW,return_type)) → • THIN_ARROW return_type, EQUAL / LBRACE]
fn yy_state_1248(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_THIN_ARROW => Shift(yy_state_246)
    NT_option_preceded_THIN_ARROW_return_type__ => Shift(yy_state_1249)
    T_EQUAL | T_LBRACE => Reduce(0, NT_option_preceded_THIN_ARROW_return_type__, yy_action_161)
    _ => Error
  }
}

// [24, fun_header → non_empty_list(attribute) FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)) •, EQUAL / LBRACE]
fn yy_state_1249(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(7, NT_fun_header, yy_action_359)
}

// [23, fun_header → non_empty_list(attribute) ASYNC • FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
fn yy_state_1250(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_FN => Shift(yy_state_1251)
    _ => Error
  }
}

// [15, fun_binder → • type_name COLONCOLON LIDENT, EQUAL / LPAREN / EXCLAMATION / LBRACKET / LBRACE / THIN_ARROW]
// [16, fun_binder → • LIDENT, EQUAL / LPAREN / EXCLAMATION / LBRACKET / LBRACE / THIN_ARROW]
// [23, fun_header → non_empty_list(attribute) ASYNC FN • fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
fn yy_state_1251(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LIDENT => Shift(yy_state_1005)
    NT_type_name => Shift(yy_state_1006)
    NT_fun_binder => Shift(yy_state_1252)
    _ => Error
  }
}

// [23, fun_header → non_empty_list(attribute) ASYNC FN fun_binder • optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [201, optional_bang → • EXCLAMATION, EQUAL / LPAREN / LBRACKET / LBRACE / THIN_ARROW]
// [202, optional_bang → •, EQUAL / LPAREN / LBRACKET / LBRACE / THIN_ARROW]
fn yy_state_1252(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EXCLAMATION => Shift(yy_state_535)
    NT_optional_bang => Shift(yy_state_1253)
    T_EQUAL | T_LPAREN | T_LBRACKET | T_LBRACE | T_THIN_ARROW => Reduce(0, NT_optional_bang, yy_action_662)
    _ => Error
  }
}

// [11, type_parameters → • LBRACKET non_empty_list_commas(id(tvar_binder)) RBRACKET, EQUAL / LPAREN / LBRACE / THIN_ARROW]
// [12, optional_type_parameters → • option(type_parameters), EQUAL / LPAREN / LBRACE / THIN_ARROW]
// [23, fun_header → non_empty_list(attribute) ASYNC FN fun_binder optional_bang • optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [450, option(type_parameters) → •, EQUAL / LPAREN / LBRACE / THIN_ARROW]
// [451, option(type_parameters) → • type_parameters, EQUAL / LPAREN / LBRACE / THIN_ARROW]
fn yy_state_1253(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_type_parameters => Shift(yy_state_697)
    NT_option_type_parameters_ => Shift(yy_state_807)
    T_LBRACKET => Shift(yy_state_808)
    NT_optional_type_parameters => Shift(yy_state_1254)
    T_EQUAL | T_LPAREN | T_LBRACE | T_THIN_ARROW => Reduce(0, NT_option_type_parameters_, yy_action_515)
    _ => Error
  }
}

// [10, parameters → • LPAREN list_commas(parameter) RPAREN, EQUAL / LBRACE / THIN_ARROW]
// [23, fun_header → non_empty_list(attribute) ASYNC FN fun_binder optional_bang optional_type_parameters • option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [458, option(parameters) → •, EQUAL / LBRACE / THIN_ARROW]
// [459, option(parameters) → • parameters, EQUAL / LBRACE / THIN_ARROW]
fn yy_state_1254(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_298)
    NT_parameters => Shift(yy_state_828)
    NT_option_parameters_ => Shift(yy_state_1255)
    T_EQUAL | T_LBRACE | T_THIN_ARROW => Reduce(0, NT_option_parameters_, yy_action_287)
    _ => Error
  }
}

// [23, fun_header → non_empty_list(attribute) ASYNC FN fun_binder optional_bang optional_type_parameters option(parameters) • option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [460, option(preceded(THIN_ARROW,return_type)) → •, EQUAL / LBRACE]
// [461, option(preceded(THIN_ARROW,return_type)) → • THIN_ARROW return_type, EQUAL / LBRACE]
fn yy_state_1255(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_THIN_ARROW => Shift(yy_state_246)
    NT_option_preceded_THIN_ARROW_return_type__ => Shift(yy_state_1256)
    T_EQUAL | T_LBRACE => Reduce(0, NT_option_preceded_THIN_ARROW_return_type__, yy_action_161)
    _ => Error
  }
}

// [23, fun_header → non_empty_list(attribute) ASYNC FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)) •, EQUAL / LBRACE]
fn yy_state_1256(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(8, NT_fun_header, yy_action_37)
}

// [21, fun_header → PUB • pub_attr ASYNC FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [22, fun_header → PUB • pub_attr FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [34, extern_fun_header → PUB • pub_attr EXTERN STRING FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL]
// [50, val_header → PUB • pub_attr LET LIDENT, EQUAL]
// [51, val_header → PUB • pub_attr LET LIDENT COLON type_, EQUAL]
// [62, val_header → PUB • pub_attr CONST UIDENT, EQUAL]
// [63, val_header → PUB • pub_attr CONST UIDENT COLON type_, EQUAL]
// [74, structure_item → PUB • pub_attr EXTERN TYPE luident optional_type_parameters_no_constraints deriving_directive_list, EOF / SEMI]
// [93, structure_item → PUB • pub_attr FNALIAS func_alias_targets, EOF / SEMI]
// [99, structure_item → PUB • pub_attr TRAIT luident option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) LBRACE list_semis(trait_method_decl) RBRACE, EOF / SEMI]
// [105, structure_item → PUB • pub_attr TRAITALIAS luident EQUAL type_name, EOF / SEMI]
// [111, structure_item → PUB • pub_attr TYPEALIAS PACKAGE_NAME batch_type_alias_targets, EOF / SEMI]
// [117, structure_item → PUB • pub_attr TRAITALIAS PACKAGE_NAME batch_trait_alias_targets, EOF / SEMI]
// [125, structure_item → PUB • pub_attr IMPL optional_type_parameters type_name FOR type_ WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [131, structure_item → PUB • pub_attr IMPL optional_type_parameters type_name WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [135, pub_attr → •, EXTERN / STRUCT / ENUM / TRAIT / IMPL / ASYNC / TYPEALIAS / TRAITALIAS / FNALIAS / FN / LET / CONST / TYPE]
// [136, pub_attr → • LPAREN READONLY RPAREN, EXTERN / STRUCT / ENUM / TRAIT / IMPL / ASYNC / TYPEALIAS / TRAITALIAS / FNALIAS / FN / LET / CONST / TYPE]
// [137, pub_attr → • LPAREN LIDENT RPAREN, EXTERN / STRUCT / ENUM / TRAIT / IMPL / ASYNC / TYPEALIAS / TRAITALIAS / FNALIAS / FN / LET / CONST / TYPE]
// [140, type_header → PUB • pub_attr TYPE luident optional_type_parameters_no_constraints, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / AMPER / PACKAGE_NAME]
// [146, type_header_bang → PUB • pub_attr TYPE EXCLAMATION luident, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / LBRACE / AMPER / PACKAGE_NAME]
// [152, type_alias_header → PUB • pub_attr TYPEALIAS luident optional_type_parameters_no_constraints, EQUAL]
// [158, struct_header → PUB • pub_attr STRUCT luident optional_type_parameters_no_constraints, LBRACE]
// [164, enum_header → PUB • pub_attr ENUM luident optional_type_parameters_no_constraints, LBRACE]
fn yy_state_1257(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_780)
    NT_pub_attr => Shift(yy_state_1258)
    T_EXTERN | T_STRUCT | T_ENUM | T_TRAIT | T_IMPL | T_ASYNC | T_TYPEALIAS | T_TRAITALIAS | T_FNALIAS | T_FN | T_LET | T_CONST | T_TYPE => Reduce(0, NT_pub_attr, yy_action_250)
    _ => Error
  }
}

// [21, fun_header → PUB pub_attr • ASYNC FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [22, fun_header → PUB pub_attr • FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [34, extern_fun_header → PUB pub_attr • EXTERN STRING FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL]
// [50, val_header → PUB pub_attr • LET LIDENT, EQUAL]
// [51, val_header → PUB pub_attr • LET LIDENT COLON type_, EQUAL]
// [62, val_header → PUB pub_attr • CONST UIDENT, EQUAL]
// [63, val_header → PUB pub_attr • CONST UIDENT COLON type_, EQUAL]
// [74, structure_item → PUB pub_attr • EXTERN TYPE luident optional_type_parameters_no_constraints deriving_directive_list, EOF / SEMI]
// [93, structure_item → PUB pub_attr • FNALIAS func_alias_targets, EOF / SEMI]
// [99, structure_item → PUB pub_attr • TRAIT luident option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) LBRACE list_semis(trait_method_decl) RBRACE, EOF / SEMI]
// [105, structure_item → PUB pub_attr • TRAITALIAS luident EQUAL type_name, EOF / SEMI]
// [111, structure_item → PUB pub_attr • TYPEALIAS PACKAGE_NAME batch_type_alias_targets, EOF / SEMI]
// [117, structure_item → PUB pub_attr • TRAITALIAS PACKAGE_NAME batch_trait_alias_targets, EOF / SEMI]
// [125, structure_item → PUB pub_attr • IMPL optional_type_parameters type_name FOR type_ WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [131, structure_item → PUB pub_attr • IMPL optional_type_parameters type_name WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [140, type_header → PUB pub_attr • TYPE luident optional_type_parameters_no_constraints, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / AMPER / PACKAGE_NAME]
// [146, type_header_bang → PUB pub_attr • TYPE EXCLAMATION luident, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / LBRACE / AMPER / PACKAGE_NAME]
// [152, type_alias_header → PUB pub_attr • TYPEALIAS luident optional_type_parameters_no_constraints, EQUAL]
// [158, struct_header → PUB pub_attr • STRUCT luident optional_type_parameters_no_constraints, LBRACE]
// [164, enum_header → PUB pub_attr • ENUM luident optional_type_parameters_no_constraints, LBRACE]
fn yy_state_1258(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ENUM => Shift(yy_state_1259)
    T_STRUCT => Shift(yy_state_1262)
    T_TYPE => Shift(yy_state_1265)
    T_IMPL => Shift(yy_state_1270)
    T_TYPEALIAS => Shift(yy_state_1287)
    T_TRAITALIAS => Shift(yy_state_1292)
    T_TRAIT => Shift(yy_state_1298)
    T_FNALIAS => Shift(yy_state_1304)
    T_CONST => Shift(yy_state_1306)
    T_LET => Shift(yy_state_1310)
    T_EXTERN => Shift(yy_state_1314)
    T_FN => Shift(yy_state_1326)
    T_ASYNC => Shift(yy_state_1332)
    _ => Error
  }
}

// [164, enum_header → PUB pub_attr ENUM • luident optional_type_parameters_no_constraints, LBRACE]
// [192, luident → • LIDENT, LBRACKET / LBRACE]
// [193, luident → • UIDENT, LBRACKET / LBRACE]
fn yy_state_1259(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    NT_luident => Shift(yy_state_1260)
    _ => Error
  }
}

// [13, optional_type_parameters_no_constraints → • option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)), LBRACE]
// [164, enum_header → PUB pub_attr ENUM luident • optional_type_parameters_no_constraints, LBRACE]
// [453, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → •, LBRACE]
// [454, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → • LBRACKET non_empty_list_commas(id(type_decl_binder)) RBRACKET, LBRACE]
fn yy_state_1260(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_676)
    NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__ => Shift(yy_state_687)
    NT_optional_type_parameters_no_constraints => Shift(yy_state_1261)
    T_LBRACE => Reduce(0, NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__, yy_action_613)
    _ => Error
  }
}

// [164, enum_header → PUB pub_attr ENUM luident optional_type_parameters_no_constraints •, LBRACE]
fn yy_state_1261(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_enum_header, yy_action_369)
}

// [158, struct_header → PUB pub_attr STRUCT • luident optional_type_parameters_no_constraints, LBRACE]
// [192, luident → • LIDENT, LBRACKET / LBRACE]
// [193, luident → • UIDENT, LBRACKET / LBRACE]
fn yy_state_1262(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    NT_luident => Shift(yy_state_1263)
    _ => Error
  }
}

// [13, optional_type_parameters_no_constraints → • option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)), LBRACE]
// [158, struct_header → PUB pub_attr STRUCT luident • optional_type_parameters_no_constraints, LBRACE]
// [453, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → •, LBRACE]
// [454, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → • LBRACKET non_empty_list_commas(id(type_decl_binder)) RBRACKET, LBRACE]
fn yy_state_1263(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_676)
    NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__ => Shift(yy_state_687)
    NT_optional_type_parameters_no_constraints => Shift(yy_state_1264)
    T_LBRACE => Reduce(0, NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__, yy_action_613)
    _ => Error
  }
}

// [158, struct_header → PUB pub_attr STRUCT luident optional_type_parameters_no_constraints •, LBRACE]
fn yy_state_1264(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_struct_header, yy_action_246)
}

// [140, type_header → PUB pub_attr TYPE • luident optional_type_parameters_no_constraints, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / AMPER / PACKAGE_NAME]
// [146, type_header_bang → PUB pub_attr TYPE • EXCLAMATION luident, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / LBRACE / AMPER / PACKAGE_NAME]
// [192, luident → • LIDENT, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / LBRACKET / UNDERSCORE / AMPER / PACKAGE_NAME]
// [193, luident → • UIDENT, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / LBRACKET / UNDERSCORE / AMPER / PACKAGE_NAME]
fn yy_state_1265(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    T_EXCLAMATION => Shift(yy_state_1266)
    NT_luident => Shift(yy_state_1268)
    _ => Error
  }
}

// [146, type_header_bang → PUB pub_attr TYPE EXCLAMATION • luident, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / LBRACE / AMPER / PACKAGE_NAME]
// [192, luident → • LIDENT, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / LBRACE / AMPER / PACKAGE_NAME]
// [193, luident → • UIDENT, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / LBRACE / AMPER / PACKAGE_NAME]
fn yy_state_1266(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    NT_luident => Shift(yy_state_1267)
    _ => Error
  }
}

// [146, type_header_bang → PUB pub_attr TYPE EXCLAMATION luident •, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / LBRACE / AMPER / PACKAGE_NAME]
fn yy_state_1267(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_type_header_bang, yy_action_504)
}

// [13, optional_type_parameters_no_constraints → • option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)), LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / AMPER / PACKAGE_NAME]
// [140, type_header → PUB pub_attr TYPE luident • optional_type_parameters_no_constraints, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / AMPER / PACKAGE_NAME]
// [453, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → •, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / AMPER / PACKAGE_NAME]
// [454, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → • LBRACKET non_empty_list_commas(id(type_decl_binder)) RBRACKET, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / AMPER / PACKAGE_NAME]
fn yy_state_1268(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_676)
    NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__ => Shift(yy_state_687)
    NT_optional_type_parameters_no_constraints => Shift(yy_state_1269)
    T_LIDENT | T_UIDENT | T_EOF | T_DERIVE | T_ASYNC | T_LPAREN | T_SEMI | T_UNDERSCORE | T_AMPER | T_PACKAGE_NAME => Reduce(0, NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__, yy_action_613)
    _ => Error
  }
}

// [140, type_header → PUB pub_attr TYPE luident optional_type_parameters_no_constraints •, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / AMPER / PACKAGE_NAME]
fn yy_state_1269(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_type_header, yy_action_81)
}

// [11, type_parameters → • LBRACKET non_empty_list_commas(id(tvar_binder)) RBRACKET, LIDENT / UIDENT / AMPER / PACKAGE_NAME]
// [12, optional_type_parameters → • option(type_parameters), LIDENT / UIDENT / AMPER / PACKAGE_NAME]
// [125, structure_item → PUB pub_attr IMPL • optional_type_parameters type_name FOR type_ WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [131, structure_item → PUB pub_attr IMPL • optional_type_parameters type_name WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [450, option(type_parameters) → •, LIDENT / UIDENT / AMPER / PACKAGE_NAME]
// [451, option(type_parameters) → • type_parameters, LIDENT / UIDENT / AMPER / PACKAGE_NAME]
fn yy_state_1270(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_type_parameters => Shift(yy_state_697)
    NT_option_type_parameters_ => Shift(yy_state_807)
    T_LBRACKET => Shift(yy_state_808)
    NT_optional_type_parameters => Shift(yy_state_1271)
    T_LIDENT | T_UIDENT | T_AMPER | T_PACKAGE_NAME => Reduce(0, NT_option_type_parameters_, yy_action_515)
    _ => Error
  }
}

// [125, structure_item → PUB pub_attr IMPL optional_type_parameters • type_name FOR type_ WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [131, structure_item → PUB pub_attr IMPL optional_type_parameters • type_name WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [192, luident → • LIDENT, WITH / FOR]
// [193, luident → • UIDENT, WITH / FOR]
// [198, qual_ident_ty → • luident, WITH / FOR]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, WITH / FOR]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, WITH / FOR]
// [335, type_name → • qual_ident_ty, WITH / FOR]
// [336, type_name → • AMPER qual_ident_ty, WITH / FOR]
fn yy_state_1271(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    NT_qual_ident_ty => Shift(yy_state_26)
    NT_type_name => Shift(yy_state_1272)
    _ => Error
  }
}

// [125, structure_item → PUB pub_attr IMPL optional_type_parameters type_name • FOR type_ WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [131, structure_item → PUB pub_attr IMPL optional_type_parameters type_name • WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
fn yy_state_1272(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_WITH => Shift(yy_state_1273)
    T_FOR => Shift(yy_state_1279)
    _ => Error
  }
}

// [131, structure_item → PUB pub_attr IMPL optional_type_parameters type_name WITH • LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
fn yy_state_1273(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_1274)
    _ => Error
  }
}

// [131, structure_item → PUB pub_attr IMPL optional_type_parameters type_name WITH LIDENT • optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [201, optional_bang → • EXCLAMATION, LPAREN]
// [202, optional_bang → •, LPAREN]
fn yy_state_1274(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EXCLAMATION => Shift(yy_state_535)
    NT_optional_bang => Shift(yy_state_1275)
    T_LPAREN => Reduce(0, NT_optional_bang, yy_action_662)
    _ => Error
  }
}

// [10, parameters → • LPAREN list_commas(parameter) RPAREN, EQUAL / LBRACE / THIN_ARROW]
// [131, structure_item → PUB pub_attr IMPL optional_type_parameters type_name WITH LIDENT optional_bang • parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
fn yy_state_1275(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_298)
    NT_parameters => Shift(yy_state_1276)
    _ => Error
  }
}

// [131, structure_item → PUB pub_attr IMPL optional_type_parameters type_name WITH LIDENT optional_bang parameters • option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [460, option(preceded(THIN_ARROW,return_type)) → •, EQUAL / LBRACE]
// [461, option(preceded(THIN_ARROW,return_type)) → • THIN_ARROW return_type, EQUAL / LBRACE]
fn yy_state_1276(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_THIN_ARROW => Shift(yy_state_246)
    NT_option_preceded_THIN_ARROW_return_type__ => Shift(yy_state_1277)
    T_EQUAL | T_LBRACE => Reduce(0, NT_option_preceded_THIN_ARROW_return_type__, yy_action_161)
    _ => Error
  }
}

// [42, block_expr_with_local_types → • LBRACE local_types_and_stmts RBRACE, EOF / SEMI]
// [43, impl_body → • block_expr_with_local_types, EOF / SEMI]
// [44, impl_body → • EQUAL STRING, EOF / SEMI]
// [131, structure_item → PUB pub_attr IMPL optional_type_parameters type_name WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) • impl_body, EOF / SEMI]
fn yy_state_1277(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EQUAL => Shift(yy_state_706)
    NT_block_expr_with_local_types => Shift(yy_state_708)
    T_LBRACE => Shift(yy_state_709)
    NT_impl_body => Shift(yy_state_1278)
    _ => Error
  }
}

// [131, structure_item → PUB pub_attr IMPL optional_type_parameters type_name WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body •, EOF / SEMI]
fn yy_state_1278(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(11, NT_structure_item, yy_action_651)
}

// [125, structure_item → PUB pub_attr IMPL optional_type_parameters type_name FOR • type_ WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [192, luident → • LIDENT, WITH / QUESTION / LBRACKET]
// [193, luident → • UIDENT, WITH / QUESTION / LBRACKET]
// [198, qual_ident_ty → • luident, WITH / QUESTION / LBRACKET]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, WITH / QUESTION / LBRACKET]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, WITH / QUESTION / LBRACKET]
// [410, type_ → • type_ QUESTION, WITH / QUESTION]
// [411, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN, WITH / QUESTION]
// [412, type_ → • ASYNC LPAREN type_ COMMA RPAREN THIN_ARROW return_type, WITH / QUESTION]
// [413, type_ → • ASYNC LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, WITH / QUESTION]
// [414, type_ → • LPAREN type_ COMMA RPAREN THIN_ARROW return_type, WITH / QUESTION]
// [415, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, WITH / QUESTION]
// [416, type_ → • ASYNC LPAREN RPAREN THIN_ARROW return_type, WITH / QUESTION]
// [417, type_ → • LPAREN RPAREN THIN_ARROW return_type, WITH / QUESTION]
// [418, type_ → • LPAREN type_ RPAREN, WITH / QUESTION]
// [419, type_ → • ASYNC LPAREN type_ RPAREN THIN_ARROW return_type, WITH / QUESTION]
// [420, type_ → • LPAREN type_ RPAREN THIN_ARROW return_type, WITH / QUESTION]
// [421, type_ → • qual_ident_ty optional_type_arguments, WITH / QUESTION]
// [422, type_ → • AMPER qual_ident_ty, WITH / QUESTION]
// [423, type_ → • UNDERSCORE, WITH / QUESTION]
fn yy_state_1279(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    T_UNDERSCORE => Shift(yy_state_120)
    T_AMPER => Shift(yy_state_121)
    NT_qual_ident_ty => Shift(yy_state_123)
    T_ASYNC => Shift(yy_state_129)
    T_LPAREN => Shift(yy_state_134)
    NT_type_ => Shift(yy_state_1280)
    _ => Error
  }
}

// [125, structure_item → PUB pub_attr IMPL optional_type_parameters type_name FOR type_ • WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [410, type_ → type_ • QUESTION, WITH / QUESTION]
fn yy_state_1280(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_QUESTION => Shift(yy_state_139)
    T_WITH => Shift(yy_state_1281)
    _ => Error
  }
}

// [125, structure_item → PUB pub_attr IMPL optional_type_parameters type_name FOR type_ WITH • LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
fn yy_state_1281(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_1282)
    _ => Error
  }
}

// [125, structure_item → PUB pub_attr IMPL optional_type_parameters type_name FOR type_ WITH LIDENT • optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [201, optional_bang → • EXCLAMATION, LPAREN]
// [202, optional_bang → •, LPAREN]
fn yy_state_1282(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EXCLAMATION => Shift(yy_state_535)
    NT_optional_bang => Shift(yy_state_1283)
    T_LPAREN => Reduce(0, NT_optional_bang, yy_action_662)
    _ => Error
  }
}

// [10, parameters → • LPAREN list_commas(parameter) RPAREN, EQUAL / LBRACE / THIN_ARROW]
// [125, structure_item → PUB pub_attr IMPL optional_type_parameters type_name FOR type_ WITH LIDENT optional_bang • parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
fn yy_state_1283(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_298)
    NT_parameters => Shift(yy_state_1284)
    _ => Error
  }
}

// [125, structure_item → PUB pub_attr IMPL optional_type_parameters type_name FOR type_ WITH LIDENT optional_bang parameters • option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [460, option(preceded(THIN_ARROW,return_type)) → •, EQUAL / LBRACE]
// [461, option(preceded(THIN_ARROW,return_type)) → • THIN_ARROW return_type, EQUAL / LBRACE]
fn yy_state_1284(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_THIN_ARROW => Shift(yy_state_246)
    NT_option_preceded_THIN_ARROW_return_type__ => Shift(yy_state_1285)
    T_EQUAL | T_LBRACE => Reduce(0, NT_option_preceded_THIN_ARROW_return_type__, yy_action_161)
    _ => Error
  }
}

// [42, block_expr_with_local_types → • LBRACE local_types_and_stmts RBRACE, EOF / SEMI]
// [43, impl_body → • block_expr_with_local_types, EOF / SEMI]
// [44, impl_body → • EQUAL STRING, EOF / SEMI]
// [125, structure_item → PUB pub_attr IMPL optional_type_parameters type_name FOR type_ WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) • impl_body, EOF / SEMI]
fn yy_state_1285(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EQUAL => Shift(yy_state_706)
    NT_block_expr_with_local_types => Shift(yy_state_708)
    T_LBRACE => Shift(yy_state_709)
    NT_impl_body => Shift(yy_state_1286)
    _ => Error
  }
}

// [125, structure_item → PUB pub_attr IMPL optional_type_parameters type_name FOR type_ WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body •, EOF / SEMI]
fn yy_state_1286(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(13, NT_structure_item, yy_action_417)
}

// [111, structure_item → PUB pub_attr TYPEALIAS • PACKAGE_NAME batch_type_alias_targets, EOF / SEMI]
// [152, type_alias_header → PUB pub_attr TYPEALIAS • luident optional_type_parameters_no_constraints, EQUAL]
// [192, luident → • LIDENT, EQUAL / LBRACKET]
// [193, luident → • UIDENT, EQUAL / LBRACKET]
fn yy_state_1287(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    NT_luident => Shift(yy_state_1288)
    T_PACKAGE_NAME => Shift(yy_state_1290)
    _ => Error
  }
}

// [13, optional_type_parameters_no_constraints → • option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)), EQUAL]
// [152, type_alias_header → PUB pub_attr TYPEALIAS luident • optional_type_parameters_no_constraints, EQUAL]
// [453, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → •, EQUAL]
// [454, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → • LBRACKET non_empty_list_commas(id(type_decl_binder)) RBRACKET, EQUAL]
fn yy_state_1288(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_676)
    NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__ => Shift(yy_state_687)
    NT_optional_type_parameters_no_constraints => Shift(yy_state_1289)
    T_EQUAL => Reduce(0, NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__, yy_action_613)
    _ => Error
  }
}

// [152, type_alias_header → PUB pub_attr TYPEALIAS luident optional_type_parameters_no_constraints •, EQUAL]
fn yy_state_1289(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_type_alias_header, yy_action_380)
}

// [111, structure_item → PUB pub_attr TYPEALIAS PACKAGE_NAME • batch_type_alias_targets, EOF / SEMI]
// [168, batch_type_alias_targets → • DOT_LIDENT optional_type_parameters_no_constraints, EOF / SEMI]
// [169, batch_type_alias_targets → • DOT_UIDENT optional_type_parameters_no_constraints, EOF / SEMI]
// [170, batch_type_alias_targets → • DOT_LPAREN non_empty_list_commas(batch_type_alias_target) RPAREN, EOF / SEMI]
fn yy_state_1290(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_DOT_LPAREN => Shift(yy_state_835)
    T_DOT_UIDENT => Shift(yy_state_845)
    T_DOT_LIDENT => Shift(yy_state_847)
    NT_batch_type_alias_targets => Shift(yy_state_1291)
    _ => Error
  }
}

// [111, structure_item → PUB pub_attr TYPEALIAS PACKAGE_NAME batch_type_alias_targets •, EOF / SEMI]
fn yy_state_1291(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_structure_item, yy_action_458)
}

// [105, structure_item → PUB pub_attr TRAITALIAS • luident EQUAL type_name, EOF / SEMI]
// [117, structure_item → PUB pub_attr TRAITALIAS • PACKAGE_NAME batch_trait_alias_targets, EOF / SEMI]
// [192, luident → • LIDENT, EQUAL]
// [193, luident → • UIDENT, EQUAL]
fn yy_state_1292(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    T_PACKAGE_NAME => Shift(yy_state_1293)
    NT_luident => Shift(yy_state_1295)
    _ => Error
  }
}

// [117, structure_item → PUB pub_attr TRAITALIAS PACKAGE_NAME • batch_trait_alias_targets, EOF / SEMI]
// [172, batch_trait_alias_targets → • DOT_LIDENT, EOF / SEMI]
// [173, batch_trait_alias_targets → • DOT_UIDENT, EOF / SEMI]
// [174, batch_trait_alias_targets → • DOT_LPAREN non_empty_list_commas(batch_trait_alias_target) RPAREN, EOF / SEMI]
fn yy_state_1293(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_DOT_LPAREN => Shift(yy_state_852)
    T_DOT_UIDENT => Shift(yy_state_861)
    T_DOT_LIDENT => Shift(yy_state_862)
    NT_batch_trait_alias_targets => Shift(yy_state_1294)
    _ => Error
  }
}

// [117, structure_item → PUB pub_attr TRAITALIAS PACKAGE_NAME batch_trait_alias_targets •, EOF / SEMI]
fn yy_state_1294(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_structure_item, yy_action_351)
}

// [105, structure_item → PUB pub_attr TRAITALIAS luident • EQUAL type_name, EOF / SEMI]
fn yy_state_1295(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EQUAL => Shift(yy_state_1296)
    _ => Error
  }
}

// [105, structure_item → PUB pub_attr TRAITALIAS luident EQUAL • type_name, EOF / SEMI]
// [192, luident → • LIDENT, EOF / SEMI]
// [193, luident → • UIDENT, EOF / SEMI]
// [198, qual_ident_ty → • luident, EOF / SEMI]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, EOF / SEMI]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, EOF / SEMI]
// [335, type_name → • qual_ident_ty, EOF / SEMI]
// [336, type_name → • AMPER qual_ident_ty, EOF / SEMI]
fn yy_state_1296(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    NT_qual_ident_ty => Shift(yy_state_26)
    NT_type_name => Shift(yy_state_1297)
    _ => Error
  }
}

// [105, structure_item → PUB pub_attr TRAITALIAS luident EQUAL type_name •, EOF / SEMI]
fn yy_state_1297(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(6, NT_structure_item, yy_action_361)
}

// [99, structure_item → PUB pub_attr TRAIT • luident option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) LBRACE list_semis(trait_method_decl) RBRACE, EOF / SEMI]
// [192, luident → • LIDENT, COLON / LBRACE]
// [193, luident → • UIDENT, COLON / LBRACE]
fn yy_state_1298(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    NT_luident => Shift(yy_state_1299)
    _ => Error
  }
}

// [99, structure_item → PUB pub_attr TRAIT luident • option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) LBRACE list_semis(trait_method_decl) RBRACE, EOF / SEMI]
// [475, option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) → •, LBRACE]
// [476, option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) → • COLON separated_nonempty_list(PLUS,tvar_constraint), LBRACE]
fn yy_state_1299(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_869)
    NT_option_preceded_COLON_separated_nonempty_list_PLUS_tvar_constraint___ => Shift(yy_state_1300)
    T_LBRACE => Reduce(0, NT_option_preceded_COLON_separated_nonempty_list_PLUS_tvar_constraint___, yy_action_57)
    _ => Error
  }
}

// [99, structure_item → PUB pub_attr TRAIT luident option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) • LBRACE list_semis(trait_method_decl) RBRACE, EOF / SEMI]
fn yy_state_1300(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACE => Shift(yy_state_1301)
    _ => Error
  }
}

// [99, structure_item → PUB pub_attr TRAIT luident option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) LBRACE • list_semis(trait_method_decl) RBRACE, EOF / SEMI]
// [187, trait_method_decl → • LIDENT optional_bang optional_type_parameters LPAREN list_commas(trait_method_param) RPAREN option(preceded(THIN_ARROW,return_type)) option(preceded(EQUAL,wildcard)), SEMI / RBRACE]
// [477, list_semis(trait_method_decl) → •, RBRACE]
// [478, list_semis(trait_method_decl) → • non_empty_list_semis(trait_method_decl), RBRACE]
// [565, non_empty_list_semis(trait_method_decl) → • non_empty_list_semis_rev(trait_method_decl), RBRACE]
// [613, non_empty_list_semis_rev(trait_method_decl) → • non_empty_list_semi_rev_aux(trait_method_decl) option(SEMI), RBRACE]
// [635, non_empty_list_semi_rev_aux(trait_method_decl) → • trait_method_decl, SEMI / RBRACE]
// [636, non_empty_list_semi_rev_aux(trait_method_decl) → • non_empty_list_semi_rev_aux(trait_method_decl) SEMI trait_method_decl, SEMI / RBRACE]
fn yy_state_1301(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_trait_method_decl => Shift(yy_state_873)
    NT_non_empty_list_semi_rev_aux_trait_method_decl_ => Shift(yy_state_874)
    T_LIDENT => Shift(yy_state_878)
    NT_non_empty_list_semis_rev_trait_method_decl_ => Shift(yy_state_902)
    NT_non_empty_list_semis_trait_method_decl_ => Shift(yy_state_903)
    NT_list_semis_trait_method_decl_ => Shift(yy_state_1302)
    T_RBRACE => Reduce(0, NT_list_semis_trait_method_decl_, yy_action_262)
    _ => Error
  }
}

// [99, structure_item → PUB pub_attr TRAIT luident option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) LBRACE list_semis(trait_method_decl) • RBRACE, EOF / SEMI]
fn yy_state_1302(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACE => Shift(yy_state_1303)
    _ => Error
  }
}

// [99, structure_item → PUB pub_attr TRAIT luident option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) LBRACE list_semis(trait_method_decl) RBRACE •, EOF / SEMI]
fn yy_state_1303(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(8, NT_structure_item, yy_action_673)
}

// [93, structure_item → PUB pub_attr FNALIAS • func_alias_targets, EOF / SEMI]
// [176, func_alias_targets → • func_alias_target(LIDENT), EOF / SEMI]
// [177, func_alias_targets → • func_alias_type_name(LIDENT,UIDENT) func_alias_target(LIDENT), EOF / SEMI]
// [178, func_alias_targets → • PACKAGE_NAME func_alias_target(DOT_LIDENT), EOF / SEMI]
// [179, func_alias_targets → • PACKAGE_NAME func_alias_type_name(DOT_LIDENT,DOT_UIDENT) func_alias_target(LIDENT), EOF / SEMI]
// [180, func_alias_targets → • option(func_alias_type_name(LIDENT,UIDENT)) LPAREN non_empty_list_commas(func_alias_target(LIDENT)) RPAREN, EOF / SEMI]
// [181, func_alias_targets → • PACKAGE_NAME DOT_LPAREN non_empty_list_commas(func_alias_target(LIDENT)) RPAREN, EOF / SEMI]
// [182, func_alias_targets → • PACKAGE_NAME func_alias_type_name(DOT_LIDENT,DOT_UIDENT) LPAREN non_empty_list_commas(func_alias_target(LIDENT)) RPAREN, EOF / SEMI]
// [484, func_alias_type_name(LIDENT,UIDENT) → • LIDENT COLONCOLON, LIDENT / LPAREN]
// [485, func_alias_type_name(LIDENT,UIDENT) → • UIDENT COLONCOLON, LIDENT / LPAREN]
// [486, func_alias_target(LIDENT) → • LIDENT option(preceded(AS,binder)), EOF / SEMI]
// [490, option(func_alias_type_name(LIDENT,UIDENT)) → •, LPAREN]
// [491, option(func_alias_type_name(LIDENT,UIDENT)) → • func_alias_type_name(LIDENT,UIDENT), LPAREN]
fn yy_state_1304(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_907)
    T_LIDENT => Shift(yy_state_909)
    NT_option_func_alias_type_name_LIDENT_UIDENT__ => Shift(yy_state_914)
    T_PACKAGE_NAME => Shift(yy_state_924)
    NT_func_alias_type_name_LIDENT_UIDENT_ => Shift(yy_state_939)
    NT_func_alias_target_LIDENT_ => Shift(yy_state_941)
    NT_func_alias_targets => Shift(yy_state_1305)
    T_LPAREN => Reduce(0, NT_option_func_alias_type_name_LIDENT_UIDENT__, yy_action_298)
    _ => Error
  }
}

// [93, structure_item → PUB pub_attr FNALIAS func_alias_targets •, EOF / SEMI]
fn yy_state_1305(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_structure_item, yy_action_495)
}

// [62, val_header → PUB pub_attr CONST • UIDENT, EQUAL]
// [63, val_header → PUB pub_attr CONST • UIDENT COLON type_, EQUAL]
fn yy_state_1306(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_1307)
    _ => Error
  }
}

// [62, val_header → PUB pub_attr CONST UIDENT •, EQUAL]
// [63, val_header → PUB pub_attr CONST UIDENT • COLON type_, EQUAL]
fn yy_state_1307(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_1308)
    T_EQUAL => Reduce(4, NT_val_header, yy_action_277)
    _ => Error
  }
}

// [63, val_header → PUB pub_attr CONST UIDENT COLON • type_, EQUAL]
// [192, luident → • LIDENT, EQUAL / QUESTION / LBRACKET]
// [193, luident → • UIDENT, EQUAL / QUESTION / LBRACKET]
// [198, qual_ident_ty → • luident, EQUAL / QUESTION / LBRACKET]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, EQUAL / QUESTION / LBRACKET]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, EQUAL / QUESTION / LBRACKET]
// [410, type_ → • type_ QUESTION, EQUAL / QUESTION]
// [411, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN, EQUAL / QUESTION]
// [412, type_ → • ASYNC LPAREN type_ COMMA RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [413, type_ → • ASYNC LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [414, type_ → • LPAREN type_ COMMA RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [415, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [416, type_ → • ASYNC LPAREN RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [417, type_ → • LPAREN RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [418, type_ → • LPAREN type_ RPAREN, EQUAL / QUESTION]
// [419, type_ → • ASYNC LPAREN type_ RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [420, type_ → • LPAREN type_ RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [421, type_ → • qual_ident_ty optional_type_arguments, EQUAL / QUESTION]
// [422, type_ → • AMPER qual_ident_ty, EQUAL / QUESTION]
// [423, type_ → • UNDERSCORE, EQUAL / QUESTION]
fn yy_state_1308(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    T_UNDERSCORE => Shift(yy_state_120)
    T_AMPER => Shift(yy_state_121)
    NT_qual_ident_ty => Shift(yy_state_123)
    T_ASYNC => Shift(yy_state_129)
    T_LPAREN => Shift(yy_state_134)
    NT_type_ => Shift(yy_state_1309)
    _ => Error
  }
}

// [63, val_header → PUB pub_attr CONST UIDENT COLON type_ •, EQUAL]
// [410, type_ → type_ • QUESTION, EQUAL / QUESTION]
fn yy_state_1309(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_QUESTION => Shift(yy_state_139)
    T_EQUAL => Reduce(6, NT_val_header, yy_action_21)
    _ => Error
  }
}

// [50, val_header → PUB pub_attr LET • LIDENT, EQUAL]
// [51, val_header → PUB pub_attr LET • LIDENT COLON type_, EQUAL]
fn yy_state_1310(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_1311)
    _ => Error
  }
}

// [50, val_header → PUB pub_attr LET LIDENT •, EQUAL]
// [51, val_header → PUB pub_attr LET LIDENT • COLON type_, EQUAL]
fn yy_state_1311(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_1312)
    T_EQUAL => Reduce(4, NT_val_header, yy_action_313)
    _ => Error
  }
}

// [51, val_header → PUB pub_attr LET LIDENT COLON • type_, EQUAL]
// [192, luident → • LIDENT, EQUAL / QUESTION / LBRACKET]
// [193, luident → • UIDENT, EQUAL / QUESTION / LBRACKET]
// [198, qual_ident_ty → • luident, EQUAL / QUESTION / LBRACKET]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, EQUAL / QUESTION / LBRACKET]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, EQUAL / QUESTION / LBRACKET]
// [410, type_ → • type_ QUESTION, EQUAL / QUESTION]
// [411, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN, EQUAL / QUESTION]
// [412, type_ → • ASYNC LPAREN type_ COMMA RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [413, type_ → • ASYNC LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [414, type_ → • LPAREN type_ COMMA RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [415, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [416, type_ → • ASYNC LPAREN RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [417, type_ → • LPAREN RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [418, type_ → • LPAREN type_ RPAREN, EQUAL / QUESTION]
// [419, type_ → • ASYNC LPAREN type_ RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [420, type_ → • LPAREN type_ RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [421, type_ → • qual_ident_ty optional_type_arguments, EQUAL / QUESTION]
// [422, type_ → • AMPER qual_ident_ty, EQUAL / QUESTION]
// [423, type_ → • UNDERSCORE, EQUAL / QUESTION]
fn yy_state_1312(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    T_UNDERSCORE => Shift(yy_state_120)
    T_AMPER => Shift(yy_state_121)
    NT_qual_ident_ty => Shift(yy_state_123)
    T_ASYNC => Shift(yy_state_129)
    T_LPAREN => Shift(yy_state_134)
    NT_type_ => Shift(yy_state_1313)
    _ => Error
  }
}

// [51, val_header → PUB pub_attr LET LIDENT COLON type_ •, EQUAL]
// [410, type_ → type_ • QUESTION, EQUAL / QUESTION]
fn yy_state_1313(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_QUESTION => Shift(yy_state_139)
    T_EQUAL => Reduce(6, NT_val_header, yy_action_221)
    _ => Error
  }
}

// [34, extern_fun_header → PUB pub_attr EXTERN • STRING FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL]
// [74, structure_item → PUB pub_attr EXTERN • TYPE luident optional_type_parameters_no_constraints deriving_directive_list, EOF / SEMI]
fn yy_state_1314(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_TYPE => Shift(yy_state_1315)
    T_STRING => Shift(yy_state_1319)
    _ => Error
  }
}

// [74, structure_item → PUB pub_attr EXTERN TYPE • luident optional_type_parameters_no_constraints deriving_directive_list, EOF / SEMI]
// [192, luident → • LIDENT, EOF / DERIVE / SEMI / LBRACKET]
// [193, luident → • UIDENT, EOF / DERIVE / SEMI / LBRACKET]
fn yy_state_1315(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    NT_luident => Shift(yy_state_1316)
    _ => Error
  }
}

// [13, optional_type_parameters_no_constraints → • option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)), EOF / DERIVE / SEMI]
// [74, structure_item → PUB pub_attr EXTERN TYPE luident • optional_type_parameters_no_constraints deriving_directive_list, EOF / SEMI]
// [453, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → •, EOF / DERIVE / SEMI]
// [454, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → • LBRACKET non_empty_list_commas(id(type_decl_binder)) RBRACKET, EOF / DERIVE / SEMI]
fn yy_state_1316(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_676)
    NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__ => Shift(yy_state_687)
    NT_optional_type_parameters_no_constraints => Shift(yy_state_1317)
    T_EOF | T_DERIVE | T_SEMI => Reduce(0, NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__, yy_action_613)
    _ => Error
  }
}

// [74, structure_item → PUB pub_attr EXTERN TYPE luident optional_type_parameters_no_constraints • deriving_directive_list, EOF / SEMI]
// [185, deriving_directive_list → •, EOF / SEMI]
// [186, deriving_directive_list → • DERIVE LPAREN list_commas(deriving_directive) RPAREN, EOF / SEMI]
fn yy_state_1317(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_DERIVE => Shift(yy_state_719)
    NT_deriving_directive_list => Shift(yy_state_1318)
    T_EOF | T_SEMI => Reduce(0, NT_deriving_directive_list, yy_action_147)
    _ => Error
  }
}

// [74, structure_item → PUB pub_attr EXTERN TYPE luident optional_type_parameters_no_constraints deriving_directive_list •, EOF / SEMI]
fn yy_state_1318(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(7, NT_structure_item, yy_action_639)
}

// [34, extern_fun_header → PUB pub_attr EXTERN STRING • FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL]
fn yy_state_1319(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_FN => Shift(yy_state_1320)
    _ => Error
  }
}

// [15, fun_binder → • type_name COLONCOLON LIDENT, EQUAL / LPAREN / EXCLAMATION / LBRACKET / THIN_ARROW]
// [16, fun_binder → • LIDENT, EQUAL / LPAREN / EXCLAMATION / LBRACKET / THIN_ARROW]
// [34, extern_fun_header → PUB pub_attr EXTERN STRING FN • fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL]
// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
fn yy_state_1320(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LIDENT => Shift(yy_state_1005)
    NT_type_name => Shift(yy_state_1006)
    NT_fun_binder => Shift(yy_state_1321)
    _ => Error
  }
}

// [34, extern_fun_header → PUB pub_attr EXTERN STRING FN fun_binder • optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL]
// [201, optional_bang → • EXCLAMATION, EQUAL / LPAREN / LBRACKET / THIN_ARROW]
// [202, optional_bang → •, EQUAL / LPAREN / LBRACKET / THIN_ARROW]
fn yy_state_1321(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EXCLAMATION => Shift(yy_state_535)
    NT_optional_bang => Shift(yy_state_1322)
    T_EQUAL | T_LPAREN | T_LBRACKET | T_THIN_ARROW => Reduce(0, NT_optional_bang, yy_action_662)
    _ => Error
  }
}

// [11, type_parameters → • LBRACKET non_empty_list_commas(id(tvar_binder)) RBRACKET, EQUAL / LPAREN / THIN_ARROW]
// [12, optional_type_parameters → • option(type_parameters), EQUAL / LPAREN / THIN_ARROW]
// [34, extern_fun_header → PUB pub_attr EXTERN STRING FN fun_binder optional_bang • optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL]
// [450, option(type_parameters) → •, EQUAL / LPAREN / THIN_ARROW]
// [451, option(type_parameters) → • type_parameters, EQUAL / LPAREN / THIN_ARROW]
fn yy_state_1322(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_type_parameters => Shift(yy_state_697)
    NT_option_type_parameters_ => Shift(yy_state_807)
    T_LBRACKET => Shift(yy_state_808)
    NT_optional_type_parameters => Shift(yy_state_1323)
    T_EQUAL | T_LPAREN | T_THIN_ARROW => Reduce(0, NT_option_type_parameters_, yy_action_515)
    _ => Error
  }
}

// [10, parameters → • LPAREN list_commas(parameter) RPAREN, EQUAL / THIN_ARROW]
// [34, extern_fun_header → PUB pub_attr EXTERN STRING FN fun_binder optional_bang optional_type_parameters • option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL]
// [458, option(parameters) → •, EQUAL / THIN_ARROW]
// [459, option(parameters) → • parameters, EQUAL / THIN_ARROW]
fn yy_state_1323(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_298)
    NT_parameters => Shift(yy_state_828)
    NT_option_parameters_ => Shift(yy_state_1324)
    T_EQUAL | T_THIN_ARROW => Reduce(0, NT_option_parameters_, yy_action_287)
    _ => Error
  }
}

// [34, extern_fun_header → PUB pub_attr EXTERN STRING FN fun_binder optional_bang optional_type_parameters option(parameters) • option(preceded(THIN_ARROW,return_type)), EQUAL]
// [460, option(preceded(THIN_ARROW,return_type)) → •, EQUAL]
// [461, option(preceded(THIN_ARROW,return_type)) → • THIN_ARROW return_type, EQUAL]
fn yy_state_1324(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_THIN_ARROW => Shift(yy_state_246)
    NT_option_preceded_THIN_ARROW_return_type__ => Shift(yy_state_1325)
    T_EQUAL => Reduce(0, NT_option_preceded_THIN_ARROW_return_type__, yy_action_161)
    _ => Error
  }
}

// [34, extern_fun_header → PUB pub_attr EXTERN STRING FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)) •, EQUAL]
fn yy_state_1325(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(10, NT_extern_fun_header, yy_action_444)
}

// [15, fun_binder → • type_name COLONCOLON LIDENT, EQUAL / LPAREN / EXCLAMATION / LBRACKET / LBRACE / THIN_ARROW]
// [16, fun_binder → • LIDENT, EQUAL / LPAREN / EXCLAMATION / LBRACKET / LBRACE / THIN_ARROW]
// [22, fun_header → PUB pub_attr FN • fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
fn yy_state_1326(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LIDENT => Shift(yy_state_1005)
    NT_type_name => Shift(yy_state_1006)
    NT_fun_binder => Shift(yy_state_1327)
    _ => Error
  }
}

// [22, fun_header → PUB pub_attr FN fun_binder • optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [201, optional_bang → • EXCLAMATION, EQUAL / LPAREN / LBRACKET / LBRACE / THIN_ARROW]
// [202, optional_bang → •, EQUAL / LPAREN / LBRACKET / LBRACE / THIN_ARROW]
fn yy_state_1327(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EXCLAMATION => Shift(yy_state_535)
    NT_optional_bang => Shift(yy_state_1328)
    T_EQUAL | T_LPAREN | T_LBRACKET | T_LBRACE | T_THIN_ARROW => Reduce(0, NT_optional_bang, yy_action_662)
    _ => Error
  }
}

// [11, type_parameters → • LBRACKET non_empty_list_commas(id(tvar_binder)) RBRACKET, EQUAL / LPAREN / LBRACE / THIN_ARROW]
// [12, optional_type_parameters → • option(type_parameters), EQUAL / LPAREN / LBRACE / THIN_ARROW]
// [22, fun_header → PUB pub_attr FN fun_binder optional_bang • optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [450, option(type_parameters) → •, EQUAL / LPAREN / LBRACE / THIN_ARROW]
// [451, option(type_parameters) → • type_parameters, EQUAL / LPAREN / LBRACE / THIN_ARROW]
fn yy_state_1328(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_type_parameters => Shift(yy_state_697)
    NT_option_type_parameters_ => Shift(yy_state_807)
    T_LBRACKET => Shift(yy_state_808)
    NT_optional_type_parameters => Shift(yy_state_1329)
    T_EQUAL | T_LPAREN | T_LBRACE | T_THIN_ARROW => Reduce(0, NT_option_type_parameters_, yy_action_515)
    _ => Error
  }
}

// [10, parameters → • LPAREN list_commas(parameter) RPAREN, EQUAL / LBRACE / THIN_ARROW]
// [22, fun_header → PUB pub_attr FN fun_binder optional_bang optional_type_parameters • option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [458, option(parameters) → •, EQUAL / LBRACE / THIN_ARROW]
// [459, option(parameters) → • parameters, EQUAL / LBRACE / THIN_ARROW]
fn yy_state_1329(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_298)
    NT_parameters => Shift(yy_state_828)
    NT_option_parameters_ => Shift(yy_state_1330)
    T_EQUAL | T_LBRACE | T_THIN_ARROW => Reduce(0, NT_option_parameters_, yy_action_287)
    _ => Error
  }
}

// [22, fun_header → PUB pub_attr FN fun_binder optional_bang optional_type_parameters option(parameters) • option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [460, option(preceded(THIN_ARROW,return_type)) → •, EQUAL / LBRACE]
// [461, option(preceded(THIN_ARROW,return_type)) → • THIN_ARROW return_type, EQUAL / LBRACE]
fn yy_state_1330(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_THIN_ARROW => Shift(yy_state_246)
    NT_option_preceded_THIN_ARROW_return_type__ => Shift(yy_state_1331)
    T_EQUAL | T_LBRACE => Reduce(0, NT_option_preceded_THIN_ARROW_return_type__, yy_action_161)
    _ => Error
  }
}

// [22, fun_header → PUB pub_attr FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)) •, EQUAL / LBRACE]
fn yy_state_1331(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(8, NT_fun_header, yy_action_577)
}

// [21, fun_header → PUB pub_attr ASYNC • FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
fn yy_state_1332(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_FN => Shift(yy_state_1333)
    _ => Error
  }
}

// [15, fun_binder → • type_name COLONCOLON LIDENT, EQUAL / LPAREN / EXCLAMATION / LBRACKET / LBRACE / THIN_ARROW]
// [16, fun_binder → • LIDENT, EQUAL / LPAREN / EXCLAMATION / LBRACKET / LBRACE / THIN_ARROW]
// [21, fun_header → PUB pub_attr ASYNC FN • fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
fn yy_state_1333(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LIDENT => Shift(yy_state_1005)
    NT_type_name => Shift(yy_state_1006)
    NT_fun_binder => Shift(yy_state_1334)
    _ => Error
  }
}

// [21, fun_header → PUB pub_attr ASYNC FN fun_binder • optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [201, optional_bang → • EXCLAMATION, EQUAL / LPAREN / LBRACKET / LBRACE / THIN_ARROW]
// [202, optional_bang → •, EQUAL / LPAREN / LBRACKET / LBRACE / THIN_ARROW]
fn yy_state_1334(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EXCLAMATION => Shift(yy_state_535)
    NT_optional_bang => Shift(yy_state_1335)
    T_EQUAL | T_LPAREN | T_LBRACKET | T_LBRACE | T_THIN_ARROW => Reduce(0, NT_optional_bang, yy_action_662)
    _ => Error
  }
}

// [11, type_parameters → • LBRACKET non_empty_list_commas(id(tvar_binder)) RBRACKET, EQUAL / LPAREN / LBRACE / THIN_ARROW]
// [12, optional_type_parameters → • option(type_parameters), EQUAL / LPAREN / LBRACE / THIN_ARROW]
// [21, fun_header → PUB pub_attr ASYNC FN fun_binder optional_bang • optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [450, option(type_parameters) → •, EQUAL / LPAREN / LBRACE / THIN_ARROW]
// [451, option(type_parameters) → • type_parameters, EQUAL / LPAREN / LBRACE / THIN_ARROW]
fn yy_state_1335(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_type_parameters => Shift(yy_state_697)
    NT_option_type_parameters_ => Shift(yy_state_807)
    T_LBRACKET => Shift(yy_state_808)
    NT_optional_type_parameters => Shift(yy_state_1336)
    T_EQUAL | T_LPAREN | T_LBRACE | T_THIN_ARROW => Reduce(0, NT_option_type_parameters_, yy_action_515)
    _ => Error
  }
}

// [10, parameters → • LPAREN list_commas(parameter) RPAREN, EQUAL / LBRACE / THIN_ARROW]
// [21, fun_header → PUB pub_attr ASYNC FN fun_binder optional_bang optional_type_parameters • option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [458, option(parameters) → •, EQUAL / LBRACE / THIN_ARROW]
// [459, option(parameters) → • parameters, EQUAL / LBRACE / THIN_ARROW]
fn yy_state_1336(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_298)
    NT_parameters => Shift(yy_state_828)
    NT_option_parameters_ => Shift(yy_state_1337)
    T_EQUAL | T_LBRACE | T_THIN_ARROW => Reduce(0, NT_option_parameters_, yy_action_287)
    _ => Error
  }
}

// [21, fun_header → PUB pub_attr ASYNC FN fun_binder optional_bang optional_type_parameters option(parameters) • option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [460, option(preceded(THIN_ARROW,return_type)) → •, EQUAL / LBRACE]
// [461, option(preceded(THIN_ARROW,return_type)) → • THIN_ARROW return_type, EQUAL / LBRACE]
fn yy_state_1337(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_THIN_ARROW => Shift(yy_state_246)
    NT_option_preceded_THIN_ARROW_return_type__ => Shift(yy_state_1338)
    T_EQUAL | T_LBRACE => Reduce(0, NT_option_preceded_THIN_ARROW_return_type__, yy_action_161)
    _ => Error
  }
}

// [21, fun_header → PUB pub_attr ASYNC FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)) •, EQUAL / LBRACE]
fn yy_state_1338(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(9, NT_fun_header, yy_action_108)
}

// [19, fun_header → PRIV • ASYNC FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [20, fun_header → PRIV • FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [33, extern_fun_header → PRIV • EXTERN STRING FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL]
// [48, val_header → PRIV • LET LIDENT, EQUAL]
// [49, val_header → PRIV • LET LIDENT COLON type_, EQUAL]
// [60, val_header → PRIV • CONST UIDENT, EQUAL]
// [61, val_header → PRIV • CONST UIDENT COLON type_, EQUAL]
// [73, structure_item → PRIV • EXTERN TYPE luident optional_type_parameters_no_constraints deriving_directive_list, EOF / SEMI]
// [92, structure_item → PRIV • FNALIAS func_alias_targets, EOF / SEMI]
// [98, structure_item → PRIV • TRAIT luident option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) LBRACE list_semis(trait_method_decl) RBRACE, EOF / SEMI]
// [104, structure_item → PRIV • TRAITALIAS luident EQUAL type_name, EOF / SEMI]
// [110, structure_item → PRIV • TYPEALIAS PACKAGE_NAME batch_type_alias_targets, EOF / SEMI]
// [116, structure_item → PRIV • TRAITALIAS PACKAGE_NAME batch_trait_alias_targets, EOF / SEMI]
// [124, structure_item → PRIV • IMPL optional_type_parameters type_name FOR type_ WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [130, structure_item → PRIV • IMPL optional_type_parameters type_name WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [139, type_header → PRIV • TYPE luident optional_type_parameters_no_constraints, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / AMPER / PACKAGE_NAME]
// [145, type_header_bang → PRIV • TYPE EXCLAMATION luident, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / LBRACE / AMPER / PACKAGE_NAME]
// [151, type_alias_header → PRIV • TYPEALIAS luident optional_type_parameters_no_constraints, EQUAL]
// [157, struct_header → PRIV • STRUCT luident optional_type_parameters_no_constraints, LBRACE]
// [163, enum_header → PRIV • ENUM luident optional_type_parameters_no_constraints, LBRACE]
fn yy_state_1339(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ENUM => Shift(yy_state_1340)
    T_STRUCT => Shift(yy_state_1343)
    T_TYPE => Shift(yy_state_1346)
    T_IMPL => Shift(yy_state_1351)
    T_TYPEALIAS => Shift(yy_state_1368)
    T_TRAITALIAS => Shift(yy_state_1373)
    T_TRAIT => Shift(yy_state_1379)
    T_FNALIAS => Shift(yy_state_1385)
    T_CONST => Shift(yy_state_1387)
    T_LET => Shift(yy_state_1391)
    T_EXTERN => Shift(yy_state_1395)
    T_FN => Shift(yy_state_1407)
    T_ASYNC => Shift(yy_state_1413)
    _ => Error
  }
}

// [163, enum_header → PRIV ENUM • luident optional_type_parameters_no_constraints, LBRACE]
// [192, luident → • LIDENT, LBRACKET / LBRACE]
// [193, luident → • UIDENT, LBRACKET / LBRACE]
fn yy_state_1340(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    NT_luident => Shift(yy_state_1341)
    _ => Error
  }
}

// [13, optional_type_parameters_no_constraints → • option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)), LBRACE]
// [163, enum_header → PRIV ENUM luident • optional_type_parameters_no_constraints, LBRACE]
// [453, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → •, LBRACE]
// [454, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → • LBRACKET non_empty_list_commas(id(type_decl_binder)) RBRACKET, LBRACE]
fn yy_state_1341(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_676)
    NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__ => Shift(yy_state_687)
    NT_optional_type_parameters_no_constraints => Shift(yy_state_1342)
    T_LBRACE => Reduce(0, NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__, yy_action_613)
    _ => Error
  }
}

// [163, enum_header → PRIV ENUM luident optional_type_parameters_no_constraints •, LBRACE]
fn yy_state_1342(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_enum_header, yy_action_453)
}

// [157, struct_header → PRIV STRUCT • luident optional_type_parameters_no_constraints, LBRACE]
// [192, luident → • LIDENT, LBRACKET / LBRACE]
// [193, luident → • UIDENT, LBRACKET / LBRACE]
fn yy_state_1343(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    NT_luident => Shift(yy_state_1344)
    _ => Error
  }
}

// [13, optional_type_parameters_no_constraints → • option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)), LBRACE]
// [157, struct_header → PRIV STRUCT luident • optional_type_parameters_no_constraints, LBRACE]
// [453, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → •, LBRACE]
// [454, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → • LBRACKET non_empty_list_commas(id(type_decl_binder)) RBRACKET, LBRACE]
fn yy_state_1344(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_676)
    NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__ => Shift(yy_state_687)
    NT_optional_type_parameters_no_constraints => Shift(yy_state_1345)
    T_LBRACE => Reduce(0, NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__, yy_action_613)
    _ => Error
  }
}

// [157, struct_header → PRIV STRUCT luident optional_type_parameters_no_constraints •, LBRACE]
fn yy_state_1345(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_struct_header, yy_action_579)
}

// [139, type_header → PRIV TYPE • luident optional_type_parameters_no_constraints, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / AMPER / PACKAGE_NAME]
// [145, type_header_bang → PRIV TYPE • EXCLAMATION luident, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / LBRACE / AMPER / PACKAGE_NAME]
// [192, luident → • LIDENT, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / LBRACKET / UNDERSCORE / AMPER / PACKAGE_NAME]
// [193, luident → • UIDENT, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / LBRACKET / UNDERSCORE / AMPER / PACKAGE_NAME]
fn yy_state_1346(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    T_EXCLAMATION => Shift(yy_state_1347)
    NT_luident => Shift(yy_state_1349)
    _ => Error
  }
}

// [145, type_header_bang → PRIV TYPE EXCLAMATION • luident, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / LBRACE / AMPER / PACKAGE_NAME]
// [192, luident → • LIDENT, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / LBRACE / AMPER / PACKAGE_NAME]
// [193, luident → • UIDENT, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / LBRACE / AMPER / PACKAGE_NAME]
fn yy_state_1347(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    NT_luident => Shift(yy_state_1348)
    _ => Error
  }
}

// [145, type_header_bang → PRIV TYPE EXCLAMATION luident •, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / LBRACE / AMPER / PACKAGE_NAME]
fn yy_state_1348(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_type_header_bang, yy_action_269)
}

// [13, optional_type_parameters_no_constraints → • option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)), LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / AMPER / PACKAGE_NAME]
// [139, type_header → PRIV TYPE luident • optional_type_parameters_no_constraints, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / AMPER / PACKAGE_NAME]
// [453, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → •, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / AMPER / PACKAGE_NAME]
// [454, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → • LBRACKET non_empty_list_commas(id(type_decl_binder)) RBRACKET, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / AMPER / PACKAGE_NAME]
fn yy_state_1349(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_676)
    NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__ => Shift(yy_state_687)
    NT_optional_type_parameters_no_constraints => Shift(yy_state_1350)
    T_LIDENT | T_UIDENT | T_EOF | T_DERIVE | T_ASYNC | T_LPAREN | T_SEMI | T_UNDERSCORE | T_AMPER | T_PACKAGE_NAME => Reduce(0, NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__, yy_action_613)
    _ => Error
  }
}

// [139, type_header → PRIV TYPE luident optional_type_parameters_no_constraints •, LIDENT / UIDENT / EOF / DERIVE / ASYNC / LPAREN / SEMI / UNDERSCORE / AMPER / PACKAGE_NAME]
fn yy_state_1350(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_type_header, yy_action_419)
}

// [11, type_parameters → • LBRACKET non_empty_list_commas(id(tvar_binder)) RBRACKET, LIDENT / UIDENT / AMPER / PACKAGE_NAME]
// [12, optional_type_parameters → • option(type_parameters), LIDENT / UIDENT / AMPER / PACKAGE_NAME]
// [124, structure_item → PRIV IMPL • optional_type_parameters type_name FOR type_ WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [130, structure_item → PRIV IMPL • optional_type_parameters type_name WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [450, option(type_parameters) → •, LIDENT / UIDENT / AMPER / PACKAGE_NAME]
// [451, option(type_parameters) → • type_parameters, LIDENT / UIDENT / AMPER / PACKAGE_NAME]
fn yy_state_1351(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_type_parameters => Shift(yy_state_697)
    NT_option_type_parameters_ => Shift(yy_state_807)
    T_LBRACKET => Shift(yy_state_808)
    NT_optional_type_parameters => Shift(yy_state_1352)
    T_LIDENT | T_UIDENT | T_AMPER | T_PACKAGE_NAME => Reduce(0, NT_option_type_parameters_, yy_action_515)
    _ => Error
  }
}

// [124, structure_item → PRIV IMPL optional_type_parameters • type_name FOR type_ WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [130, structure_item → PRIV IMPL optional_type_parameters • type_name WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [192, luident → • LIDENT, WITH / FOR]
// [193, luident → • UIDENT, WITH / FOR]
// [198, qual_ident_ty → • luident, WITH / FOR]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, WITH / FOR]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, WITH / FOR]
// [335, type_name → • qual_ident_ty, WITH / FOR]
// [336, type_name → • AMPER qual_ident_ty, WITH / FOR]
fn yy_state_1352(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    NT_qual_ident_ty => Shift(yy_state_26)
    NT_type_name => Shift(yy_state_1353)
    _ => Error
  }
}

// [124, structure_item → PRIV IMPL optional_type_parameters type_name • FOR type_ WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [130, structure_item → PRIV IMPL optional_type_parameters type_name • WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
fn yy_state_1353(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_WITH => Shift(yy_state_1354)
    T_FOR => Shift(yy_state_1360)
    _ => Error
  }
}

// [130, structure_item → PRIV IMPL optional_type_parameters type_name WITH • LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
fn yy_state_1354(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_1355)
    _ => Error
  }
}

// [130, structure_item → PRIV IMPL optional_type_parameters type_name WITH LIDENT • optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [201, optional_bang → • EXCLAMATION, LPAREN]
// [202, optional_bang → •, LPAREN]
fn yy_state_1355(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EXCLAMATION => Shift(yy_state_535)
    NT_optional_bang => Shift(yy_state_1356)
    T_LPAREN => Reduce(0, NT_optional_bang, yy_action_662)
    _ => Error
  }
}

// [10, parameters → • LPAREN list_commas(parameter) RPAREN, EQUAL / LBRACE / THIN_ARROW]
// [130, structure_item → PRIV IMPL optional_type_parameters type_name WITH LIDENT optional_bang • parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
fn yy_state_1356(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_298)
    NT_parameters => Shift(yy_state_1357)
    _ => Error
  }
}

// [130, structure_item → PRIV IMPL optional_type_parameters type_name WITH LIDENT optional_bang parameters • option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [460, option(preceded(THIN_ARROW,return_type)) → •, EQUAL / LBRACE]
// [461, option(preceded(THIN_ARROW,return_type)) → • THIN_ARROW return_type, EQUAL / LBRACE]
fn yy_state_1357(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_THIN_ARROW => Shift(yy_state_246)
    NT_option_preceded_THIN_ARROW_return_type__ => Shift(yy_state_1358)
    T_EQUAL | T_LBRACE => Reduce(0, NT_option_preceded_THIN_ARROW_return_type__, yy_action_161)
    _ => Error
  }
}

// [42, block_expr_with_local_types → • LBRACE local_types_and_stmts RBRACE, EOF / SEMI]
// [43, impl_body → • block_expr_with_local_types, EOF / SEMI]
// [44, impl_body → • EQUAL STRING, EOF / SEMI]
// [130, structure_item → PRIV IMPL optional_type_parameters type_name WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) • impl_body, EOF / SEMI]
fn yy_state_1358(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EQUAL => Shift(yy_state_706)
    NT_block_expr_with_local_types => Shift(yy_state_708)
    T_LBRACE => Shift(yy_state_709)
    NT_impl_body => Shift(yy_state_1359)
    _ => Error
  }
}

// [130, structure_item → PRIV IMPL optional_type_parameters type_name WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body •, EOF / SEMI]
fn yy_state_1359(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(10, NT_structure_item, yy_action_607)
}

// [124, structure_item → PRIV IMPL optional_type_parameters type_name FOR • type_ WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [192, luident → • LIDENT, WITH / QUESTION / LBRACKET]
// [193, luident → • UIDENT, WITH / QUESTION / LBRACKET]
// [198, qual_ident_ty → • luident, WITH / QUESTION / LBRACKET]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, WITH / QUESTION / LBRACKET]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, WITH / QUESTION / LBRACKET]
// [410, type_ → • type_ QUESTION, WITH / QUESTION]
// [411, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN, WITH / QUESTION]
// [412, type_ → • ASYNC LPAREN type_ COMMA RPAREN THIN_ARROW return_type, WITH / QUESTION]
// [413, type_ → • ASYNC LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, WITH / QUESTION]
// [414, type_ → • LPAREN type_ COMMA RPAREN THIN_ARROW return_type, WITH / QUESTION]
// [415, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, WITH / QUESTION]
// [416, type_ → • ASYNC LPAREN RPAREN THIN_ARROW return_type, WITH / QUESTION]
// [417, type_ → • LPAREN RPAREN THIN_ARROW return_type, WITH / QUESTION]
// [418, type_ → • LPAREN type_ RPAREN, WITH / QUESTION]
// [419, type_ → • ASYNC LPAREN type_ RPAREN THIN_ARROW return_type, WITH / QUESTION]
// [420, type_ → • LPAREN type_ RPAREN THIN_ARROW return_type, WITH / QUESTION]
// [421, type_ → • qual_ident_ty optional_type_arguments, WITH / QUESTION]
// [422, type_ → • AMPER qual_ident_ty, WITH / QUESTION]
// [423, type_ → • UNDERSCORE, WITH / QUESTION]
fn yy_state_1360(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    T_UNDERSCORE => Shift(yy_state_120)
    T_AMPER => Shift(yy_state_121)
    NT_qual_ident_ty => Shift(yy_state_123)
    T_ASYNC => Shift(yy_state_129)
    T_LPAREN => Shift(yy_state_134)
    NT_type_ => Shift(yy_state_1361)
    _ => Error
  }
}

// [124, structure_item → PRIV IMPL optional_type_parameters type_name FOR type_ • WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [410, type_ → type_ • QUESTION, WITH / QUESTION]
fn yy_state_1361(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_QUESTION => Shift(yy_state_139)
    T_WITH => Shift(yy_state_1362)
    _ => Error
  }
}

// [124, structure_item → PRIV IMPL optional_type_parameters type_name FOR type_ WITH • LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
fn yy_state_1362(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_1363)
    _ => Error
  }
}

// [124, structure_item → PRIV IMPL optional_type_parameters type_name FOR type_ WITH LIDENT • optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [201, optional_bang → • EXCLAMATION, LPAREN]
// [202, optional_bang → •, LPAREN]
fn yy_state_1363(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EXCLAMATION => Shift(yy_state_535)
    NT_optional_bang => Shift(yy_state_1364)
    T_LPAREN => Reduce(0, NT_optional_bang, yy_action_662)
    _ => Error
  }
}

// [10, parameters → • LPAREN list_commas(parameter) RPAREN, EQUAL / LBRACE / THIN_ARROW]
// [124, structure_item → PRIV IMPL optional_type_parameters type_name FOR type_ WITH LIDENT optional_bang • parameters option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
fn yy_state_1364(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_298)
    NT_parameters => Shift(yy_state_1365)
    _ => Error
  }
}

// [124, structure_item → PRIV IMPL optional_type_parameters type_name FOR type_ WITH LIDENT optional_bang parameters • option(preceded(THIN_ARROW,return_type)) impl_body, EOF / SEMI]
// [460, option(preceded(THIN_ARROW,return_type)) → •, EQUAL / LBRACE]
// [461, option(preceded(THIN_ARROW,return_type)) → • THIN_ARROW return_type, EQUAL / LBRACE]
fn yy_state_1365(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_THIN_ARROW => Shift(yy_state_246)
    NT_option_preceded_THIN_ARROW_return_type__ => Shift(yy_state_1366)
    T_EQUAL | T_LBRACE => Reduce(0, NT_option_preceded_THIN_ARROW_return_type__, yy_action_161)
    _ => Error
  }
}

// [42, block_expr_with_local_types → • LBRACE local_types_and_stmts RBRACE, EOF / SEMI]
// [43, impl_body → • block_expr_with_local_types, EOF / SEMI]
// [44, impl_body → • EQUAL STRING, EOF / SEMI]
// [124, structure_item → PRIV IMPL optional_type_parameters type_name FOR type_ WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) • impl_body, EOF / SEMI]
fn yy_state_1366(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EQUAL => Shift(yy_state_706)
    NT_block_expr_with_local_types => Shift(yy_state_708)
    T_LBRACE => Shift(yy_state_709)
    NT_impl_body => Shift(yy_state_1367)
    _ => Error
  }
}

// [124, structure_item → PRIV IMPL optional_type_parameters type_name FOR type_ WITH LIDENT optional_bang parameters option(preceded(THIN_ARROW,return_type)) impl_body •, EOF / SEMI]
fn yy_state_1367(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(12, NT_structure_item, yy_action_84)
}

// [110, structure_item → PRIV TYPEALIAS • PACKAGE_NAME batch_type_alias_targets, EOF / SEMI]
// [151, type_alias_header → PRIV TYPEALIAS • luident optional_type_parameters_no_constraints, EQUAL]
// [192, luident → • LIDENT, EQUAL / LBRACKET]
// [193, luident → • UIDENT, EQUAL / LBRACKET]
fn yy_state_1368(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    NT_luident => Shift(yy_state_1369)
    T_PACKAGE_NAME => Shift(yy_state_1371)
    _ => Error
  }
}

// [13, optional_type_parameters_no_constraints → • option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)), EQUAL]
// [151, type_alias_header → PRIV TYPEALIAS luident • optional_type_parameters_no_constraints, EQUAL]
// [453, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → •, EQUAL]
// [454, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → • LBRACKET non_empty_list_commas(id(type_decl_binder)) RBRACKET, EQUAL]
fn yy_state_1369(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_676)
    NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__ => Shift(yy_state_687)
    NT_optional_type_parameters_no_constraints => Shift(yy_state_1370)
    T_EQUAL => Reduce(0, NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__, yy_action_613)
    _ => Error
  }
}

// [151, type_alias_header → PRIV TYPEALIAS luident optional_type_parameters_no_constraints •, EQUAL]
fn yy_state_1370(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_type_alias_header, yy_action_265)
}

// [110, structure_item → PRIV TYPEALIAS PACKAGE_NAME • batch_type_alias_targets, EOF / SEMI]
// [168, batch_type_alias_targets → • DOT_LIDENT optional_type_parameters_no_constraints, EOF / SEMI]
// [169, batch_type_alias_targets → • DOT_UIDENT optional_type_parameters_no_constraints, EOF / SEMI]
// [170, batch_type_alias_targets → • DOT_LPAREN non_empty_list_commas(batch_type_alias_target) RPAREN, EOF / SEMI]
fn yy_state_1371(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_DOT_LPAREN => Shift(yy_state_835)
    T_DOT_UIDENT => Shift(yy_state_845)
    T_DOT_LIDENT => Shift(yy_state_847)
    NT_batch_type_alias_targets => Shift(yy_state_1372)
    _ => Error
  }
}

// [110, structure_item → PRIV TYPEALIAS PACKAGE_NAME batch_type_alias_targets •, EOF / SEMI]
fn yy_state_1372(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_structure_item, yy_action_690)
}

// [104, structure_item → PRIV TRAITALIAS • luident EQUAL type_name, EOF / SEMI]
// [116, structure_item → PRIV TRAITALIAS • PACKAGE_NAME batch_trait_alias_targets, EOF / SEMI]
// [192, luident → • LIDENT, EQUAL]
// [193, luident → • UIDENT, EQUAL]
fn yy_state_1373(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    T_PACKAGE_NAME => Shift(yy_state_1374)
    NT_luident => Shift(yy_state_1376)
    _ => Error
  }
}

// [116, structure_item → PRIV TRAITALIAS PACKAGE_NAME • batch_trait_alias_targets, EOF / SEMI]
// [172, batch_trait_alias_targets → • DOT_LIDENT, EOF / SEMI]
// [173, batch_trait_alias_targets → • DOT_UIDENT, EOF / SEMI]
// [174, batch_trait_alias_targets → • DOT_LPAREN non_empty_list_commas(batch_trait_alias_target) RPAREN, EOF / SEMI]
fn yy_state_1374(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_DOT_LPAREN => Shift(yy_state_852)
    T_DOT_UIDENT => Shift(yy_state_861)
    T_DOT_LIDENT => Shift(yy_state_862)
    NT_batch_trait_alias_targets => Shift(yy_state_1375)
    _ => Error
  }
}

// [116, structure_item → PRIV TRAITALIAS PACKAGE_NAME batch_trait_alias_targets •, EOF / SEMI]
fn yy_state_1375(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_structure_item, yy_action_267)
}

// [104, structure_item → PRIV TRAITALIAS luident • EQUAL type_name, EOF / SEMI]
fn yy_state_1376(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EQUAL => Shift(yy_state_1377)
    _ => Error
  }
}

// [104, structure_item → PRIV TRAITALIAS luident EQUAL • type_name, EOF / SEMI]
// [192, luident → • LIDENT, EOF / SEMI]
// [193, luident → • UIDENT, EOF / SEMI]
// [198, qual_ident_ty → • luident, EOF / SEMI]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, EOF / SEMI]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, EOF / SEMI]
// [335, type_name → • qual_ident_ty, EOF / SEMI]
// [336, type_name → • AMPER qual_ident_ty, EOF / SEMI]
fn yy_state_1377(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    NT_qual_ident_ty => Shift(yy_state_26)
    NT_type_name => Shift(yy_state_1378)
    _ => Error
  }
}

// [104, structure_item → PRIV TRAITALIAS luident EQUAL type_name •, EOF / SEMI]
fn yy_state_1378(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_structure_item, yy_action_466)
}

// [98, structure_item → PRIV TRAIT • luident option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) LBRACE list_semis(trait_method_decl) RBRACE, EOF / SEMI]
// [192, luident → • LIDENT, COLON / LBRACE]
// [193, luident → • UIDENT, COLON / LBRACE]
fn yy_state_1379(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    NT_luident => Shift(yy_state_1380)
    _ => Error
  }
}

// [98, structure_item → PRIV TRAIT luident • option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) LBRACE list_semis(trait_method_decl) RBRACE, EOF / SEMI]
// [475, option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) → •, LBRACE]
// [476, option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) → • COLON separated_nonempty_list(PLUS,tvar_constraint), LBRACE]
fn yy_state_1380(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_869)
    NT_option_preceded_COLON_separated_nonempty_list_PLUS_tvar_constraint___ => Shift(yy_state_1381)
    T_LBRACE => Reduce(0, NT_option_preceded_COLON_separated_nonempty_list_PLUS_tvar_constraint___, yy_action_57)
    _ => Error
  }
}

// [98, structure_item → PRIV TRAIT luident option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) • LBRACE list_semis(trait_method_decl) RBRACE, EOF / SEMI]
fn yy_state_1381(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACE => Shift(yy_state_1382)
    _ => Error
  }
}

// [98, structure_item → PRIV TRAIT luident option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) LBRACE • list_semis(trait_method_decl) RBRACE, EOF / SEMI]
// [187, trait_method_decl → • LIDENT optional_bang optional_type_parameters LPAREN list_commas(trait_method_param) RPAREN option(preceded(THIN_ARROW,return_type)) option(preceded(EQUAL,wildcard)), SEMI / RBRACE]
// [477, list_semis(trait_method_decl) → •, RBRACE]
// [478, list_semis(trait_method_decl) → • non_empty_list_semis(trait_method_decl), RBRACE]
// [565, non_empty_list_semis(trait_method_decl) → • non_empty_list_semis_rev(trait_method_decl), RBRACE]
// [613, non_empty_list_semis_rev(trait_method_decl) → • non_empty_list_semi_rev_aux(trait_method_decl) option(SEMI), RBRACE]
// [635, non_empty_list_semi_rev_aux(trait_method_decl) → • trait_method_decl, SEMI / RBRACE]
// [636, non_empty_list_semi_rev_aux(trait_method_decl) → • non_empty_list_semi_rev_aux(trait_method_decl) SEMI trait_method_decl, SEMI / RBRACE]
fn yy_state_1382(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_trait_method_decl => Shift(yy_state_873)
    NT_non_empty_list_semi_rev_aux_trait_method_decl_ => Shift(yy_state_874)
    T_LIDENT => Shift(yy_state_878)
    NT_non_empty_list_semis_rev_trait_method_decl_ => Shift(yy_state_902)
    NT_non_empty_list_semis_trait_method_decl_ => Shift(yy_state_903)
    NT_list_semis_trait_method_decl_ => Shift(yy_state_1383)
    T_RBRACE => Reduce(0, NT_list_semis_trait_method_decl_, yy_action_262)
    _ => Error
  }
}

// [98, structure_item → PRIV TRAIT luident option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) LBRACE list_semis(trait_method_decl) • RBRACE, EOF / SEMI]
fn yy_state_1383(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACE => Shift(yy_state_1384)
    _ => Error
  }
}

// [98, structure_item → PRIV TRAIT luident option(preceded(COLON,separated_nonempty_list(PLUS,tvar_constraint))) LBRACE list_semis(trait_method_decl) RBRACE •, EOF / SEMI]
fn yy_state_1384(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(7, NT_structure_item, yy_action_618)
}

// [92, structure_item → PRIV FNALIAS • func_alias_targets, EOF / SEMI]
// [176, func_alias_targets → • func_alias_target(LIDENT), EOF / SEMI]
// [177, func_alias_targets → • func_alias_type_name(LIDENT,UIDENT) func_alias_target(LIDENT), EOF / SEMI]
// [178, func_alias_targets → • PACKAGE_NAME func_alias_target(DOT_LIDENT), EOF / SEMI]
// [179, func_alias_targets → • PACKAGE_NAME func_alias_type_name(DOT_LIDENT,DOT_UIDENT) func_alias_target(LIDENT), EOF / SEMI]
// [180, func_alias_targets → • option(func_alias_type_name(LIDENT,UIDENT)) LPAREN non_empty_list_commas(func_alias_target(LIDENT)) RPAREN, EOF / SEMI]
// [181, func_alias_targets → • PACKAGE_NAME DOT_LPAREN non_empty_list_commas(func_alias_target(LIDENT)) RPAREN, EOF / SEMI]
// [182, func_alias_targets → • PACKAGE_NAME func_alias_type_name(DOT_LIDENT,DOT_UIDENT) LPAREN non_empty_list_commas(func_alias_target(LIDENT)) RPAREN, EOF / SEMI]
// [484, func_alias_type_name(LIDENT,UIDENT) → • LIDENT COLONCOLON, LIDENT / LPAREN]
// [485, func_alias_type_name(LIDENT,UIDENT) → • UIDENT COLONCOLON, LIDENT / LPAREN]
// [486, func_alias_target(LIDENT) → • LIDENT option(preceded(AS,binder)), EOF / SEMI]
// [490, option(func_alias_type_name(LIDENT,UIDENT)) → •, LPAREN]
// [491, option(func_alias_type_name(LIDENT,UIDENT)) → • func_alias_type_name(LIDENT,UIDENT), LPAREN]
fn yy_state_1385(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_907)
    T_LIDENT => Shift(yy_state_909)
    NT_option_func_alias_type_name_LIDENT_UIDENT__ => Shift(yy_state_914)
    T_PACKAGE_NAME => Shift(yy_state_924)
    NT_func_alias_type_name_LIDENT_UIDENT_ => Shift(yy_state_939)
    NT_func_alias_target_LIDENT_ => Shift(yy_state_941)
    NT_func_alias_targets => Shift(yy_state_1386)
    T_LPAREN => Reduce(0, NT_option_func_alias_type_name_LIDENT_UIDENT__, yy_action_298)
    _ => Error
  }
}

// [92, structure_item → PRIV FNALIAS func_alias_targets •, EOF / SEMI]
fn yy_state_1386(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_structure_item, yy_action_563)
}

// [60, val_header → PRIV CONST • UIDENT, EQUAL]
// [61, val_header → PRIV CONST • UIDENT COLON type_, EQUAL]
fn yy_state_1387(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_1388)
    _ => Error
  }
}

// [60, val_header → PRIV CONST UIDENT •, EQUAL]
// [61, val_header → PRIV CONST UIDENT • COLON type_, EQUAL]
fn yy_state_1388(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_1389)
    T_EQUAL => Reduce(3, NT_val_header, yy_action_688)
    _ => Error
  }
}

// [61, val_header → PRIV CONST UIDENT COLON • type_, EQUAL]
// [192, luident → • LIDENT, EQUAL / QUESTION / LBRACKET]
// [193, luident → • UIDENT, EQUAL / QUESTION / LBRACKET]
// [198, qual_ident_ty → • luident, EQUAL / QUESTION / LBRACKET]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, EQUAL / QUESTION / LBRACKET]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, EQUAL / QUESTION / LBRACKET]
// [410, type_ → • type_ QUESTION, EQUAL / QUESTION]
// [411, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN, EQUAL / QUESTION]
// [412, type_ → • ASYNC LPAREN type_ COMMA RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [413, type_ → • ASYNC LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [414, type_ → • LPAREN type_ COMMA RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [415, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [416, type_ → • ASYNC LPAREN RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [417, type_ → • LPAREN RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [418, type_ → • LPAREN type_ RPAREN, EQUAL / QUESTION]
// [419, type_ → • ASYNC LPAREN type_ RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [420, type_ → • LPAREN type_ RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [421, type_ → • qual_ident_ty optional_type_arguments, EQUAL / QUESTION]
// [422, type_ → • AMPER qual_ident_ty, EQUAL / QUESTION]
// [423, type_ → • UNDERSCORE, EQUAL / QUESTION]
fn yy_state_1389(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    T_UNDERSCORE => Shift(yy_state_120)
    T_AMPER => Shift(yy_state_121)
    NT_qual_ident_ty => Shift(yy_state_123)
    T_ASYNC => Shift(yy_state_129)
    T_LPAREN => Shift(yy_state_134)
    NT_type_ => Shift(yy_state_1390)
    _ => Error
  }
}

// [61, val_header → PRIV CONST UIDENT COLON type_ •, EQUAL]
// [410, type_ → type_ • QUESTION, EQUAL / QUESTION]
fn yy_state_1390(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_QUESTION => Shift(yy_state_139)
    T_EQUAL => Reduce(5, NT_val_header, yy_action_283)
    _ => Error
  }
}

// [48, val_header → PRIV LET • LIDENT, EQUAL]
// [49, val_header → PRIV LET • LIDENT COLON type_, EQUAL]
fn yy_state_1391(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_1392)
    _ => Error
  }
}

// [48, val_header → PRIV LET LIDENT •, EQUAL]
// [49, val_header → PRIV LET LIDENT • COLON type_, EQUAL]
fn yy_state_1392(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_1393)
    T_EQUAL => Reduce(3, NT_val_header, yy_action_95)
    _ => Error
  }
}

// [49, val_header → PRIV LET LIDENT COLON • type_, EQUAL]
// [192, luident → • LIDENT, EQUAL / QUESTION / LBRACKET]
// [193, luident → • UIDENT, EQUAL / QUESTION / LBRACKET]
// [198, qual_ident_ty → • luident, EQUAL / QUESTION / LBRACKET]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, EQUAL / QUESTION / LBRACKET]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, EQUAL / QUESTION / LBRACKET]
// [410, type_ → • type_ QUESTION, EQUAL / QUESTION]
// [411, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN, EQUAL / QUESTION]
// [412, type_ → • ASYNC LPAREN type_ COMMA RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [413, type_ → • ASYNC LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [414, type_ → • LPAREN type_ COMMA RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [415, type_ → • LPAREN type_ COMMA non_empty_list_commas(type_) RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [416, type_ → • ASYNC LPAREN RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [417, type_ → • LPAREN RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [418, type_ → • LPAREN type_ RPAREN, EQUAL / QUESTION]
// [419, type_ → • ASYNC LPAREN type_ RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [420, type_ → • LPAREN type_ RPAREN THIN_ARROW return_type, EQUAL / QUESTION]
// [421, type_ → • qual_ident_ty optional_type_arguments, EQUAL / QUESTION]
// [422, type_ → • AMPER qual_ident_ty, EQUAL / QUESTION]
// [423, type_ → • UNDERSCORE, EQUAL / QUESTION]
fn yy_state_1393(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    T_UNDERSCORE => Shift(yy_state_120)
    T_AMPER => Shift(yy_state_121)
    NT_qual_ident_ty => Shift(yy_state_123)
    T_ASYNC => Shift(yy_state_129)
    T_LPAREN => Shift(yy_state_134)
    NT_type_ => Shift(yy_state_1394)
    _ => Error
  }
}

// [49, val_header → PRIV LET LIDENT COLON type_ •, EQUAL]
// [410, type_ → type_ • QUESTION, EQUAL / QUESTION]
fn yy_state_1394(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_QUESTION => Shift(yy_state_139)
    T_EQUAL => Reduce(5, NT_val_header, yy_action_254)
    _ => Error
  }
}

// [33, extern_fun_header → PRIV EXTERN • STRING FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL]
// [73, structure_item → PRIV EXTERN • TYPE luident optional_type_parameters_no_constraints deriving_directive_list, EOF / SEMI]
fn yy_state_1395(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_TYPE => Shift(yy_state_1396)
    T_STRING => Shift(yy_state_1400)
    _ => Error
  }
}

// [73, structure_item → PRIV EXTERN TYPE • luident optional_type_parameters_no_constraints deriving_directive_list, EOF / SEMI]
// [192, luident → • LIDENT, EOF / DERIVE / SEMI / LBRACKET]
// [193, luident → • UIDENT, EOF / DERIVE / SEMI / LBRACKET]
fn yy_state_1396(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_25)
    NT_luident => Shift(yy_state_1397)
    _ => Error
  }
}

// [13, optional_type_parameters_no_constraints → • option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)), EOF / DERIVE / SEMI]
// [73, structure_item → PRIV EXTERN TYPE luident • optional_type_parameters_no_constraints deriving_directive_list, EOF / SEMI]
// [453, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → •, EOF / DERIVE / SEMI]
// [454, option(delimited(LBRACKET,non_empty_list_commas(id(type_decl_binder)),RBRACKET)) → • LBRACKET non_empty_list_commas(id(type_decl_binder)) RBRACKET, EOF / DERIVE / SEMI]
fn yy_state_1397(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_676)
    NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__ => Shift(yy_state_687)
    NT_optional_type_parameters_no_constraints => Shift(yy_state_1398)
    T_EOF | T_DERIVE | T_SEMI => Reduce(0, NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__, yy_action_613)
    _ => Error
  }
}

// [73, structure_item → PRIV EXTERN TYPE luident optional_type_parameters_no_constraints • deriving_directive_list, EOF / SEMI]
// [185, deriving_directive_list → •, EOF / SEMI]
// [186, deriving_directive_list → • DERIVE LPAREN list_commas(deriving_directive) RPAREN, EOF / SEMI]
fn yy_state_1398(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_DERIVE => Shift(yy_state_719)
    NT_deriving_directive_list => Shift(yy_state_1399)
    T_EOF | T_SEMI => Reduce(0, NT_deriving_directive_list, yy_action_147)
    _ => Error
  }
}

// [73, structure_item → PRIV EXTERN TYPE luident optional_type_parameters_no_constraints deriving_directive_list •, EOF / SEMI]
fn yy_state_1399(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(6, NT_structure_item, yy_action_316)
}

// [33, extern_fun_header → PRIV EXTERN STRING • FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL]
fn yy_state_1400(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_FN => Shift(yy_state_1401)
    _ => Error
  }
}

// [15, fun_binder → • type_name COLONCOLON LIDENT, EQUAL / LPAREN / EXCLAMATION / LBRACKET / THIN_ARROW]
// [16, fun_binder → • LIDENT, EQUAL / LPAREN / EXCLAMATION / LBRACKET / THIN_ARROW]
// [33, extern_fun_header → PRIV EXTERN STRING FN • fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL]
// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
fn yy_state_1401(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LIDENT => Shift(yy_state_1005)
    NT_type_name => Shift(yy_state_1006)
    NT_fun_binder => Shift(yy_state_1402)
    _ => Error
  }
}

// [33, extern_fun_header → PRIV EXTERN STRING FN fun_binder • optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL]
// [201, optional_bang → • EXCLAMATION, EQUAL / LPAREN / LBRACKET / THIN_ARROW]
// [202, optional_bang → •, EQUAL / LPAREN / LBRACKET / THIN_ARROW]
fn yy_state_1402(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EXCLAMATION => Shift(yy_state_535)
    NT_optional_bang => Shift(yy_state_1403)
    T_EQUAL | T_LPAREN | T_LBRACKET | T_THIN_ARROW => Reduce(0, NT_optional_bang, yy_action_662)
    _ => Error
  }
}

// [11, type_parameters → • LBRACKET non_empty_list_commas(id(tvar_binder)) RBRACKET, EQUAL / LPAREN / THIN_ARROW]
// [12, optional_type_parameters → • option(type_parameters), EQUAL / LPAREN / THIN_ARROW]
// [33, extern_fun_header → PRIV EXTERN STRING FN fun_binder optional_bang • optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL]
// [450, option(type_parameters) → •, EQUAL / LPAREN / THIN_ARROW]
// [451, option(type_parameters) → • type_parameters, EQUAL / LPAREN / THIN_ARROW]
fn yy_state_1403(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_type_parameters => Shift(yy_state_697)
    NT_option_type_parameters_ => Shift(yy_state_807)
    T_LBRACKET => Shift(yy_state_808)
    NT_optional_type_parameters => Shift(yy_state_1404)
    T_EQUAL | T_LPAREN | T_THIN_ARROW => Reduce(0, NT_option_type_parameters_, yy_action_515)
    _ => Error
  }
}

// [10, parameters → • LPAREN list_commas(parameter) RPAREN, EQUAL / THIN_ARROW]
// [33, extern_fun_header → PRIV EXTERN STRING FN fun_binder optional_bang optional_type_parameters • option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL]
// [458, option(parameters) → •, EQUAL / THIN_ARROW]
// [459, option(parameters) → • parameters, EQUAL / THIN_ARROW]
fn yy_state_1404(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_298)
    NT_parameters => Shift(yy_state_828)
    NT_option_parameters_ => Shift(yy_state_1405)
    T_EQUAL | T_THIN_ARROW => Reduce(0, NT_option_parameters_, yy_action_287)
    _ => Error
  }
}

// [33, extern_fun_header → PRIV EXTERN STRING FN fun_binder optional_bang optional_type_parameters option(parameters) • option(preceded(THIN_ARROW,return_type)), EQUAL]
// [460, option(preceded(THIN_ARROW,return_type)) → •, EQUAL]
// [461, option(preceded(THIN_ARROW,return_type)) → • THIN_ARROW return_type, EQUAL]
fn yy_state_1405(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_THIN_ARROW => Shift(yy_state_246)
    NT_option_preceded_THIN_ARROW_return_type__ => Shift(yy_state_1406)
    T_EQUAL => Reduce(0, NT_option_preceded_THIN_ARROW_return_type__, yy_action_161)
    _ => Error
  }
}

// [33, extern_fun_header → PRIV EXTERN STRING FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)) •, EQUAL]
fn yy_state_1406(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(9, NT_extern_fun_header, yy_action_461)
}

// [15, fun_binder → • type_name COLONCOLON LIDENT, EQUAL / LPAREN / EXCLAMATION / LBRACKET / LBRACE / THIN_ARROW]
// [16, fun_binder → • LIDENT, EQUAL / LPAREN / EXCLAMATION / LBRACKET / LBRACE / THIN_ARROW]
// [20, fun_header → PRIV FN • fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
fn yy_state_1407(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LIDENT => Shift(yy_state_1005)
    NT_type_name => Shift(yy_state_1006)
    NT_fun_binder => Shift(yy_state_1408)
    _ => Error
  }
}

// [20, fun_header → PRIV FN fun_binder • optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [201, optional_bang → • EXCLAMATION, EQUAL / LPAREN / LBRACKET / LBRACE / THIN_ARROW]
// [202, optional_bang → •, EQUAL / LPAREN / LBRACKET / LBRACE / THIN_ARROW]
fn yy_state_1408(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EXCLAMATION => Shift(yy_state_535)
    NT_optional_bang => Shift(yy_state_1409)
    T_EQUAL | T_LPAREN | T_LBRACKET | T_LBRACE | T_THIN_ARROW => Reduce(0, NT_optional_bang, yy_action_662)
    _ => Error
  }
}

// [11, type_parameters → • LBRACKET non_empty_list_commas(id(tvar_binder)) RBRACKET, EQUAL / LPAREN / LBRACE / THIN_ARROW]
// [12, optional_type_parameters → • option(type_parameters), EQUAL / LPAREN / LBRACE / THIN_ARROW]
// [20, fun_header → PRIV FN fun_binder optional_bang • optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [450, option(type_parameters) → •, EQUAL / LPAREN / LBRACE / THIN_ARROW]
// [451, option(type_parameters) → • type_parameters, EQUAL / LPAREN / LBRACE / THIN_ARROW]
fn yy_state_1409(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_type_parameters => Shift(yy_state_697)
    NT_option_type_parameters_ => Shift(yy_state_807)
    T_LBRACKET => Shift(yy_state_808)
    NT_optional_type_parameters => Shift(yy_state_1410)
    T_EQUAL | T_LPAREN | T_LBRACE | T_THIN_ARROW => Reduce(0, NT_option_type_parameters_, yy_action_515)
    _ => Error
  }
}

// [10, parameters → • LPAREN list_commas(parameter) RPAREN, EQUAL / LBRACE / THIN_ARROW]
// [20, fun_header → PRIV FN fun_binder optional_bang optional_type_parameters • option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [458, option(parameters) → •, EQUAL / LBRACE / THIN_ARROW]
// [459, option(parameters) → • parameters, EQUAL / LBRACE / THIN_ARROW]
fn yy_state_1410(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_298)
    NT_parameters => Shift(yy_state_828)
    NT_option_parameters_ => Shift(yy_state_1411)
    T_EQUAL | T_LBRACE | T_THIN_ARROW => Reduce(0, NT_option_parameters_, yy_action_287)
    _ => Error
  }
}

// [20, fun_header → PRIV FN fun_binder optional_bang optional_type_parameters option(parameters) • option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [460, option(preceded(THIN_ARROW,return_type)) → •, EQUAL / LBRACE]
// [461, option(preceded(THIN_ARROW,return_type)) → • THIN_ARROW return_type, EQUAL / LBRACE]
fn yy_state_1411(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_THIN_ARROW => Shift(yy_state_246)
    NT_option_preceded_THIN_ARROW_return_type__ => Shift(yy_state_1412)
    T_EQUAL | T_LBRACE => Reduce(0, NT_option_preceded_THIN_ARROW_return_type__, yy_action_161)
    _ => Error
  }
}

// [20, fun_header → PRIV FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)) •, EQUAL / LBRACE]
fn yy_state_1412(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(7, NT_fun_header, yy_action_377)
}

// [19, fun_header → PRIV ASYNC • FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
fn yy_state_1413(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_FN => Shift(yy_state_1414)
    _ => Error
  }
}

// [15, fun_binder → • type_name COLONCOLON LIDENT, EQUAL / LPAREN / EXCLAMATION / LBRACKET / LBRACE / THIN_ARROW]
// [16, fun_binder → • LIDENT, EQUAL / LPAREN / EXCLAMATION / LBRACKET / LBRACE / THIN_ARROW]
// [19, fun_header → PRIV ASYNC FN • fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
fn yy_state_1414(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LIDENT => Shift(yy_state_1005)
    NT_type_name => Shift(yy_state_1006)
    NT_fun_binder => Shift(yy_state_1415)
    _ => Error
  }
}

// [19, fun_header → PRIV ASYNC FN fun_binder • optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [201, optional_bang → • EXCLAMATION, EQUAL / LPAREN / LBRACKET / LBRACE / THIN_ARROW]
// [202, optional_bang → •, EQUAL / LPAREN / LBRACKET / LBRACE / THIN_ARROW]
fn yy_state_1415(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EXCLAMATION => Shift(yy_state_535)
    NT_optional_bang => Shift(yy_state_1416)
    T_EQUAL | T_LPAREN | T_LBRACKET | T_LBRACE | T_THIN_ARROW => Reduce(0, NT_optional_bang, yy_action_662)
    _ => Error
  }
}

// [11, type_parameters → • LBRACKET non_empty_list_commas(id(tvar_binder)) RBRACKET, EQUAL / LPAREN / LBRACE / THIN_ARROW]
// [12, optional_type_parameters → • option(type_parameters), EQUAL / LPAREN / LBRACE / THIN_ARROW]
// [19, fun_header → PRIV ASYNC FN fun_binder optional_bang • optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [450, option(type_parameters) → •, EQUAL / LPAREN / LBRACE / THIN_ARROW]
// [451, option(type_parameters) → • type_parameters, EQUAL / LPAREN / LBRACE / THIN_ARROW]
fn yy_state_1416(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_type_parameters => Shift(yy_state_697)
    NT_option_type_parameters_ => Shift(yy_state_807)
    T_LBRACKET => Shift(yy_state_808)
    NT_optional_type_parameters => Shift(yy_state_1417)
    T_EQUAL | T_LPAREN | T_LBRACE | T_THIN_ARROW => Reduce(0, NT_option_type_parameters_, yy_action_515)
    _ => Error
  }
}

// [10, parameters → • LPAREN list_commas(parameter) RPAREN, EQUAL / LBRACE / THIN_ARROW]
// [19, fun_header → PRIV ASYNC FN fun_binder optional_bang optional_type_parameters • option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [458, option(parameters) → •, EQUAL / LBRACE / THIN_ARROW]
// [459, option(parameters) → • parameters, EQUAL / LBRACE / THIN_ARROW]
fn yy_state_1417(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_298)
    NT_parameters => Shift(yy_state_828)
    NT_option_parameters_ => Shift(yy_state_1418)
    T_EQUAL | T_LBRACE | T_THIN_ARROW => Reduce(0, NT_option_parameters_, yy_action_287)
    _ => Error
  }
}

// [19, fun_header → PRIV ASYNC FN fun_binder optional_bang optional_type_parameters option(parameters) • option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [460, option(preceded(THIN_ARROW,return_type)) → •, EQUAL / LBRACE]
// [461, option(preceded(THIN_ARROW,return_type)) → • THIN_ARROW return_type, EQUAL / LBRACE]
fn yy_state_1418(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_THIN_ARROW => Shift(yy_state_246)
    NT_option_preceded_THIN_ARROW_return_type__ => Shift(yy_state_1419)
    T_EQUAL | T_LBRACE => Reduce(0, NT_option_preceded_THIN_ARROW_return_type__, yy_action_161)
    _ => Error
  }
}

// [19, fun_header → PRIV ASYNC FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)) •, EQUAL / LBRACE]
fn yy_state_1419(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(8, NT_fun_header, yy_action_655)
}

// [15, fun_binder → • type_name COLONCOLON LIDENT, EQUAL / LPAREN / EXCLAMATION / LBRACKET / LBRACE / THIN_ARROW]
// [16, fun_binder → • LIDENT, EQUAL / LPAREN / EXCLAMATION / LBRACKET / LBRACE / THIN_ARROW]
// [18, fun_header → FN • fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
fn yy_state_1420(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LIDENT => Shift(yy_state_1005)
    NT_type_name => Shift(yy_state_1006)
    NT_fun_binder => Shift(yy_state_1421)
    _ => Error
  }
}

// [18, fun_header → FN fun_binder • optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [201, optional_bang → • EXCLAMATION, EQUAL / LPAREN / LBRACKET / LBRACE / THIN_ARROW]
// [202, optional_bang → •, EQUAL / LPAREN / LBRACKET / LBRACE / THIN_ARROW]
fn yy_state_1421(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EXCLAMATION => Shift(yy_state_535)
    NT_optional_bang => Shift(yy_state_1422)
    T_EQUAL | T_LPAREN | T_LBRACKET | T_LBRACE | T_THIN_ARROW => Reduce(0, NT_optional_bang, yy_action_662)
    _ => Error
  }
}

// [11, type_parameters → • LBRACKET non_empty_list_commas(id(tvar_binder)) RBRACKET, EQUAL / LPAREN / LBRACE / THIN_ARROW]
// [12, optional_type_parameters → • option(type_parameters), EQUAL / LPAREN / LBRACE / THIN_ARROW]
// [18, fun_header → FN fun_binder optional_bang • optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [450, option(type_parameters) → •, EQUAL / LPAREN / LBRACE / THIN_ARROW]
// [451, option(type_parameters) → • type_parameters, EQUAL / LPAREN / LBRACE / THIN_ARROW]
fn yy_state_1422(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_type_parameters => Shift(yy_state_697)
    NT_option_type_parameters_ => Shift(yy_state_807)
    T_LBRACKET => Shift(yy_state_808)
    NT_optional_type_parameters => Shift(yy_state_1423)
    T_EQUAL | T_LPAREN | T_LBRACE | T_THIN_ARROW => Reduce(0, NT_option_type_parameters_, yy_action_515)
    _ => Error
  }
}

// [10, parameters → • LPAREN list_commas(parameter) RPAREN, EQUAL / LBRACE / THIN_ARROW]
// [18, fun_header → FN fun_binder optional_bang optional_type_parameters • option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [458, option(parameters) → •, EQUAL / LBRACE / THIN_ARROW]
// [459, option(parameters) → • parameters, EQUAL / LBRACE / THIN_ARROW]
fn yy_state_1423(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_298)
    NT_parameters => Shift(yy_state_828)
    NT_option_parameters_ => Shift(yy_state_1424)
    T_EQUAL | T_LBRACE | T_THIN_ARROW => Reduce(0, NT_option_parameters_, yy_action_287)
    _ => Error
  }
}

// [18, fun_header → FN fun_binder optional_bang optional_type_parameters option(parameters) • option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [460, option(preceded(THIN_ARROW,return_type)) → •, EQUAL / LBRACE]
// [461, option(preceded(THIN_ARROW,return_type)) → • THIN_ARROW return_type, EQUAL / LBRACE]
fn yy_state_1424(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_THIN_ARROW => Shift(yy_state_246)
    NT_option_preceded_THIN_ARROW_return_type__ => Shift(yy_state_1425)
    T_EQUAL | T_LBRACE => Reduce(0, NT_option_preceded_THIN_ARROW_return_type__, yy_action_161)
    _ => Error
  }
}

// [18, fun_header → FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)) •, EQUAL / LBRACE]
fn yy_state_1425(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(6, NT_fun_header, yy_action_600)
}

// [17, fun_header → ASYNC • FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
fn yy_state_1426(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_FN => Shift(yy_state_1427)
    _ => Error
  }
}

// [15, fun_binder → • type_name COLONCOLON LIDENT, EQUAL / LPAREN / EXCLAMATION / LBRACKET / LBRACE / THIN_ARROW]
// [16, fun_binder → • LIDENT, EQUAL / LPAREN / EXCLAMATION / LBRACKET / LBRACE / THIN_ARROW]
// [17, fun_header → ASYNC FN • fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [192, luident → • LIDENT, COLONCOLON]
// [193, luident → • UIDENT, COLONCOLON]
// [198, qual_ident_ty → • luident, COLONCOLON]
// [199, qual_ident_ty → • PACKAGE_NAME DOT_LIDENT, COLONCOLON]
// [200, qual_ident_ty → • PACKAGE_NAME DOT_UIDENT, COLONCOLON]
// [335, type_name → • qual_ident_ty, COLONCOLON]
// [336, type_name → • AMPER qual_ident_ty, COLONCOLON]
fn yy_state_1427(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    T_PACKAGE_NAME => Shift(yy_state_20)
    NT_luident => Shift(yy_state_23)
    T_UIDENT => Shift(yy_state_24)
    NT_qual_ident_ty => Shift(yy_state_26)
    T_LIDENT => Shift(yy_state_1005)
    NT_type_name => Shift(yy_state_1006)
    NT_fun_binder => Shift(yy_state_1428)
    _ => Error
  }
}

// [17, fun_header → ASYNC FN fun_binder • optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [201, optional_bang → • EXCLAMATION, EQUAL / LPAREN / LBRACKET / LBRACE / THIN_ARROW]
// [202, optional_bang → •, EQUAL / LPAREN / LBRACKET / LBRACE / THIN_ARROW]
fn yy_state_1428(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EXCLAMATION => Shift(yy_state_535)
    NT_optional_bang => Shift(yy_state_1429)
    T_EQUAL | T_LPAREN | T_LBRACKET | T_LBRACE | T_THIN_ARROW => Reduce(0, NT_optional_bang, yy_action_662)
    _ => Error
  }
}

// [11, type_parameters → • LBRACKET non_empty_list_commas(id(tvar_binder)) RBRACKET, EQUAL / LPAREN / LBRACE / THIN_ARROW]
// [12, optional_type_parameters → • option(type_parameters), EQUAL / LPAREN / LBRACE / THIN_ARROW]
// [17, fun_header → ASYNC FN fun_binder optional_bang • optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [450, option(type_parameters) → •, EQUAL / LPAREN / LBRACE / THIN_ARROW]
// [451, option(type_parameters) → • type_parameters, EQUAL / LPAREN / LBRACE / THIN_ARROW]
fn yy_state_1429(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_type_parameters => Shift(yy_state_697)
    NT_option_type_parameters_ => Shift(yy_state_807)
    T_LBRACKET => Shift(yy_state_808)
    NT_optional_type_parameters => Shift(yy_state_1430)
    T_EQUAL | T_LPAREN | T_LBRACE | T_THIN_ARROW => Reduce(0, NT_option_type_parameters_, yy_action_515)
    _ => Error
  }
}

// [10, parameters → • LPAREN list_commas(parameter) RPAREN, EQUAL / LBRACE / THIN_ARROW]
// [17, fun_header → ASYNC FN fun_binder optional_bang optional_type_parameters • option(parameters) option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [458, option(parameters) → •, EQUAL / LBRACE / THIN_ARROW]
// [459, option(parameters) → • parameters, EQUAL / LBRACE / THIN_ARROW]
fn yy_state_1430(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_298)
    NT_parameters => Shift(yy_state_828)
    NT_option_parameters_ => Shift(yy_state_1431)
    T_EQUAL | T_LBRACE | T_THIN_ARROW => Reduce(0, NT_option_parameters_, yy_action_287)
    _ => Error
  }
}

// [17, fun_header → ASYNC FN fun_binder optional_bang optional_type_parameters option(parameters) • option(preceded(THIN_ARROW,return_type)), EQUAL / LBRACE]
// [460, option(preceded(THIN_ARROW,return_type)) → •, EQUAL / LBRACE]
// [461, option(preceded(THIN_ARROW,return_type)) → • THIN_ARROW return_type, EQUAL / LBRACE]
fn yy_state_1431(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_THIN_ARROW => Shift(yy_state_246)
    NT_option_preceded_THIN_ARROW_return_type__ => Shift(yy_state_1432)
    T_EQUAL | T_LBRACE => Reduce(0, NT_option_preceded_THIN_ARROW_return_type__, yy_action_161)
    _ => Error
  }
}

// [17, fun_header → ASYNC FN fun_binder optional_bang optional_type_parameters option(parameters) option(preceded(THIN_ARROW,return_type)) •, EQUAL / LBRACE]
fn yy_state_1432(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(7, NT_fun_header, yy_action_432)
}

// [562, non_empty_list_semis(structure_item) → non_empty_list_semis_rev(structure_item) •, EOF]
fn yy_state_1433(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_non_empty_list_semis_structure_item_, yy_action_620)
}

// [469, list_semis(structure_item) → non_empty_list_semis(structure_item) •, EOF]
fn yy_state_1434(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_list_semis_structure_item_, yy_action_596)
}

// [70, structure → list_semis(structure_item) • EOF, $]
fn yy_state_1435(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EOF => Shift(yy_state_1436)
    _ => Error
  }
}

// [70, structure → list_semis(structure_item) EOF •, $]
fn yy_state_1436(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_structure, yy_action_174)
}

fn[T] yy_parse(
  read_token : () -> (Token, Unit, Unit),
  start_pos : Unit,
  start : YYState,
  return_ : (YYObj) -> T
) -> T raise ParseError {
  let mut state_stack : @list.T[YYState] = @list.construct(start, @list.empty())
  let data_stack : Array[(YYObj, Unit, Unit)] = []
  let mut last_pos = start_pos
  let mut state = start
  let mut lookahead : Option[(YYSymbol, (YYObj, Unit, Unit), Token)] = None
  let mut last_shifted_state_stack = state_stack
  while true {
    let decision = match state(EOI) {
      ReduceNoLookahead(_) | Accept as t => t
      _ => {
        match lookahead {
          Some(la) => state(la.0)
          None => {
            let (token, start_pos, end_pos) = read_token()
            let (symbol, data) = yy_input(token, start_pos, end_pos)
            lookahead = Some((symbol, (data, start_pos, end_pos), token))
            state(symbol)
          }
        }
      }
    }
    match decision {
      Accept => return return_(data_stack.unsafe_pop().0)
      Shift(next_state) => {
        guard lookahead is Some(la)
        data_stack.push(la.1)
        state_stack = @list.construct(next_state, state_stack)
        last_shifted_state_stack = state_stack
        state = next_state
        last_pos = la.1.2
        lookahead = None
      }
      Reduce(count, symbol, action)
      | ReduceNoLookahead(count, symbol, action) => {
        loop (count, symbol, action) {
          _ => {
            let args = data_stack[data_stack.length() - count:]
            let data = action(last_pos, args)
            let (start_pos, end_pos) = if args.length() == 0 {
              (last_pos, last_pos)
            } else {
              (args[0].1, args[args.length() - 1].2)
            }
            for i in 0..<count {
              ignore(data_stack.unsafe_pop())
              state_stack = state_stack.unsafe_tail()
            }
            state = state_stack.unsafe_head()
            data_stack.push((data, start_pos, end_pos))
            match state(symbol) {
              Accept => return return_(data_stack.unsafe_pop().0)
              Shift(next_state) => {
                state_stack = @list.construct(next_state, state_stack)
                state = next_state
              }
              Reduce(count, symbol, action)
              | ReduceNoLookahead(count, symbol, action) => continue (count, symbol, action)
              _ => panic()
            }
          }
        }
      }
      Error => {
        let (_, (_, start_pos, end_pos), token) = lookahead.unwrap()
        error(last_shifted_state_stack, token, (start_pos, end_pos))
      }
    }
  }
  panic()
}

fn error(stack : @list.T[YYState], token : Token, loc : (Unit, Unit)) -> Unit raise ParseError {
  let expected = []
  fn try_add(symbol : YYSymbol, kind : TokenKind) {
    fn go(stack : @list.T[YYState]) {
      match stack {
        Empty => ()
        More(state, ..) => {
          match state(symbol) {
            Accept | Shift(_) => expected.push(kind)
            Reduce(count, symbol, _) | ReduceNoLookahead(count, symbol, _) => {
              fn inner_go(stack : @list.T[YYState], count, symbol) {
                let stack = stack.drop(count)
                guard stack is More(state, ..)
                match state(symbol) {
                  Shift(state) => go(@list.construct(state, stack))
                  Reduce(count, symbol, _) | ReduceNoLookahead(count, symbol, _) => inner_go(stack, count, symbol)
                  _ => panic()
                }
              }
              inner_go(stack, count, symbol)
            }
            Error => ()
          }
        }
      }
    }
    go(stack)
  }
  for term in ([(T_CHAR, TK_CHAR), (T_INT, TK_INT), (T_BYTE, TK_BYTE), (T_BYTES, TK_BYTES), (T_FLOAT, TK_FLOAT), (T_DOUBLE, TK_DOUBLE), (T_STRING, TK_STRING), (T_MULTILINE_STRING, TK_MULTILINE_STRING), (T_MULTILINE_INTERP, TK_MULTILINE_INTERP), (T_INTERP, TK_INTERP), (T_ATTRIBUTE, TK_ATTRIBUTE), (T_LIDENT, TK_LIDENT), (T_UIDENT, TK_UIDENT), (T_POST_LABEL, TK_POST_LABEL), (T_COMMENT, TK_COMMENT), (T_NEWLINE, TK_NEWLINE), (T_INFIX1, TK_INFIX1), (T_INFIX2, TK_INFIX2), (T_INFIX3, TK_INFIX3), (T_INFIX4, TK_INFIX4), (T_AUGMENTED_ASSIGNMENT, TK_AUGMENTED_ASSIGNMENT), (T_EOF, TK_EOF), (T_FALSE, TK_FALSE), (T_TRUE, TK_TRUE), (T_PUB, TK_PUB), (T_PRIV, TK_PRIV), (T_READONLY, TK_READONLY), (T_IMPORT, TK_IMPORT), (T_EXTERN, TK_EXTERN), (T_BREAK, TK_BREAK), (T_CONTINUE, TK_CONTINUE), (T_STRUCT, TK_STRUCT), (T_ENUM, TK_ENUM), (T_TRAIT, TK_TRAIT), (T_DERIVE, TK_DERIVE), (T_IMPL, TK_IMPL), (T_WITH, TK_WITH), (T_RAISE, TK_RAISE), (T_THROW, TK_THROW), (T_TRY, TK_TRY), (T_CATCH, TK_CATCH), (T_ASYNC, TK_ASYNC), (T_TYPEALIAS, TK_TYPEALIAS), (T_TRAITALIAS, TK_TRAITALIAS), (T_FNALIAS, TK_FNALIAS), (T_EQUAL, TK_EQUAL), (T_LPAREN, TK_LPAREN), (T_RPAREN, TK_RPAREN), (T_COMMA, TK_COMMA), (T_MINUS, TK_MINUS), (T_QUESTION, TK_QUESTION), (T_EXCLAMATION, TK_EXCLAMATION), (T_DOT_LIDENT, TK_DOT_LIDENT), (T_DOT_UIDENT, TK_DOT_UIDENT), (T_DOT_INT, TK_DOT_INT), (T_DOT_LPAREN, TK_DOT_LPAREN), (T_COLONCOLON, TK_COLONCOLON), (T_COLON, TK_COLON), (T_SEMI, TK_SEMI), (T_LBRACKET, TK_LBRACKET), (T_PLUS, TK_PLUS), (T_RBRACKET, TK_RBRACKET), (T_UNDERSCORE, TK_UNDERSCORE), (T_BAR, TK_BAR), (T_LBRACE, TK_LBRACE), (T_RBRACE, TK_RBRACE), (T_AMPERAMPER, TK_AMPERAMPER), (T_AMPER, TK_AMPER), (T_CARET, TK_CARET), (T_BARBAR, TK_BARBAR), (T_PACKAGE_NAME, TK_PACKAGE_NAME), (T_AS, TK_AS), (T_PIPE, TK_PIPE), (T_ELSE, TK_ELSE), (T_FN, TK_FN), (T_IF, TK_IF), (T_LET, TK_LET), (T_CONST, TK_CONST), (T_MATCH, TK_MATCH), (T_MUTABLE, TK_MUTABLE), (T_TYPE, TK_TYPE), (T_FAT_ARROW, TK_FAT_ARROW), (T_THIN_ARROW, TK_THIN_ARROW), (T_WHILE, TK_WHILE), (T_RETURN, TK_RETURN), (T_DOTDOT, TK_DOTDOT), (T_RANGE_INCLUSIVE, TK_RANGE_INCLUSIVE), (T_RANGE_EXCLUSIVE, TK_RANGE_EXCLUSIVE), (T_ELLIPSIS, TK_ELLIPSIS), (T_TEST, TK_TEST), (T_LOOP, TK_LOOP), (T_GUARD, TK_GUARD), (T_FOR, TK_FOR), (T_IN, TK_IN), (T_IS, TK_IS), (T_SUBERROR, TK_SUBERROR)] : Array[(YYSymbol, TokenKind)]) {
    try_add(term.0, term.1)
  }
  raise UnexpectedToken(token, loc, expected)
}

pub fn structure(read_token : () -> (Token, Unit, Unit), start_pos : Unit) -> Json raise ParseError {
  yy_parse(
    read_token,
    start_pos,
    yy_state_664,
    (it) => {
      guard it is YYObj_Json(result)
      result
    },
  )
}
pub fn expression(read_token : () -> (Token, Unit, Unit), start_pos : Unit) -> Json raise ParseError {
  yy_parse(
    read_token,
    start_pos,
    yy_state_0,
    (it) => {
      guard it is YYObj_Json(result)
      result
    },
  )
}

fn args_to_json(args : ArrayView[(YYObj, Unit, Unit)]) -> Json {
  Json::array(args.iter().map((it) => {
    guard it.0 is YYObj_Json(json)
    json
  }).to_array())
}
